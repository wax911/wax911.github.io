!function(e){var t={};function n(r){if(t[r])return t[r].exports;var a=t[r]={i:r,l:!1,exports:{}};return e[r].call(a.exports,a,a.exports,n),a.l=!0,a.exports}n.m=e,n.c=t,n.d=function(e,t,r){n.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:r})},n.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.t=function(e,t){if(1&t&&(e=n(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var r=Object.create(null);if(n.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var a in e)n.d(r,a,function(t){return e[t]}.bind(null,a));return r},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="",n(n.s=3)}([function(e,t,n){"use strict";e.exports=n(4)},function(e,t,n){"use strict";
/*
object-assign
(c) Sindre Sorhus
@license MIT
*/var r=Object.getOwnPropertySymbols,a=Object.prototype.hasOwnProperty,l=Object.prototype.propertyIsEnumerable;function u(e){if(null==e)throw new TypeError("Object.assign cannot be called with null or undefined");return Object(e)}e.exports=function(){try{if(!Object.assign)return!1;var e=new String("abc");if(e[5]="de","5"===Object.getOwnPropertyNames(e)[0])return!1;for(var t={},n=0;n<10;n++)t["_"+String.fromCharCode(n)]=n;if("0123456789"!==Object.getOwnPropertyNames(t).map(function(e){return t[e]}).join(""))return!1;var r={};return"abcdefghijklmnopqrst".split("").forEach(function(e){r[e]=e}),"abcdefghijklmnopqrst"===Object.keys(Object.assign({},r)).join("")}catch(e){return!1}}()?Object.assign:function(e,t){for(var n,o,i=u(e),c=1;c<arguments.length;c++){for(var f in n=Object(arguments[c]))a.call(n,f)&&(i[f]=n[f]);if(r){o=r(n);for(var s=0;s<o.length;s++)l.call(n,o[s])&&(i[o[s]]=n[o[s]])}}return i}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),a=f(n(0)),l=f(n(15)),u=f(n(16)),o=f(n(17)),i=(f(n(18)),f(n(19))),c=f(n(20));function f(e){return e&&e.__esModule?e:{default:e}}var s=n(21),d=new(function(){function e(){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.collection={apps:l.default,featured:u.default,screeshots:o.default}}return r(e,[{key:"getAllFeaturedApplications",value:function(){return s.sortBy(this.collection.featured,["title"],["asc"]).map(function(e,t){return a.default.createElement(i.default,{key:e.title,data:e})})}},{key:"getAllApplications",value:function(){}},{key:"getAllScreenShots",value:function(){return s.sortBy(this.collection.screeshots,["title"],["asc"]).map(function(e,t){return a.default.createElement(c.default,{key:e.image,data:e})})}}]),e}());t.default=d},function(e,t,n){"use strict";var r=u(n(0)),a=u(n(5)),l=u(n(9));function u(e){return e&&e.__esModule?e:{default:e}}var o=document.getElementById("app");a.default.render(r.default.createElement(l.default,null),o)},function(e,t,n){"use strict";
/** @license React v17.0.2
 * react.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */var r=n(1),a=60103,l=60106;t.Fragment=60107,t.StrictMode=60108,t.Profiler=60114;var u=60109,o=60110,i=60112;t.Suspense=60113;var c=60115,f=60116;if("function"==typeof Symbol&&Symbol.for){var s=Symbol.for;a=s("react.element"),l=s("react.portal"),t.Fragment=s("react.fragment"),t.StrictMode=s("react.strict_mode"),t.Profiler=s("react.profiler"),u=s("react.provider"),o=s("react.context"),i=s("react.forward_ref"),t.Suspense=s("react.suspense"),c=s("react.memo"),f=s("react.lazy")}var d="function"==typeof Symbol&&Symbol.iterator;function p(e){for(var t="https://reactjs.org/docs/error-decoder.html?invariant="+e,n=1;n<arguments.length;n++)t+="&args[]="+encodeURIComponent(arguments[n]);return"Minified React error #"+e+"; visit "+t+" for the full message or use the non-minified dev environment for full errors and additional helpful warnings."}var h={isMounted:function(){return!1},enqueueForceUpdate:function(){},enqueueReplaceState:function(){},enqueueSetState:function(){}},m={};function v(e,t,n){this.props=e,this.context=t,this.refs=m,this.updater=n||h}function g(){}function y(e,t,n){this.props=e,this.context=t,this.refs=m,this.updater=n||h}v.prototype.isReactComponent={},v.prototype.setState=function(e,t){if("object"!=typeof e&&"function"!=typeof e&&null!=e)throw Error(p(85));this.updater.enqueueSetState(this,e,t,"setState")},v.prototype.forceUpdate=function(e){this.updater.enqueueForceUpdate(this,e,"forceUpdate")},g.prototype=v.prototype;var b=y.prototype=new g;b.constructor=y,r(b,v.prototype),b.isPureReactComponent=!0;var _={current:null},w=Object.prototype.hasOwnProperty,k={key:!0,ref:!0,__self:!0,__source:!0};function E(e,t,n){var r,l={},u=null,o=null;if(null!=t)for(r in void 0!==t.ref&&(o=t.ref),void 0!==t.key&&(u=""+t.key),t)w.call(t,r)&&!k.hasOwnProperty(r)&&(l[r]=t[r]);var i=arguments.length-2;if(1===i)l.children=n;else if(1<i){for(var c=Array(i),f=0;f<i;f++)c[f]=arguments[f+2];l.children=c}if(e&&e.defaultProps)for(r in i=e.defaultProps)void 0===l[r]&&(l[r]=i[r]);return{$$typeof:a,type:e,key:u,ref:o,props:l,_owner:_.current}}function x(e){return"object"==typeof e&&null!==e&&e.$$typeof===a}var S=/\/+/g;function N(e,t){return"object"==typeof e&&null!==e&&null!=e.key?function(e){var t={"=":"=0",":":"=2"};return"$"+e.replace(/[=:]/g,function(e){return t[e]})}(""+e.key):t.toString(36)}function C(e,t,n,r,u){var o=typeof e;"undefined"!==o&&"boolean"!==o||(e=null);var i=!1;if(null===e)i=!0;else switch(o){case"string":case"number":i=!0;break;case"object":switch(e.$$typeof){case a:case l:i=!0}}if(i)return u=u(i=e),e=""===r?"."+N(i,0):r,Array.isArray(u)?(n="",null!=e&&(n=e.replace(S,"$&/")+"/"),C(u,t,n,"",function(e){return e})):null!=u&&(x(u)&&(u=function(e,t){return{$$typeof:a,type:e.type,key:t,ref:e.ref,props:e.props,_owner:e._owner}}(u,n+(!u.key||i&&i.key===u.key?"":(""+u.key).replace(S,"$&/")+"/")+e)),t.push(u)),1;if(i=0,r=""===r?".":r+":",Array.isArray(e))for(var c=0;c<e.length;c++){var f=r+N(o=e[c],c);i+=C(o,t,n,f,u)}else if("function"==typeof(f=function(e){return null===e||"object"!=typeof e?null:"function"==typeof(e=d&&e[d]||e["@@iterator"])?e:null}(e)))for(e=f.call(e),c=0;!(o=e.next()).done;)i+=C(o=o.value,t,n,f=r+N(o,c++),u);else if("object"===o)throw t=""+e,Error(p(31,"[object Object]"===t?"object with keys {"+Object.keys(e).join(", ")+"}":t));return i}function O(e,t,n){if(null==e)return e;var r=[],a=0;return C(e,r,"","",function(e){return t.call(n,e,a++)}),r}function P(e){if(-1===e._status){var t=e._result;t=t(),e._status=0,e._result=t,t.then(function(t){0===e._status&&(t=t.default,e._status=1,e._result=t)},function(t){0===e._status&&(e._status=2,e._result=t)})}if(1===e._status)return e._result;throw e._result}var j={current:null};function T(){var e=j.current;if(null===e)throw Error(p(321));return e}var z={ReactCurrentDispatcher:j,ReactCurrentBatchConfig:{transition:0},ReactCurrentOwner:_,IsSomeRendererActing:{current:!1},assign:r};t.Children={map:O,forEach:function(e,t,n){O(e,function(){t.apply(this,arguments)},n)},count:function(e){var t=0;return O(e,function(){t++}),t},toArray:function(e){return O(e,function(e){return e})||[]},only:function(e){if(!x(e))throw Error(p(143));return e}},t.Component=v,t.PureComponent=y,t.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED=z,t.cloneElement=function(e,t,n){if(null==e)throw Error(p(267,e));var l=r({},e.props),u=e.key,o=e.ref,i=e._owner;if(null!=t){if(void 0!==t.ref&&(o=t.ref,i=_.current),void 0!==t.key&&(u=""+t.key),e.type&&e.type.defaultProps)var c=e.type.defaultProps;for(f in t)w.call(t,f)&&!k.hasOwnProperty(f)&&(l[f]=void 0===t[f]&&void 0!==c?c[f]:t[f])}var f=arguments.length-2;if(1===f)l.children=n;else if(1<f){c=Array(f);for(var s=0;s<f;s++)c[s]=arguments[s+2];l.children=c}return{$$typeof:a,type:e.type,key:u,ref:o,props:l,_owner:i}},t.createContext=function(e,t){return void 0===t&&(t=null),(e={$$typeof:o,_calculateChangedBits:t,_currentValue:e,_currentValue2:e,_threadCount:0,Provider:null,Consumer:null}).Provider={$$typeof:u,_context:e},e.Consumer=e},t.createElement=E,t.createFactory=function(e){var t=E.bind(null,e);return t.type=e,t},t.createRef=function(){return{current:null}},t.forwardRef=function(e){return{$$typeof:i,render:e}},t.isValidElement=x,t.lazy=function(e){return{$$typeof:f,_payload:{_status:-1,_result:e},_init:P}},t.memo=function(e,t){return{$$typeof:c,type:e,compare:void 0===t?null:t}},t.useCallback=function(e,t){return T().useCallback(e,t)},t.useContext=function(e,t){return T().useContext(e,t)},t.useDebugValue=function(){},t.useEffect=function(e,t){return T().useEffect(e,t)},t.useImperativeHandle=function(e,t,n){return T().useImperativeHandle(e,t,n)},t.useLayoutEffect=function(e,t){return T().useLayoutEffect(e,t)},t.useMemo=function(e,t){return T().useMemo(e,t)},t.useReducer=function(e,t,n){return T().useReducer(e,t,n)},t.useRef=function(e){return T().useRef(e)},t.useState=function(e){return T().useState(e)},t.version="17.0.2"},function(e,t,n){"use strict";!function e(){if("undefined"!=typeof __REACT_DEVTOOLS_GLOBAL_HOOK__&&"function"==typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE)try{__REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE(e)}catch(e){console.error(e)}}(),e.exports=n(6)},function(e,t,n){"use strict";
/** @license React v17.0.2
 * react-dom.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */var r=n(0),a=n(1),l=n(7);function u(e){for(var t="https://reactjs.org/docs/error-decoder.html?invariant="+e,n=1;n<arguments.length;n++)t+="&args[]="+encodeURIComponent(arguments[n]);return"Minified React error #"+e+"; visit "+t+" for the full message or use the non-minified dev environment for full errors and additional helpful warnings."}if(!r)throw Error(u(227));var o=new Set,i={};function c(e,t){f(e,t),f(e+"Capture",t)}function f(e,t){for(i[e]=t,e=0;e<t.length;e++)o.add(t[e])}var s=!("undefined"==typeof window||void 0===window.document||void 0===window.document.createElement),d=/^[:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD][:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD\-.0-9\u00B7\u0300-\u036F\u203F-\u2040]*$/,p=Object.prototype.hasOwnProperty,h={},m={};function v(e,t,n,r,a,l,u){this.acceptsBooleans=2===t||3===t||4===t,this.attributeName=r,this.attributeNamespace=a,this.mustUseProperty=n,this.propertyName=e,this.type=t,this.sanitizeURL=l,this.removeEmptyString=u}var g={};"children dangerouslySetInnerHTML defaultValue defaultChecked innerHTML suppressContentEditableWarning suppressHydrationWarning style".split(" ").forEach(function(e){g[e]=new v(e,0,!1,e,null,!1,!1)}),[["acceptCharset","accept-charset"],["className","class"],["htmlFor","for"],["httpEquiv","http-equiv"]].forEach(function(e){var t=e[0];g[t]=new v(t,1,!1,e[1],null,!1,!1)}),["contentEditable","draggable","spellCheck","value"].forEach(function(e){g[e]=new v(e,2,!1,e.toLowerCase(),null,!1,!1)}),["autoReverse","externalResourcesRequired","focusable","preserveAlpha"].forEach(function(e){g[e]=new v(e,2,!1,e,null,!1,!1)}),"allowFullScreen async autoFocus autoPlay controls default defer disabled disablePictureInPicture disableRemotePlayback formNoValidate hidden loop noModule noValidate open playsInline readOnly required reversed scoped seamless itemScope".split(" ").forEach(function(e){g[e]=new v(e,3,!1,e.toLowerCase(),null,!1,!1)}),["checked","multiple","muted","selected"].forEach(function(e){g[e]=new v(e,3,!0,e,null,!1,!1)}),["capture","download"].forEach(function(e){g[e]=new v(e,4,!1,e,null,!1,!1)}),["cols","rows","size","span"].forEach(function(e){g[e]=new v(e,6,!1,e,null,!1,!1)}),["rowSpan","start"].forEach(function(e){g[e]=new v(e,5,!1,e.toLowerCase(),null,!1,!1)});var y=/[\-:]([a-z])/g;function b(e){return e[1].toUpperCase()}function _(e,t,n,r){var a=g.hasOwnProperty(t)?g[t]:null;(null!==a?0===a.type:!r&&(2<t.length&&("o"===t[0]||"O"===t[0])&&("n"===t[1]||"N"===t[1])))||(function(e,t,n,r){if(null==t||function(e,t,n,r){if(null!==n&&0===n.type)return!1;switch(typeof t){case"function":case"symbol":return!0;case"boolean":return!r&&(null!==n?!n.acceptsBooleans:"data-"!==(e=e.toLowerCase().slice(0,5))&&"aria-"!==e);default:return!1}}(e,t,n,r))return!0;if(r)return!1;if(null!==n)switch(n.type){case 3:return!t;case 4:return!1===t;case 5:return isNaN(t);case 6:return isNaN(t)||1>t}return!1}(t,n,a,r)&&(n=null),r||null===a?function(e){return!!p.call(m,e)||!p.call(h,e)&&(d.test(e)?m[e]=!0:(h[e]=!0,!1))}(t)&&(null===n?e.removeAttribute(t):e.setAttribute(t,""+n)):a.mustUseProperty?e[a.propertyName]=null===n?3!==a.type&&"":n:(t=a.attributeName,r=a.attributeNamespace,null===n?e.removeAttribute(t):(n=3===(a=a.type)||4===a&&!0===n?"":""+n,r?e.setAttributeNS(r,t,n):e.setAttribute(t,n))))}"accent-height alignment-baseline arabic-form baseline-shift cap-height clip-path clip-rule color-interpolation color-interpolation-filters color-profile color-rendering dominant-baseline enable-background fill-opacity fill-rule flood-color flood-opacity font-family font-size font-size-adjust font-stretch font-style font-variant font-weight glyph-name glyph-orientation-horizontal glyph-orientation-vertical horiz-adv-x horiz-origin-x image-rendering letter-spacing lighting-color marker-end marker-mid marker-start overline-position overline-thickness paint-order panose-1 pointer-events rendering-intent shape-rendering stop-color stop-opacity strikethrough-position strikethrough-thickness stroke-dasharray stroke-dashoffset stroke-linecap stroke-linejoin stroke-miterlimit stroke-opacity stroke-width text-anchor text-decoration text-rendering underline-position underline-thickness unicode-bidi unicode-range units-per-em v-alphabetic v-hanging v-ideographic v-mathematical vector-effect vert-adv-y vert-origin-x vert-origin-y word-spacing writing-mode xmlns:xlink x-height".split(" ").forEach(function(e){var t=e.replace(y,b);g[t]=new v(t,1,!1,e,null,!1,!1)}),"xlink:actuate xlink:arcrole xlink:role xlink:show xlink:title xlink:type".split(" ").forEach(function(e){var t=e.replace(y,b);g[t]=new v(t,1,!1,e,"http://www.w3.org/1999/xlink",!1,!1)}),["xml:base","xml:lang","xml:space"].forEach(function(e){var t=e.replace(y,b);g[t]=new v(t,1,!1,e,"http://www.w3.org/XML/1998/namespace",!1,!1)}),["tabIndex","crossOrigin"].forEach(function(e){g[e]=new v(e,1,!1,e.toLowerCase(),null,!1,!1)}),g.xlinkHref=new v("xlinkHref",1,!1,"xlink:href","http://www.w3.org/1999/xlink",!0,!1),["src","href","action","formAction"].forEach(function(e){g[e]=new v(e,1,!1,e.toLowerCase(),null,!0,!0)});var w=r.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED,k=60103,E=60106,x=60107,S=60108,N=60114,C=60109,O=60110,P=60112,j=60113,T=60120,z=60115,L=60116,R=60121,M=60128,A=60129,I=60130,D=60131;if("function"==typeof Symbol&&Symbol.for){var F=Symbol.for;k=F("react.element"),E=F("react.portal"),x=F("react.fragment"),S=F("react.strict_mode"),N=F("react.profiler"),C=F("react.provider"),O=F("react.context"),P=F("react.forward_ref"),j=F("react.suspense"),T=F("react.suspense_list"),z=F("react.memo"),L=F("react.lazy"),R=F("react.block"),F("react.scope"),M=F("react.opaque.id"),A=F("react.debug_trace_mode"),I=F("react.offscreen"),D=F("react.legacy_hidden")}var U,B="function"==typeof Symbol&&Symbol.iterator;function W(e){return null===e||"object"!=typeof e?null:"function"==typeof(e=B&&e[B]||e["@@iterator"])?e:null}function $(e){if(void 0===U)try{throw Error()}catch(e){var t=e.stack.trim().match(/\n( *(at )?)/);U=t&&t[1]||""}return"\n"+U+e}var V=!1;function H(e,t){if(!e||V)return"";V=!0;var n=Error.prepareStackTrace;Error.prepareStackTrace=void 0;try{if(t)if(t=function(){throw Error()},Object.defineProperty(t.prototype,"props",{set:function(){throw Error()}}),"object"==typeof Reflect&&Reflect.construct){try{Reflect.construct(t,[])}catch(e){var r=e}Reflect.construct(e,[],t)}else{try{t.call()}catch(e){r=e}e.call(t.prototype)}else{try{throw Error()}catch(e){r=e}e()}}catch(e){if(e&&r&&"string"==typeof e.stack){for(var a=e.stack.split("\n"),l=r.stack.split("\n"),u=a.length-1,o=l.length-1;1<=u&&0<=o&&a[u]!==l[o];)o--;for(;1<=u&&0<=o;u--,o--)if(a[u]!==l[o]){if(1!==u||1!==o)do{if(u--,0>--o||a[u]!==l[o])return"\n"+a[u].replace(" at new "," at ")}while(1<=u&&0<=o);break}}}finally{V=!1,Error.prepareStackTrace=n}return(e=e?e.displayName||e.name:"")?$(e):""}function Q(e){switch(e.tag){case 5:return $(e.type);case 16:return $("Lazy");case 13:return $("Suspense");case 19:return $("SuspenseList");case 0:case 2:case 15:return e=H(e.type,!1);case 11:return e=H(e.type.render,!1);case 22:return e=H(e.type._render,!1);case 1:return e=H(e.type,!0);default:return""}}function q(e){if(null==e)return null;if("function"==typeof e)return e.displayName||e.name||null;if("string"==typeof e)return e;switch(e){case x:return"Fragment";case E:return"Portal";case N:return"Profiler";case S:return"StrictMode";case j:return"Suspense";case T:return"SuspenseList"}if("object"==typeof e)switch(e.$$typeof){case O:return(e.displayName||"Context")+".Consumer";case C:return(e._context.displayName||"Context")+".Provider";case P:var t=e.render;return t=t.displayName||t.name||"",e.displayName||(""!==t?"ForwardRef("+t+")":"ForwardRef");case z:return q(e.type);case R:return q(e._render);case L:t=e._payload,e=e._init;try{return q(e(t))}catch(e){}}return null}function K(e){switch(typeof e){case"boolean":case"number":case"object":case"string":case"undefined":return e;default:return""}}function Y(e){var t=e.type;return(e=e.nodeName)&&"input"===e.toLowerCase()&&("checkbox"===t||"radio"===t)}function G(e){e._valueTracker||(e._valueTracker=function(e){var t=Y(e)?"checked":"value",n=Object.getOwnPropertyDescriptor(e.constructor.prototype,t),r=""+e[t];if(!e.hasOwnProperty(t)&&void 0!==n&&"function"==typeof n.get&&"function"==typeof n.set){var a=n.get,l=n.set;return Object.defineProperty(e,t,{configurable:!0,get:function(){return a.call(this)},set:function(e){r=""+e,l.call(this,e)}}),Object.defineProperty(e,t,{enumerable:n.enumerable}),{getValue:function(){return r},setValue:function(e){r=""+e},stopTracking:function(){e._valueTracker=null,delete e[t]}}}}(e))}function X(e){if(!e)return!1;var t=e._valueTracker;if(!t)return!0;var n=t.getValue(),r="";return e&&(r=Y(e)?e.checked?"true":"false":e.value),(e=r)!==n&&(t.setValue(e),!0)}function Z(e){if(void 0===(e=e||("undefined"!=typeof document?document:void 0)))return null;try{return e.activeElement||e.body}catch(t){return e.body}}function J(e,t){var n=t.checked;return a({},t,{defaultChecked:void 0,defaultValue:void 0,value:void 0,checked:null!=n?n:e._wrapperState.initialChecked})}function ee(e,t){var n=null==t.defaultValue?"":t.defaultValue,r=null!=t.checked?t.checked:t.defaultChecked;n=K(null!=t.value?t.value:n),e._wrapperState={initialChecked:r,initialValue:n,controlled:"checkbox"===t.type||"radio"===t.type?null!=t.checked:null!=t.value}}function te(e,t){null!=(t=t.checked)&&_(e,"checked",t,!1)}function ne(e,t){te(e,t);var n=K(t.value),r=t.type;if(null!=n)"number"===r?(0===n&&""===e.value||e.value!=n)&&(e.value=""+n):e.value!==""+n&&(e.value=""+n);else if("submit"===r||"reset"===r)return void e.removeAttribute("value");t.hasOwnProperty("value")?ae(e,t.type,n):t.hasOwnProperty("defaultValue")&&ae(e,t.type,K(t.defaultValue)),null==t.checked&&null!=t.defaultChecked&&(e.defaultChecked=!!t.defaultChecked)}function re(e,t,n){if(t.hasOwnProperty("value")||t.hasOwnProperty("defaultValue")){var r=t.type;if(!("submit"!==r&&"reset"!==r||void 0!==t.value&&null!==t.value))return;t=""+e._wrapperState.initialValue,n||t===e.value||(e.value=t),e.defaultValue=t}""!==(n=e.name)&&(e.name=""),e.defaultChecked=!!e._wrapperState.initialChecked,""!==n&&(e.name=n)}function ae(e,t,n){"number"===t&&Z(e.ownerDocument)===e||(null==n?e.defaultValue=""+e._wrapperState.initialValue:e.defaultValue!==""+n&&(e.defaultValue=""+n))}function le(e,t){return e=a({children:void 0},t),(t=function(e){var t="";return r.Children.forEach(e,function(e){null!=e&&(t+=e)}),t}(t.children))&&(e.children=t),e}function ue(e,t,n,r){if(e=e.options,t){t={};for(var a=0;a<n.length;a++)t["$"+n[a]]=!0;for(n=0;n<e.length;n++)a=t.hasOwnProperty("$"+e[n].value),e[n].selected!==a&&(e[n].selected=a),a&&r&&(e[n].defaultSelected=!0)}else{for(n=""+K(n),t=null,a=0;a<e.length;a++){if(e[a].value===n)return e[a].selected=!0,void(r&&(e[a].defaultSelected=!0));null!==t||e[a].disabled||(t=e[a])}null!==t&&(t.selected=!0)}}function oe(e,t){if(null!=t.dangerouslySetInnerHTML)throw Error(u(91));return a({},t,{value:void 0,defaultValue:void 0,children:""+e._wrapperState.initialValue})}function ie(e,t){var n=t.value;if(null==n){if(n=t.children,t=t.defaultValue,null!=n){if(null!=t)throw Error(u(92));if(Array.isArray(n)){if(!(1>=n.length))throw Error(u(93));n=n[0]}t=n}null==t&&(t=""),n=t}e._wrapperState={initialValue:K(n)}}function ce(e,t){var n=K(t.value),r=K(t.defaultValue);null!=n&&((n=""+n)!==e.value&&(e.value=n),null==t.defaultValue&&e.defaultValue!==n&&(e.defaultValue=n)),null!=r&&(e.defaultValue=""+r)}function fe(e){var t=e.textContent;t===e._wrapperState.initialValue&&""!==t&&null!==t&&(e.value=t)}var se={html:"http://www.w3.org/1999/xhtml",mathml:"http://www.w3.org/1998/Math/MathML",svg:"http://www.w3.org/2000/svg"};function de(e){switch(e){case"svg":return"http://www.w3.org/2000/svg";case"math":return"http://www.w3.org/1998/Math/MathML";default:return"http://www.w3.org/1999/xhtml"}}function pe(e,t){return null==e||"http://www.w3.org/1999/xhtml"===e?de(t):"http://www.w3.org/2000/svg"===e&&"foreignObject"===t?"http://www.w3.org/1999/xhtml":e}var he,me=function(e){return"undefined"!=typeof MSApp&&MSApp.execUnsafeLocalFunction?function(t,n,r,a){MSApp.execUnsafeLocalFunction(function(){return e(t,n)})}:e}(function(e,t){if(e.namespaceURI!==se.svg||"innerHTML"in e)e.innerHTML=t;else{for((he=he||document.createElement("div")).innerHTML="<svg>"+t.valueOf().toString()+"</svg>",t=he.firstChild;e.firstChild;)e.removeChild(e.firstChild);for(;t.firstChild;)e.appendChild(t.firstChild)}});function ve(e,t){if(t){var n=e.firstChild;if(n&&n===e.lastChild&&3===n.nodeType)return void(n.nodeValue=t)}e.textContent=t}var ge={animationIterationCount:!0,borderImageOutset:!0,borderImageSlice:!0,borderImageWidth:!0,boxFlex:!0,boxFlexGroup:!0,boxOrdinalGroup:!0,columnCount:!0,columns:!0,flex:!0,flexGrow:!0,flexPositive:!0,flexShrink:!0,flexNegative:!0,flexOrder:!0,gridArea:!0,gridRow:!0,gridRowEnd:!0,gridRowSpan:!0,gridRowStart:!0,gridColumn:!0,gridColumnEnd:!0,gridColumnSpan:!0,gridColumnStart:!0,fontWeight:!0,lineClamp:!0,lineHeight:!0,opacity:!0,order:!0,orphans:!0,tabSize:!0,widows:!0,zIndex:!0,zoom:!0,fillOpacity:!0,floodOpacity:!0,stopOpacity:!0,strokeDasharray:!0,strokeDashoffset:!0,strokeMiterlimit:!0,strokeOpacity:!0,strokeWidth:!0},ye=["Webkit","ms","Moz","O"];function be(e,t,n){return null==t||"boolean"==typeof t||""===t?"":n||"number"!=typeof t||0===t||ge.hasOwnProperty(e)&&ge[e]?(""+t).trim():t+"px"}function _e(e,t){for(var n in e=e.style,t)if(t.hasOwnProperty(n)){var r=0===n.indexOf("--"),a=be(n,t[n],r);"float"===n&&(n="cssFloat"),r?e.setProperty(n,a):e[n]=a}}Object.keys(ge).forEach(function(e){ye.forEach(function(t){t=t+e.charAt(0).toUpperCase()+e.substring(1),ge[t]=ge[e]})});var we=a({menuitem:!0},{area:!0,base:!0,br:!0,col:!0,embed:!0,hr:!0,img:!0,input:!0,keygen:!0,link:!0,meta:!0,param:!0,source:!0,track:!0,wbr:!0});function ke(e,t){if(t){if(we[e]&&(null!=t.children||null!=t.dangerouslySetInnerHTML))throw Error(u(137,e));if(null!=t.dangerouslySetInnerHTML){if(null!=t.children)throw Error(u(60));if(!("object"==typeof t.dangerouslySetInnerHTML&&"__html"in t.dangerouslySetInnerHTML))throw Error(u(61))}if(null!=t.style&&"object"!=typeof t.style)throw Error(u(62))}}function Ee(e,t){if(-1===e.indexOf("-"))return"string"==typeof t.is;switch(e){case"annotation-xml":case"color-profile":case"font-face":case"font-face-src":case"font-face-uri":case"font-face-format":case"font-face-name":case"missing-glyph":return!1;default:return!0}}function xe(e){return(e=e.target||e.srcElement||window).correspondingUseElement&&(e=e.correspondingUseElement),3===e.nodeType?e.parentNode:e}var Se=null,Ne=null,Ce=null;function Oe(e){if(e=Gr(e)){if("function"!=typeof Se)throw Error(u(280));var t=e.stateNode;t&&(t=Zr(t),Se(e.stateNode,e.type,t))}}function Pe(e){Ne?Ce?Ce.push(e):Ce=[e]:Ne=e}function je(){if(Ne){var e=Ne,t=Ce;if(Ce=Ne=null,Oe(e),t)for(e=0;e<t.length;e++)Oe(t[e])}}function Te(e,t){return e(t)}function ze(e,t,n,r,a){return e(t,n,r,a)}function Le(){}var Re=Te,Me=!1,Ae=!1;function Ie(){null===Ne&&null===Ce||(Le(),je())}function De(e,t){var n=e.stateNode;if(null===n)return null;var r=Zr(n);if(null===r)return null;n=r[t];e:switch(t){case"onClick":case"onClickCapture":case"onDoubleClick":case"onDoubleClickCapture":case"onMouseDown":case"onMouseDownCapture":case"onMouseMove":case"onMouseMoveCapture":case"onMouseUp":case"onMouseUpCapture":case"onMouseEnter":(r=!r.disabled)||(r=!("button"===(e=e.type)||"input"===e||"select"===e||"textarea"===e)),e=!r;break e;default:e=!1}if(e)return null;if(n&&"function"!=typeof n)throw Error(u(231,t,typeof n));return n}var Fe=!1;if(s)try{var Ue={};Object.defineProperty(Ue,"passive",{get:function(){Fe=!0}}),window.addEventListener("test",Ue,Ue),window.removeEventListener("test",Ue,Ue)}catch(e){Fe=!1}var Be=!1,We=null,$e=!1,Ve=null,He={onError:function(e){Be=!0,We=e}};function Qe(e,t,n,r,a,l,u,o,i){Be=!1,We=null,function(e,t,n,r,a,l,u,o,i){var c=Array.prototype.slice.call(arguments,3);try{t.apply(n,c)}catch(e){this.onError(e)}}.apply(He,arguments)}function qe(e){var t=e,n=e;if(e.alternate)for(;t.return;)t=t.return;else{e=t;do{0!=(1026&(t=e).flags)&&(n=t.return),e=t.return}while(e)}return 3===t.tag?n:null}function Ke(e){if(13===e.tag){var t=e.memoizedState;if(null===t&&(null!==(e=e.alternate)&&(t=e.memoizedState)),null!==t)return t.dehydrated}return null}function Ye(e){if(qe(e)!==e)throw Error(u(188))}function Ge(e){if(!(e=function(e){var t=e.alternate;if(!t){if(null===(t=qe(e)))throw Error(u(188));return t!==e?null:e}for(var n=e,r=t;;){var a=n.return;if(null===a)break;var l=a.alternate;if(null===l){if(null!==(r=a.return)){n=r;continue}break}if(a.child===l.child){for(l=a.child;l;){if(l===n)return Ye(a),e;if(l===r)return Ye(a),t;l=l.sibling}throw Error(u(188))}if(n.return!==r.return)n=a,r=l;else{for(var o=!1,i=a.child;i;){if(i===n){o=!0,n=a,r=l;break}if(i===r){o=!0,r=a,n=l;break}i=i.sibling}if(!o){for(i=l.child;i;){if(i===n){o=!0,n=l,r=a;break}if(i===r){o=!0,r=l,n=a;break}i=i.sibling}if(!o)throw Error(u(189))}}if(n.alternate!==r)throw Error(u(190))}if(3!==n.tag)throw Error(u(188));return n.stateNode.current===n?e:t}(e)))return null;for(var t=e;;){if(5===t.tag||6===t.tag)return t;if(t.child)t.child.return=t,t=t.child;else{if(t===e)break;for(;!t.sibling;){if(!t.return||t.return===e)return null;t=t.return}t.sibling.return=t.return,t=t.sibling}}return null}function Xe(e,t){for(var n=e.alternate;null!==t;){if(t===e||t===n)return!0;t=t.return}return!1}var Ze,Je,et,tt,nt=!1,rt=[],at=null,lt=null,ut=null,ot=new Map,it=new Map,ct=[],ft="mousedown mouseup touchcancel touchend touchstart auxclick dblclick pointercancel pointerdown pointerup dragend dragstart drop compositionend compositionstart keydown keypress keyup input textInput copy cut paste click change contextmenu reset submit".split(" ");function st(e,t,n,r,a){return{blockedOn:e,domEventName:t,eventSystemFlags:16|n,nativeEvent:a,targetContainers:[r]}}function dt(e,t){switch(e){case"focusin":case"focusout":at=null;break;case"dragenter":case"dragleave":lt=null;break;case"mouseover":case"mouseout":ut=null;break;case"pointerover":case"pointerout":ot.delete(t.pointerId);break;case"gotpointercapture":case"lostpointercapture":it.delete(t.pointerId)}}function pt(e,t,n,r,a,l){return null===e||e.nativeEvent!==l?(e=st(t,n,r,a,l),null!==t&&(null!==(t=Gr(t))&&Je(t)),e):(e.eventSystemFlags|=r,t=e.targetContainers,null!==a&&-1===t.indexOf(a)&&t.push(a),e)}function ht(e){var t=Yr(e.target);if(null!==t){var n=qe(t);if(null!==n)if(13===(t=n.tag)){if(null!==(t=Ke(n)))return e.blockedOn=t,void tt(e.lanePriority,function(){l.unstable_runWithPriority(e.priority,function(){et(n)})})}else if(3===t&&n.stateNode.hydrate)return void(e.blockedOn=3===n.tag?n.stateNode.containerInfo:null)}e.blockedOn=null}function mt(e){if(null!==e.blockedOn)return!1;for(var t=e.targetContainers;0<t.length;){var n=Gt(e.domEventName,e.eventSystemFlags,t[0],e.nativeEvent);if(null!==n)return null!==(t=Gr(n))&&Je(t),e.blockedOn=n,!1;t.shift()}return!0}function vt(e,t,n){mt(e)&&n.delete(t)}function gt(){for(nt=!1;0<rt.length;){var e=rt[0];if(null!==e.blockedOn){null!==(e=Gr(e.blockedOn))&&Ze(e);break}for(var t=e.targetContainers;0<t.length;){var n=Gt(e.domEventName,e.eventSystemFlags,t[0],e.nativeEvent);if(null!==n){e.blockedOn=n;break}t.shift()}null===e.blockedOn&&rt.shift()}null!==at&&mt(at)&&(at=null),null!==lt&&mt(lt)&&(lt=null),null!==ut&&mt(ut)&&(ut=null),ot.forEach(vt),it.forEach(vt)}function yt(e,t){e.blockedOn===t&&(e.blockedOn=null,nt||(nt=!0,l.unstable_scheduleCallback(l.unstable_NormalPriority,gt)))}function bt(e){function t(t){return yt(t,e)}if(0<rt.length){yt(rt[0],e);for(var n=1;n<rt.length;n++){var r=rt[n];r.blockedOn===e&&(r.blockedOn=null)}}for(null!==at&&yt(at,e),null!==lt&&yt(lt,e),null!==ut&&yt(ut,e),ot.forEach(t),it.forEach(t),n=0;n<ct.length;n++)(r=ct[n]).blockedOn===e&&(r.blockedOn=null);for(;0<ct.length&&null===(n=ct[0]).blockedOn;)ht(n),null===n.blockedOn&&ct.shift()}function _t(e,t){var n={};return n[e.toLowerCase()]=t.toLowerCase(),n["Webkit"+e]="webkit"+t,n["Moz"+e]="moz"+t,n}var wt={animationend:_t("Animation","AnimationEnd"),animationiteration:_t("Animation","AnimationIteration"),animationstart:_t("Animation","AnimationStart"),transitionend:_t("Transition","TransitionEnd")},kt={},Et={};function xt(e){if(kt[e])return kt[e];if(!wt[e])return e;var t,n=wt[e];for(t in n)if(n.hasOwnProperty(t)&&t in Et)return kt[e]=n[t];return e}s&&(Et=document.createElement("div").style,"AnimationEvent"in window||(delete wt.animationend.animation,delete wt.animationiteration.animation,delete wt.animationstart.animation),"TransitionEvent"in window||delete wt.transitionend.transition);var St=xt("animationend"),Nt=xt("animationiteration"),Ct=xt("animationstart"),Ot=xt("transitionend"),Pt=new Map,jt=new Map,Tt=["abort","abort",St,"animationEnd",Nt,"animationIteration",Ct,"animationStart","canplay","canPlay","canplaythrough","canPlayThrough","durationchange","durationChange","emptied","emptied","encrypted","encrypted","ended","ended","error","error","gotpointercapture","gotPointerCapture","load","load","loadeddata","loadedData","loadedmetadata","loadedMetadata","loadstart","loadStart","lostpointercapture","lostPointerCapture","playing","playing","progress","progress","seeking","seeking","stalled","stalled","suspend","suspend","timeupdate","timeUpdate",Ot,"transitionEnd","waiting","waiting"];function zt(e,t){for(var n=0;n<e.length;n+=2){var r=e[n],a=e[n+1];a="on"+(a[0].toUpperCase()+a.slice(1)),jt.set(r,t),Pt.set(r,a),c(a,[r])}}(0,l.unstable_now)();var Lt=8;function Rt(e){if(0!=(1&e))return Lt=15,1;if(0!=(2&e))return Lt=14,2;if(0!=(4&e))return Lt=13,4;var t=24&e;return 0!==t?(Lt=12,t):0!=(32&e)?(Lt=11,32):0!==(t=192&e)?(Lt=10,t):0!=(256&e)?(Lt=9,256):0!==(t=3584&e)?(Lt=8,t):0!=(4096&e)?(Lt=7,4096):0!==(t=4186112&e)?(Lt=6,t):0!==(t=62914560&e)?(Lt=5,t):67108864&e?(Lt=4,67108864):0!=(134217728&e)?(Lt=3,134217728):0!==(t=805306368&e)?(Lt=2,t):0!=(1073741824&e)?(Lt=1,1073741824):(Lt=8,e)}function Mt(e,t){var n=e.pendingLanes;if(0===n)return Lt=0;var r=0,a=0,l=e.expiredLanes,u=e.suspendedLanes,o=e.pingedLanes;if(0!==l)r=l,a=Lt=15;else if(0!==(l=134217727&n)){var i=l&~u;0!==i?(r=Rt(i),a=Lt):0!==(o&=l)&&(r=Rt(o),a=Lt)}else 0!==(l=n&~u)?(r=Rt(l),a=Lt):0!==o&&(r=Rt(o),a=Lt);if(0===r)return 0;if(r=n&((0>(r=31-Bt(r))?0:1<<r)<<1)-1,0!==t&&t!==r&&0==(t&u)){if(Rt(t),a<=Lt)return t;Lt=a}if(0!==(t=e.entangledLanes))for(e=e.entanglements,t&=r;0<t;)a=1<<(n=31-Bt(t)),r|=e[n],t&=~a;return r}function At(e){return 0!==(e=-1073741825&e.pendingLanes)?e:1073741824&e?1073741824:0}function It(e,t){switch(e){case 15:return 1;case 14:return 2;case 12:return 0===(e=Dt(24&~t))?It(10,t):e;case 10:return 0===(e=Dt(192&~t))?It(8,t):e;case 8:return 0===(e=Dt(3584&~t))&&(0===(e=Dt(4186112&~t))&&(e=512)),e;case 2:return 0===(t=Dt(805306368&~t))&&(t=268435456),t}throw Error(u(358,e))}function Dt(e){return e&-e}function Ft(e){for(var t=[],n=0;31>n;n++)t.push(e);return t}function Ut(e,t,n){e.pendingLanes|=t;var r=t-1;e.suspendedLanes&=r,e.pingedLanes&=r,(e=e.eventTimes)[t=31-Bt(t)]=n}var Bt=Math.clz32?Math.clz32:function(e){return 0===e?32:31-(Wt(e)/$t|0)|0},Wt=Math.log,$t=Math.LN2;var Vt=l.unstable_UserBlockingPriority,Ht=l.unstable_runWithPriority,Qt=!0;function qt(e,t,n,r){Me||Le();var a=Yt,l=Me;Me=!0;try{ze(a,e,t,n,r)}finally{(Me=l)||Ie()}}function Kt(e,t,n,r){Ht(Vt,Yt.bind(null,e,t,n,r))}function Yt(e,t,n,r){var a;if(Qt)if((a=0==(4&t))&&0<rt.length&&-1<ft.indexOf(e))e=st(null,e,t,n,r),rt.push(e);else{var l=Gt(e,t,n,r);if(null===l)a&&dt(e,r);else{if(a){if(-1<ft.indexOf(e))return e=st(l,e,t,n,r),void rt.push(e);if(function(e,t,n,r,a){switch(t){case"focusin":return at=pt(at,e,t,n,r,a),!0;case"dragenter":return lt=pt(lt,e,t,n,r,a),!0;case"mouseover":return ut=pt(ut,e,t,n,r,a),!0;case"pointerover":var l=a.pointerId;return ot.set(l,pt(ot.get(l)||null,e,t,n,r,a)),!0;case"gotpointercapture":return l=a.pointerId,it.set(l,pt(it.get(l)||null,e,t,n,r,a)),!0}return!1}(l,e,t,n,r))return;dt(e,r)}Or(e,t,r,null,n)}}}function Gt(e,t,n,r){var a=xe(r);if(null!==(a=Yr(a))){var l=qe(a);if(null===l)a=null;else{var u=l.tag;if(13===u){if(null!==(a=Ke(l)))return a;a=null}else if(3===u){if(l.stateNode.hydrate)return 3===l.tag?l.stateNode.containerInfo:null;a=null}else l!==a&&(a=null)}}return Or(e,t,r,a,n),null}var Xt=null,Zt=null,Jt=null;function en(){if(Jt)return Jt;var e,t,n=Zt,r=n.length,a="value"in Xt?Xt.value:Xt.textContent,l=a.length;for(e=0;e<r&&n[e]===a[e];e++);var u=r-e;for(t=1;t<=u&&n[r-t]===a[l-t];t++);return Jt=a.slice(e,1<t?1-t:void 0)}function tn(e){var t=e.keyCode;return"charCode"in e?0===(e=e.charCode)&&13===t&&(e=13):e=t,10===e&&(e=13),32<=e||13===e?e:0}function nn(){return!0}function rn(){return!1}function an(e){function t(t,n,r,a,l){for(var u in this._reactName=t,this._targetInst=r,this.type=n,this.nativeEvent=a,this.target=l,this.currentTarget=null,e)e.hasOwnProperty(u)&&(t=e[u],this[u]=t?t(a):a[u]);return this.isDefaultPrevented=(null!=a.defaultPrevented?a.defaultPrevented:!1===a.returnValue)?nn:rn,this.isPropagationStopped=rn,this}return a(t.prototype,{preventDefault:function(){this.defaultPrevented=!0;var e=this.nativeEvent;e&&(e.preventDefault?e.preventDefault():"unknown"!=typeof e.returnValue&&(e.returnValue=!1),this.isDefaultPrevented=nn)},stopPropagation:function(){var e=this.nativeEvent;e&&(e.stopPropagation?e.stopPropagation():"unknown"!=typeof e.cancelBubble&&(e.cancelBubble=!0),this.isPropagationStopped=nn)},persist:function(){},isPersistent:nn}),t}var ln,un,on,cn={eventPhase:0,bubbles:0,cancelable:0,timeStamp:function(e){return e.timeStamp||Date.now()},defaultPrevented:0,isTrusted:0},fn=an(cn),sn=a({},cn,{view:0,detail:0}),dn=an(sn),pn=a({},sn,{screenX:0,screenY:0,clientX:0,clientY:0,pageX:0,pageY:0,ctrlKey:0,shiftKey:0,altKey:0,metaKey:0,getModifierState:xn,button:0,buttons:0,relatedTarget:function(e){return void 0===e.relatedTarget?e.fromElement===e.srcElement?e.toElement:e.fromElement:e.relatedTarget},movementX:function(e){return"movementX"in e?e.movementX:(e!==on&&(on&&"mousemove"===e.type?(ln=e.screenX-on.screenX,un=e.screenY-on.screenY):un=ln=0,on=e),ln)},movementY:function(e){return"movementY"in e?e.movementY:un}}),hn=an(pn),mn=an(a({},pn,{dataTransfer:0})),vn=an(a({},sn,{relatedTarget:0})),gn=an(a({},cn,{animationName:0,elapsedTime:0,pseudoElement:0})),yn=an(a({},cn,{clipboardData:function(e){return"clipboardData"in e?e.clipboardData:window.clipboardData}})),bn=an(a({},cn,{data:0})),_n={Esc:"Escape",Spacebar:" ",Left:"ArrowLeft",Up:"ArrowUp",Right:"ArrowRight",Down:"ArrowDown",Del:"Delete",Win:"OS",Menu:"ContextMenu",Apps:"ContextMenu",Scroll:"ScrollLock",MozPrintableKey:"Unidentified"},wn={8:"Backspace",9:"Tab",12:"Clear",13:"Enter",16:"Shift",17:"Control",18:"Alt",19:"Pause",20:"CapsLock",27:"Escape",32:" ",33:"PageUp",34:"PageDown",35:"End",36:"Home",37:"ArrowLeft",38:"ArrowUp",39:"ArrowRight",40:"ArrowDown",45:"Insert",46:"Delete",112:"F1",113:"F2",114:"F3",115:"F4",116:"F5",117:"F6",118:"F7",119:"F8",120:"F9",121:"F10",122:"F11",123:"F12",144:"NumLock",145:"ScrollLock",224:"Meta"},kn={Alt:"altKey",Control:"ctrlKey",Meta:"metaKey",Shift:"shiftKey"};function En(e){var t=this.nativeEvent;return t.getModifierState?t.getModifierState(e):!!(e=kn[e])&&!!t[e]}function xn(){return En}var Sn=an(a({},sn,{key:function(e){if(e.key){var t=_n[e.key]||e.key;if("Unidentified"!==t)return t}return"keypress"===e.type?13===(e=tn(e))?"Enter":String.fromCharCode(e):"keydown"===e.type||"keyup"===e.type?wn[e.keyCode]||"Unidentified":""},code:0,location:0,ctrlKey:0,shiftKey:0,altKey:0,metaKey:0,repeat:0,locale:0,getModifierState:xn,charCode:function(e){return"keypress"===e.type?tn(e):0},keyCode:function(e){return"keydown"===e.type||"keyup"===e.type?e.keyCode:0},which:function(e){return"keypress"===e.type?tn(e):"keydown"===e.type||"keyup"===e.type?e.keyCode:0}})),Nn=an(a({},pn,{pointerId:0,width:0,height:0,pressure:0,tangentialPressure:0,tiltX:0,tiltY:0,twist:0,pointerType:0,isPrimary:0})),Cn=an(a({},sn,{touches:0,targetTouches:0,changedTouches:0,altKey:0,metaKey:0,ctrlKey:0,shiftKey:0,getModifierState:xn})),On=an(a({},cn,{propertyName:0,elapsedTime:0,pseudoElement:0})),Pn=an(a({},pn,{deltaX:function(e){return"deltaX"in e?e.deltaX:"wheelDeltaX"in e?-e.wheelDeltaX:0},deltaY:function(e){return"deltaY"in e?e.deltaY:"wheelDeltaY"in e?-e.wheelDeltaY:"wheelDelta"in e?-e.wheelDelta:0},deltaZ:0,deltaMode:0})),jn=[9,13,27,32],Tn=s&&"CompositionEvent"in window,zn=null;s&&"documentMode"in document&&(zn=document.documentMode);var Ln=s&&"TextEvent"in window&&!zn,Rn=s&&(!Tn||zn&&8<zn&&11>=zn),Mn=String.fromCharCode(32),An=!1;function In(e,t){switch(e){case"keyup":return-1!==jn.indexOf(t.keyCode);case"keydown":return 229!==t.keyCode;case"keypress":case"mousedown":case"focusout":return!0;default:return!1}}function Dn(e){return"object"==typeof(e=e.detail)&&"data"in e?e.data:null}var Fn=!1;var Un={color:!0,date:!0,datetime:!0,"datetime-local":!0,email:!0,month:!0,number:!0,password:!0,range:!0,search:!0,tel:!0,text:!0,time:!0,url:!0,week:!0};function Bn(e){var t=e&&e.nodeName&&e.nodeName.toLowerCase();return"input"===t?!!Un[e.type]:"textarea"===t}function Wn(e,t,n,r){Pe(r),0<(t=jr(t,"onChange")).length&&(n=new fn("onChange","change",null,n,r),e.push({event:n,listeners:t}))}var $n=null,Vn=null;function Hn(e){kr(e,0)}function Qn(e){if(X(Xr(e)))return e}function qn(e,t){if("change"===e)return t}var Kn=!1;if(s){var Yn;if(s){var Gn="oninput"in document;if(!Gn){var Xn=document.createElement("div");Xn.setAttribute("oninput","return;"),Gn="function"==typeof Xn.oninput}Yn=Gn}else Yn=!1;Kn=Yn&&(!document.documentMode||9<document.documentMode)}function Zn(){$n&&($n.detachEvent("onpropertychange",Jn),Vn=$n=null)}function Jn(e){if("value"===e.propertyName&&Qn(Vn)){var t=[];if(Wn(t,Vn,e,xe(e)),e=Hn,Me)e(t);else{Me=!0;try{Te(e,t)}finally{Me=!1,Ie()}}}}function er(e,t,n){"focusin"===e?(Zn(),Vn=n,($n=t).attachEvent("onpropertychange",Jn)):"focusout"===e&&Zn()}function tr(e){if("selectionchange"===e||"keyup"===e||"keydown"===e)return Qn(Vn)}function nr(e,t){if("click"===e)return Qn(t)}function rr(e,t){if("input"===e||"change"===e)return Qn(t)}var ar="function"==typeof Object.is?Object.is:function(e,t){return e===t&&(0!==e||1/e==1/t)||e!=e&&t!=t},lr=Object.prototype.hasOwnProperty;function ur(e,t){if(ar(e,t))return!0;if("object"!=typeof e||null===e||"object"!=typeof t||null===t)return!1;var n=Object.keys(e),r=Object.keys(t);if(n.length!==r.length)return!1;for(r=0;r<n.length;r++)if(!lr.call(t,n[r])||!ar(e[n[r]],t[n[r]]))return!1;return!0}function or(e){for(;e&&e.firstChild;)e=e.firstChild;return e}function ir(e,t){var n,r=or(e);for(e=0;r;){if(3===r.nodeType){if(n=e+r.textContent.length,e<=t&&n>=t)return{node:r,offset:t-e};e=n}e:{for(;r;){if(r.nextSibling){r=r.nextSibling;break e}r=r.parentNode}r=void 0}r=or(r)}}function cr(){for(var e=window,t=Z();t instanceof e.HTMLIFrameElement;){try{var n="string"==typeof t.contentWindow.location.href}catch(e){n=!1}if(!n)break;t=Z((e=t.contentWindow).document)}return t}function fr(e){var t=e&&e.nodeName&&e.nodeName.toLowerCase();return t&&("input"===t&&("text"===e.type||"search"===e.type||"tel"===e.type||"url"===e.type||"password"===e.type)||"textarea"===t||"true"===e.contentEditable)}var sr=s&&"documentMode"in document&&11>=document.documentMode,dr=null,pr=null,hr=null,mr=!1;function vr(e,t,n){var r=n.window===n?n.document:9===n.nodeType?n:n.ownerDocument;mr||null==dr||dr!==Z(r)||("selectionStart"in(r=dr)&&fr(r)?r={start:r.selectionStart,end:r.selectionEnd}:r={anchorNode:(r=(r.ownerDocument&&r.ownerDocument.defaultView||window).getSelection()).anchorNode,anchorOffset:r.anchorOffset,focusNode:r.focusNode,focusOffset:r.focusOffset},hr&&ur(hr,r)||(hr=r,0<(r=jr(pr,"onSelect")).length&&(t=new fn("onSelect","select",null,t,n),e.push({event:t,listeners:r}),t.target=dr)))}zt("cancel cancel click click close close contextmenu contextMenu copy copy cut cut auxclick auxClick dblclick doubleClick dragend dragEnd dragstart dragStart drop drop focusin focus focusout blur input input invalid invalid keydown keyDown keypress keyPress keyup keyUp mousedown mouseDown mouseup mouseUp paste paste pause pause play play pointercancel pointerCancel pointerdown pointerDown pointerup pointerUp ratechange rateChange reset reset seeked seeked submit submit touchcancel touchCancel touchend touchEnd touchstart touchStart volumechange volumeChange".split(" "),0),zt("drag drag dragenter dragEnter dragexit dragExit dragleave dragLeave dragover dragOver mousemove mouseMove mouseout mouseOut mouseover mouseOver pointermove pointerMove pointerout pointerOut pointerover pointerOver scroll scroll toggle toggle touchmove touchMove wheel wheel".split(" "),1),zt(Tt,2);for(var gr="change selectionchange textInput compositionstart compositionend compositionupdate".split(" "),yr=0;yr<gr.length;yr++)jt.set(gr[yr],0);f("onMouseEnter",["mouseout","mouseover"]),f("onMouseLeave",["mouseout","mouseover"]),f("onPointerEnter",["pointerout","pointerover"]),f("onPointerLeave",["pointerout","pointerover"]),c("onChange","change click focusin focusout input keydown keyup selectionchange".split(" ")),c("onSelect","focusout contextmenu dragend focusin keydown keyup mousedown mouseup selectionchange".split(" ")),c("onBeforeInput",["compositionend","keypress","textInput","paste"]),c("onCompositionEnd","compositionend focusout keydown keypress keyup mousedown".split(" ")),c("onCompositionStart","compositionstart focusout keydown keypress keyup mousedown".split(" ")),c("onCompositionUpdate","compositionupdate focusout keydown keypress keyup mousedown".split(" "));var br="abort canplay canplaythrough durationchange emptied encrypted ended error loadeddata loadedmetadata loadstart pause play playing progress ratechange seeked seeking stalled suspend timeupdate volumechange waiting".split(" "),_r=new Set("cancel close invalid load scroll toggle".split(" ").concat(br));function wr(e,t,n){var r=e.type||"unknown-event";e.currentTarget=n,function(e,t,n,r,a,l,o,i,c){if(Qe.apply(this,arguments),Be){if(!Be)throw Error(u(198));var f=We;Be=!1,We=null,$e||($e=!0,Ve=f)}}(r,t,void 0,e),e.currentTarget=null}function kr(e,t){t=0!=(4&t);for(var n=0;n<e.length;n++){var r=e[n],a=r.event;r=r.listeners;e:{var l=void 0;if(t)for(var u=r.length-1;0<=u;u--){var o=r[u],i=o.instance,c=o.currentTarget;if(o=o.listener,i!==l&&a.isPropagationStopped())break e;wr(a,o,c),l=i}else for(u=0;u<r.length;u++){if(i=(o=r[u]).instance,c=o.currentTarget,o=o.listener,i!==l&&a.isPropagationStopped())break e;wr(a,o,c),l=i}}}if($e)throw e=Ve,$e=!1,Ve=null,e}function Er(e,t){var n=Jr(t),r=e+"__bubble";n.has(r)||(Cr(t,e,2,!1),n.add(r))}var xr="_reactListening"+Math.random().toString(36).slice(2);function Sr(e){e[xr]||(e[xr]=!0,o.forEach(function(t){_r.has(t)||Nr(t,!1,e,null),Nr(t,!0,e,null)}))}function Nr(e,t,n,r){var a=4<arguments.length&&void 0!==arguments[4]?arguments[4]:0,l=n;if("selectionchange"===e&&9!==n.nodeType&&(l=n.ownerDocument),null!==r&&!t&&_r.has(e)){if("scroll"!==e)return;a|=2,l=r}var u=Jr(l),o=e+"__"+(t?"capture":"bubble");u.has(o)||(t&&(a|=4),Cr(l,e,a,t),u.add(o))}function Cr(e,t,n,r){var a=jt.get(t);switch(void 0===a?2:a){case 0:a=qt;break;case 1:a=Kt;break;default:a=Yt}n=a.bind(null,t,n,e),a=void 0,!Fe||"touchstart"!==t&&"touchmove"!==t&&"wheel"!==t||(a=!0),r?void 0!==a?e.addEventListener(t,n,{capture:!0,passive:a}):e.addEventListener(t,n,!0):void 0!==a?e.addEventListener(t,n,{passive:a}):e.addEventListener(t,n,!1)}function Or(e,t,n,r,a){var l=r;if(0==(1&t)&&0==(2&t)&&null!==r)e:for(;;){if(null===r)return;var u=r.tag;if(3===u||4===u){var o=r.stateNode.containerInfo;if(o===a||8===o.nodeType&&o.parentNode===a)break;if(4===u)for(u=r.return;null!==u;){var i=u.tag;if((3===i||4===i)&&((i=u.stateNode.containerInfo)===a||8===i.nodeType&&i.parentNode===a))return;u=u.return}for(;null!==o;){if(null===(u=Yr(o)))return;if(5===(i=u.tag)||6===i){r=l=u;continue e}o=o.parentNode}}r=r.return}!function(e,t,n){if(Ae)return e(t,n);Ae=!0;try{Re(e,t,n)}finally{Ae=!1,Ie()}}(function(){var r=l,a=xe(n),u=[];e:{var o=Pt.get(e);if(void 0!==o){var i=fn,c=e;switch(e){case"keypress":if(0===tn(n))break e;case"keydown":case"keyup":i=Sn;break;case"focusin":c="focus",i=vn;break;case"focusout":c="blur",i=vn;break;case"beforeblur":case"afterblur":i=vn;break;case"click":if(2===n.button)break e;case"auxclick":case"dblclick":case"mousedown":case"mousemove":case"mouseup":case"mouseout":case"mouseover":case"contextmenu":i=hn;break;case"drag":case"dragend":case"dragenter":case"dragexit":case"dragleave":case"dragover":case"dragstart":case"drop":i=mn;break;case"touchcancel":case"touchend":case"touchmove":case"touchstart":i=Cn;break;case St:case Nt:case Ct:i=gn;break;case Ot:i=On;break;case"scroll":i=dn;break;case"wheel":i=Pn;break;case"copy":case"cut":case"paste":i=yn;break;case"gotpointercapture":case"lostpointercapture":case"pointercancel":case"pointerdown":case"pointermove":case"pointerout":case"pointerover":case"pointerup":i=Nn}var f=0!=(4&t),s=!f&&"scroll"===e,d=f?null!==o?o+"Capture":null:o;f=[];for(var p,h=r;null!==h;){var m=(p=h).stateNode;if(5===p.tag&&null!==m&&(p=m,null!==d&&(null!=(m=De(h,d))&&f.push(Pr(h,m,p)))),s)break;h=h.return}0<f.length&&(o=new i(o,c,null,n,a),u.push({event:o,listeners:f}))}}if(0==(7&t)){if(i="mouseout"===e||"pointerout"===e,(!(o="mouseover"===e||"pointerover"===e)||0!=(16&t)||!(c=n.relatedTarget||n.fromElement)||!Yr(c)&&!c[qr])&&(i||o)&&(o=a.window===a?a:(o=a.ownerDocument)?o.defaultView||o.parentWindow:window,i?(i=r,null!==(c=(c=n.relatedTarget||n.toElement)?Yr(c):null)&&(c!==(s=qe(c))||5!==c.tag&&6!==c.tag)&&(c=null)):(i=null,c=r),i!==c)){if(f=hn,m="onMouseLeave",d="onMouseEnter",h="mouse","pointerout"!==e&&"pointerover"!==e||(f=Nn,m="onPointerLeave",d="onPointerEnter",h="pointer"),s=null==i?o:Xr(i),p=null==c?o:Xr(c),(o=new f(m,h+"leave",i,n,a)).target=s,o.relatedTarget=p,m=null,Yr(a)===r&&((f=new f(d,h+"enter",c,n,a)).target=p,f.relatedTarget=s,m=f),s=m,i&&c)e:{for(d=c,h=0,p=f=i;p;p=Tr(p))h++;for(p=0,m=d;m;m=Tr(m))p++;for(;0<h-p;)f=Tr(f),h--;for(;0<p-h;)d=Tr(d),p--;for(;h--;){if(f===d||null!==d&&f===d.alternate)break e;f=Tr(f),d=Tr(d)}f=null}else f=null;null!==i&&zr(u,o,i,f,!1),null!==c&&null!==s&&zr(u,s,c,f,!0)}if("select"===(i=(o=r?Xr(r):window).nodeName&&o.nodeName.toLowerCase())||"input"===i&&"file"===o.type)var v=qn;else if(Bn(o))if(Kn)v=rr;else{v=tr;var g=er}else(i=o.nodeName)&&"input"===i.toLowerCase()&&("checkbox"===o.type||"radio"===o.type)&&(v=nr);switch(v&&(v=v(e,r))?Wn(u,v,n,a):(g&&g(e,o,r),"focusout"===e&&(g=o._wrapperState)&&g.controlled&&"number"===o.type&&ae(o,"number",o.value)),g=r?Xr(r):window,e){case"focusin":(Bn(g)||"true"===g.contentEditable)&&(dr=g,pr=r,hr=null);break;case"focusout":hr=pr=dr=null;break;case"mousedown":mr=!0;break;case"contextmenu":case"mouseup":case"dragend":mr=!1,vr(u,n,a);break;case"selectionchange":if(sr)break;case"keydown":case"keyup":vr(u,n,a)}var y;if(Tn)e:{switch(e){case"compositionstart":var b="onCompositionStart";break e;case"compositionend":b="onCompositionEnd";break e;case"compositionupdate":b="onCompositionUpdate";break e}b=void 0}else Fn?In(e,n)&&(b="onCompositionEnd"):"keydown"===e&&229===n.keyCode&&(b="onCompositionStart");b&&(Rn&&"ko"!==n.locale&&(Fn||"onCompositionStart"!==b?"onCompositionEnd"===b&&Fn&&(y=en()):(Zt="value"in(Xt=a)?Xt.value:Xt.textContent,Fn=!0)),0<(g=jr(r,b)).length&&(b=new bn(b,e,null,n,a),u.push({event:b,listeners:g}),y?b.data=y:null!==(y=Dn(n))&&(b.data=y))),(y=Ln?function(e,t){switch(e){case"compositionend":return Dn(t);case"keypress":return 32!==t.which?null:(An=!0,Mn);case"textInput":return(e=t.data)===Mn&&An?null:e;default:return null}}(e,n):function(e,t){if(Fn)return"compositionend"===e||!Tn&&In(e,t)?(e=en(),Jt=Zt=Xt=null,Fn=!1,e):null;switch(e){case"paste":return null;case"keypress":if(!(t.ctrlKey||t.altKey||t.metaKey)||t.ctrlKey&&t.altKey){if(t.char&&1<t.char.length)return t.char;if(t.which)return String.fromCharCode(t.which)}return null;case"compositionend":return Rn&&"ko"!==t.locale?null:t.data;default:return null}}(e,n))&&(0<(r=jr(r,"onBeforeInput")).length&&(a=new bn("onBeforeInput","beforeinput",null,n,a),u.push({event:a,listeners:r}),a.data=y))}kr(u,t)})}function Pr(e,t,n){return{instance:e,listener:t,currentTarget:n}}function jr(e,t){for(var n=t+"Capture",r=[];null!==e;){var a=e,l=a.stateNode;5===a.tag&&null!==l&&(a=l,null!=(l=De(e,n))&&r.unshift(Pr(e,l,a)),null!=(l=De(e,t))&&r.push(Pr(e,l,a))),e=e.return}return r}function Tr(e){if(null===e)return null;do{e=e.return}while(e&&5!==e.tag);return e||null}function zr(e,t,n,r,a){for(var l=t._reactName,u=[];null!==n&&n!==r;){var o=n,i=o.alternate,c=o.stateNode;if(null!==i&&i===r)break;5===o.tag&&null!==c&&(o=c,a?null!=(i=De(n,l))&&u.unshift(Pr(n,i,o)):a||null!=(i=De(n,l))&&u.push(Pr(n,i,o))),n=n.return}0!==u.length&&e.push({event:t,listeners:u})}function Lr(){}var Rr=null,Mr=null;function Ar(e,t){switch(e){case"button":case"input":case"select":case"textarea":return!!t.autoFocus}return!1}function Ir(e,t){return"textarea"===e||"option"===e||"noscript"===e||"string"==typeof t.children||"number"==typeof t.children||"object"==typeof t.dangerouslySetInnerHTML&&null!==t.dangerouslySetInnerHTML&&null!=t.dangerouslySetInnerHTML.__html}var Dr="function"==typeof setTimeout?setTimeout:void 0,Fr="function"==typeof clearTimeout?clearTimeout:void 0;function Ur(e){1===e.nodeType?e.textContent="":9===e.nodeType&&(null!=(e=e.body)&&(e.textContent=""))}function Br(e){for(;null!=e;e=e.nextSibling){var t=e.nodeType;if(1===t||3===t)break}return e}function Wr(e){e=e.previousSibling;for(var t=0;e;){if(8===e.nodeType){var n=e.data;if("$"===n||"$!"===n||"$?"===n){if(0===t)return e;t--}else"/$"===n&&t++}e=e.previousSibling}return null}var $r=0;var Vr=Math.random().toString(36).slice(2),Hr="__reactFiber$"+Vr,Qr="__reactProps$"+Vr,qr="__reactContainer$"+Vr,Kr="__reactEvents$"+Vr;function Yr(e){var t=e[Hr];if(t)return t;for(var n=e.parentNode;n;){if(t=n[qr]||n[Hr]){if(n=t.alternate,null!==t.child||null!==n&&null!==n.child)for(e=Wr(e);null!==e;){if(n=e[Hr])return n;e=Wr(e)}return t}n=(e=n).parentNode}return null}function Gr(e){return!(e=e[Hr]||e[qr])||5!==e.tag&&6!==e.tag&&13!==e.tag&&3!==e.tag?null:e}function Xr(e){if(5===e.tag||6===e.tag)return e.stateNode;throw Error(u(33))}function Zr(e){return e[Qr]||null}function Jr(e){var t=e[Kr];return void 0===t&&(t=e[Kr]=new Set),t}var ea=[],ta=-1;function na(e){return{current:e}}function ra(e){0>ta||(e.current=ea[ta],ea[ta]=null,ta--)}function aa(e,t){ea[++ta]=e.current,e.current=t}var la={},ua=na(la),oa=na(!1),ia=la;function ca(e,t){var n=e.type.contextTypes;if(!n)return la;var r=e.stateNode;if(r&&r.__reactInternalMemoizedUnmaskedChildContext===t)return r.__reactInternalMemoizedMaskedChildContext;var a,l={};for(a in n)l[a]=t[a];return r&&((e=e.stateNode).__reactInternalMemoizedUnmaskedChildContext=t,e.__reactInternalMemoizedMaskedChildContext=l),l}function fa(e){return null!=(e=e.childContextTypes)}function sa(){ra(oa),ra(ua)}function da(e,t,n){if(ua.current!==la)throw Error(u(168));aa(ua,t),aa(oa,n)}function pa(e,t,n){var r=e.stateNode;if(e=t.childContextTypes,"function"!=typeof r.getChildContext)return n;for(var l in r=r.getChildContext())if(!(l in e))throw Error(u(108,q(t)||"Unknown",l));return a({},n,r)}function ha(e){return e=(e=e.stateNode)&&e.__reactInternalMemoizedMergedChildContext||la,ia=ua.current,aa(ua,e),aa(oa,oa.current),!0}function ma(e,t,n){var r=e.stateNode;if(!r)throw Error(u(169));n?(e=pa(e,t,ia),r.__reactInternalMemoizedMergedChildContext=e,ra(oa),ra(ua),aa(ua,e)):ra(oa),aa(oa,n)}var va=null,ga=null,ya=l.unstable_runWithPriority,ba=l.unstable_scheduleCallback,_a=l.unstable_cancelCallback,wa=l.unstable_shouldYield,ka=l.unstable_requestPaint,Ea=l.unstable_now,xa=l.unstable_getCurrentPriorityLevel,Sa=l.unstable_ImmediatePriority,Na=l.unstable_UserBlockingPriority,Ca=l.unstable_NormalPriority,Oa=l.unstable_LowPriority,Pa=l.unstable_IdlePriority,ja={},Ta=void 0!==ka?ka:function(){},za=null,La=null,Ra=!1,Ma=Ea(),Aa=1e4>Ma?Ea:function(){return Ea()-Ma};function Ia(){switch(xa()){case Sa:return 99;case Na:return 98;case Ca:return 97;case Oa:return 96;case Pa:return 95;default:throw Error(u(332))}}function Da(e){switch(e){case 99:return Sa;case 98:return Na;case 97:return Ca;case 96:return Oa;case 95:return Pa;default:throw Error(u(332))}}function Fa(e,t){return e=Da(e),ya(e,t)}function Ua(e,t,n){return e=Da(e),ba(e,t,n)}function Ba(){if(null!==La){var e=La;La=null,_a(e)}Wa()}function Wa(){if(!Ra&&null!==za){Ra=!0;var e=0;try{var t=za;Fa(99,function(){for(;e<t.length;e++){var n=t[e];do{n=n(!0)}while(null!==n)}}),za=null}catch(t){throw null!==za&&(za=za.slice(e+1)),ba(Sa,Ba),t}finally{Ra=!1}}}var $a=w.ReactCurrentBatchConfig;function Va(e,t){if(e&&e.defaultProps){for(var n in t=a({},t),e=e.defaultProps)void 0===t[n]&&(t[n]=e[n]);return t}return t}var Ha=na(null),Qa=null,qa=null,Ka=null;function Ya(){Ka=qa=Qa=null}function Ga(e){var t=Ha.current;ra(Ha),e.type._context._currentValue=t}function Xa(e,t){for(;null!==e;){var n=e.alternate;if((e.childLanes&t)===t){if(null===n||(n.childLanes&t)===t)break;n.childLanes|=t}else e.childLanes|=t,null!==n&&(n.childLanes|=t);e=e.return}}function Za(e,t){Qa=e,Ka=qa=null,null!==(e=e.dependencies)&&null!==e.firstContext&&(0!=(e.lanes&t)&&(Ou=!0),e.firstContext=null)}function Ja(e,t){if(Ka!==e&&!1!==t&&0!==t)if("number"==typeof t&&1073741823!==t||(Ka=e,t=1073741823),t={context:e,observedBits:t,next:null},null===qa){if(null===Qa)throw Error(u(308));qa=t,Qa.dependencies={lanes:0,firstContext:t,responders:null}}else qa=qa.next=t;return e._currentValue}var el=!1;function tl(e){e.updateQueue={baseState:e.memoizedState,firstBaseUpdate:null,lastBaseUpdate:null,shared:{pending:null},effects:null}}function nl(e,t){e=e.updateQueue,t.updateQueue===e&&(t.updateQueue={baseState:e.baseState,firstBaseUpdate:e.firstBaseUpdate,lastBaseUpdate:e.lastBaseUpdate,shared:e.shared,effects:e.effects})}function rl(e,t){return{eventTime:e,lane:t,tag:0,payload:null,callback:null,next:null}}function al(e,t){if(null!==(e=e.updateQueue)){var n=(e=e.shared).pending;null===n?t.next=t:(t.next=n.next,n.next=t),e.pending=t}}function ll(e,t){var n=e.updateQueue,r=e.alternate;if(null!==r&&n===(r=r.updateQueue)){var a=null,l=null;if(null!==(n=n.firstBaseUpdate)){do{var u={eventTime:n.eventTime,lane:n.lane,tag:n.tag,payload:n.payload,callback:n.callback,next:null};null===l?a=l=u:l=l.next=u,n=n.next}while(null!==n);null===l?a=l=t:l=l.next=t}else a=l=t;return n={baseState:r.baseState,firstBaseUpdate:a,lastBaseUpdate:l,shared:r.shared,effects:r.effects},void(e.updateQueue=n)}null===(e=n.lastBaseUpdate)?n.firstBaseUpdate=t:e.next=t,n.lastBaseUpdate=t}function ul(e,t,n,r){var l=e.updateQueue;el=!1;var u=l.firstBaseUpdate,o=l.lastBaseUpdate,i=l.shared.pending;if(null!==i){l.shared.pending=null;var c=i,f=c.next;c.next=null,null===o?u=f:o.next=f,o=c;var s=e.alternate;if(null!==s){var d=(s=s.updateQueue).lastBaseUpdate;d!==o&&(null===d?s.firstBaseUpdate=f:d.next=f,s.lastBaseUpdate=c)}}if(null!==u){for(d=l.baseState,o=0,s=f=c=null;;){i=u.lane;var p=u.eventTime;if((r&i)===i){null!==s&&(s=s.next={eventTime:p,lane:0,tag:u.tag,payload:u.payload,callback:u.callback,next:null});e:{var h=e,m=u;switch(i=t,p=n,m.tag){case 1:if("function"==typeof(h=m.payload)){d=h.call(p,d,i);break e}d=h;break e;case 3:h.flags=-4097&h.flags|64;case 0:if(null==(i="function"==typeof(h=m.payload)?h.call(p,d,i):h))break e;d=a({},d,i);break e;case 2:el=!0}}null!==u.callback&&(e.flags|=32,null===(i=l.effects)?l.effects=[u]:i.push(u))}else p={eventTime:p,lane:i,tag:u.tag,payload:u.payload,callback:u.callback,next:null},null===s?(f=s=p,c=d):s=s.next=p,o|=i;if(null===(u=u.next)){if(null===(i=l.shared.pending))break;u=i.next,i.next=null,l.lastBaseUpdate=i,l.shared.pending=null}}null===s&&(c=d),l.baseState=c,l.firstBaseUpdate=f,l.lastBaseUpdate=s,zo|=o,e.lanes=o,e.memoizedState=d}}function ol(e,t,n){if(e=t.effects,t.effects=null,null!==e)for(t=0;t<e.length;t++){var r=e[t],a=r.callback;if(null!==a){if(r.callback=null,r=n,"function"!=typeof a)throw Error(u(191,a));a.call(r)}}}var il=(new r.Component).refs;function cl(e,t,n,r){n=null==(n=n(r,t=e.memoizedState))?t:a({},t,n),e.memoizedState=n,0===e.lanes&&(e.updateQueue.baseState=n)}var fl={isMounted:function(e){return!!(e=e._reactInternals)&&qe(e)===e},enqueueSetState:function(e,t,n){e=e._reactInternals;var r=ri(),a=ai(e),l=rl(r,a);l.payload=t,null!=n&&(l.callback=n),al(e,l),li(e,a,r)},enqueueReplaceState:function(e,t,n){e=e._reactInternals;var r=ri(),a=ai(e),l=rl(r,a);l.tag=1,l.payload=t,null!=n&&(l.callback=n),al(e,l),li(e,a,r)},enqueueForceUpdate:function(e,t){e=e._reactInternals;var n=ri(),r=ai(e),a=rl(n,r);a.tag=2,null!=t&&(a.callback=t),al(e,a),li(e,r,n)}};function sl(e,t,n,r,a,l,u){return"function"==typeof(e=e.stateNode).shouldComponentUpdate?e.shouldComponentUpdate(r,l,u):!t.prototype||!t.prototype.isPureReactComponent||(!ur(n,r)||!ur(a,l))}function dl(e,t,n){var r=!1,a=la,l=t.contextType;return"object"==typeof l&&null!==l?l=Ja(l):(a=fa(t)?ia:ua.current,l=(r=null!=(r=t.contextTypes))?ca(e,a):la),t=new t(n,l),e.memoizedState=null!==t.state&&void 0!==t.state?t.state:null,t.updater=fl,e.stateNode=t,t._reactInternals=e,r&&((e=e.stateNode).__reactInternalMemoizedUnmaskedChildContext=a,e.__reactInternalMemoizedMaskedChildContext=l),t}function pl(e,t,n,r){e=t.state,"function"==typeof t.componentWillReceiveProps&&t.componentWillReceiveProps(n,r),"function"==typeof t.UNSAFE_componentWillReceiveProps&&t.UNSAFE_componentWillReceiveProps(n,r),t.state!==e&&fl.enqueueReplaceState(t,t.state,null)}function hl(e,t,n,r){var a=e.stateNode;a.props=n,a.state=e.memoizedState,a.refs=il,tl(e);var l=t.contextType;"object"==typeof l&&null!==l?a.context=Ja(l):(l=fa(t)?ia:ua.current,a.context=ca(e,l)),ul(e,n,a,r),a.state=e.memoizedState,"function"==typeof(l=t.getDerivedStateFromProps)&&(cl(e,t,l,n),a.state=e.memoizedState),"function"==typeof t.getDerivedStateFromProps||"function"==typeof a.getSnapshotBeforeUpdate||"function"!=typeof a.UNSAFE_componentWillMount&&"function"!=typeof a.componentWillMount||(t=a.state,"function"==typeof a.componentWillMount&&a.componentWillMount(),"function"==typeof a.UNSAFE_componentWillMount&&a.UNSAFE_componentWillMount(),t!==a.state&&fl.enqueueReplaceState(a,a.state,null),ul(e,n,a,r),a.state=e.memoizedState),"function"==typeof a.componentDidMount&&(e.flags|=4)}var ml=Array.isArray;function vl(e,t,n){if(null!==(e=n.ref)&&"function"!=typeof e&&"object"!=typeof e){if(n._owner){if(n=n._owner){if(1!==n.tag)throw Error(u(309));var r=n.stateNode}if(!r)throw Error(u(147,e));var a=""+e;return null!==t&&null!==t.ref&&"function"==typeof t.ref&&t.ref._stringRef===a?t.ref:((t=function(e){var t=r.refs;t===il&&(t=r.refs={}),null===e?delete t[a]:t[a]=e})._stringRef=a,t)}if("string"!=typeof e)throw Error(u(284));if(!n._owner)throw Error(u(290,e))}return e}function gl(e,t){if("textarea"!==e.type)throw Error(u(31,"[object Object]"===Object.prototype.toString.call(t)?"object with keys {"+Object.keys(t).join(", ")+"}":t))}function yl(e){function t(t,n){if(e){var r=t.lastEffect;null!==r?(r.nextEffect=n,t.lastEffect=n):t.firstEffect=t.lastEffect=n,n.nextEffect=null,n.flags=8}}function n(n,r){if(!e)return null;for(;null!==r;)t(n,r),r=r.sibling;return null}function r(e,t){for(e=new Map;null!==t;)null!==t.key?e.set(t.key,t):e.set(t.index,t),t=t.sibling;return e}function a(e,t){return(e=Ri(e,t)).index=0,e.sibling=null,e}function l(t,n,r){return t.index=r,e?null!==(r=t.alternate)?(r=r.index)<n?(t.flags=2,n):r:(t.flags=2,n):n}function o(t){return e&&null===t.alternate&&(t.flags=2),t}function i(e,t,n,r){return null===t||6!==t.tag?((t=Di(n,e.mode,r)).return=e,t):((t=a(t,n)).return=e,t)}function c(e,t,n,r){return null!==t&&t.elementType===n.type?((r=a(t,n.props)).ref=vl(e,t,n),r.return=e,r):((r=Mi(n.type,n.key,n.props,null,e.mode,r)).ref=vl(e,t,n),r.return=e,r)}function f(e,t,n,r){return null===t||4!==t.tag||t.stateNode.containerInfo!==n.containerInfo||t.stateNode.implementation!==n.implementation?((t=Fi(n,e.mode,r)).return=e,t):((t=a(t,n.children||[])).return=e,t)}function s(e,t,n,r,l){return null===t||7!==t.tag?((t=Ai(n,e.mode,r,l)).return=e,t):((t=a(t,n)).return=e,t)}function d(e,t,n){if("string"==typeof t||"number"==typeof t)return(t=Di(""+t,e.mode,n)).return=e,t;if("object"==typeof t&&null!==t){switch(t.$$typeof){case k:return(n=Mi(t.type,t.key,t.props,null,e.mode,n)).ref=vl(e,null,t),n.return=e,n;case E:return(t=Fi(t,e.mode,n)).return=e,t}if(ml(t)||W(t))return(t=Ai(t,e.mode,n,null)).return=e,t;gl(e,t)}return null}function p(e,t,n,r){var a=null!==t?t.key:null;if("string"==typeof n||"number"==typeof n)return null!==a?null:i(e,t,""+n,r);if("object"==typeof n&&null!==n){switch(n.$$typeof){case k:return n.key===a?n.type===x?s(e,t,n.props.children,r,a):c(e,t,n,r):null;case E:return n.key===a?f(e,t,n,r):null}if(ml(n)||W(n))return null!==a?null:s(e,t,n,r,null);gl(e,n)}return null}function h(e,t,n,r,a){if("string"==typeof r||"number"==typeof r)return i(t,e=e.get(n)||null,""+r,a);if("object"==typeof r&&null!==r){switch(r.$$typeof){case k:return e=e.get(null===r.key?n:r.key)||null,r.type===x?s(t,e,r.props.children,a,r.key):c(t,e,r,a);case E:return f(t,e=e.get(null===r.key?n:r.key)||null,r,a)}if(ml(r)||W(r))return s(t,e=e.get(n)||null,r,a,null);gl(t,r)}return null}function m(a,u,o,i){for(var c=null,f=null,s=u,m=u=0,v=null;null!==s&&m<o.length;m++){s.index>m?(v=s,s=null):v=s.sibling;var g=p(a,s,o[m],i);if(null===g){null===s&&(s=v);break}e&&s&&null===g.alternate&&t(a,s),u=l(g,u,m),null===f?c=g:f.sibling=g,f=g,s=v}if(m===o.length)return n(a,s),c;if(null===s){for(;m<o.length;m++)null!==(s=d(a,o[m],i))&&(u=l(s,u,m),null===f?c=s:f.sibling=s,f=s);return c}for(s=r(a,s);m<o.length;m++)null!==(v=h(s,a,m,o[m],i))&&(e&&null!==v.alternate&&s.delete(null===v.key?m:v.key),u=l(v,u,m),null===f?c=v:f.sibling=v,f=v);return e&&s.forEach(function(e){return t(a,e)}),c}function v(a,o,i,c){var f=W(i);if("function"!=typeof f)throw Error(u(150));if(null==(i=f.call(i)))throw Error(u(151));for(var s=f=null,m=o,v=o=0,g=null,y=i.next();null!==m&&!y.done;v++,y=i.next()){m.index>v?(g=m,m=null):g=m.sibling;var b=p(a,m,y.value,c);if(null===b){null===m&&(m=g);break}e&&m&&null===b.alternate&&t(a,m),o=l(b,o,v),null===s?f=b:s.sibling=b,s=b,m=g}if(y.done)return n(a,m),f;if(null===m){for(;!y.done;v++,y=i.next())null!==(y=d(a,y.value,c))&&(o=l(y,o,v),null===s?f=y:s.sibling=y,s=y);return f}for(m=r(a,m);!y.done;v++,y=i.next())null!==(y=h(m,a,v,y.value,c))&&(e&&null!==y.alternate&&m.delete(null===y.key?v:y.key),o=l(y,o,v),null===s?f=y:s.sibling=y,s=y);return e&&m.forEach(function(e){return t(a,e)}),f}return function(e,r,l,i){var c="object"==typeof l&&null!==l&&l.type===x&&null===l.key;c&&(l=l.props.children);var f="object"==typeof l&&null!==l;if(f)switch(l.$$typeof){case k:e:{for(f=l.key,c=r;null!==c;){if(c.key===f){switch(c.tag){case 7:if(l.type===x){n(e,c.sibling),(r=a(c,l.props.children)).return=e,e=r;break e}break;default:if(c.elementType===l.type){n(e,c.sibling),(r=a(c,l.props)).ref=vl(e,c,l),r.return=e,e=r;break e}}n(e,c);break}t(e,c),c=c.sibling}l.type===x?((r=Ai(l.props.children,e.mode,i,l.key)).return=e,e=r):((i=Mi(l.type,l.key,l.props,null,e.mode,i)).ref=vl(e,r,l),i.return=e,e=i)}return o(e);case E:e:{for(c=l.key;null!==r;){if(r.key===c){if(4===r.tag&&r.stateNode.containerInfo===l.containerInfo&&r.stateNode.implementation===l.implementation){n(e,r.sibling),(r=a(r,l.children||[])).return=e,e=r;break e}n(e,r);break}t(e,r),r=r.sibling}(r=Fi(l,e.mode,i)).return=e,e=r}return o(e)}if("string"==typeof l||"number"==typeof l)return l=""+l,null!==r&&6===r.tag?(n(e,r.sibling),(r=a(r,l)).return=e,e=r):(n(e,r),(r=Di(l,e.mode,i)).return=e,e=r),o(e);if(ml(l))return m(e,r,l,i);if(W(l))return v(e,r,l,i);if(f&&gl(e,l),void 0===l&&!c)switch(e.tag){case 1:case 22:case 0:case 11:case 15:throw Error(u(152,q(e.type)||"Component"))}return n(e,r)}}var bl=yl(!0),_l=yl(!1),wl={},kl=na(wl),El=na(wl),xl=na(wl);function Sl(e){if(e===wl)throw Error(u(174));return e}function Nl(e,t){switch(aa(xl,t),aa(El,e),aa(kl,wl),e=t.nodeType){case 9:case 11:t=(t=t.documentElement)?t.namespaceURI:pe(null,"");break;default:t=pe(t=(e=8===e?t.parentNode:t).namespaceURI||null,e=e.tagName)}ra(kl),aa(kl,t)}function Cl(){ra(kl),ra(El),ra(xl)}function Ol(e){Sl(xl.current);var t=Sl(kl.current),n=pe(t,e.type);t!==n&&(aa(El,e),aa(kl,n))}function Pl(e){El.current===e&&(ra(kl),ra(El))}var jl=na(0);function Tl(e){for(var t=e;null!==t;){if(13===t.tag){var n=t.memoizedState;if(null!==n&&(null===(n=n.dehydrated)||"$?"===n.data||"$!"===n.data))return t}else if(19===t.tag&&void 0!==t.memoizedProps.revealOrder){if(0!=(64&t.flags))return t}else if(null!==t.child){t.child.return=t,t=t.child;continue}if(t===e)break;for(;null===t.sibling;){if(null===t.return||t.return===e)return null;t=t.return}t.sibling.return=t.return,t=t.sibling}return null}var zl=null,Ll=null,Rl=!1;function Ml(e,t){var n=zi(5,null,null,0);n.elementType="DELETED",n.type="DELETED",n.stateNode=t,n.return=e,n.flags=8,null!==e.lastEffect?(e.lastEffect.nextEffect=n,e.lastEffect=n):e.firstEffect=e.lastEffect=n}function Al(e,t){switch(e.tag){case 5:var n=e.type;return null!==(t=1!==t.nodeType||n.toLowerCase()!==t.nodeName.toLowerCase()?null:t)&&(e.stateNode=t,!0);case 6:return null!==(t=""===e.pendingProps||3!==t.nodeType?null:t)&&(e.stateNode=t,!0);case 13:default:return!1}}function Il(e){if(Rl){var t=Ll;if(t){var n=t;if(!Al(e,t)){if(!(t=Br(n.nextSibling))||!Al(e,t))return e.flags=-1025&e.flags|2,Rl=!1,void(zl=e);Ml(zl,n)}zl=e,Ll=Br(t.firstChild)}else e.flags=-1025&e.flags|2,Rl=!1,zl=e}}function Dl(e){for(e=e.return;null!==e&&5!==e.tag&&3!==e.tag&&13!==e.tag;)e=e.return;zl=e}function Fl(e){if(e!==zl)return!1;if(!Rl)return Dl(e),Rl=!0,!1;var t=e.type;if(5!==e.tag||"head"!==t&&"body"!==t&&!Ir(t,e.memoizedProps))for(t=Ll;t;)Ml(e,t),t=Br(t.nextSibling);if(Dl(e),13===e.tag){if(!(e=null!==(e=e.memoizedState)?e.dehydrated:null))throw Error(u(317));e:{for(e=e.nextSibling,t=0;e;){if(8===e.nodeType){var n=e.data;if("/$"===n){if(0===t){Ll=Br(e.nextSibling);break e}t--}else"$"!==n&&"$!"!==n&&"$?"!==n||t++}e=e.nextSibling}Ll=null}}else Ll=zl?Br(e.stateNode.nextSibling):null;return!0}function Ul(){Ll=zl=null,Rl=!1}var Bl=[];function Wl(){for(var e=0;e<Bl.length;e++)Bl[e]._workInProgressVersionPrimary=null;Bl.length=0}var $l=w.ReactCurrentDispatcher,Vl=w.ReactCurrentBatchConfig,Hl=0,Ql=null,ql=null,Kl=null,Yl=!1,Gl=!1;function Xl(){throw Error(u(321))}function Zl(e,t){if(null===t)return!1;for(var n=0;n<t.length&&n<e.length;n++)if(!ar(e[n],t[n]))return!1;return!0}function Jl(e,t,n,r,a,l){if(Hl=l,Ql=t,t.memoizedState=null,t.updateQueue=null,t.lanes=0,$l.current=null===e||null===e.memoizedState?xu:Su,e=n(r,a),Gl){l=0;do{if(Gl=!1,!(25>l))throw Error(u(301));l+=1,Kl=ql=null,t.updateQueue=null,$l.current=Nu,e=n(r,a)}while(Gl)}if($l.current=Eu,t=null!==ql&&null!==ql.next,Hl=0,Kl=ql=Ql=null,Yl=!1,t)throw Error(u(300));return e}function eu(){var e={memoizedState:null,baseState:null,baseQueue:null,queue:null,next:null};return null===Kl?Ql.memoizedState=Kl=e:Kl=Kl.next=e,Kl}function tu(){if(null===ql){var e=Ql.alternate;e=null!==e?e.memoizedState:null}else e=ql.next;var t=null===Kl?Ql.memoizedState:Kl.next;if(null!==t)Kl=t,ql=e;else{if(null===e)throw Error(u(310));e={memoizedState:(ql=e).memoizedState,baseState:ql.baseState,baseQueue:ql.baseQueue,queue:ql.queue,next:null},null===Kl?Ql.memoizedState=Kl=e:Kl=Kl.next=e}return Kl}function nu(e,t){return"function"==typeof t?t(e):t}function ru(e){var t=tu(),n=t.queue;if(null===n)throw Error(u(311));n.lastRenderedReducer=e;var r=ql,a=r.baseQueue,l=n.pending;if(null!==l){if(null!==a){var o=a.next;a.next=l.next,l.next=o}r.baseQueue=a=l,n.pending=null}if(null!==a){a=a.next,r=r.baseState;var i=o=l=null,c=a;do{var f=c.lane;if((Hl&f)===f)null!==i&&(i=i.next={lane:0,action:c.action,eagerReducer:c.eagerReducer,eagerState:c.eagerState,next:null}),r=c.eagerReducer===e?c.eagerState:e(r,c.action);else{var s={lane:f,action:c.action,eagerReducer:c.eagerReducer,eagerState:c.eagerState,next:null};null===i?(o=i=s,l=r):i=i.next=s,Ql.lanes|=f,zo|=f}c=c.next}while(null!==c&&c!==a);null===i?l=r:i.next=o,ar(r,t.memoizedState)||(Ou=!0),t.memoizedState=r,t.baseState=l,t.baseQueue=i,n.lastRenderedState=r}return[t.memoizedState,n.dispatch]}function au(e){var t=tu(),n=t.queue;if(null===n)throw Error(u(311));n.lastRenderedReducer=e;var r=n.dispatch,a=n.pending,l=t.memoizedState;if(null!==a){n.pending=null;var o=a=a.next;do{l=e(l,o.action),o=o.next}while(o!==a);ar(l,t.memoizedState)||(Ou=!0),t.memoizedState=l,null===t.baseQueue&&(t.baseState=l),n.lastRenderedState=l}return[l,r]}function lu(e,t,n){var r=t._getVersion;r=r(t._source);var a=t._workInProgressVersionPrimary;if(null!==a?e=a===r:(e=e.mutableReadLanes,(e=(Hl&e)===e)&&(t._workInProgressVersionPrimary=r,Bl.push(t))),e)return n(t._source);throw Bl.push(t),Error(u(350))}function uu(e,t,n,r){var a=xo;if(null===a)throw Error(u(349));var l=t._getVersion,o=l(t._source),i=$l.current,c=i.useState(function(){return lu(a,t,n)}),f=c[1],s=c[0];c=Kl;var d=e.memoizedState,p=d.refs,h=p.getSnapshot,m=d.source;d=d.subscribe;var v=Ql;return e.memoizedState={refs:p,source:t,subscribe:r},i.useEffect(function(){p.getSnapshot=n,p.setSnapshot=f;var e=l(t._source);if(!ar(o,e)){e=n(t._source),ar(s,e)||(f(e),e=ai(v),a.mutableReadLanes|=e&a.pendingLanes),e=a.mutableReadLanes,a.entangledLanes|=e;for(var r=a.entanglements,u=e;0<u;){var i=31-Bt(u),c=1<<i;r[i]|=e,u&=~c}}},[n,t,r]),i.useEffect(function(){return r(t._source,function(){var e=p.getSnapshot,n=p.setSnapshot;try{n(e(t._source));var r=ai(v);a.mutableReadLanes|=r&a.pendingLanes}catch(e){n(function(){throw e})}})},[t,r]),ar(h,n)&&ar(m,t)&&ar(d,r)||((e={pending:null,dispatch:null,lastRenderedReducer:nu,lastRenderedState:s}).dispatch=f=ku.bind(null,Ql,e),c.queue=e,c.baseQueue=null,s=lu(a,t,n),c.memoizedState=c.baseState=s),s}function ou(e,t,n){return uu(tu(),e,t,n)}function iu(e){var t=eu();return"function"==typeof e&&(e=e()),t.memoizedState=t.baseState=e,e=(e=t.queue={pending:null,dispatch:null,lastRenderedReducer:nu,lastRenderedState:e}).dispatch=ku.bind(null,Ql,e),[t.memoizedState,e]}function cu(e,t,n,r){return e={tag:e,create:t,destroy:n,deps:r,next:null},null===(t=Ql.updateQueue)?(t={lastEffect:null},Ql.updateQueue=t,t.lastEffect=e.next=e):null===(n=t.lastEffect)?t.lastEffect=e.next=e:(r=n.next,n.next=e,e.next=r,t.lastEffect=e),e}function fu(e){return e={current:e},eu().memoizedState=e}function su(){return tu().memoizedState}function du(e,t,n,r){var a=eu();Ql.flags|=e,a.memoizedState=cu(1|t,n,void 0,void 0===r?null:r)}function pu(e,t,n,r){var a=tu();r=void 0===r?null:r;var l=void 0;if(null!==ql){var u=ql.memoizedState;if(l=u.destroy,null!==r&&Zl(r,u.deps))return void cu(t,n,l,r)}Ql.flags|=e,a.memoizedState=cu(1|t,n,l,r)}function hu(e,t){return du(516,4,e,t)}function mu(e,t){return pu(516,4,e,t)}function vu(e,t){return pu(4,2,e,t)}function gu(e,t){return"function"==typeof t?(e=e(),t(e),function(){t(null)}):null!=t?(e=e(),t.current=e,function(){t.current=null}):void 0}function yu(e,t,n){return n=null!=n?n.concat([e]):null,pu(4,2,gu.bind(null,t,e),n)}function bu(){}function _u(e,t){var n=tu();t=void 0===t?null:t;var r=n.memoizedState;return null!==r&&null!==t&&Zl(t,r[1])?r[0]:(n.memoizedState=[e,t],e)}function wu(e,t){var n=tu();t=void 0===t?null:t;var r=n.memoizedState;return null!==r&&null!==t&&Zl(t,r[1])?r[0]:(e=e(),n.memoizedState=[e,t],e)}function ku(e,t,n){var r=ri(),a=ai(e),l={lane:a,action:n,eagerReducer:null,eagerState:null,next:null},u=t.pending;if(null===u?l.next=l:(l.next=u.next,u.next=l),t.pending=l,u=e.alternate,e===Ql||null!==u&&u===Ql)Gl=Yl=!0;else{if(0===e.lanes&&(null===u||0===u.lanes)&&null!==(u=t.lastRenderedReducer))try{var o=t.lastRenderedState,i=u(o,n);if(l.eagerReducer=u,l.eagerState=i,ar(i,o))return}catch(e){}li(e,a,r)}}var Eu={readContext:Ja,useCallback:Xl,useContext:Xl,useEffect:Xl,useImperativeHandle:Xl,useLayoutEffect:Xl,useMemo:Xl,useReducer:Xl,useRef:Xl,useState:Xl,useDebugValue:Xl,useDeferredValue:Xl,useTransition:Xl,useMutableSource:Xl,useOpaqueIdentifier:Xl,unstable_isNewReconciler:!1},xu={readContext:Ja,useCallback:function(e,t){return eu().memoizedState=[e,void 0===t?null:t],e},useContext:Ja,useEffect:hu,useImperativeHandle:function(e,t,n){return n=null!=n?n.concat([e]):null,du(4,2,gu.bind(null,t,e),n)},useLayoutEffect:function(e,t){return du(4,2,e,t)},useMemo:function(e,t){var n=eu();return t=void 0===t?null:t,e=e(),n.memoizedState=[e,t],e},useReducer:function(e,t,n){var r=eu();return t=void 0!==n?n(t):t,r.memoizedState=r.baseState=t,e=(e=r.queue={pending:null,dispatch:null,lastRenderedReducer:e,lastRenderedState:t}).dispatch=ku.bind(null,Ql,e),[r.memoizedState,e]},useRef:fu,useState:iu,useDebugValue:bu,useDeferredValue:function(e){var t=iu(e),n=t[0],r=t[1];return hu(function(){var t=Vl.transition;Vl.transition=1;try{r(e)}finally{Vl.transition=t}},[e]),n},useTransition:function(){var e=iu(!1),t=e[0];return fu(e=function(e,t){var n=Ia();Fa(98>n?98:n,function(){e(!0)}),Fa(97<n?97:n,function(){var n=Vl.transition;Vl.transition=1;try{e(!1),t()}finally{Vl.transition=n}})}.bind(null,e[1])),[e,t]},useMutableSource:function(e,t,n){var r=eu();return r.memoizedState={refs:{getSnapshot:t,setSnapshot:null},source:e,subscribe:n},uu(r,e,t,n)},useOpaqueIdentifier:function(){if(Rl){var e=!1,t=function(e){return{$$typeof:M,toString:e,valueOf:e}}(function(){throw e||(e=!0,n("r:"+($r++).toString(36))),Error(u(355))}),n=iu(t)[1];return 0==(2&Ql.mode)&&(Ql.flags|=516,cu(5,function(){n("r:"+($r++).toString(36))},void 0,null)),t}return iu(t="r:"+($r++).toString(36)),t},unstable_isNewReconciler:!1},Su={readContext:Ja,useCallback:_u,useContext:Ja,useEffect:mu,useImperativeHandle:yu,useLayoutEffect:vu,useMemo:wu,useReducer:ru,useRef:su,useState:function(){return ru(nu)},useDebugValue:bu,useDeferredValue:function(e){var t=ru(nu),n=t[0],r=t[1];return mu(function(){var t=Vl.transition;Vl.transition=1;try{r(e)}finally{Vl.transition=t}},[e]),n},useTransition:function(){var e=ru(nu)[0];return[su().current,e]},useMutableSource:ou,useOpaqueIdentifier:function(){return ru(nu)[0]},unstable_isNewReconciler:!1},Nu={readContext:Ja,useCallback:_u,useContext:Ja,useEffect:mu,useImperativeHandle:yu,useLayoutEffect:vu,useMemo:wu,useReducer:au,useRef:su,useState:function(){return au(nu)},useDebugValue:bu,useDeferredValue:function(e){var t=au(nu),n=t[0],r=t[1];return mu(function(){var t=Vl.transition;Vl.transition=1;try{r(e)}finally{Vl.transition=t}},[e]),n},useTransition:function(){var e=au(nu)[0];return[su().current,e]},useMutableSource:ou,useOpaqueIdentifier:function(){return au(nu)[0]},unstable_isNewReconciler:!1},Cu=w.ReactCurrentOwner,Ou=!1;function Pu(e,t,n,r){t.child=null===e?_l(t,null,n,r):bl(t,e.child,n,r)}function ju(e,t,n,r,a){n=n.render;var l=t.ref;return Za(t,a),r=Jl(e,t,n,r,l,a),null===e||Ou?(t.flags|=1,Pu(e,t,r,a),t.child):(t.updateQueue=e.updateQueue,t.flags&=-517,e.lanes&=~a,Xu(e,t,a))}function Tu(e,t,n,r,a,l){if(null===e){var u=n.type;return"function"!=typeof u||Li(u)||void 0!==u.defaultProps||null!==n.compare||void 0!==n.defaultProps?((e=Mi(n.type,null,r,t,t.mode,l)).ref=t.ref,e.return=t,t.child=e):(t.tag=15,t.type=u,zu(e,t,u,r,a,l))}return u=e.child,0==(a&l)&&(a=u.memoizedProps,(n=null!==(n=n.compare)?n:ur)(a,r)&&e.ref===t.ref)?Xu(e,t,l):(t.flags|=1,(e=Ri(u,r)).ref=t.ref,e.return=t,t.child=e)}function zu(e,t,n,r,a,l){if(null!==e&&ur(e.memoizedProps,r)&&e.ref===t.ref){if(Ou=!1,0==(l&a))return t.lanes=e.lanes,Xu(e,t,l);0!=(16384&e.flags)&&(Ou=!0)}return Mu(e,t,n,r,l)}function Lu(e,t,n){var r=t.pendingProps,a=r.children,l=null!==e?e.memoizedState:null;if("hidden"===r.mode||"unstable-defer-without-hiding"===r.mode)if(0==(4&t.mode))t.memoizedState={baseLanes:0},di(t,n);else{if(0==(1073741824&n))return e=null!==l?l.baseLanes|n:n,t.lanes=t.childLanes=1073741824,t.memoizedState={baseLanes:e},di(t,e),null;t.memoizedState={baseLanes:0},di(t,null!==l?l.baseLanes:n)}else null!==l?(r=l.baseLanes|n,t.memoizedState=null):r=n,di(t,r);return Pu(e,t,a,n),t.child}function Ru(e,t){var n=t.ref;(null===e&&null!==n||null!==e&&e.ref!==n)&&(t.flags|=128)}function Mu(e,t,n,r,a){var l=fa(n)?ia:ua.current;return l=ca(t,l),Za(t,a),n=Jl(e,t,n,r,l,a),null===e||Ou?(t.flags|=1,Pu(e,t,n,a),t.child):(t.updateQueue=e.updateQueue,t.flags&=-517,e.lanes&=~a,Xu(e,t,a))}function Au(e,t,n,r,a){if(fa(n)){var l=!0;ha(t)}else l=!1;if(Za(t,a),null===t.stateNode)null!==e&&(e.alternate=null,t.alternate=null,t.flags|=2),dl(t,n,r),hl(t,n,r,a),r=!0;else if(null===e){var u=t.stateNode,o=t.memoizedProps;u.props=o;var i=u.context,c=n.contextType;"object"==typeof c&&null!==c?c=Ja(c):c=ca(t,c=fa(n)?ia:ua.current);var f=n.getDerivedStateFromProps,s="function"==typeof f||"function"==typeof u.getSnapshotBeforeUpdate;s||"function"!=typeof u.UNSAFE_componentWillReceiveProps&&"function"!=typeof u.componentWillReceiveProps||(o!==r||i!==c)&&pl(t,u,r,c),el=!1;var d=t.memoizedState;u.state=d,ul(t,r,u,a),i=t.memoizedState,o!==r||d!==i||oa.current||el?("function"==typeof f&&(cl(t,n,f,r),i=t.memoizedState),(o=el||sl(t,n,o,r,d,i,c))?(s||"function"!=typeof u.UNSAFE_componentWillMount&&"function"!=typeof u.componentWillMount||("function"==typeof u.componentWillMount&&u.componentWillMount(),"function"==typeof u.UNSAFE_componentWillMount&&u.UNSAFE_componentWillMount()),"function"==typeof u.componentDidMount&&(t.flags|=4)):("function"==typeof u.componentDidMount&&(t.flags|=4),t.memoizedProps=r,t.memoizedState=i),u.props=r,u.state=i,u.context=c,r=o):("function"==typeof u.componentDidMount&&(t.flags|=4),r=!1)}else{u=t.stateNode,nl(e,t),o=t.memoizedProps,c=t.type===t.elementType?o:Va(t.type,o),u.props=c,s=t.pendingProps,d=u.context,"object"==typeof(i=n.contextType)&&null!==i?i=Ja(i):i=ca(t,i=fa(n)?ia:ua.current);var p=n.getDerivedStateFromProps;(f="function"==typeof p||"function"==typeof u.getSnapshotBeforeUpdate)||"function"!=typeof u.UNSAFE_componentWillReceiveProps&&"function"!=typeof u.componentWillReceiveProps||(o!==s||d!==i)&&pl(t,u,r,i),el=!1,d=t.memoizedState,u.state=d,ul(t,r,u,a);var h=t.memoizedState;o!==s||d!==h||oa.current||el?("function"==typeof p&&(cl(t,n,p,r),h=t.memoizedState),(c=el||sl(t,n,c,r,d,h,i))?(f||"function"!=typeof u.UNSAFE_componentWillUpdate&&"function"!=typeof u.componentWillUpdate||("function"==typeof u.componentWillUpdate&&u.componentWillUpdate(r,h,i),"function"==typeof u.UNSAFE_componentWillUpdate&&u.UNSAFE_componentWillUpdate(r,h,i)),"function"==typeof u.componentDidUpdate&&(t.flags|=4),"function"==typeof u.getSnapshotBeforeUpdate&&(t.flags|=256)):("function"!=typeof u.componentDidUpdate||o===e.memoizedProps&&d===e.memoizedState||(t.flags|=4),"function"!=typeof u.getSnapshotBeforeUpdate||o===e.memoizedProps&&d===e.memoizedState||(t.flags|=256),t.memoizedProps=r,t.memoizedState=h),u.props=r,u.state=h,u.context=i,r=c):("function"!=typeof u.componentDidUpdate||o===e.memoizedProps&&d===e.memoizedState||(t.flags|=4),"function"!=typeof u.getSnapshotBeforeUpdate||o===e.memoizedProps&&d===e.memoizedState||(t.flags|=256),r=!1)}return Iu(e,t,n,r,l,a)}function Iu(e,t,n,r,a,l){Ru(e,t);var u=0!=(64&t.flags);if(!r&&!u)return a&&ma(t,n,!1),Xu(e,t,l);r=t.stateNode,Cu.current=t;var o=u&&"function"!=typeof n.getDerivedStateFromError?null:r.render();return t.flags|=1,null!==e&&u?(t.child=bl(t,e.child,null,l),t.child=bl(t,null,o,l)):Pu(e,t,o,l),t.memoizedState=r.state,a&&ma(t,n,!0),t.child}function Du(e){var t=e.stateNode;t.pendingContext?da(0,t.pendingContext,t.pendingContext!==t.context):t.context&&da(0,t.context,!1),Nl(e,t.containerInfo)}var Fu,Uu,Bu,Wu,$u={dehydrated:null,retryLane:0};function Vu(e,t,n){var r,a=t.pendingProps,l=jl.current,u=!1;return(r=0!=(64&t.flags))||(r=(null===e||null!==e.memoizedState)&&0!=(2&l)),r?(u=!0,t.flags&=-65):null!==e&&null===e.memoizedState||void 0===a.fallback||!0===a.unstable_avoidThisFallback||(l|=1),aa(jl,1&l),null===e?(void 0!==a.fallback&&Il(t),e=a.children,l=a.fallback,u?(e=Hu(t,e,l,n),t.child.memoizedState={baseLanes:n},t.memoizedState=$u,e):"number"==typeof a.unstable_expectedLoadTime?(e=Hu(t,e,l,n),t.child.memoizedState={baseLanes:n},t.memoizedState=$u,t.lanes=33554432,e):((n=Ii({mode:"visible",children:e},t.mode,n,null)).return=t,t.child=n)):(e.memoizedState,u?(a=qu(e,t,a.children,a.fallback,n),u=t.child,l=e.child.memoizedState,u.memoizedState=null===l?{baseLanes:n}:{baseLanes:l.baseLanes|n},u.childLanes=e.childLanes&~n,t.memoizedState=$u,a):(n=Qu(e,t,a.children,n),t.memoizedState=null,n))}function Hu(e,t,n,r){var a=e.mode,l=e.child;return t={mode:"hidden",children:t},0==(2&a)&&null!==l?(l.childLanes=0,l.pendingProps=t):l=Ii(t,a,0,null),n=Ai(n,a,r,null),l.return=e,n.return=e,l.sibling=n,e.child=l,n}function Qu(e,t,n,r){var a=e.child;return e=a.sibling,n=Ri(a,{mode:"visible",children:n}),0==(2&t.mode)&&(n.lanes=r),n.return=t,n.sibling=null,null!==e&&(e.nextEffect=null,e.flags=8,t.firstEffect=t.lastEffect=e),t.child=n}function qu(e,t,n,r,a){var l=t.mode,u=e.child;e=u.sibling;var o={mode:"hidden",children:n};return 0==(2&l)&&t.child!==u?((n=t.child).childLanes=0,n.pendingProps=o,null!==(u=n.lastEffect)?(t.firstEffect=n.firstEffect,t.lastEffect=u,u.nextEffect=null):t.firstEffect=t.lastEffect=null):n=Ri(u,o),null!==e?r=Ri(e,r):(r=Ai(r,l,a,null)).flags|=2,r.return=t,n.return=t,n.sibling=r,t.child=n,r}function Ku(e,t){e.lanes|=t;var n=e.alternate;null!==n&&(n.lanes|=t),Xa(e.return,t)}function Yu(e,t,n,r,a,l){var u=e.memoizedState;null===u?e.memoizedState={isBackwards:t,rendering:null,renderingStartTime:0,last:r,tail:n,tailMode:a,lastEffect:l}:(u.isBackwards=t,u.rendering=null,u.renderingStartTime=0,u.last=r,u.tail=n,u.tailMode=a,u.lastEffect=l)}function Gu(e,t,n){var r=t.pendingProps,a=r.revealOrder,l=r.tail;if(Pu(e,t,r.children,n),0!=(2&(r=jl.current)))r=1&r|2,t.flags|=64;else{if(null!==e&&0!=(64&e.flags))e:for(e=t.child;null!==e;){if(13===e.tag)null!==e.memoizedState&&Ku(e,n);else if(19===e.tag)Ku(e,n);else if(null!==e.child){e.child.return=e,e=e.child;continue}if(e===t)break e;for(;null===e.sibling;){if(null===e.return||e.return===t)break e;e=e.return}e.sibling.return=e.return,e=e.sibling}r&=1}if(aa(jl,r),0==(2&t.mode))t.memoizedState=null;else switch(a){case"forwards":for(n=t.child,a=null;null!==n;)null!==(e=n.alternate)&&null===Tl(e)&&(a=n),n=n.sibling;null===(n=a)?(a=t.child,t.child=null):(a=n.sibling,n.sibling=null),Yu(t,!1,a,n,l,t.lastEffect);break;case"backwards":for(n=null,a=t.child,t.child=null;null!==a;){if(null!==(e=a.alternate)&&null===Tl(e)){t.child=a;break}e=a.sibling,a.sibling=n,n=a,a=e}Yu(t,!0,n,null,l,t.lastEffect);break;case"together":Yu(t,!1,null,null,void 0,t.lastEffect);break;default:t.memoizedState=null}return t.child}function Xu(e,t,n){if(null!==e&&(t.dependencies=e.dependencies),zo|=t.lanes,0!=(n&t.childLanes)){if(null!==e&&t.child!==e.child)throw Error(u(153));if(null!==t.child){for(n=Ri(e=t.child,e.pendingProps),t.child=n,n.return=t;null!==e.sibling;)e=e.sibling,(n=n.sibling=Ri(e,e.pendingProps)).return=t;n.sibling=null}return t.child}return null}function Zu(e,t){if(!Rl)switch(e.tailMode){case"hidden":t=e.tail;for(var n=null;null!==t;)null!==t.alternate&&(n=t),t=t.sibling;null===n?e.tail=null:n.sibling=null;break;case"collapsed":n=e.tail;for(var r=null;null!==n;)null!==n.alternate&&(r=n),n=n.sibling;null===r?t||null===e.tail?e.tail=null:e.tail.sibling=null:r.sibling=null}}function Ju(e,t,n){var r=t.pendingProps;switch(t.tag){case 2:case 16:case 15:case 0:case 11:case 7:case 8:case 12:case 9:case 14:return null;case 1:return fa(t.type)&&sa(),null;case 3:return Cl(),ra(oa),ra(ua),Wl(),(r=t.stateNode).pendingContext&&(r.context=r.pendingContext,r.pendingContext=null),null!==e&&null!==e.child||(Fl(t)?t.flags|=4:r.hydrate||(t.flags|=256)),Uu(t),null;case 5:Pl(t);var l=Sl(xl.current);if(n=t.type,null!==e&&null!=t.stateNode)Bu(e,t,n,r,l),e.ref!==t.ref&&(t.flags|=128);else{if(!r){if(null===t.stateNode)throw Error(u(166));return null}if(e=Sl(kl.current),Fl(t)){r=t.stateNode,n=t.type;var o=t.memoizedProps;switch(r[Hr]=t,r[Qr]=o,n){case"dialog":Er("cancel",r),Er("close",r);break;case"iframe":case"object":case"embed":Er("load",r);break;case"video":case"audio":for(e=0;e<br.length;e++)Er(br[e],r);break;case"source":Er("error",r);break;case"img":case"image":case"link":Er("error",r),Er("load",r);break;case"details":Er("toggle",r);break;case"input":ee(r,o),Er("invalid",r);break;case"select":r._wrapperState={wasMultiple:!!o.multiple},Er("invalid",r);break;case"textarea":ie(r,o),Er("invalid",r)}for(var c in ke(n,o),e=null,o)o.hasOwnProperty(c)&&(l=o[c],"children"===c?"string"==typeof l?r.textContent!==l&&(e=["children",l]):"number"==typeof l&&r.textContent!==""+l&&(e=["children",""+l]):i.hasOwnProperty(c)&&null!=l&&"onScroll"===c&&Er("scroll",r));switch(n){case"input":G(r),re(r,o,!0);break;case"textarea":G(r),fe(r);break;case"select":case"option":break;default:"function"==typeof o.onClick&&(r.onclick=Lr)}r=e,t.updateQueue=r,null!==r&&(t.flags|=4)}else{switch(c=9===l.nodeType?l:l.ownerDocument,e===se.html&&(e=de(n)),e===se.html?"script"===n?((e=c.createElement("div")).innerHTML="<script><\/script>",e=e.removeChild(e.firstChild)):"string"==typeof r.is?e=c.createElement(n,{is:r.is}):(e=c.createElement(n),"select"===n&&(c=e,r.multiple?c.multiple=!0:r.size&&(c.size=r.size))):e=c.createElementNS(e,n),e[Hr]=t,e[Qr]=r,Fu(e,t,!1,!1),t.stateNode=e,c=Ee(n,r),n){case"dialog":Er("cancel",e),Er("close",e),l=r;break;case"iframe":case"object":case"embed":Er("load",e),l=r;break;case"video":case"audio":for(l=0;l<br.length;l++)Er(br[l],e);l=r;break;case"source":Er("error",e),l=r;break;case"img":case"image":case"link":Er("error",e),Er("load",e),l=r;break;case"details":Er("toggle",e),l=r;break;case"input":ee(e,r),l=J(e,r),Er("invalid",e);break;case"option":l=le(e,r);break;case"select":e._wrapperState={wasMultiple:!!r.multiple},l=a({},r,{value:void 0}),Er("invalid",e);break;case"textarea":ie(e,r),l=oe(e,r),Er("invalid",e);break;default:l=r}ke(n,l);var f=l;for(o in f)if(f.hasOwnProperty(o)){var s=f[o];"style"===o?_e(e,s):"dangerouslySetInnerHTML"===o?null!=(s=s?s.__html:void 0)&&me(e,s):"children"===o?"string"==typeof s?("textarea"!==n||""!==s)&&ve(e,s):"number"==typeof s&&ve(e,""+s):"suppressContentEditableWarning"!==o&&"suppressHydrationWarning"!==o&&"autoFocus"!==o&&(i.hasOwnProperty(o)?null!=s&&"onScroll"===o&&Er("scroll",e):null!=s&&_(e,o,s,c))}switch(n){case"input":G(e),re(e,r,!1);break;case"textarea":G(e),fe(e);break;case"option":null!=r.value&&e.setAttribute("value",""+K(r.value));break;case"select":e.multiple=!!r.multiple,null!=(o=r.value)?ue(e,!!r.multiple,o,!1):null!=r.defaultValue&&ue(e,!!r.multiple,r.defaultValue,!0);break;default:"function"==typeof l.onClick&&(e.onclick=Lr)}Ar(n,r)&&(t.flags|=4)}null!==t.ref&&(t.flags|=128)}return null;case 6:if(e&&null!=t.stateNode)Wu(e,t,e.memoizedProps,r);else{if("string"!=typeof r&&null===t.stateNode)throw Error(u(166));n=Sl(xl.current),Sl(kl.current),Fl(t)?(r=t.stateNode,n=t.memoizedProps,r[Hr]=t,r.nodeValue!==n&&(t.flags|=4)):((r=(9===n.nodeType?n:n.ownerDocument).createTextNode(r))[Hr]=t,t.stateNode=r)}return null;case 13:return ra(jl),r=t.memoizedState,0!=(64&t.flags)?(t.lanes=n,t):(r=null!==r,n=!1,null===e?void 0!==t.memoizedProps.fallback&&Fl(t):n=null!==e.memoizedState,r&&!n&&0!=(2&t.mode)&&(null===e&&!0!==t.memoizedProps.unstable_avoidThisFallback||0!=(1&jl.current)?0===Po&&(Po=3):(0!==Po&&3!==Po||(Po=4),null===xo||0==(134217727&zo)&&0==(134217727&Lo)||ii(xo,No))),(r||n)&&(t.flags|=4),null);case 4:return Cl(),Uu(t),null===e&&Sr(t.stateNode.containerInfo),null;case 10:return Ga(t),null;case 17:return fa(t.type)&&sa(),null;case 19:if(ra(jl),null===(r=t.memoizedState))return null;if(o=0!=(64&t.flags),null===(c=r.rendering))if(o)Zu(r,!1);else{if(0!==Po||null!==e&&0!=(64&e.flags))for(e=t.child;null!==e;){if(null!==(c=Tl(e))){for(t.flags|=64,Zu(r,!1),null!==(o=c.updateQueue)&&(t.updateQueue=o,t.flags|=4),null===r.lastEffect&&(t.firstEffect=null),t.lastEffect=r.lastEffect,r=n,n=t.child;null!==n;)e=r,(o=n).flags&=2,o.nextEffect=null,o.firstEffect=null,o.lastEffect=null,null===(c=o.alternate)?(o.childLanes=0,o.lanes=e,o.child=null,o.memoizedProps=null,o.memoizedState=null,o.updateQueue=null,o.dependencies=null,o.stateNode=null):(o.childLanes=c.childLanes,o.lanes=c.lanes,o.child=c.child,o.memoizedProps=c.memoizedProps,o.memoizedState=c.memoizedState,o.updateQueue=c.updateQueue,o.type=c.type,e=c.dependencies,o.dependencies=null===e?null:{lanes:e.lanes,firstContext:e.firstContext}),n=n.sibling;return aa(jl,1&jl.current|2),t.child}e=e.sibling}null!==r.tail&&Aa()>Io&&(t.flags|=64,o=!0,Zu(r,!1),t.lanes=33554432)}else{if(!o)if(null!==(e=Tl(c))){if(t.flags|=64,o=!0,null!==(n=e.updateQueue)&&(t.updateQueue=n,t.flags|=4),Zu(r,!0),null===r.tail&&"hidden"===r.tailMode&&!c.alternate&&!Rl)return null!==(t=t.lastEffect=r.lastEffect)&&(t.nextEffect=null),null}else 2*Aa()-r.renderingStartTime>Io&&1073741824!==n&&(t.flags|=64,o=!0,Zu(r,!1),t.lanes=33554432);r.isBackwards?(c.sibling=t.child,t.child=c):(null!==(n=r.last)?n.sibling=c:t.child=c,r.last=c)}return null!==r.tail?(n=r.tail,r.rendering=n,r.tail=n.sibling,r.lastEffect=t.lastEffect,r.renderingStartTime=Aa(),n.sibling=null,t=jl.current,aa(jl,o?1&t|2:1&t),n):null;case 23:case 24:return pi(),null!==e&&null!==e.memoizedState!=(null!==t.memoizedState)&&"unstable-defer-without-hiding"!==r.mode&&(t.flags|=4),null}throw Error(u(156,t.tag))}function eo(e){switch(e.tag){case 1:fa(e.type)&&sa();var t=e.flags;return 4096&t?(e.flags=-4097&t|64,e):null;case 3:if(Cl(),ra(oa),ra(ua),Wl(),0!=(64&(t=e.flags)))throw Error(u(285));return e.flags=-4097&t|64,e;case 5:return Pl(e),null;case 13:return ra(jl),4096&(t=e.flags)?(e.flags=-4097&t|64,e):null;case 19:return ra(jl),null;case 4:return Cl(),null;case 10:return Ga(e),null;case 23:case 24:return pi(),null;default:return null}}function to(e,t){try{var n="",r=t;do{n+=Q(r),r=r.return}while(r);var a=n}catch(e){a="\nError generating stack: "+e.message+"\n"+e.stack}return{value:e,source:t,stack:a}}function no(e,t){try{console.error(t.value)}catch(e){setTimeout(function(){throw e})}}Fu=function(e,t){for(var n=t.child;null!==n;){if(5===n.tag||6===n.tag)e.appendChild(n.stateNode);else if(4!==n.tag&&null!==n.child){n.child.return=n,n=n.child;continue}if(n===t)break;for(;null===n.sibling;){if(null===n.return||n.return===t)return;n=n.return}n.sibling.return=n.return,n=n.sibling}},Uu=function(){},Bu=function(e,t,n,r){var l=e.memoizedProps;if(l!==r){e=t.stateNode,Sl(kl.current);var u,o=null;switch(n){case"input":l=J(e,l),r=J(e,r),o=[];break;case"option":l=le(e,l),r=le(e,r),o=[];break;case"select":l=a({},l,{value:void 0}),r=a({},r,{value:void 0}),o=[];break;case"textarea":l=oe(e,l),r=oe(e,r),o=[];break;default:"function"!=typeof l.onClick&&"function"==typeof r.onClick&&(e.onclick=Lr)}for(s in ke(n,r),n=null,l)if(!r.hasOwnProperty(s)&&l.hasOwnProperty(s)&&null!=l[s])if("style"===s){var c=l[s];for(u in c)c.hasOwnProperty(u)&&(n||(n={}),n[u]="")}else"dangerouslySetInnerHTML"!==s&&"children"!==s&&"suppressContentEditableWarning"!==s&&"suppressHydrationWarning"!==s&&"autoFocus"!==s&&(i.hasOwnProperty(s)?o||(o=[]):(o=o||[]).push(s,null));for(s in r){var f=r[s];if(c=null!=l?l[s]:void 0,r.hasOwnProperty(s)&&f!==c&&(null!=f||null!=c))if("style"===s)if(c){for(u in c)!c.hasOwnProperty(u)||f&&f.hasOwnProperty(u)||(n||(n={}),n[u]="");for(u in f)f.hasOwnProperty(u)&&c[u]!==f[u]&&(n||(n={}),n[u]=f[u])}else n||(o||(o=[]),o.push(s,n)),n=f;else"dangerouslySetInnerHTML"===s?(f=f?f.__html:void 0,c=c?c.__html:void 0,null!=f&&c!==f&&(o=o||[]).push(s,f)):"children"===s?"string"!=typeof f&&"number"!=typeof f||(o=o||[]).push(s,""+f):"suppressContentEditableWarning"!==s&&"suppressHydrationWarning"!==s&&(i.hasOwnProperty(s)?(null!=f&&"onScroll"===s&&Er("scroll",e),o||c===f||(o=[])):"object"==typeof f&&null!==f&&f.$$typeof===M?f.toString():(o=o||[]).push(s,f))}n&&(o=o||[]).push("style",n);var s=o;(t.updateQueue=s)&&(t.flags|=4)}},Wu=function(e,t,n,r){n!==r&&(t.flags|=4)};var ro="function"==typeof WeakMap?WeakMap:Map;function ao(e,t,n){(n=rl(-1,n)).tag=3,n.payload={element:null};var r=t.value;return n.callback=function(){Bo||(Bo=!0,Wo=r),no(0,t)},n}function lo(e,t,n){(n=rl(-1,n)).tag=3;var r=e.type.getDerivedStateFromError;if("function"==typeof r){var a=t.value;n.payload=function(){return no(0,t),r(a)}}var l=e.stateNode;return null!==l&&"function"==typeof l.componentDidCatch&&(n.callback=function(){"function"!=typeof r&&(null===$o?$o=new Set([this]):$o.add(this),no(0,t));var e=t.stack;this.componentDidCatch(t.value,{componentStack:null!==e?e:""})}),n}var uo="function"==typeof WeakSet?WeakSet:Set;function oo(e){var t=e.ref;if(null!==t)if("function"==typeof t)try{t(null)}catch(t){Pi(e,t)}else t.current=null}function io(e,t){switch(t.tag){case 0:case 11:case 15:case 22:return;case 1:if(256&t.flags&&null!==e){var n=e.memoizedProps,r=e.memoizedState;t=(e=t.stateNode).getSnapshotBeforeUpdate(t.elementType===t.type?n:Va(t.type,n),r),e.__reactInternalSnapshotBeforeUpdate=t}return;case 3:return void(256&t.flags&&Ur(t.stateNode.containerInfo));case 5:case 6:case 4:case 17:return}throw Error(u(163))}function co(e,t,n){switch(n.tag){case 0:case 11:case 15:case 22:if(null!==(t=null!==(t=n.updateQueue)?t.lastEffect:null)){e=t=t.next;do{if(3==(3&e.tag)){var r=e.create;e.destroy=r()}e=e.next}while(e!==t)}if(null!==(t=null!==(t=n.updateQueue)?t.lastEffect:null)){e=t=t.next;do{var a=e;r=a.next,0!=(4&(a=a.tag))&&0!=(1&a)&&(Ni(n,e),Si(n,e)),e=r}while(e!==t)}return;case 1:return e=n.stateNode,4&n.flags&&(null===t?e.componentDidMount():(r=n.elementType===n.type?t.memoizedProps:Va(n.type,t.memoizedProps),e.componentDidUpdate(r,t.memoizedState,e.__reactInternalSnapshotBeforeUpdate))),void(null!==(t=n.updateQueue)&&ol(n,t,e));case 3:if(null!==(t=n.updateQueue)){if(e=null,null!==n.child)switch(n.child.tag){case 5:e=n.child.stateNode;break;case 1:e=n.child.stateNode}ol(n,t,e)}return;case 5:return e=n.stateNode,void(null===t&&4&n.flags&&Ar(n.type,n.memoizedProps)&&e.focus());case 6:case 4:case 12:return;case 13:return void(null===n.memoizedState&&(n=n.alternate,null!==n&&(n=n.memoizedState,null!==n&&(n=n.dehydrated,null!==n&&bt(n)))));case 19:case 17:case 20:case 21:case 23:case 24:return}throw Error(u(163))}function fo(e,t){for(var n=e;;){if(5===n.tag){var r=n.stateNode;if(t)"function"==typeof(r=r.style).setProperty?r.setProperty("display","none","important"):r.display="none";else{r=n.stateNode;var a=n.memoizedProps.style;a=null!=a&&a.hasOwnProperty("display")?a.display:null,r.style.display=be("display",a)}}else if(6===n.tag)n.stateNode.nodeValue=t?"":n.memoizedProps;else if((23!==n.tag&&24!==n.tag||null===n.memoizedState||n===e)&&null!==n.child){n.child.return=n,n=n.child;continue}if(n===e)break;for(;null===n.sibling;){if(null===n.return||n.return===e)return;n=n.return}n.sibling.return=n.return,n=n.sibling}}function so(e,t){if(ga&&"function"==typeof ga.onCommitFiberUnmount)try{ga.onCommitFiberUnmount(va,t)}catch(e){}switch(t.tag){case 0:case 11:case 14:case 15:case 22:if(null!==(e=t.updateQueue)&&null!==(e=e.lastEffect)){var n=e=e.next;do{var r=n,a=r.destroy;if(r=r.tag,void 0!==a)if(0!=(4&r))Ni(t,n);else{r=t;try{a()}catch(e){Pi(r,e)}}n=n.next}while(n!==e)}break;case 1:if(oo(t),"function"==typeof(e=t.stateNode).componentWillUnmount)try{e.props=t.memoizedProps,e.state=t.memoizedState,e.componentWillUnmount()}catch(e){Pi(t,e)}break;case 5:oo(t);break;case 4:vo(e,t)}}function po(e){e.alternate=null,e.child=null,e.dependencies=null,e.firstEffect=null,e.lastEffect=null,e.memoizedProps=null,e.memoizedState=null,e.pendingProps=null,e.return=null,e.updateQueue=null}function ho(e){return 5===e.tag||3===e.tag||4===e.tag}function mo(e){e:{for(var t=e.return;null!==t;){if(ho(t))break e;t=t.return}throw Error(u(160))}var n=t;switch(t=n.stateNode,n.tag){case 5:var r=!1;break;case 3:case 4:t=t.containerInfo,r=!0;break;default:throw Error(u(161))}16&n.flags&&(ve(t,""),n.flags&=-17);e:t:for(n=e;;){for(;null===n.sibling;){if(null===n.return||ho(n.return)){n=null;break e}n=n.return}for(n.sibling.return=n.return,n=n.sibling;5!==n.tag&&6!==n.tag&&18!==n.tag;){if(2&n.flags)continue t;if(null===n.child||4===n.tag)continue t;n.child.return=n,n=n.child}if(!(2&n.flags)){n=n.stateNode;break e}}r?function e(t,n,r){var a=t.tag,l=5===a||6===a;if(l)t=l?t.stateNode:t.stateNode.instance,n?8===r.nodeType?r.parentNode.insertBefore(t,n):r.insertBefore(t,n):(8===r.nodeType?(n=r.parentNode,n.insertBefore(t,r)):(n=r,n.appendChild(t)),r=r._reactRootContainer,null!=r||null!==n.onclick||(n.onclick=Lr));else if(4!==a&&(t=t.child,null!==t))for(e(t,n,r),t=t.sibling;null!==t;)e(t,n,r),t=t.sibling}(e,n,t):function e(t,n,r){var a=t.tag,l=5===a||6===a;if(l)t=l?t.stateNode:t.stateNode.instance,n?r.insertBefore(t,n):r.appendChild(t);else if(4!==a&&(t=t.child,null!==t))for(e(t,n,r),t=t.sibling;null!==t;)e(t,n,r),t=t.sibling}(e,n,t)}function vo(e,t){for(var n,r,a=t,l=!1;;){if(!l){l=a.return;e:for(;;){if(null===l)throw Error(u(160));switch(n=l.stateNode,l.tag){case 5:r=!1;break e;case 3:case 4:n=n.containerInfo,r=!0;break e}l=l.return}l=!0}if(5===a.tag||6===a.tag){e:for(var o=e,i=a,c=i;;)if(so(o,c),null!==c.child&&4!==c.tag)c.child.return=c,c=c.child;else{if(c===i)break e;for(;null===c.sibling;){if(null===c.return||c.return===i)break e;c=c.return}c.sibling.return=c.return,c=c.sibling}r?(o=n,i=a.stateNode,8===o.nodeType?o.parentNode.removeChild(i):o.removeChild(i)):n.removeChild(a.stateNode)}else if(4===a.tag){if(null!==a.child){n=a.stateNode.containerInfo,r=!0,a.child.return=a,a=a.child;continue}}else if(so(e,a),null!==a.child){a.child.return=a,a=a.child;continue}if(a===t)break;for(;null===a.sibling;){if(null===a.return||a.return===t)return;4===(a=a.return).tag&&(l=!1)}a.sibling.return=a.return,a=a.sibling}}function go(e,t){switch(t.tag){case 0:case 11:case 14:case 15:case 22:var n=t.updateQueue;if(null!==(n=null!==n?n.lastEffect:null)){var r=n=n.next;do{3==(3&r.tag)&&(e=r.destroy,r.destroy=void 0,void 0!==e&&e()),r=r.next}while(r!==n)}return;case 1:return;case 5:if(null!=(n=t.stateNode)){r=t.memoizedProps;var a=null!==e?e.memoizedProps:r;e=t.type;var l=t.updateQueue;if(t.updateQueue=null,null!==l){for(n[Qr]=r,"input"===e&&"radio"===r.type&&null!=r.name&&te(n,r),Ee(e,a),t=Ee(e,r),a=0;a<l.length;a+=2){var o=l[a],i=l[a+1];"style"===o?_e(n,i):"dangerouslySetInnerHTML"===o?me(n,i):"children"===o?ve(n,i):_(n,o,i,t)}switch(e){case"input":ne(n,r);break;case"textarea":ce(n,r);break;case"select":e=n._wrapperState.wasMultiple,n._wrapperState.wasMultiple=!!r.multiple,null!=(l=r.value)?ue(n,!!r.multiple,l,!1):e!==!!r.multiple&&(null!=r.defaultValue?ue(n,!!r.multiple,r.defaultValue,!0):ue(n,!!r.multiple,r.multiple?[]:"",!1))}}}return;case 6:if(null===t.stateNode)throw Error(u(162));return void(t.stateNode.nodeValue=t.memoizedProps);case 3:return void((n=t.stateNode).hydrate&&(n.hydrate=!1,bt(n.containerInfo)));case 12:return;case 13:return null!==t.memoizedState&&(Ao=Aa(),fo(t.child,!0)),void yo(t);case 19:return void yo(t);case 17:return;case 23:case 24:return void fo(t,null!==t.memoizedState)}throw Error(u(163))}function yo(e){var t=e.updateQueue;if(null!==t){e.updateQueue=null;var n=e.stateNode;null===n&&(n=e.stateNode=new uo),t.forEach(function(t){var r=function(e,t){var n=e.stateNode;null!==n&&n.delete(t),0==(t=0)&&(0==(2&(t=e.mode))?t=1:0==(4&t)?t=99===Ia()?1:2:(0===Jo&&(Jo=To),0===(t=Dt(62914560&~Jo))&&(t=4194304))),n=ri(),null!==(e=ui(e,t))&&(Ut(e,t,n),oi(e,n))}.bind(null,e,t);n.has(t)||(n.add(t),t.then(r,r))})}}function bo(e,t){return null!==e&&(null===(e=e.memoizedState)||null!==e.dehydrated)&&(null!==(t=t.memoizedState)&&null===t.dehydrated)}var _o=Math.ceil,wo=w.ReactCurrentDispatcher,ko=w.ReactCurrentOwner,Eo=0,xo=null,So=null,No=0,Co=0,Oo=na(0),Po=0,jo=null,To=0,zo=0,Lo=0,Ro=0,Mo=null,Ao=0,Io=1/0;function Do(){Io=Aa()+500}var Fo,Uo=null,Bo=!1,Wo=null,$o=null,Vo=!1,Ho=null,Qo=90,qo=[],Ko=[],Yo=null,Go=0,Xo=null,Zo=-1,Jo=0,ei=0,ti=null,ni=!1;function ri(){return 0!=(48&Eo)?Aa():-1!==Zo?Zo:Zo=Aa()}function ai(e){if(0==(2&(e=e.mode)))return 1;if(0==(4&e))return 99===Ia()?1:2;if(0===Jo&&(Jo=To),0!==$a.transition){0!==ei&&(ei=null!==Mo?Mo.pendingLanes:0),e=Jo;var t=4186112&~ei;return 0===(t&=-t)&&(0===(t=(e=4186112&~e)&-e)&&(t=8192)),t}return e=Ia(),0!=(4&Eo)&&98===e?e=It(12,Jo):e=It(e=function(e){switch(e){case 99:return 15;case 98:return 10;case 97:case 96:return 8;case 95:return 2;default:return 0}}(e),Jo),e}function li(e,t,n){if(50<Go)throw Go=0,Xo=null,Error(u(185));if(null===(e=ui(e,t)))return null;Ut(e,t,n),e===xo&&(Lo|=t,4===Po&&ii(e,No));var r=Ia();1===t?0!=(8&Eo)&&0==(48&Eo)?ci(e):(oi(e,n),0===Eo&&(Do(),Ba())):(0==(4&Eo)||98!==r&&99!==r||(null===Yo?Yo=new Set([e]):Yo.add(e)),oi(e,n)),Mo=e}function ui(e,t){e.lanes|=t;var n=e.alternate;for(null!==n&&(n.lanes|=t),n=e,e=e.return;null!==e;)e.childLanes|=t,null!==(n=e.alternate)&&(n.childLanes|=t),n=e,e=e.return;return 3===n.tag?n.stateNode:null}function oi(e,t){for(var n=e.callbackNode,r=e.suspendedLanes,a=e.pingedLanes,l=e.expirationTimes,o=e.pendingLanes;0<o;){var i=31-Bt(o),c=1<<i,f=l[i];if(-1===f){if(0==(c&r)||0!=(c&a)){f=t,Rt(c);var s=Lt;l[i]=10<=s?f+250:6<=s?f+5e3:-1}}else f<=t&&(e.expiredLanes|=c);o&=~c}if(r=Mt(e,e===xo?No:0),t=Lt,0===r)null!==n&&(n!==ja&&_a(n),e.callbackNode=null,e.callbackPriority=0);else{if(null!==n){if(e.callbackPriority===t)return;n!==ja&&_a(n)}15===t?(n=ci.bind(null,e),null===za?(za=[n],La=ba(Sa,Wa)):za.push(n),n=ja):14===t?n=Ua(99,ci.bind(null,e)):n=Ua(n=function(e){switch(e){case 15:case 14:return 99;case 13:case 12:case 11:case 10:return 98;case 9:case 8:case 7:case 6:case 4:case 5:return 97;case 3:case 2:case 1:return 95;case 0:return 90;default:throw Error(u(358,e))}}(t),function e(t){Zo=-1;ei=Jo=0;if(0!=(48&Eo))throw Error(u(327));var n=t.callbackNode;if(xi()&&t.callbackNode!==n)return null;var r=Mt(t,t===xo?No:0);if(0===r)return null;var a=r;var l=Eo;Eo|=16;var o=vi();xo===t&&No===a||(Do(),hi(t,a));for(;;)try{bi();break}catch(e){mi(t,e)}Ya();wo.current=o;Eo=l;null!==So?a=0:(xo=null,No=0,a=Po);if(0!=(To&Lo))hi(t,0);else if(0!==a){if(2===a&&(Eo|=64,t.hydrate&&(t.hydrate=!1,Ur(t.containerInfo)),0!==(r=At(t))&&(a=gi(t,r))),1===a)throw n=jo,hi(t,0),ii(t,r),oi(t,Aa()),n;switch(t.finishedWork=t.current.alternate,t.finishedLanes=r,a){case 0:case 1:throw Error(u(345));case 2:ki(t);break;case 3:if(ii(t,r),(62914560&r)===r&&10<(a=Ao+500-Aa())){if(0!==Mt(t,0))break;if(((l=t.suspendedLanes)&r)!==r){ri(),t.pingedLanes|=t.suspendedLanes&l;break}t.timeoutHandle=Dr(ki.bind(null,t),a);break}ki(t);break;case 4:if(ii(t,r),(4186112&r)===r)break;for(a=t.eventTimes,l=-1;0<r;){var i=31-Bt(r);o=1<<i,(i=a[i])>l&&(l=i),r&=~o}if(r=l,10<(r=(120>(r=Aa()-r)?120:480>r?480:1080>r?1080:1920>r?1920:3e3>r?3e3:4320>r?4320:1960*_o(r/1960))-r)){t.timeoutHandle=Dr(ki.bind(null,t),r);break}ki(t);break;case 5:ki(t);break;default:throw Error(u(329))}}oi(t,Aa());return t.callbackNode===n?e.bind(null,t):null}.bind(null,e)),e.callbackPriority=t,e.callbackNode=n}}function ii(e,t){for(t&=~Ro,t&=~Lo,e.suspendedLanes|=t,e.pingedLanes&=~t,e=e.expirationTimes;0<t;){var n=31-Bt(t),r=1<<n;e[n]=-1,t&=~r}}function ci(e){if(0!=(48&Eo))throw Error(u(327));if(xi(),e===xo&&0!=(e.expiredLanes&No)){var t=No,n=gi(e,t);0!=(To&Lo)&&(n=gi(e,t=Mt(e,t)))}else n=gi(e,t=Mt(e,0));if(0!==e.tag&&2===n&&(Eo|=64,e.hydrate&&(e.hydrate=!1,Ur(e.containerInfo)),0!==(t=At(e))&&(n=gi(e,t))),1===n)throw n=jo,hi(e,0),ii(e,t),oi(e,Aa()),n;return e.finishedWork=e.current.alternate,e.finishedLanes=t,ki(e),oi(e,Aa()),null}function fi(e,t){var n=Eo;Eo|=1;try{return e(t)}finally{0===(Eo=n)&&(Do(),Ba())}}function si(e,t){var n=Eo;Eo&=-2,Eo|=8;try{return e(t)}finally{0===(Eo=n)&&(Do(),Ba())}}function di(e,t){aa(Oo,Co),Co|=t,To|=t}function pi(){Co=Oo.current,ra(Oo)}function hi(e,t){e.finishedWork=null,e.finishedLanes=0;var n=e.timeoutHandle;if(-1!==n&&(e.timeoutHandle=-1,Fr(n)),null!==So)for(n=So.return;null!==n;){var r=n;switch(r.tag){case 1:null!=(r=r.type.childContextTypes)&&sa();break;case 3:Cl(),ra(oa),ra(ua),Wl();break;case 5:Pl(r);break;case 4:Cl();break;case 13:case 19:ra(jl);break;case 10:Ga(r);break;case 23:case 24:pi()}n=n.return}xo=e,So=Ri(e.current,null),No=Co=To=t,Po=0,jo=null,Ro=Lo=zo=0}function mi(e,t){for(;;){var n=So;try{if(Ya(),$l.current=Eu,Yl){for(var r=Ql.memoizedState;null!==r;){var a=r.queue;null!==a&&(a.pending=null),r=r.next}Yl=!1}if(Hl=0,Kl=ql=Ql=null,Gl=!1,ko.current=null,null===n||null===n.return){Po=1,jo=t,So=null;break}e:{var l=e,u=n.return,o=n,i=t;if(t=No,o.flags|=2048,o.firstEffect=o.lastEffect=null,null!==i&&"object"==typeof i&&"function"==typeof i.then){var c=i;if(0==(2&o.mode)){var f=o.alternate;f?(o.updateQueue=f.updateQueue,o.memoizedState=f.memoizedState,o.lanes=f.lanes):(o.updateQueue=null,o.memoizedState=null)}var s=0!=(1&jl.current),d=u;do{var p;if(p=13===d.tag){var h=d.memoizedState;if(null!==h)p=null!==h.dehydrated;else{var m=d.memoizedProps;p=void 0!==m.fallback&&(!0!==m.unstable_avoidThisFallback||!s)}}if(p){var v=d.updateQueue;if(null===v){var g=new Set;g.add(c),d.updateQueue=g}else v.add(c);if(0==(2&d.mode)){if(d.flags|=64,o.flags|=16384,o.flags&=-2981,1===o.tag)if(null===o.alternate)o.tag=17;else{var y=rl(-1,1);y.tag=2,al(o,y)}o.lanes|=1;break e}i=void 0,o=t;var b=l.pingCache;if(null===b?(b=l.pingCache=new ro,i=new Set,b.set(c,i)):void 0===(i=b.get(c))&&(i=new Set,b.set(c,i)),!i.has(o)){i.add(o);var _=ji.bind(null,l,c,o);c.then(_,_)}d.flags|=4096,d.lanes=t;break e}d=d.return}while(null!==d);i=Error((q(o.type)||"A React component")+" suspended while rendering, but no fallback UI was specified.\n\nAdd a <Suspense fallback=...> component higher in the tree to provide a loading indicator or placeholder to display.")}5!==Po&&(Po=2),i=to(i,o),d=u;do{switch(d.tag){case 3:l=i,d.flags|=4096,t&=-t,d.lanes|=t,ll(d,ao(0,l,t));break e;case 1:l=i;var w=d.type,k=d.stateNode;if(0==(64&d.flags)&&("function"==typeof w.getDerivedStateFromError||null!==k&&"function"==typeof k.componentDidCatch&&(null===$o||!$o.has(k)))){d.flags|=4096,t&=-t,d.lanes|=t,ll(d,lo(d,l,t));break e}}d=d.return}while(null!==d)}wi(n)}catch(e){t=e,So===n&&null!==n&&(So=n=n.return);continue}break}}function vi(){var e=wo.current;return wo.current=Eu,null===e?Eu:e}function gi(e,t){var n=Eo;Eo|=16;var r=vi();for(xo===e&&No===t||hi(e,t);;)try{yi();break}catch(t){mi(e,t)}if(Ya(),Eo=n,wo.current=r,null!==So)throw Error(u(261));return xo=null,No=0,Po}function yi(){for(;null!==So;)_i(So)}function bi(){for(;null!==So&&!wa();)_i(So)}function _i(e){var t=Fo(e.alternate,e,Co);e.memoizedProps=e.pendingProps,null===t?wi(e):So=t,ko.current=null}function wi(e){var t=e;do{var n=t.alternate;if(e=t.return,0==(2048&t.flags)){if(null!==(n=Ju(n,t,Co)))return void(So=n);if(24!==(n=t).tag&&23!==n.tag||null===n.memoizedState||0!=(1073741824&Co)||0==(4&n.mode)){for(var r=0,a=n.child;null!==a;)r|=a.lanes|a.childLanes,a=a.sibling;n.childLanes=r}null!==e&&0==(2048&e.flags)&&(null===e.firstEffect&&(e.firstEffect=t.firstEffect),null!==t.lastEffect&&(null!==e.lastEffect&&(e.lastEffect.nextEffect=t.firstEffect),e.lastEffect=t.lastEffect),1<t.flags&&(null!==e.lastEffect?e.lastEffect.nextEffect=t:e.firstEffect=t,e.lastEffect=t))}else{if(null!==(n=eo(t)))return n.flags&=2047,void(So=n);null!==e&&(e.firstEffect=e.lastEffect=null,e.flags|=2048)}if(null!==(t=t.sibling))return void(So=t);So=t=e}while(null!==t);0===Po&&(Po=5)}function ki(e){var t=Ia();return Fa(99,function(e,t){do{xi()}while(null!==Ho);if(0!=(48&Eo))throw Error(u(327));var n=e.finishedWork;if(null===n)return null;if(e.finishedWork=null,e.finishedLanes=0,n===e.current)throw Error(u(177));e.callbackNode=null;var r=n.lanes|n.childLanes,a=r,l=e.pendingLanes&~a;e.pendingLanes=a,e.suspendedLanes=0,e.pingedLanes=0,e.expiredLanes&=a,e.mutableReadLanes&=a,e.entangledLanes&=a,a=e.entanglements;for(var o=e.eventTimes,i=e.expirationTimes;0<l;){var c=31-Bt(l),f=1<<c;a[c]=0,o[c]=-1,i[c]=-1,l&=~f}if(null!==Yo&&0==(24&r)&&Yo.has(e)&&Yo.delete(e),e===xo&&(So=xo=null,No=0),1<n.flags?null!==n.lastEffect?(n.lastEffect.nextEffect=n,r=n.firstEffect):r=n:r=n.firstEffect,null!==r){if(a=Eo,Eo|=32,ko.current=null,Rr=Qt,fr(o=cr())){if("selectionStart"in o)i={start:o.selectionStart,end:o.selectionEnd};else e:if(i=(i=o.ownerDocument)&&i.defaultView||window,(f=i.getSelection&&i.getSelection())&&0!==f.rangeCount){i=f.anchorNode,l=f.anchorOffset,c=f.focusNode,f=f.focusOffset;try{i.nodeType,c.nodeType}catch(e){i=null;break e}var s=0,d=-1,p=-1,h=0,m=0,v=o,g=null;t:for(;;){for(var y;v!==i||0!==l&&3!==v.nodeType||(d=s+l),v!==c||0!==f&&3!==v.nodeType||(p=s+f),3===v.nodeType&&(s+=v.nodeValue.length),null!==(y=v.firstChild);)g=v,v=y;for(;;){if(v===o)break t;if(g===i&&++h===l&&(d=s),g===c&&++m===f&&(p=s),null!==(y=v.nextSibling))break;g=(v=g).parentNode}v=y}i=-1===d||-1===p?null:{start:d,end:p}}else i=null;i=i||{start:0,end:0}}else i=null;Mr={focusedElem:o,selectionRange:i},Qt=!1,ti=null,ni=!1,Uo=r;do{try{Ei()}catch(e){if(null===Uo)throw Error(u(330));Pi(Uo,e),Uo=Uo.nextEffect}}while(null!==Uo);ti=null,Uo=r;do{try{for(o=e;null!==Uo;){var b=Uo.flags;if(16&b&&ve(Uo.stateNode,""),128&b){var _=Uo.alternate;if(null!==_){var w=_.ref;null!==w&&("function"==typeof w?w(null):w.current=null)}}switch(1038&b){case 2:mo(Uo),Uo.flags&=-3;break;case 6:mo(Uo),Uo.flags&=-3,go(Uo.alternate,Uo);break;case 1024:Uo.flags&=-1025;break;case 1028:Uo.flags&=-1025,go(Uo.alternate,Uo);break;case 4:go(Uo.alternate,Uo);break;case 8:vo(o,i=Uo);var k=i.alternate;po(i),null!==k&&po(k)}Uo=Uo.nextEffect}}catch(e){if(null===Uo)throw Error(u(330));Pi(Uo,e),Uo=Uo.nextEffect}}while(null!==Uo);if(w=Mr,_=cr(),b=w.focusedElem,o=w.selectionRange,_!==b&&b&&b.ownerDocument&&function e(t,n){return!(!t||!n)&&(t===n||(!t||3!==t.nodeType)&&(n&&3===n.nodeType?e(t,n.parentNode):"contains"in t?t.contains(n):!!t.compareDocumentPosition&&!!(16&t.compareDocumentPosition(n))))}(b.ownerDocument.documentElement,b)){null!==o&&fr(b)&&(_=o.start,void 0===(w=o.end)&&(w=_),"selectionStart"in b?(b.selectionStart=_,b.selectionEnd=Math.min(w,b.value.length)):(w=(_=b.ownerDocument||document)&&_.defaultView||window).getSelection&&(w=w.getSelection(),i=b.textContent.length,k=Math.min(o.start,i),o=void 0===o.end?k:Math.min(o.end,i),!w.extend&&k>o&&(i=o,o=k,k=i),i=ir(b,k),l=ir(b,o),i&&l&&(1!==w.rangeCount||w.anchorNode!==i.node||w.anchorOffset!==i.offset||w.focusNode!==l.node||w.focusOffset!==l.offset)&&((_=_.createRange()).setStart(i.node,i.offset),w.removeAllRanges(),k>o?(w.addRange(_),w.extend(l.node,l.offset)):(_.setEnd(l.node,l.offset),w.addRange(_))))),_=[];for(w=b;w=w.parentNode;)1===w.nodeType&&_.push({element:w,left:w.scrollLeft,top:w.scrollTop});for("function"==typeof b.focus&&b.focus(),b=0;b<_.length;b++)(w=_[b]).element.scrollLeft=w.left,w.element.scrollTop=w.top}Qt=!!Rr,Mr=Rr=null,e.current=n,Uo=r;do{try{for(b=e;null!==Uo;){var E=Uo.flags;if(36&E&&co(b,Uo.alternate,Uo),128&E){_=void 0;var x=Uo.ref;if(null!==x){var S=Uo.stateNode;switch(Uo.tag){case 5:_=S;break;default:_=S}"function"==typeof x?x(_):x.current=_}}Uo=Uo.nextEffect}}catch(e){if(null===Uo)throw Error(u(330));Pi(Uo,e),Uo=Uo.nextEffect}}while(null!==Uo);Uo=null,Ta(),Eo=a}else e.current=n;if(Vo)Vo=!1,Ho=e,Qo=t;else for(Uo=r;null!==Uo;)t=Uo.nextEffect,Uo.nextEffect=null,8&Uo.flags&&((E=Uo).sibling=null,E.stateNode=null),Uo=t;if(0===(r=e.pendingLanes)&&($o=null),1===r?e===Xo?Go++:(Go=0,Xo=e):Go=0,n=n.stateNode,ga&&"function"==typeof ga.onCommitFiberRoot)try{ga.onCommitFiberRoot(va,n,void 0,64==(64&n.current.flags))}catch(e){}if(oi(e,Aa()),Bo)throw Bo=!1,e=Wo,Wo=null,e;return 0!=(8&Eo)?null:(Ba(),null)}.bind(null,e,t)),null}function Ei(){for(;null!==Uo;){var e=Uo.alternate;ni||null===ti||(0!=(8&Uo.flags)?Xe(Uo,ti)&&(ni=!0):13===Uo.tag&&bo(e,Uo)&&Xe(Uo,ti)&&(ni=!0));var t=Uo.flags;0!=(256&t)&&io(e,Uo),0==(512&t)||Vo||(Vo=!0,Ua(97,function(){return xi(),null})),Uo=Uo.nextEffect}}function xi(){if(90!==Qo){var e=97<Qo?97:Qo;return Qo=90,Fa(e,Ci)}return!1}function Si(e,t){qo.push(t,e),Vo||(Vo=!0,Ua(97,function(){return xi(),null}))}function Ni(e,t){Ko.push(t,e),Vo||(Vo=!0,Ua(97,function(){return xi(),null}))}function Ci(){if(null===Ho)return!1;var e=Ho;if(Ho=null,0!=(48&Eo))throw Error(u(331));var t=Eo;Eo|=32;var n=Ko;Ko=[];for(var r=0;r<n.length;r+=2){var a=n[r],l=n[r+1],o=a.destroy;if(a.destroy=void 0,"function"==typeof o)try{o()}catch(e){if(null===l)throw Error(u(330));Pi(l,e)}}for(n=qo,qo=[],r=0;r<n.length;r+=2){a=n[r],l=n[r+1];try{var i=a.create;a.destroy=i()}catch(e){if(null===l)throw Error(u(330));Pi(l,e)}}for(i=e.current.firstEffect;null!==i;)e=i.nextEffect,i.nextEffect=null,8&i.flags&&(i.sibling=null,i.stateNode=null),i=e;return Eo=t,Ba(),!0}function Oi(e,t,n){al(e,t=ao(0,t=to(n,t),1)),t=ri(),null!==(e=ui(e,1))&&(Ut(e,1,t),oi(e,t))}function Pi(e,t){if(3===e.tag)Oi(e,e,t);else for(var n=e.return;null!==n;){if(3===n.tag){Oi(n,e,t);break}if(1===n.tag){var r=n.stateNode;if("function"==typeof n.type.getDerivedStateFromError||"function"==typeof r.componentDidCatch&&(null===$o||!$o.has(r))){var a=lo(n,e=to(t,e),1);if(al(n,a),a=ri(),null!==(n=ui(n,1)))Ut(n,1,a),oi(n,a);else if("function"==typeof r.componentDidCatch&&(null===$o||!$o.has(r)))try{r.componentDidCatch(t,e)}catch(e){}break}}n=n.return}}function ji(e,t,n){var r=e.pingCache;null!==r&&r.delete(t),t=ri(),e.pingedLanes|=e.suspendedLanes&n,xo===e&&(No&n)===n&&(4===Po||3===Po&&(62914560&No)===No&&500>Aa()-Ao?hi(e,0):Ro|=n),oi(e,t)}function Ti(e,t,n,r){this.tag=e,this.key=n,this.sibling=this.child=this.return=this.stateNode=this.type=this.elementType=null,this.index=0,this.ref=null,this.pendingProps=t,this.dependencies=this.memoizedState=this.updateQueue=this.memoizedProps=null,this.mode=r,this.flags=0,this.lastEffect=this.firstEffect=this.nextEffect=null,this.childLanes=this.lanes=0,this.alternate=null}function zi(e,t,n,r){return new Ti(e,t,n,r)}function Li(e){return!(!(e=e.prototype)||!e.isReactComponent)}function Ri(e,t){var n=e.alternate;return null===n?((n=zi(e.tag,t,e.key,e.mode)).elementType=e.elementType,n.type=e.type,n.stateNode=e.stateNode,n.alternate=e,e.alternate=n):(n.pendingProps=t,n.type=e.type,n.flags=0,n.nextEffect=null,n.firstEffect=null,n.lastEffect=null),n.childLanes=e.childLanes,n.lanes=e.lanes,n.child=e.child,n.memoizedProps=e.memoizedProps,n.memoizedState=e.memoizedState,n.updateQueue=e.updateQueue,t=e.dependencies,n.dependencies=null===t?null:{lanes:t.lanes,firstContext:t.firstContext},n.sibling=e.sibling,n.index=e.index,n.ref=e.ref,n}function Mi(e,t,n,r,a,l){var o=2;if(r=e,"function"==typeof e)Li(e)&&(o=1);else if("string"==typeof e)o=5;else e:switch(e){case x:return Ai(n.children,a,l,t);case A:o=8,a|=16;break;case S:o=8,a|=1;break;case N:return(e=zi(12,n,t,8|a)).elementType=N,e.type=N,e.lanes=l,e;case j:return(e=zi(13,n,t,a)).type=j,e.elementType=j,e.lanes=l,e;case T:return(e=zi(19,n,t,a)).elementType=T,e.lanes=l,e;case I:return Ii(n,a,l,t);case D:return(e=zi(24,n,t,a)).elementType=D,e.lanes=l,e;default:if("object"==typeof e&&null!==e)switch(e.$$typeof){case C:o=10;break e;case O:o=9;break e;case P:o=11;break e;case z:o=14;break e;case L:o=16,r=null;break e;case R:o=22;break e}throw Error(u(130,null==e?e:typeof e,""))}return(t=zi(o,n,t,a)).elementType=e,t.type=r,t.lanes=l,t}function Ai(e,t,n,r){return(e=zi(7,e,r,t)).lanes=n,e}function Ii(e,t,n,r){return(e=zi(23,e,r,t)).elementType=I,e.lanes=n,e}function Di(e,t,n){return(e=zi(6,e,null,t)).lanes=n,e}function Fi(e,t,n){return(t=zi(4,null!==e.children?e.children:[],e.key,t)).lanes=n,t.stateNode={containerInfo:e.containerInfo,pendingChildren:null,implementation:e.implementation},t}function Ui(e,t,n){this.tag=t,this.containerInfo=e,this.finishedWork=this.pingCache=this.current=this.pendingChildren=null,this.timeoutHandle=-1,this.pendingContext=this.context=null,this.hydrate=n,this.callbackNode=null,this.callbackPriority=0,this.eventTimes=Ft(0),this.expirationTimes=Ft(-1),this.entangledLanes=this.finishedLanes=this.mutableReadLanes=this.expiredLanes=this.pingedLanes=this.suspendedLanes=this.pendingLanes=0,this.entanglements=Ft(0),this.mutableSourceEagerHydrationData=null}function Bi(e,t,n,r){var a=t.current,l=ri(),o=ai(a);e:if(n){t:{if(qe(n=n._reactInternals)!==n||1!==n.tag)throw Error(u(170));var i=n;do{switch(i.tag){case 3:i=i.stateNode.context;break t;case 1:if(fa(i.type)){i=i.stateNode.__reactInternalMemoizedMergedChildContext;break t}}i=i.return}while(null!==i);throw Error(u(171))}if(1===n.tag){var c=n.type;if(fa(c)){n=pa(n,c,i);break e}}n=i}else n=la;return null===t.context?t.context=n:t.pendingContext=n,(t=rl(l,o)).payload={element:e},null!==(r=void 0===r?null:r)&&(t.callback=r),al(a,t),li(a,o,l),o}function Wi(e){if(!(e=e.current).child)return null;switch(e.child.tag){case 5:default:return e.child.stateNode}}function $i(e,t){if(null!==(e=e.memoizedState)&&null!==e.dehydrated){var n=e.retryLane;e.retryLane=0!==n&&n<t?n:t}}function Vi(e,t){$i(e,t),(e=e.alternate)&&$i(e,t)}function Hi(e,t,n){var r=null!=n&&null!=n.hydrationOptions&&n.hydrationOptions.mutableSources||null;if(n=new Ui(e,t,null!=n&&!0===n.hydrate),t=zi(3,null,null,2===t?7:1===t?3:0),n.current=t,t.stateNode=n,tl(t),e[qr]=n.current,Sr(8===e.nodeType?e.parentNode:e),r)for(e=0;e<r.length;e++){var a=(t=r[e])._getVersion;a=a(t._source),null==n.mutableSourceEagerHydrationData?n.mutableSourceEagerHydrationData=[t,a]:n.mutableSourceEagerHydrationData.push(t,a)}this._internalRoot=n}function Qi(e){return!(!e||1!==e.nodeType&&9!==e.nodeType&&11!==e.nodeType&&(8!==e.nodeType||" react-mount-point-unstable "!==e.nodeValue))}function qi(e,t,n,r,a){var l=n._reactRootContainer;if(l){var u=l._internalRoot;if("function"==typeof a){var o=a;a=function(){var e=Wi(u);o.call(e)}}Bi(t,u,e,a)}else{if(l=n._reactRootContainer=function(e,t){if(t||(t=!(!(t=e?9===e.nodeType?e.documentElement:e.firstChild:null)||1!==t.nodeType||!t.hasAttribute("data-reactroot"))),!t)for(var n;n=e.lastChild;)e.removeChild(n);return new Hi(e,0,t?{hydrate:!0}:void 0)}(n,r),u=l._internalRoot,"function"==typeof a){var i=a;a=function(){var e=Wi(u);i.call(e)}}si(function(){Bi(t,u,e,a)})}return Wi(u)}function Ki(e,t){var n=2<arguments.length&&void 0!==arguments[2]?arguments[2]:null;if(!Qi(t))throw Error(u(200));return function(e,t,n){var r=3<arguments.length&&void 0!==arguments[3]?arguments[3]:null;return{$$typeof:E,key:null==r?null:""+r,children:e,containerInfo:t,implementation:n}}(e,t,null,n)}Fo=function(e,t,n){var r=t.lanes;if(null!==e)if(e.memoizedProps!==t.pendingProps||oa.current)Ou=!0;else{if(0==(n&r)){switch(Ou=!1,t.tag){case 3:Du(t),Ul();break;case 5:Ol(t);break;case 1:fa(t.type)&&ha(t);break;case 4:Nl(t,t.stateNode.containerInfo);break;case 10:r=t.memoizedProps.value;var a=t.type._context;aa(Ha,a._currentValue),a._currentValue=r;break;case 13:if(null!==t.memoizedState)return 0!=(n&t.child.childLanes)?Vu(e,t,n):(aa(jl,1&jl.current),null!==(t=Xu(e,t,n))?t.sibling:null);aa(jl,1&jl.current);break;case 19:if(r=0!=(n&t.childLanes),0!=(64&e.flags)){if(r)return Gu(e,t,n);t.flags|=64}if(null!==(a=t.memoizedState)&&(a.rendering=null,a.tail=null,a.lastEffect=null),aa(jl,jl.current),r)break;return null;case 23:case 24:return t.lanes=0,Lu(e,t,n)}return Xu(e,t,n)}Ou=0!=(16384&e.flags)}else Ou=!1;switch(t.lanes=0,t.tag){case 2:if(r=t.type,null!==e&&(e.alternate=null,t.alternate=null,t.flags|=2),e=t.pendingProps,a=ca(t,ua.current),Za(t,n),a=Jl(null,t,r,e,a,n),t.flags|=1,"object"==typeof a&&null!==a&&"function"==typeof a.render&&void 0===a.$$typeof){if(t.tag=1,t.memoizedState=null,t.updateQueue=null,fa(r)){var l=!0;ha(t)}else l=!1;t.memoizedState=null!==a.state&&void 0!==a.state?a.state:null,tl(t);var o=r.getDerivedStateFromProps;"function"==typeof o&&cl(t,r,o,e),a.updater=fl,t.stateNode=a,a._reactInternals=t,hl(t,r,e,n),t=Iu(null,t,r,!0,l,n)}else t.tag=0,Pu(null,t,a,n),t=t.child;return t;case 16:a=t.elementType;e:{switch(null!==e&&(e.alternate=null,t.alternate=null,t.flags|=2),e=t.pendingProps,a=(l=a._init)(a._payload),t.type=a,l=t.tag=function(e){if("function"==typeof e)return Li(e)?1:0;if(null!=e){if((e=e.$$typeof)===P)return 11;if(e===z)return 14}return 2}(a),e=Va(a,e),l){case 0:t=Mu(null,t,a,e,n);break e;case 1:t=Au(null,t,a,e,n);break e;case 11:t=ju(null,t,a,e,n);break e;case 14:t=Tu(null,t,a,Va(a.type,e),r,n);break e}throw Error(u(306,a,""))}return t;case 0:return r=t.type,a=t.pendingProps,Mu(e,t,r,a=t.elementType===r?a:Va(r,a),n);case 1:return r=t.type,a=t.pendingProps,Au(e,t,r,a=t.elementType===r?a:Va(r,a),n);case 3:if(Du(t),r=t.updateQueue,null===e||null===r)throw Error(u(282));if(r=t.pendingProps,a=null!==(a=t.memoizedState)?a.element:null,nl(e,t),ul(t,r,null,n),(r=t.memoizedState.element)===a)Ul(),t=Xu(e,t,n);else{if((l=(a=t.stateNode).hydrate)&&(Ll=Br(t.stateNode.containerInfo.firstChild),zl=t,l=Rl=!0),l){if(null!=(e=a.mutableSourceEagerHydrationData))for(a=0;a<e.length;a+=2)(l=e[a])._workInProgressVersionPrimary=e[a+1],Bl.push(l);for(n=_l(t,null,r,n),t.child=n;n;)n.flags=-3&n.flags|1024,n=n.sibling}else Pu(e,t,r,n),Ul();t=t.child}return t;case 5:return Ol(t),null===e&&Il(t),r=t.type,a=t.pendingProps,l=null!==e?e.memoizedProps:null,o=a.children,Ir(r,a)?o=null:null!==l&&Ir(r,l)&&(t.flags|=16),Ru(e,t),Pu(e,t,o,n),t.child;case 6:return null===e&&Il(t),null;case 13:return Vu(e,t,n);case 4:return Nl(t,t.stateNode.containerInfo),r=t.pendingProps,null===e?t.child=bl(t,null,r,n):Pu(e,t,r,n),t.child;case 11:return r=t.type,a=t.pendingProps,ju(e,t,r,a=t.elementType===r?a:Va(r,a),n);case 7:return Pu(e,t,t.pendingProps,n),t.child;case 8:case 12:return Pu(e,t,t.pendingProps.children,n),t.child;case 10:e:{r=t.type._context,a=t.pendingProps,o=t.memoizedProps,l=a.value;var i=t.type._context;if(aa(Ha,i._currentValue),i._currentValue=l,null!==o)if(i=o.value,0===(l=ar(i,l)?0:0|("function"==typeof r._calculateChangedBits?r._calculateChangedBits(i,l):1073741823))){if(o.children===a.children&&!oa.current){t=Xu(e,t,n);break e}}else for(null!==(i=t.child)&&(i.return=t);null!==i;){var c=i.dependencies;if(null!==c){o=i.child;for(var f=c.firstContext;null!==f;){if(f.context===r&&0!=(f.observedBits&l)){1===i.tag&&((f=rl(-1,n&-n)).tag=2,al(i,f)),i.lanes|=n,null!==(f=i.alternate)&&(f.lanes|=n),Xa(i.return,n),c.lanes|=n;break}f=f.next}}else o=10===i.tag&&i.type===t.type?null:i.child;if(null!==o)o.return=i;else for(o=i;null!==o;){if(o===t){o=null;break}if(null!==(i=o.sibling)){i.return=o.return,o=i;break}o=o.return}i=o}Pu(e,t,a.children,n),t=t.child}return t;case 9:return a=t.type,r=(l=t.pendingProps).children,Za(t,n),r=r(a=Ja(a,l.unstable_observedBits)),t.flags|=1,Pu(e,t,r,n),t.child;case 14:return l=Va(a=t.type,t.pendingProps),Tu(e,t,a,l=Va(a.type,l),r,n);case 15:return zu(e,t,t.type,t.pendingProps,r,n);case 17:return r=t.type,a=t.pendingProps,a=t.elementType===r?a:Va(r,a),null!==e&&(e.alternate=null,t.alternate=null,t.flags|=2),t.tag=1,fa(r)?(e=!0,ha(t)):e=!1,Za(t,n),dl(t,r,a),hl(t,r,a,n),Iu(null,t,r,!0,e,n);case 19:return Gu(e,t,n);case 23:case 24:return Lu(e,t,n)}throw Error(u(156,t.tag))},Hi.prototype.render=function(e){Bi(e,this._internalRoot,null,null)},Hi.prototype.unmount=function(){var e=this._internalRoot,t=e.containerInfo;Bi(null,e,null,function(){t[qr]=null})},Ze=function(e){13===e.tag&&(li(e,4,ri()),Vi(e,4))},Je=function(e){13===e.tag&&(li(e,67108864,ri()),Vi(e,67108864))},et=function(e){if(13===e.tag){var t=ri(),n=ai(e);li(e,n,t),Vi(e,n)}},tt=function(e,t){return t()},Se=function(e,t,n){switch(t){case"input":if(ne(e,n),t=n.name,"radio"===n.type&&null!=t){for(n=e;n.parentNode;)n=n.parentNode;for(n=n.querySelectorAll("input[name="+JSON.stringify(""+t)+'][type="radio"]'),t=0;t<n.length;t++){var r=n[t];if(r!==e&&r.form===e.form){var a=Zr(r);if(!a)throw Error(u(90));X(r),ne(r,a)}}}break;case"textarea":ce(e,n);break;case"select":null!=(t=n.value)&&ue(e,!!n.multiple,t,!1)}},Te=fi,ze=function(e,t,n,r,a){var l=Eo;Eo|=4;try{return Fa(98,e.bind(null,t,n,r,a))}finally{0===(Eo=l)&&(Do(),Ba())}},Le=function(){0==(49&Eo)&&(function(){if(null!==Yo){var e=Yo;Yo=null,e.forEach(function(e){e.expiredLanes|=24&e.pendingLanes,oi(e,Aa())})}Ba()}(),xi())},Re=function(e,t){var n=Eo;Eo|=2;try{return e(t)}finally{0===(Eo=n)&&(Do(),Ba())}};var Yi={Events:[Gr,Xr,Zr,Pe,je,xi,{current:!1}]},Gi={findFiberByHostInstance:Yr,bundleType:0,version:"17.0.2",rendererPackageName:"react-dom"},Xi={bundleType:Gi.bundleType,version:Gi.version,rendererPackageName:Gi.rendererPackageName,rendererConfig:Gi.rendererConfig,overrideHookState:null,overrideHookStateDeletePath:null,overrideHookStateRenamePath:null,overrideProps:null,overridePropsDeletePath:null,overridePropsRenamePath:null,setSuspenseHandler:null,scheduleUpdate:null,currentDispatcherRef:w.ReactCurrentDispatcher,findHostInstanceByFiber:function(e){return null===(e=Ge(e))?null:e.stateNode},findFiberByHostInstance:Gi.findFiberByHostInstance||function(){return null},findHostInstancesForRefresh:null,scheduleRefresh:null,scheduleRoot:null,setRefreshHandler:null,getCurrentFiber:null};if("undefined"!=typeof __REACT_DEVTOOLS_GLOBAL_HOOK__){var Zi=__REACT_DEVTOOLS_GLOBAL_HOOK__;if(!Zi.isDisabled&&Zi.supportsFiber)try{va=Zi.inject(Xi),ga=Zi}catch(e){}}t.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED=Yi,t.createPortal=Ki,t.findDOMNode=function(e){if(null==e)return null;if(1===e.nodeType)return e;var t=e._reactInternals;if(void 0===t){if("function"==typeof e.render)throw Error(u(188));throw Error(u(268,Object.keys(e)))}return e=null===(e=Ge(t))?null:e.stateNode},t.flushSync=function(e,t){var n=Eo;if(0!=(48&n))return e(t);Eo|=1;try{if(e)return Fa(99,e.bind(null,t))}finally{Eo=n,Ba()}},t.hydrate=function(e,t,n){if(!Qi(t))throw Error(u(200));return qi(null,e,t,!0,n)},t.render=function(e,t,n){if(!Qi(t))throw Error(u(200));return qi(null,e,t,!1,n)},t.unmountComponentAtNode=function(e){if(!Qi(e))throw Error(u(40));return!!e._reactRootContainer&&(si(function(){qi(null,null,e,!1,function(){e._reactRootContainer=null,e[qr]=null})}),!0)},t.unstable_batchedUpdates=fi,t.unstable_createPortal=function(e,t){return Ki(e,t,2<arguments.length&&void 0!==arguments[2]?arguments[2]:null)},t.unstable_renderSubtreeIntoContainer=function(e,t,n,r){if(!Qi(n))throw Error(u(200));if(null==e||void 0===e._reactInternals)throw Error(u(38));return qi(e,t,n,!1,r)},t.version="17.0.2"},function(e,t,n){"use strict";e.exports=n(8)},function(e,t,n){"use strict";
/** @license React v0.20.2
 * scheduler.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */var r,a,l,u;if("object"==typeof performance&&"function"==typeof performance.now){var o=performance;t.unstable_now=function(){return o.now()}}else{var i=Date,c=i.now();t.unstable_now=function(){return i.now()-c}}if("undefined"==typeof window||"function"!=typeof MessageChannel){var f=null,s=null,d=function(){if(null!==f)try{var e=t.unstable_now();f(!0,e),f=null}catch(e){throw setTimeout(d,0),e}};r=function(e){null!==f?setTimeout(r,0,e):(f=e,setTimeout(d,0))},a=function(e,t){s=setTimeout(e,t)},l=function(){clearTimeout(s)},t.unstable_shouldYield=function(){return!1},u=t.unstable_forceFrameRate=function(){}}else{var p=window.setTimeout,h=window.clearTimeout;if("undefined"!=typeof console){var m=window.cancelAnimationFrame;"function"!=typeof window.requestAnimationFrame&&console.error("This browser doesn't support requestAnimationFrame. Make sure that you load a polyfill in older browsers. https://reactjs.org/link/react-polyfills"),"function"!=typeof m&&console.error("This browser doesn't support cancelAnimationFrame. Make sure that you load a polyfill in older browsers. https://reactjs.org/link/react-polyfills")}var v=!1,g=null,y=-1,b=5,_=0;t.unstable_shouldYield=function(){return t.unstable_now()>=_},u=function(){},t.unstable_forceFrameRate=function(e){0>e||125<e?console.error("forceFrameRate takes a positive int between 0 and 125, forcing frame rates higher than 125 fps is not supported"):b=0<e?Math.floor(1e3/e):5};var w=new MessageChannel,k=w.port2;w.port1.onmessage=function(){if(null!==g){var e=t.unstable_now();_=e+b;try{g(!0,e)?k.postMessage(null):(v=!1,g=null)}catch(e){throw k.postMessage(null),e}}else v=!1},r=function(e){g=e,v||(v=!0,k.postMessage(null))},a=function(e,n){y=p(function(){e(t.unstable_now())},n)},l=function(){h(y),y=-1}}function E(e,t){var n=e.length;e.push(t);e:for(;;){var r=n-1>>>1,a=e[r];if(!(void 0!==a&&0<N(a,t)))break e;e[r]=t,e[n]=a,n=r}}function x(e){return void 0===(e=e[0])?null:e}function S(e){var t=e[0];if(void 0!==t){var n=e.pop();if(n!==t){e[0]=n;e:for(var r=0,a=e.length;r<a;){var l=2*(r+1)-1,u=e[l],o=l+1,i=e[o];if(void 0!==u&&0>N(u,n))void 0!==i&&0>N(i,u)?(e[r]=i,e[o]=n,r=o):(e[r]=u,e[l]=n,r=l);else{if(!(void 0!==i&&0>N(i,n)))break e;e[r]=i,e[o]=n,r=o}}}return t}return null}function N(e,t){var n=e.sortIndex-t.sortIndex;return 0!==n?n:e.id-t.id}var C=[],O=[],P=1,j=null,T=3,z=!1,L=!1,R=!1;function M(e){for(var t=x(O);null!==t;){if(null===t.callback)S(O);else{if(!(t.startTime<=e))break;S(O),t.sortIndex=t.expirationTime,E(C,t)}t=x(O)}}function A(e){if(R=!1,M(e),!L)if(null!==x(C))L=!0,r(I);else{var t=x(O);null!==t&&a(A,t.startTime-e)}}function I(e,n){L=!1,R&&(R=!1,l()),z=!0;var r=T;try{for(M(n),j=x(C);null!==j&&(!(j.expirationTime>n)||e&&!t.unstable_shouldYield());){var u=j.callback;if("function"==typeof u){j.callback=null,T=j.priorityLevel;var o=u(j.expirationTime<=n);n=t.unstable_now(),"function"==typeof o?j.callback=o:j===x(C)&&S(C),M(n)}else S(C);j=x(C)}if(null!==j)var i=!0;else{var c=x(O);null!==c&&a(A,c.startTime-n),i=!1}return i}finally{j=null,T=r,z=!1}}var D=u;t.unstable_IdlePriority=5,t.unstable_ImmediatePriority=1,t.unstable_LowPriority=4,t.unstable_NormalPriority=3,t.unstable_Profiling=null,t.unstable_UserBlockingPriority=2,t.unstable_cancelCallback=function(e){e.callback=null},t.unstable_continueExecution=function(){L||z||(L=!0,r(I))},t.unstable_getCurrentPriorityLevel=function(){return T},t.unstable_getFirstCallbackNode=function(){return x(C)},t.unstable_next=function(e){switch(T){case 1:case 2:case 3:var t=3;break;default:t=T}var n=T;T=t;try{return e()}finally{T=n}},t.unstable_pauseExecution=function(){},t.unstable_requestPaint=D,t.unstable_runWithPriority=function(e,t){switch(e){case 1:case 2:case 3:case 4:case 5:break;default:e=3}var n=T;T=e;try{return t()}finally{T=n}},t.unstable_scheduleCallback=function(e,n,u){var o=t.unstable_now();switch("object"==typeof u&&null!==u?u="number"==typeof(u=u.delay)&&0<u?o+u:o:u=o,e){case 1:var i=-1;break;case 2:i=250;break;case 5:i=1073741823;break;case 4:i=1e4;break;default:i=5e3}return e={id:P++,callback:n,priorityLevel:e,startTime:u,expirationTime:i=u+i,sortIndex:-1},u>o?(e.sortIndex=u,E(O,e),null===x(C)&&e===x(O)&&(R?l():R=!0,a(A,u-o))):(e.sortIndex=i,E(C,e),L||z||(L=!0,r(I))),e},t.unstable_wrapCallback=function(e){var t=T;return function(){var n=T;T=t;try{return e.apply(this,arguments)}finally{T=n}}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var r=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),a=i(n(0)),l=i(n(10)),u=i(n(11)),o=i(n(12));function i(e){return e&&e.__esModule?e:{default:e}}var c=function(e){function t(){return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).apply(this,arguments))}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,a.default.Component),r(t,[{key:"render",value:function(){return a.default.createElement("div",null,a.default.createElement("div",null,a.default.createElement("div",{className:"wrapper"},a.default.createElement(l.default,null),a.default.createElement("div",{id:"home",className:"page-header header-filter clear-filter","data-parallax":"disabled",style:{backgroundImage:"url(./img/markus-spiske-148030.jpg)"}},a.default.createElement("div",{className:"container"},a.default.createElement("div",{className:"row"},a.default.createElement("div",{className:"col-md-8 col-md-offset-2"},a.default.createElement("div",{className:"brand"},a.default.createElement("h1",null,"io",a.default.createElement("div",{className:"pro-badge"},"Hub")),a.default.createElement("h3",{className:"title"},"Welcome to my projects hub, check out some of my projects & contributions")))))),a.default.createElement(o.default,null)),a.default.createElement(u.default,null)))}}]),t}();t.default=c},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var r,a=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),l=n(0),u=(r=l)&&r.__esModule?r:{default:r};var o=function(e){function t(){return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).apply(this,arguments))}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,u.default.Component),a(t,[{key:"render",value:function(){return u.default.createElement("nav",{className:"navbar navbar-default navbar-transparent navbar-fixed-top navbar-color-on-scroll"},u.default.createElement("div",{className:"container"},u.default.createElement("div",{className:"navbar-header"},u.default.createElement("button",{type:"button",className:"navbar-toggle","data-toggle":"collapse","data-target":"#navigation-main"},u.default.createElement("span",{className:"sr-only"},"Toggle navigation"),u.default.createElement("span",{className:"icon-bar"}),u.default.createElement("span",{className:"icon-bar"}),u.default.createElement("span",{className:"icon-bar"})),u.default.createElement("a",{className:"navbar-brand"},"wax911")),u.default.createElement("div",{className:"collapse navbar-collapse",id:"navigation-main"},u.default.createElement("ul",{className:"nav navbar-nav"},u.default.createElement("li",{className:"active"},u.default.createElement("a",{"data-scroll":!0,href:"#home"},u.default.createElement("i",{className:"fa fa-home"}),"Home")),u.default.createElement("li",null,u.default.createElement("a",{"data-scroll":!0,href:"#applications"},u.default.createElement("i",{className:"fa fa-android"}),"Applications")),u.default.createElement("li",null,u.default.createElement("a",{"data-scroll":!0,href:"#screenshots"},u.default.createElement("i",{className:"fa fa-tv"}),"Screenshots")),u.default.createElement("li",null,u.default.createElement("a",{"data-scroll":!0,href:"#about"},u.default.createElement("i",{className:"fa fa-question-circle-o"}),"About"))),u.default.createElement("ul",{className:"nav navbar-nav navbar-right"},u.default.createElement("li",null,u.default.createElement("a",{href:"https://github.com/wax911",className:"btn btn-simple btn-white btn-just-icon"},u.default.createElement("i",{className:"fa fa-github"}))),u.default.createElement("li",null,u.default.createElement("a",{href:"https://za.linkedin.com/in/maxwell-mapako-32866b5b",className:"btn btn-simple btn-white btn-just-icon"},u.default.createElement("i",{className:"fa fa-linkedin"}))),u.default.createElement("li",null,u.default.createElement("a",{href:"https://www.quora.com/profile/Maxwell-Mapako",className:"btn btn-simple btn-white btn-just-icon"},u.default.createElement("i",{className:"fa fa-quora"}))),u.default.createElement("li",null,u.default.createElement("a",{href:"http://stackoverflow.com/users/1725347/wax911",className:"btn btn-simple btn-white btn-just-icon"},u.default.createElement("i",{className:"fa fa-stack-overflow"})))))))}}]),t}();t.default=o},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var r,a=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),l=n(0),u=(r=l)&&r.__esModule?r:{default:r};var o=function(e){function t(){return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).apply(this,arguments))}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,u.default.Component),a(t,[{key:"render",value:function(){return u.default.createElement("footer",{className:"footer"},u.default.createElement("div",{className:"container"},u.default.createElement("a",{className:"copyright pull-left",href:"https://reactjs.org/"},"Made With React"),u.default.createElement("div",{className:"copyright pull-right"},"Photo by ",u.default.createElement("a",{href:"https://unsplash.com/@markusspiske"},"Markus")," on Unsplash")))}}]),t}();t.default=o},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var r=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),a=c(n(0)),l=c(n(13)),u=c(n(14)),o=c(n(24)),i=c(n(25));function c(e){return e&&e.__esModule?e:{default:e}}var f=function(e){function t(){return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).call(this))}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,a.default.Component),r(t,[{key:"render",value:function(){return a.default.createElement("div",{className:"main main-raised"},a.default.createElement("div",{className:"section section-basic"},a.default.createElement("div",{className:"container-fluid",id:"applications"},a.default.createElement(l.default,null),a.default.createElement("br",null),a.default.createElement("br",null),a.default.createElement(u.default,null)),a.default.createElement("div",{className:"container-fluid",id:"screenshots"},a.default.createElement(o.default,null)),a.default.createElement("div",{className:"container-fluid",id:"about"},a.default.createElement(i.default,null))))}}]),t}();t.default=f},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var r,a=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),l=n(0),u=(r=l)&&r.__esModule?r:{default:r};var o=function(e){function t(){return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).call(this))}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,u.default.Component),a(t,[{key:"render",value:function(){return u.default.createElement("div",{className:"container"},u.default.createElement("div",{className:"row"},u.default.createElement("div",{className:"col-md-8 col-md-offset-2 text-center"},u.default.createElement("h2",{className:"title"},"Applications"),u.default.createElement("h5",{className:"description"},"Check out some of my projects below"))),u.default.createElement("br",null),u.default.createElement("br",null),u.default.createElement("div",{className:"row text-center"},u.default.createElement("div",{className:"col-md-6 col-sm-6"},u.default.createElement("span",{className:"fa-stack fa-lg fa-5x"},u.default.createElement("i",{className:"fa fa-circle-thin fa-stack-2x"}),u.default.createElement("i",{className:"fa fa-android fa-stack-1x"})),u.default.createElement("h2",null,"LP Solver"),u.default.createElement("p",null,"Android application to solve general linear programming (LP) models. Linear Programming is a mathematical modelling technique useful for allocation of limited resources such as material, machines etc to several competing activities such as projects, services etc.")),u.default.createElement("div",{className:"col-md-6 col-sm-6"},u.default.createElement("span",{className:"fa-stack fa-lg fa-5x"},u.default.createElement("i",{className:"fa fa-circle-thin fa-stack-2x"}),u.default.createElement("i",{className:"fa fa-android fa-stack-1x"})),u.default.createElement("h2",null,"Aegis Nav"),u.default.createElement("p",null,"Indoor Navigation Project that was completed by a team of university students, myself included. This is will not be available in the play store unfortunately but it's definitely worth checking out in my gihub link that will be provided later in the page.")),u.default.createElement("div",{className:"col-md-6 col-sm-6"},u.default.createElement("span",{className:"fa-stack fa-lg fa-5x"},u.default.createElement("i",{className:"fa fa-circle-thin fa-stack-2x"}),u.default.createElement("i",{className:"fa fa-android fa-stack-1x"})),u.default.createElement("h2",null,"AniTrend"),u.default.createElement("p",null,"Track all your favorite anime & manga with AniTrend! AniTrend is a free anime or manga lookup, tracking and reference application!")),u.default.createElement("div",{className:"col-md-6 col-sm-6"},u.default.createElement("span",{className:"fa-stack fa-lg fa-5x"},u.default.createElement("i",{className:"fa fa-circle-thin fa-stack-2x"}),u.default.createElement("i",{className:"fa fa-windows fa-stack-1x"})),u.default.createElement("h2",null,"Asset Generator"),u.default.createElement("p",null,"Initially created to generate assets for eclipse android development for various screen dpi sizes, and now deprecated.")),u.default.createElement("div",{className:"col-md-6 col-sm-6"},u.default.createElement("span",{className:"fa-stack fa-lg fa-5x"},u.default.createElement("i",{className:"fa fa-circle-thin fa-stack-2x"}),u.default.createElement("i",{className:"fa fa-android fa-stack-1x"})),u.default.createElement("h2",null,"Manga Slayer"),u.default.createElement("p",null,"A manga reading application that I made for a client targeting the arabic market that features some awesome material design features.")),u.default.createElement("div",{className:"col-md-6 col-sm-6"},u.default.createElement("span",{className:"fa-stack fa-lg fa-5x"},u.default.createElement("i",{className:"fa fa-circle-thin fa-stack-2x"}),u.default.createElement("i",{className:"fa fa-android fa-stack-1x"})),u.default.createElement("h2",null,"Multicode QR Scanner"),u.default.createElement("p",null,"This project is based on the ",u.default.createElement("a",{href:"https://github.com/googlesamples/android-vision"},"Google Vision Barcode API"),". The Barcode Scanner API detects barcodes in real time in any orientation. You can also detect and parse several barcodes in different formats at the same time.")),u.default.createElement("div",{className:"col-md-6 col-sm-6"},u.default.createElement("span",{className:"fa-stack fa-lg fa-5x"},u.default.createElement("i",{className:"fa fa-circle-thin fa-stack-2x"}),u.default.createElement("i",{className:"fa fa-chrome fa-stack-1x"})),u.default.createElement("h2",null,"45th Media"),u.default.createElement("p",null,"Linking People & Brands, a company landing page")),u.default.createElement("div",{className:"col-md-6 col-sm-6"},u.default.createElement("span",{className:"fa-stack fa-lg fa-5x"},u.default.createElement("i",{className:"fa fa-circle-thin fa-stack-2x"}),u.default.createElement("i",{className:"fa fa-chrome fa-stack-1x"})),u.default.createElement("h2",null,"Berry Elegance"),u.default.createElement("p",null,"Ecommerce solution powered by shopify"))))}}]),t}();t.default=o},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var r=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),a=u(n(0)),l=u(n(2));function u(e){return e&&e.__esModule?e:{default:e}}var o=function(e){function t(){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);var e=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).call(this));return e.state={featuredApps:l.default.getAllFeaturedApplications()},e}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,a.default.Component),r(t,[{key:"render",value:function(){return a.default.createElement("div",{className:"container"},a.default.createElement("div",{className:"row"},a.default.createElement("div",{className:"col-md-8 col-md-offset-2 text-center"},a.default.createElement("h2",{className:"title"},"Featured"),a.default.createElement("h5",{className:"description"},"Some of my featured applications"))),this.state.featuredApps)}}]),t}();t.default=o},function(e){e.exports=JSON.parse("[]")},function(e){e.exports=JSON.parse('[{"image":"./img/featured/anitrend-app.png","title":"AniTrend","icon":"explore","infoTitle":"AniTrend - Find Anime & Manga!","url":"https://anitrend.co/","details":"Track all your favourite anime & manga with AniTrend! This is a free anime, manga and social platform for anime/manga fans. Powered by AniList, providing possibly some of the largest anime/manga collections on the web. AniTrend helps you manage and keep track of what you\'re watching and discover new listings or upcoming ones all from the comfort of you your mobile device."},{"image":"./img/featured/emojify-app.png","title":"Emojify","icon":"face","infoTitle":"Android Emojify","url":"https://www.uplabs.com/posts/android-emojify","details":"This project is an android port of the kcthota/emoji4j which is a java library to convert short codes, html entities to emojis and vice-versa. Also supports parsing emoticons, surrogate html entities. vdurmont/emoji-java, emoji4j adds more goodies and helpers to deal with emojis. The emoji data is based on the database from github/gemoji and ASCII emoticons data from wooorm/emoticon"},{"image":"./img/featured/linear-app.png","title":"LP Solver","icon":"assessment","infoTitle":"Operations Research LP Solver","url":"https://play.google.com/store/apps/details?id=com.mxt.linearprogrammingsolver","details":"Linear Programming (LP) is a mathematical modelling technique useful for allocation of limited resources such as material, machines etc to several competing activities such as projects, services etc. A typical linear programming problem consists of a linear objective function which is to be maximized or minimized subject to a finite number of linear constraints. (Wiki)"}]')},function(e){e.exports=JSON.parse('[{"title":"AniTrend","image":"./img/resources/anitrend/1.png","url":"https://anitrend.co/"},{"title":"AniTrend","image":"./img/resources/anitrend/2.png","url":"https://anitrend.co/"},{"title":"AniTrend","image":"./img/resources/anitrend/3.png","url":"https://anitrend.co/"},{"title":"Emojify","image":"./img/resources/emojify/1.png","url":"https://www.uplabs.com/posts/android-emojify"},{"title":"Emojify","image":"./img/resources/emojify/2.png","url":"https://www.uplabs.com/posts/android-emojify"},{"title":"Emojify","image":"./img/resources/emojify/3.png","url":"https://www.uplabs.com/posts/android-emojify"},{"title":"LP Solver","image":"./img/resources/linear/1.png","url":"https://play.google.com/store/apps/details?id=com.mxt.linearprogrammingsolver"},{"title":"LP Solver","image":"./img/resources/linear/2.png","url":"https://play.google.com/store/apps/details?id=com.mxt.linearprogrammingsolver"},{"title":"LP Solver","image":"./img/resources/linear/3.png","url":"https://play.google.com/store/apps/details?id=com.mxt.linearprogrammingsolver"}]')},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var r,a=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),l=n(0),u=(r=l)&&r.__esModule?r:{default:r};var o=function(e){function t(){return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).call(this))}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,u.default.Component),a(t,[{key:"render",value:function(){var e=this.props.data;return u.default.createElement("div",{className:"col-md-6 col-sm-6"},u.default.createElement("span",{className:"fa-stack fa-lg fa-5x"},u.default.createElement("i",{className:"fa fa-circle-thin fa-stack-2x"}),u.default.createElement("i",{className:"fa fa-android fa-stack-1x"})),u.default.createElement("h2",null,e.title),u.default.createElement("p",null,e.description))}}]),t}();t.default=o},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var r,a=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),l=n(0),u=(r=l)&&r.__esModule?r:{default:r};var o=function(e){function t(){return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).call(this))}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,u.default.Component),a(t,[{key:"render",value:function(){var e=this.props.data;return u.default.createElement("div",{className:"features-3"},u.default.createElement("div",{className:"row"},u.default.createElement("div",{className:"col-md-6"},u.default.createElement("div",{className:"phone-container"},u.default.createElement("img",{src:e.image}))),u.default.createElement("div",{className:"col-md-6"},u.default.createElement("br",null),u.default.createElement("br",null),u.default.createElement("h2",{className:"title"},e.title),u.default.createElement("div",{className:"info info-horizontal"},u.default.createElement("div",{className:"icon icon-info"},u.default.createElement("i",{className:"material-icons"},e.icon)),u.default.createElement("div",{className:"description"},u.default.createElement("h4",{className:"info-title"},e.infoTitle),u.default.createElement("p",null,e.details))),u.default.createElement("div",{className:"info info-horizontal"},u.default.createElement("div",{className:"icon icon-default"},u.default.createElement("i",{className:"material-icons"},"link")),u.default.createElement("div",{className:"description"},u.default.createElement("h4",{className:"info-title"},"Get ",e.infoTitle," Now"),u.default.createElement("p",null,"Click ",u.default.createElement("a",{href:e.url},"here")," to view or download this application"))))))}}]),t}();t.default=o},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var r,a=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),l=n(0),u=(r=l)&&r.__esModule?r:{default:r};var o=function(e){function t(){return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).call(this))}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,u.default.Component),a(t,[{key:"render",value:function(){var e=this.props.data;return u.default.createElement("div",{className:"portfolio-item col-xs-12 col-sm-6 col-md-4"},u.default.createElement("div",{className:"portfolio-bg"},u.default.createElement("div",{className:"portfolio"},u.default.createElement("div",{className:"tt-overlay"}),u.default.createElement("div",{className:"links"},u.default.createElement("a",{className:"image-link",href:e.image},u.default.createElement("i",{className:"fa fa-search-plus"})),u.default.createElement("a",{href:e.url},u.default.createElement("i",{className:"fa fa-link"}))),u.default.createElement("img",{src:e.image,alt:e.title,style:{width:"100%"}}),u.default.createElement("div",{className:"portfolio-info"},u.default.createElement("h3",null,e.title)))))}}]),t}();t.default=o},function(e,t,n){(function(e,r){var a;
/**
 * @license
 * Lodash <https://lodash.com/>
 * Copyright OpenJS Foundation and other contributors <https://openjsf.org/>
 * Released under MIT license <https://lodash.com/license>
 * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>
 * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors
 */(function(){var l,u=200,o="Unsupported core-js use. Try https://npms.io/search?q=ponyfill.",i="Expected a function",c="Invalid `variable` option passed into `_.template`",f="__lodash_hash_undefined__",s=500,d="__lodash_placeholder__",p=1,h=2,m=4,v=1,g=2,y=1,b=2,_=4,w=8,k=16,E=32,x=64,S=128,N=256,C=512,O=30,P="...",j=800,T=16,z=1,L=2,R=1/0,M=9007199254740991,A=17976931348623157e292,I=NaN,D=4294967295,F=D-1,U=D>>>1,B=[["ary",S],["bind",y],["bindKey",b],["curry",w],["curryRight",k],["flip",C],["partial",E],["partialRight",x],["rearg",N]],W="[object Arguments]",$="[object Array]",V="[object AsyncFunction]",H="[object Boolean]",Q="[object Date]",q="[object DOMException]",K="[object Error]",Y="[object Function]",G="[object GeneratorFunction]",X="[object Map]",Z="[object Number]",J="[object Null]",ee="[object Object]",te="[object Proxy]",ne="[object RegExp]",re="[object Set]",ae="[object String]",le="[object Symbol]",ue="[object Undefined]",oe="[object WeakMap]",ie="[object WeakSet]",ce="[object ArrayBuffer]",fe="[object DataView]",se="[object Float32Array]",de="[object Float64Array]",pe="[object Int8Array]",he="[object Int16Array]",me="[object Int32Array]",ve="[object Uint8Array]",ge="[object Uint8ClampedArray]",ye="[object Uint16Array]",be="[object Uint32Array]",_e=/\b__p \+= '';/g,we=/\b(__p \+=) '' \+/g,ke=/(__e\(.*?\)|\b__t\)) \+\n'';/g,Ee=/&(?:amp|lt|gt|quot|#39);/g,xe=/[&<>"']/g,Se=RegExp(Ee.source),Ne=RegExp(xe.source),Ce=/<%-([\s\S]+?)%>/g,Oe=/<%([\s\S]+?)%>/g,Pe=/<%=([\s\S]+?)%>/g,je=/\.|\[(?:[^[\]]*|(["'])(?:(?!\1)[^\\]|\\.)*?\1)\]/,Te=/^\w*$/,ze=/[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|$))/g,Le=/[\\^$.*+?()[\]{}|]/g,Re=RegExp(Le.source),Me=/^\s+/,Ae=/\s/,Ie=/\{(?:\n\/\* \[wrapped with .+\] \*\/)?\n?/,De=/\{\n\/\* \[wrapped with (.+)\] \*/,Fe=/,? & /,Ue=/[^\x00-\x2f\x3a-\x40\x5b-\x60\x7b-\x7f]+/g,Be=/[()=,{}\[\]\/\s]/,We=/\\(\\)?/g,$e=/\$\{([^\\}]*(?:\\.[^\\}]*)*)\}/g,Ve=/\w*$/,He=/^[-+]0x[0-9a-f]+$/i,Qe=/^0b[01]+$/i,qe=/^\[object .+?Constructor\]$/,Ke=/^0o[0-7]+$/i,Ye=/^(?:0|[1-9]\d*)$/,Ge=/[\xc0-\xd6\xd8-\xf6\xf8-\xff\u0100-\u017f]/g,Xe=/($^)/,Ze=/['\n\r\u2028\u2029\\]/g,Je="\\u0300-\\u036f\\ufe20-\\ufe2f\\u20d0-\\u20ff",et="\\xac\\xb1\\xd7\\xf7\\x00-\\x2f\\x3a-\\x40\\x5b-\\x60\\x7b-\\xbf\\u2000-\\u206f \\t\\x0b\\f\\xa0\\ufeff\\n\\r\\u2028\\u2029\\u1680\\u180e\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200a\\u202f\\u205f\\u3000",tt="[\\ud800-\\udfff]",nt="["+et+"]",rt="["+Je+"]",at="\\d+",lt="[\\u2700-\\u27bf]",ut="[a-z\\xdf-\\xf6\\xf8-\\xff]",ot="[^\\ud800-\\udfff"+et+at+"\\u2700-\\u27bfa-z\\xdf-\\xf6\\xf8-\\xffA-Z\\xc0-\\xd6\\xd8-\\xde]",it="\\ud83c[\\udffb-\\udfff]",ct="[^\\ud800-\\udfff]",ft="(?:\\ud83c[\\udde6-\\uddff]){2}",st="[\\ud800-\\udbff][\\udc00-\\udfff]",dt="[A-Z\\xc0-\\xd6\\xd8-\\xde]",pt="(?:"+ut+"|"+ot+")",ht="(?:"+dt+"|"+ot+")",mt="(?:"+rt+"|"+it+")"+"?",vt="[\\ufe0e\\ufe0f]?"+mt+("(?:\\u200d(?:"+[ct,ft,st].join("|")+")[\\ufe0e\\ufe0f]?"+mt+")*"),gt="(?:"+[lt,ft,st].join("|")+")"+vt,yt="(?:"+[ct+rt+"?",rt,ft,st,tt].join("|")+")",bt=RegExp("['’]","g"),_t=RegExp(rt,"g"),wt=RegExp(it+"(?="+it+")|"+yt+vt,"g"),kt=RegExp([dt+"?"+ut+"+(?:['’](?:d|ll|m|re|s|t|ve))?(?="+[nt,dt,"$"].join("|")+")",ht+"+(?:['’](?:D|LL|M|RE|S|T|VE))?(?="+[nt,dt+pt,"$"].join("|")+")",dt+"?"+pt+"+(?:['’](?:d|ll|m|re|s|t|ve))?",dt+"+(?:['’](?:D|LL|M|RE|S|T|VE))?","\\d*(?:1ST|2ND|3RD|(?![123])\\dTH)(?=\\b|[a-z_])","\\d*(?:1st|2nd|3rd|(?![123])\\dth)(?=\\b|[A-Z_])",at,gt].join("|"),"g"),Et=RegExp("[\\u200d\\ud800-\\udfff"+Je+"\\ufe0e\\ufe0f]"),xt=/[a-z][A-Z]|[A-Z]{2}[a-z]|[0-9][a-zA-Z]|[a-zA-Z][0-9]|[^a-zA-Z0-9 ]/,St=["Array","Buffer","DataView","Date","Error","Float32Array","Float64Array","Function","Int8Array","Int16Array","Int32Array","Map","Math","Object","Promise","RegExp","Set","String","Symbol","TypeError","Uint8Array","Uint8ClampedArray","Uint16Array","Uint32Array","WeakMap","_","clearTimeout","isFinite","parseInt","setTimeout"],Nt=-1,Ct={};Ct[se]=Ct[de]=Ct[pe]=Ct[he]=Ct[me]=Ct[ve]=Ct[ge]=Ct[ye]=Ct[be]=!0,Ct[W]=Ct[$]=Ct[ce]=Ct[H]=Ct[fe]=Ct[Q]=Ct[K]=Ct[Y]=Ct[X]=Ct[Z]=Ct[ee]=Ct[ne]=Ct[re]=Ct[ae]=Ct[oe]=!1;var Ot={};Ot[W]=Ot[$]=Ot[ce]=Ot[fe]=Ot[H]=Ot[Q]=Ot[se]=Ot[de]=Ot[pe]=Ot[he]=Ot[me]=Ot[X]=Ot[Z]=Ot[ee]=Ot[ne]=Ot[re]=Ot[ae]=Ot[le]=Ot[ve]=Ot[ge]=Ot[ye]=Ot[be]=!0,Ot[K]=Ot[Y]=Ot[oe]=!1;var Pt={"\\":"\\","'":"'","\n":"n","\r":"r","\u2028":"u2028","\u2029":"u2029"},jt=parseFloat,Tt=parseInt,zt="object"==typeof e&&e&&e.Object===Object&&e,Lt="object"==typeof self&&self&&self.Object===Object&&self,Rt=zt||Lt||Function("return this")(),Mt=t&&!t.nodeType&&t,At=Mt&&"object"==typeof r&&r&&!r.nodeType&&r,It=At&&At.exports===Mt,Dt=It&&zt.process,Ft=function(){try{var e=At&&At.require&&At.require("util").types;return e||Dt&&Dt.binding&&Dt.binding("util")}catch(e){}}(),Ut=Ft&&Ft.isArrayBuffer,Bt=Ft&&Ft.isDate,Wt=Ft&&Ft.isMap,$t=Ft&&Ft.isRegExp,Vt=Ft&&Ft.isSet,Ht=Ft&&Ft.isTypedArray;function Qt(e,t,n){switch(n.length){case 0:return e.call(t);case 1:return e.call(t,n[0]);case 2:return e.call(t,n[0],n[1]);case 3:return e.call(t,n[0],n[1],n[2])}return e.apply(t,n)}function qt(e,t,n,r){for(var a=-1,l=null==e?0:e.length;++a<l;){var u=e[a];t(r,u,n(u),e)}return r}function Kt(e,t){for(var n=-1,r=null==e?0:e.length;++n<r&&!1!==t(e[n],n,e););return e}function Yt(e,t){for(var n=null==e?0:e.length;n--&&!1!==t(e[n],n,e););return e}function Gt(e,t){for(var n=-1,r=null==e?0:e.length;++n<r;)if(!t(e[n],n,e))return!1;return!0}function Xt(e,t){for(var n=-1,r=null==e?0:e.length,a=0,l=[];++n<r;){var u=e[n];t(u,n,e)&&(l[a++]=u)}return l}function Zt(e,t){return!!(null==e?0:e.length)&&cn(e,t,0)>-1}function Jt(e,t,n){for(var r=-1,a=null==e?0:e.length;++r<a;)if(n(t,e[r]))return!0;return!1}function en(e,t){for(var n=-1,r=null==e?0:e.length,a=Array(r);++n<r;)a[n]=t(e[n],n,e);return a}function tn(e,t){for(var n=-1,r=t.length,a=e.length;++n<r;)e[a+n]=t[n];return e}function nn(e,t,n,r){var a=-1,l=null==e?0:e.length;for(r&&l&&(n=e[++a]);++a<l;)n=t(n,e[a],a,e);return n}function rn(e,t,n,r){var a=null==e?0:e.length;for(r&&a&&(n=e[--a]);a--;)n=t(n,e[a],a,e);return n}function an(e,t){for(var n=-1,r=null==e?0:e.length;++n<r;)if(t(e[n],n,e))return!0;return!1}var ln=pn("length");function un(e,t,n){var r;return n(e,function(e,n,a){if(t(e,n,a))return r=n,!1}),r}function on(e,t,n,r){for(var a=e.length,l=n+(r?1:-1);r?l--:++l<a;)if(t(e[l],l,e))return l;return-1}function cn(e,t,n){return t==t?function(e,t,n){var r=n-1,a=e.length;for(;++r<a;)if(e[r]===t)return r;return-1}(e,t,n):on(e,sn,n)}function fn(e,t,n,r){for(var a=n-1,l=e.length;++a<l;)if(r(e[a],t))return a;return-1}function sn(e){return e!=e}function dn(e,t){var n=null==e?0:e.length;return n?vn(e,t)/n:I}function pn(e){return function(t){return null==t?l:t[e]}}function hn(e){return function(t){return null==e?l:e[t]}}function mn(e,t,n,r,a){return a(e,function(e,a,l){n=r?(r=!1,e):t(n,e,a,l)}),n}function vn(e,t){for(var n,r=-1,a=e.length;++r<a;){var u=t(e[r]);u!==l&&(n=n===l?u:n+u)}return n}function gn(e,t){for(var n=-1,r=Array(e);++n<e;)r[n]=t(n);return r}function yn(e){return e?e.slice(0,Mn(e)+1).replace(Me,""):e}function bn(e){return function(t){return e(t)}}function _n(e,t){return en(t,function(t){return e[t]})}function wn(e,t){return e.has(t)}function kn(e,t){for(var n=-1,r=e.length;++n<r&&cn(t,e[n],0)>-1;);return n}function En(e,t){for(var n=e.length;n--&&cn(t,e[n],0)>-1;);return n}var xn=hn({"À":"A","Á":"A","Â":"A","Ã":"A","Ä":"A","Å":"A","à":"a","á":"a","â":"a","ã":"a","ä":"a","å":"a","Ç":"C","ç":"c","Ð":"D","ð":"d","È":"E","É":"E","Ê":"E","Ë":"E","è":"e","é":"e","ê":"e","ë":"e","Ì":"I","Í":"I","Î":"I","Ï":"I","ì":"i","í":"i","î":"i","ï":"i","Ñ":"N","ñ":"n","Ò":"O","Ó":"O","Ô":"O","Õ":"O","Ö":"O","Ø":"O","ò":"o","ó":"o","ô":"o","õ":"o","ö":"o","ø":"o","Ù":"U","Ú":"U","Û":"U","Ü":"U","ù":"u","ú":"u","û":"u","ü":"u","Ý":"Y","ý":"y","ÿ":"y","Æ":"Ae","æ":"ae","Þ":"Th","þ":"th","ß":"ss","Ā":"A","Ă":"A","Ą":"A","ā":"a","ă":"a","ą":"a","Ć":"C","Ĉ":"C","Ċ":"C","Č":"C","ć":"c","ĉ":"c","ċ":"c","č":"c","Ď":"D","Đ":"D","ď":"d","đ":"d","Ē":"E","Ĕ":"E","Ė":"E","Ę":"E","Ě":"E","ē":"e","ĕ":"e","ė":"e","ę":"e","ě":"e","Ĝ":"G","Ğ":"G","Ġ":"G","Ģ":"G","ĝ":"g","ğ":"g","ġ":"g","ģ":"g","Ĥ":"H","Ħ":"H","ĥ":"h","ħ":"h","Ĩ":"I","Ī":"I","Ĭ":"I","Į":"I","İ":"I","ĩ":"i","ī":"i","ĭ":"i","į":"i","ı":"i","Ĵ":"J","ĵ":"j","Ķ":"K","ķ":"k","ĸ":"k","Ĺ":"L","Ļ":"L","Ľ":"L","Ŀ":"L","Ł":"L","ĺ":"l","ļ":"l","ľ":"l","ŀ":"l","ł":"l","Ń":"N","Ņ":"N","Ň":"N","Ŋ":"N","ń":"n","ņ":"n","ň":"n","ŋ":"n","Ō":"O","Ŏ":"O","Ő":"O","ō":"o","ŏ":"o","ő":"o","Ŕ":"R","Ŗ":"R","Ř":"R","ŕ":"r","ŗ":"r","ř":"r","Ś":"S","Ŝ":"S","Ş":"S","Š":"S","ś":"s","ŝ":"s","ş":"s","š":"s","Ţ":"T","Ť":"T","Ŧ":"T","ţ":"t","ť":"t","ŧ":"t","Ũ":"U","Ū":"U","Ŭ":"U","Ů":"U","Ű":"U","Ų":"U","ũ":"u","ū":"u","ŭ":"u","ů":"u","ű":"u","ų":"u","Ŵ":"W","ŵ":"w","Ŷ":"Y","ŷ":"y","Ÿ":"Y","Ź":"Z","Ż":"Z","Ž":"Z","ź":"z","ż":"z","ž":"z","Ĳ":"IJ","ĳ":"ij","Œ":"Oe","œ":"oe","ŉ":"'n","ſ":"s"}),Sn=hn({"&":"&amp;","<":"&lt;",">":"&gt;",'"':"&quot;","'":"&#39;"});function Nn(e){return"\\"+Pt[e]}function Cn(e){return Et.test(e)}function On(e){var t=-1,n=Array(e.size);return e.forEach(function(e,r){n[++t]=[r,e]}),n}function Pn(e,t){return function(n){return e(t(n))}}function jn(e,t){for(var n=-1,r=e.length,a=0,l=[];++n<r;){var u=e[n];u!==t&&u!==d||(e[n]=d,l[a++]=n)}return l}function Tn(e){var t=-1,n=Array(e.size);return e.forEach(function(e){n[++t]=e}),n}function zn(e){var t=-1,n=Array(e.size);return e.forEach(function(e){n[++t]=[e,e]}),n}function Ln(e){return Cn(e)?function(e){var t=wt.lastIndex=0;for(;wt.test(e);)++t;return t}(e):ln(e)}function Rn(e){return Cn(e)?function(e){return e.match(wt)||[]}(e):function(e){return e.split("")}(e)}function Mn(e){for(var t=e.length;t--&&Ae.test(e.charAt(t)););return t}var An=hn({"&amp;":"&","&lt;":"<","&gt;":">","&quot;":'"',"&#39;":"'"});var In=function e(t){var n,r=(t=null==t?Rt:In.defaults(Rt.Object(),t,In.pick(Rt,St))).Array,a=t.Date,Ae=t.Error,Je=t.Function,et=t.Math,tt=t.Object,nt=t.RegExp,rt=t.String,at=t.TypeError,lt=r.prototype,ut=Je.prototype,ot=tt.prototype,it=t["__core-js_shared__"],ct=ut.toString,ft=ot.hasOwnProperty,st=0,dt=(n=/[^.]+$/.exec(it&&it.keys&&it.keys.IE_PROTO||""))?"Symbol(src)_1."+n:"",pt=ot.toString,ht=ct.call(tt),mt=Rt._,vt=nt("^"+ct.call(ft).replace(Le,"\\$&").replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g,"$1.*?")+"$"),gt=It?t.Buffer:l,yt=t.Symbol,wt=t.Uint8Array,Et=gt?gt.allocUnsafe:l,Pt=Pn(tt.getPrototypeOf,tt),zt=tt.create,Lt=ot.propertyIsEnumerable,Mt=lt.splice,At=yt?yt.isConcatSpreadable:l,Dt=yt?yt.iterator:l,Ft=yt?yt.toStringTag:l,ln=function(){try{var e=Ul(tt,"defineProperty");return e({},"",{}),e}catch(e){}}(),hn=t.clearTimeout!==Rt.clearTimeout&&t.clearTimeout,Dn=a&&a.now!==Rt.Date.now&&a.now,Fn=t.setTimeout!==Rt.setTimeout&&t.setTimeout,Un=et.ceil,Bn=et.floor,Wn=tt.getOwnPropertySymbols,$n=gt?gt.isBuffer:l,Vn=t.isFinite,Hn=lt.join,Qn=Pn(tt.keys,tt),qn=et.max,Kn=et.min,Yn=a.now,Gn=t.parseInt,Xn=et.random,Zn=lt.reverse,Jn=Ul(t,"DataView"),er=Ul(t,"Map"),tr=Ul(t,"Promise"),nr=Ul(t,"Set"),rr=Ul(t,"WeakMap"),ar=Ul(tt,"create"),lr=rr&&new rr,ur={},or=du(Jn),ir=du(er),cr=du(tr),fr=du(nr),sr=du(rr),dr=yt?yt.prototype:l,pr=dr?dr.valueOf:l,hr=dr?dr.toString:l;function mr(e){if(jo(e)&&!bo(e)&&!(e instanceof br)){if(e instanceof yr)return e;if(ft.call(e,"__wrapped__"))return pu(e)}return new yr(e)}var vr=function(){function e(){}return function(t){if(!Po(t))return{};if(zt)return zt(t);e.prototype=t;var n=new e;return e.prototype=l,n}}();function gr(){}function yr(e,t){this.__wrapped__=e,this.__actions__=[],this.__chain__=!!t,this.__index__=0,this.__values__=l}function br(e){this.__wrapped__=e,this.__actions__=[],this.__dir__=1,this.__filtered__=!1,this.__iteratees__=[],this.__takeCount__=D,this.__views__=[]}function _r(e){var t=-1,n=null==e?0:e.length;for(this.clear();++t<n;){var r=e[t];this.set(r[0],r[1])}}function wr(e){var t=-1,n=null==e?0:e.length;for(this.clear();++t<n;){var r=e[t];this.set(r[0],r[1])}}function kr(e){var t=-1,n=null==e?0:e.length;for(this.clear();++t<n;){var r=e[t];this.set(r[0],r[1])}}function Er(e){var t=-1,n=null==e?0:e.length;for(this.__data__=new kr;++t<n;)this.add(e[t])}function xr(e){var t=this.__data__=new wr(e);this.size=t.size}function Sr(e,t){var n=bo(e),r=!n&&yo(e),a=!n&&!r&&Eo(e),l=!n&&!r&&!a&&Do(e),u=n||r||a||l,o=u?gn(e.length,rt):[],i=o.length;for(var c in e)!t&&!ft.call(e,c)||u&&("length"==c||a&&("offset"==c||"parent"==c)||l&&("buffer"==c||"byteLength"==c||"byteOffset"==c)||ql(c,i))||o.push(c);return o}function Nr(e){var t=e.length;return t?e[Ea(0,t-1)]:l}function Cr(e,t){return cu(al(e),Ar(t,0,e.length))}function Or(e){return cu(al(e))}function Pr(e,t,n){(n===l||mo(e[t],n))&&(n!==l||t in e)||Rr(e,t,n)}function jr(e,t,n){var r=e[t];ft.call(e,t)&&mo(r,n)&&(n!==l||t in e)||Rr(e,t,n)}function Tr(e,t){for(var n=e.length;n--;)if(mo(e[n][0],t))return n;return-1}function zr(e,t,n,r){return Br(e,function(e,a,l){t(r,e,n(e),l)}),r}function Lr(e,t){return e&&ll(t,ui(t),e)}function Rr(e,t,n){"__proto__"==t&&ln?ln(e,t,{configurable:!0,enumerable:!0,value:n,writable:!0}):e[t]=n}function Mr(e,t){for(var n=-1,a=t.length,u=r(a),o=null==e;++n<a;)u[n]=o?l:ti(e,t[n]);return u}function Ar(e,t,n){return e==e&&(n!==l&&(e=e<=n?e:n),t!==l&&(e=e>=t?e:t)),e}function Ir(e,t,n,r,a,u){var o,i=t&p,c=t&h,f=t&m;if(n&&(o=a?n(e,r,a,u):n(e)),o!==l)return o;if(!Po(e))return e;var s=bo(e);if(s){if(o=function(e){var t=e.length,n=new e.constructor(t);t&&"string"==typeof e[0]&&ft.call(e,"index")&&(n.index=e.index,n.input=e.input);return n}(e),!i)return al(e,o)}else{var d=$l(e),v=d==Y||d==G;if(Eo(e))return Za(e,i);if(d==ee||d==W||v&&!a){if(o=c||v?{}:Hl(e),!i)return c?function(e,t){return ll(e,Wl(e),t)}(e,function(e,t){return e&&ll(t,oi(t),e)}(o,e)):function(e,t){return ll(e,Bl(e),t)}(e,Lr(o,e))}else{if(!Ot[d])return a?e:{};o=function(e,t,n){var r=e.constructor;switch(t){case ce:return Ja(e);case H:case Q:return new r(+e);case fe:return function(e,t){var n=t?Ja(e.buffer):e.buffer;return new e.constructor(n,e.byteOffset,e.byteLength)}(e,n);case se:case de:case pe:case he:case me:case ve:case ge:case ye:case be:return el(e,n);case X:return new r;case Z:case ae:return new r(e);case ne:return function(e){var t=new e.constructor(e.source,Ve.exec(e));return t.lastIndex=e.lastIndex,t}(e);case re:return new r;case le:return a=e,pr?tt(pr.call(a)):{}}var a}(e,d,i)}}u||(u=new xr);var g=u.get(e);if(g)return g;u.set(e,o),Mo(e)?e.forEach(function(r){o.add(Ir(r,t,n,r,e,u))}):To(e)&&e.forEach(function(r,a){o.set(a,Ir(r,t,n,a,e,u))});var y=s?l:(f?c?Ll:zl:c?oi:ui)(e);return Kt(y||e,function(r,a){y&&(r=e[a=r]),jr(o,a,Ir(r,t,n,a,e,u))}),o}function Dr(e,t,n){var r=n.length;if(null==e)return!r;for(e=tt(e);r--;){var a=n[r],u=t[a],o=e[a];if(o===l&&!(a in e)||!u(o))return!1}return!0}function Fr(e,t,n){if("function"!=typeof e)throw new at(i);return lu(function(){e.apply(l,n)},t)}function Ur(e,t,n,r){var a=-1,l=Zt,o=!0,i=e.length,c=[],f=t.length;if(!i)return c;n&&(t=en(t,bn(n))),r?(l=Jt,o=!1):t.length>=u&&(l=wn,o=!1,t=new Er(t));e:for(;++a<i;){var s=e[a],d=null==n?s:n(s);if(s=r||0!==s?s:0,o&&d==d){for(var p=f;p--;)if(t[p]===d)continue e;c.push(s)}else l(t,d,r)||c.push(s)}return c}mr.templateSettings={escape:Ce,evaluate:Oe,interpolate:Pe,variable:"",imports:{_:mr}},mr.prototype=gr.prototype,mr.prototype.constructor=mr,yr.prototype=vr(gr.prototype),yr.prototype.constructor=yr,br.prototype=vr(gr.prototype),br.prototype.constructor=br,_r.prototype.clear=function(){this.__data__=ar?ar(null):{},this.size=0},_r.prototype.delete=function(e){var t=this.has(e)&&delete this.__data__[e];return this.size-=t?1:0,t},_r.prototype.get=function(e){var t=this.__data__;if(ar){var n=t[e];return n===f?l:n}return ft.call(t,e)?t[e]:l},_r.prototype.has=function(e){var t=this.__data__;return ar?t[e]!==l:ft.call(t,e)},_r.prototype.set=function(e,t){var n=this.__data__;return this.size+=this.has(e)?0:1,n[e]=ar&&t===l?f:t,this},wr.prototype.clear=function(){this.__data__=[],this.size=0},wr.prototype.delete=function(e){var t=this.__data__,n=Tr(t,e);return!(n<0)&&(n==t.length-1?t.pop():Mt.call(t,n,1),--this.size,!0)},wr.prototype.get=function(e){var t=this.__data__,n=Tr(t,e);return n<0?l:t[n][1]},wr.prototype.has=function(e){return Tr(this.__data__,e)>-1},wr.prototype.set=function(e,t){var n=this.__data__,r=Tr(n,e);return r<0?(++this.size,n.push([e,t])):n[r][1]=t,this},kr.prototype.clear=function(){this.size=0,this.__data__={hash:new _r,map:new(er||wr),string:new _r}},kr.prototype.delete=function(e){var t=Dl(this,e).delete(e);return this.size-=t?1:0,t},kr.prototype.get=function(e){return Dl(this,e).get(e)},kr.prototype.has=function(e){return Dl(this,e).has(e)},kr.prototype.set=function(e,t){var n=Dl(this,e),r=n.size;return n.set(e,t),this.size+=n.size==r?0:1,this},Er.prototype.add=Er.prototype.push=function(e){return this.__data__.set(e,f),this},Er.prototype.has=function(e){return this.__data__.has(e)},xr.prototype.clear=function(){this.__data__=new wr,this.size=0},xr.prototype.delete=function(e){var t=this.__data__,n=t.delete(e);return this.size=t.size,n},xr.prototype.get=function(e){return this.__data__.get(e)},xr.prototype.has=function(e){return this.__data__.has(e)},xr.prototype.set=function(e,t){var n=this.__data__;if(n instanceof wr){var r=n.__data__;if(!er||r.length<u-1)return r.push([e,t]),this.size=++n.size,this;n=this.__data__=new kr(r)}return n.set(e,t),this.size=n.size,this};var Br=il(Yr),Wr=il(Gr,!0);function $r(e,t){var n=!0;return Br(e,function(e,r,a){return n=!!t(e,r,a)}),n}function Vr(e,t,n){for(var r=-1,a=e.length;++r<a;){var u=e[r],o=t(u);if(null!=o&&(i===l?o==o&&!Io(o):n(o,i)))var i=o,c=u}return c}function Hr(e,t){var n=[];return Br(e,function(e,r,a){t(e,r,a)&&n.push(e)}),n}function Qr(e,t,n,r,a){var l=-1,u=e.length;for(n||(n=Ql),a||(a=[]);++l<u;){var o=e[l];t>0&&n(o)?t>1?Qr(o,t-1,n,r,a):tn(a,o):r||(a[a.length]=o)}return a}var qr=cl(),Kr=cl(!0);function Yr(e,t){return e&&qr(e,t,ui)}function Gr(e,t){return e&&Kr(e,t,ui)}function Xr(e,t){return Xt(t,function(t){return No(e[t])})}function Zr(e,t){for(var n=0,r=(t=Ka(t,e)).length;null!=e&&n<r;)e=e[su(t[n++])];return n&&n==r?e:l}function Jr(e,t,n){var r=t(e);return bo(e)?r:tn(r,n(e))}function ea(e){return null==e?e===l?ue:J:Ft&&Ft in tt(e)?function(e){var t=ft.call(e,Ft),n=e[Ft];try{e[Ft]=l;var r=!0}catch(e){}var a=pt.call(e);r&&(t?e[Ft]=n:delete e[Ft]);return a}(e):function(e){return pt.call(e)}(e)}function ta(e,t){return e>t}function na(e,t){return null!=e&&ft.call(e,t)}function ra(e,t){return null!=e&&t in tt(e)}function aa(e,t,n){for(var a=n?Jt:Zt,u=e[0].length,o=e.length,i=o,c=r(o),f=1/0,s=[];i--;){var d=e[i];i&&t&&(d=en(d,bn(t))),f=Kn(d.length,f),c[i]=!n&&(t||u>=120&&d.length>=120)?new Er(i&&d):l}d=e[0];var p=-1,h=c[0];e:for(;++p<u&&s.length<f;){var m=d[p],v=t?t(m):m;if(m=n||0!==m?m:0,!(h?wn(h,v):a(s,v,n))){for(i=o;--i;){var g=c[i];if(!(g?wn(g,v):a(e[i],v,n)))continue e}h&&h.push(v),s.push(m)}}return s}function la(e,t,n){var r=null==(e=nu(e,t=Ka(t,e)))?e:e[su(xu(t))];return null==r?l:Qt(r,e,n)}function ua(e){return jo(e)&&ea(e)==W}function oa(e,t,n,r,a){return e===t||(null==e||null==t||!jo(e)&&!jo(t)?e!=e&&t!=t:function(e,t,n,r,a,u){var o=bo(e),i=bo(t),c=o?$:$l(e),f=i?$:$l(t),s=(c=c==W?ee:c)==ee,d=(f=f==W?ee:f)==ee,p=c==f;if(p&&Eo(e)){if(!Eo(t))return!1;o=!0,s=!1}if(p&&!s)return u||(u=new xr),o||Do(e)?jl(e,t,n,r,a,u):function(e,t,n,r,a,l,u){switch(n){case fe:if(e.byteLength!=t.byteLength||e.byteOffset!=t.byteOffset)return!1;e=e.buffer,t=t.buffer;case ce:return!(e.byteLength!=t.byteLength||!l(new wt(e),new wt(t)));case H:case Q:case Z:return mo(+e,+t);case K:return e.name==t.name&&e.message==t.message;case ne:case ae:return e==t+"";case X:var o=On;case re:var i=r&v;if(o||(o=Tn),e.size!=t.size&&!i)return!1;var c=u.get(e);if(c)return c==t;r|=g,u.set(e,t);var f=jl(o(e),o(t),r,a,l,u);return u.delete(e),f;case le:if(pr)return pr.call(e)==pr.call(t)}return!1}(e,t,c,n,r,a,u);if(!(n&v)){var h=s&&ft.call(e,"__wrapped__"),m=d&&ft.call(t,"__wrapped__");if(h||m){var y=h?e.value():e,b=m?t.value():t;return u||(u=new xr),a(y,b,n,r,u)}}if(!p)return!1;return u||(u=new xr),function(e,t,n,r,a,u){var o=n&v,i=zl(e),c=i.length,f=zl(t).length;if(c!=f&&!o)return!1;var s=c;for(;s--;){var d=i[s];if(!(o?d in t:ft.call(t,d)))return!1}var p=u.get(e),h=u.get(t);if(p&&h)return p==t&&h==e;var m=!0;u.set(e,t),u.set(t,e);var g=o;for(;++s<c;){d=i[s];var y=e[d],b=t[d];if(r)var _=o?r(b,y,d,t,e,u):r(y,b,d,e,t,u);if(!(_===l?y===b||a(y,b,n,r,u):_)){m=!1;break}g||(g="constructor"==d)}if(m&&!g){var w=e.constructor,k=t.constructor;w!=k&&"constructor"in e&&"constructor"in t&&!("function"==typeof w&&w instanceof w&&"function"==typeof k&&k instanceof k)&&(m=!1)}return u.delete(e),u.delete(t),m}(e,t,n,r,a,u)}(e,t,n,r,oa,a))}function ia(e,t,n,r){var a=n.length,u=a,o=!r;if(null==e)return!u;for(e=tt(e);a--;){var i=n[a];if(o&&i[2]?i[1]!==e[i[0]]:!(i[0]in e))return!1}for(;++a<u;){var c=(i=n[a])[0],f=e[c],s=i[1];if(o&&i[2]){if(f===l&&!(c in e))return!1}else{var d=new xr;if(r)var p=r(f,s,c,e,t,d);if(!(p===l?oa(s,f,v|g,r,d):p))return!1}}return!0}function ca(e){return!(!Po(e)||(t=e,dt&&dt in t))&&(No(e)?vt:qe).test(du(e));var t}function fa(e){return"function"==typeof e?e:null==e?zi:"object"==typeof e?bo(e)?va(e[0],e[1]):ma(e):Bi(e)}function sa(e){if(!Zl(e))return Qn(e);var t=[];for(var n in tt(e))ft.call(e,n)&&"constructor"!=n&&t.push(n);return t}function da(e){if(!Po(e))return function(e){var t=[];if(null!=e)for(var n in tt(e))t.push(n);return t}(e);var t=Zl(e),n=[];for(var r in e)("constructor"!=r||!t&&ft.call(e,r))&&n.push(r);return n}function pa(e,t){return e<t}function ha(e,t){var n=-1,a=wo(e)?r(e.length):[];return Br(e,function(e,r,l){a[++n]=t(e,r,l)}),a}function ma(e){var t=Fl(e);return 1==t.length&&t[0][2]?eu(t[0][0],t[0][1]):function(n){return n===e||ia(n,e,t)}}function va(e,t){return Yl(e)&&Jl(t)?eu(su(e),t):function(n){var r=ti(n,e);return r===l&&r===t?ni(n,e):oa(t,r,v|g)}}function ga(e,t,n,r,a){e!==t&&qr(t,function(u,o){if(a||(a=new xr),Po(u))!function(e,t,n,r,a,u,o){var i=ru(e,n),c=ru(t,n),f=o.get(c);if(f)return void Pr(e,n,f);var s=u?u(i,c,n+"",e,t,o):l,d=s===l;if(d){var p=bo(c),h=!p&&Eo(c),m=!p&&!h&&Do(c);s=c,p||h||m?bo(i)?s=i:ko(i)?s=al(i):h?(d=!1,s=Za(c,!0)):m?(d=!1,s=el(c,!0)):s=[]:Lo(c)||yo(c)?(s=i,yo(i)?s=Qo(i):Po(i)&&!No(i)||(s=Hl(c))):d=!1}d&&(o.set(c,s),a(s,c,r,u,o),o.delete(c));Pr(e,n,s)}(e,t,o,n,ga,r,a);else{var i=r?r(ru(e,o),u,o+"",e,t,a):l;i===l&&(i=u),Pr(e,o,i)}},oi)}function ya(e,t){var n=e.length;if(n)return ql(t+=t<0?n:0,n)?e[t]:l}function ba(e,t,n){t=t.length?en(t,function(e){return bo(e)?function(t){return Zr(t,1===e.length?e[0]:e)}:e}):[zi];var r=-1;return t=en(t,bn(Il())),function(e,t){var n=e.length;for(e.sort(t);n--;)e[n]=e[n].value;return e}(ha(e,function(e,n,a){return{criteria:en(t,function(t){return t(e)}),index:++r,value:e}}),function(e,t){return function(e,t,n){var r=-1,a=e.criteria,l=t.criteria,u=a.length,o=n.length;for(;++r<u;){var i=tl(a[r],l[r]);if(i){if(r>=o)return i;var c=n[r];return i*("desc"==c?-1:1)}}return e.index-t.index}(e,t,n)})}function _a(e,t,n){for(var r=-1,a=t.length,l={};++r<a;){var u=t[r],o=Zr(e,u);n(o,u)&&Oa(l,Ka(u,e),o)}return l}function wa(e,t,n,r){var a=r?fn:cn,l=-1,u=t.length,o=e;for(e===t&&(t=al(t)),n&&(o=en(e,bn(n)));++l<u;)for(var i=0,c=t[l],f=n?n(c):c;(i=a(o,f,i,r))>-1;)o!==e&&Mt.call(o,i,1),Mt.call(e,i,1);return e}function ka(e,t){for(var n=e?t.length:0,r=n-1;n--;){var a=t[n];if(n==r||a!==l){var l=a;ql(a)?Mt.call(e,a,1):Ua(e,a)}}return e}function Ea(e,t){return e+Bn(Xn()*(t-e+1))}function xa(e,t){var n="";if(!e||t<1||t>M)return n;do{t%2&&(n+=e),(t=Bn(t/2))&&(e+=e)}while(t);return n}function Sa(e,t){return uu(tu(e,t,zi),e+"")}function Na(e){return Nr(mi(e))}function Ca(e,t){var n=mi(e);return cu(n,Ar(t,0,n.length))}function Oa(e,t,n,r){if(!Po(e))return e;for(var a=-1,u=(t=Ka(t,e)).length,o=u-1,i=e;null!=i&&++a<u;){var c=su(t[a]),f=n;if("__proto__"===c||"constructor"===c||"prototype"===c)return e;if(a!=o){var s=i[c];(f=r?r(s,c,i):l)===l&&(f=Po(s)?s:ql(t[a+1])?[]:{})}jr(i,c,f),i=i[c]}return e}var Pa=lr?function(e,t){return lr.set(e,t),e}:zi,ja=ln?function(e,t){return ln(e,"toString",{configurable:!0,enumerable:!1,value:Pi(t),writable:!0})}:zi;function Ta(e){return cu(mi(e))}function za(e,t,n){var a=-1,l=e.length;t<0&&(t=-t>l?0:l+t),(n=n>l?l:n)<0&&(n+=l),l=t>n?0:n-t>>>0,t>>>=0;for(var u=r(l);++a<l;)u[a]=e[a+t];return u}function La(e,t){var n;return Br(e,function(e,r,a){return!(n=t(e,r,a))}),!!n}function Ra(e,t,n){var r=0,a=null==e?r:e.length;if("number"==typeof t&&t==t&&a<=U){for(;r<a;){var l=r+a>>>1,u=e[l];null!==u&&!Io(u)&&(n?u<=t:u<t)?r=l+1:a=l}return a}return Ma(e,t,zi,n)}function Ma(e,t,n,r){var a=0,u=null==e?0:e.length;if(0===u)return 0;for(var o=(t=n(t))!=t,i=null===t,c=Io(t),f=t===l;a<u;){var s=Bn((a+u)/2),d=n(e[s]),p=d!==l,h=null===d,m=d==d,v=Io(d);if(o)var g=r||m;else g=f?m&&(r||p):i?m&&p&&(r||!h):c?m&&p&&!h&&(r||!v):!h&&!v&&(r?d<=t:d<t);g?a=s+1:u=s}return Kn(u,F)}function Aa(e,t){for(var n=-1,r=e.length,a=0,l=[];++n<r;){var u=e[n],o=t?t(u):u;if(!n||!mo(o,i)){var i=o;l[a++]=0===u?0:u}}return l}function Ia(e){return"number"==typeof e?e:Io(e)?I:+e}function Da(e){if("string"==typeof e)return e;if(bo(e))return en(e,Da)+"";if(Io(e))return hr?hr.call(e):"";var t=e+"";return"0"==t&&1/e==-R?"-0":t}function Fa(e,t,n){var r=-1,a=Zt,l=e.length,o=!0,i=[],c=i;if(n)o=!1,a=Jt;else if(l>=u){var f=t?null:xl(e);if(f)return Tn(f);o=!1,a=wn,c=new Er}else c=t?[]:i;e:for(;++r<l;){var s=e[r],d=t?t(s):s;if(s=n||0!==s?s:0,o&&d==d){for(var p=c.length;p--;)if(c[p]===d)continue e;t&&c.push(d),i.push(s)}else a(c,d,n)||(c!==i&&c.push(d),i.push(s))}return i}function Ua(e,t){return null==(e=nu(e,t=Ka(t,e)))||delete e[su(xu(t))]}function Ba(e,t,n,r){return Oa(e,t,n(Zr(e,t)),r)}function Wa(e,t,n,r){for(var a=e.length,l=r?a:-1;(r?l--:++l<a)&&t(e[l],l,e););return n?za(e,r?0:l,r?l+1:a):za(e,r?l+1:0,r?a:l)}function $a(e,t){var n=e;return n instanceof br&&(n=n.value()),nn(t,function(e,t){return t.func.apply(t.thisArg,tn([e],t.args))},n)}function Va(e,t,n){var a=e.length;if(a<2)return a?Fa(e[0]):[];for(var l=-1,u=r(a);++l<a;)for(var o=e[l],i=-1;++i<a;)i!=l&&(u[l]=Ur(u[l]||o,e[i],t,n));return Fa(Qr(u,1),t,n)}function Ha(e,t,n){for(var r=-1,a=e.length,u=t.length,o={};++r<a;){var i=r<u?t[r]:l;n(o,e[r],i)}return o}function Qa(e){return ko(e)?e:[]}function qa(e){return"function"==typeof e?e:zi}function Ka(e,t){return bo(e)?e:Yl(e,t)?[e]:fu(qo(e))}var Ya=Sa;function Ga(e,t,n){var r=e.length;return n=n===l?r:n,!t&&n>=r?e:za(e,t,n)}var Xa=hn||function(e){return Rt.clearTimeout(e)};function Za(e,t){if(t)return e.slice();var n=e.length,r=Et?Et(n):new e.constructor(n);return e.copy(r),r}function Ja(e){var t=new e.constructor(e.byteLength);return new wt(t).set(new wt(e)),t}function el(e,t){var n=t?Ja(e.buffer):e.buffer;return new e.constructor(n,e.byteOffset,e.length)}function tl(e,t){if(e!==t){var n=e!==l,r=null===e,a=e==e,u=Io(e),o=t!==l,i=null===t,c=t==t,f=Io(t);if(!i&&!f&&!u&&e>t||u&&o&&c&&!i&&!f||r&&o&&c||!n&&c||!a)return 1;if(!r&&!u&&!f&&e<t||f&&n&&a&&!r&&!u||i&&n&&a||!o&&a||!c)return-1}return 0}function nl(e,t,n,a){for(var l=-1,u=e.length,o=n.length,i=-1,c=t.length,f=qn(u-o,0),s=r(c+f),d=!a;++i<c;)s[i]=t[i];for(;++l<o;)(d||l<u)&&(s[n[l]]=e[l]);for(;f--;)s[i++]=e[l++];return s}function rl(e,t,n,a){for(var l=-1,u=e.length,o=-1,i=n.length,c=-1,f=t.length,s=qn(u-i,0),d=r(s+f),p=!a;++l<s;)d[l]=e[l];for(var h=l;++c<f;)d[h+c]=t[c];for(;++o<i;)(p||l<u)&&(d[h+n[o]]=e[l++]);return d}function al(e,t){var n=-1,a=e.length;for(t||(t=r(a));++n<a;)t[n]=e[n];return t}function ll(e,t,n,r){var a=!n;n||(n={});for(var u=-1,o=t.length;++u<o;){var i=t[u],c=r?r(n[i],e[i],i,n,e):l;c===l&&(c=e[i]),a?Rr(n,i,c):jr(n,i,c)}return n}function ul(e,t){return function(n,r){var a=bo(n)?qt:zr,l=t?t():{};return a(n,e,Il(r,2),l)}}function ol(e){return Sa(function(t,n){var r=-1,a=n.length,u=a>1?n[a-1]:l,o=a>2?n[2]:l;for(u=e.length>3&&"function"==typeof u?(a--,u):l,o&&Kl(n[0],n[1],o)&&(u=a<3?l:u,a=1),t=tt(t);++r<a;){var i=n[r];i&&e(t,i,r,u)}return t})}function il(e,t){return function(n,r){if(null==n)return n;if(!wo(n))return e(n,r);for(var a=n.length,l=t?a:-1,u=tt(n);(t?l--:++l<a)&&!1!==r(u[l],l,u););return n}}function cl(e){return function(t,n,r){for(var a=-1,l=tt(t),u=r(t),o=u.length;o--;){var i=u[e?o:++a];if(!1===n(l[i],i,l))break}return t}}function fl(e){return function(t){var n=Cn(t=qo(t))?Rn(t):l,r=n?n[0]:t.charAt(0),a=n?Ga(n,1).join(""):t.slice(1);return r[e]()+a}}function sl(e){return function(t){return nn(Ni(yi(t).replace(bt,"")),e,"")}}function dl(e){return function(){var t=arguments;switch(t.length){case 0:return new e;case 1:return new e(t[0]);case 2:return new e(t[0],t[1]);case 3:return new e(t[0],t[1],t[2]);case 4:return new e(t[0],t[1],t[2],t[3]);case 5:return new e(t[0],t[1],t[2],t[3],t[4]);case 6:return new e(t[0],t[1],t[2],t[3],t[4],t[5]);case 7:return new e(t[0],t[1],t[2],t[3],t[4],t[5],t[6])}var n=vr(e.prototype),r=e.apply(n,t);return Po(r)?r:n}}function pl(e){return function(t,n,r){var a=tt(t);if(!wo(t)){var u=Il(n,3);t=ui(t),n=function(e){return u(a[e],e,a)}}var o=e(t,n,r);return o>-1?a[u?t[o]:o]:l}}function hl(e){return Tl(function(t){var n=t.length,r=n,a=yr.prototype.thru;for(e&&t.reverse();r--;){var u=t[r];if("function"!=typeof u)throw new at(i);if(a&&!o&&"wrapper"==Ml(u))var o=new yr([],!0)}for(r=o?r:n;++r<n;){var c=Ml(u=t[r]),f="wrapper"==c?Rl(u):l;o=f&&Gl(f[0])&&f[1]==(S|w|E|N)&&!f[4].length&&1==f[9]?o[Ml(f[0])].apply(o,f[3]):1==u.length&&Gl(u)?o[c]():o.thru(u)}return function(){var e=arguments,r=e[0];if(o&&1==e.length&&bo(r))return o.plant(r).value();for(var a=0,l=n?t[a].apply(this,e):r;++a<n;)l=t[a].call(this,l);return l}})}function ml(e,t,n,a,u,o,i,c,f,s){var d=t&S,p=t&y,h=t&b,m=t&(w|k),v=t&C,g=h?l:dl(e);return function y(){for(var b=arguments.length,_=r(b),w=b;w--;)_[w]=arguments[w];if(m)var k=Al(y),E=function(e,t){for(var n=e.length,r=0;n--;)e[n]===t&&++r;return r}(_,k);if(a&&(_=nl(_,a,u,m)),o&&(_=rl(_,o,i,m)),b-=E,m&&b<s){var x=jn(_,k);return kl(e,t,ml,y.placeholder,n,_,x,c,f,s-b)}var S=p?n:this,N=h?S[e]:e;return b=_.length,c?_=function(e,t){for(var n=e.length,r=Kn(t.length,n),a=al(e);r--;){var u=t[r];e[r]=ql(u,n)?a[u]:l}return e}(_,c):v&&b>1&&_.reverse(),d&&f<b&&(_.length=f),this&&this!==Rt&&this instanceof y&&(N=g||dl(N)),N.apply(S,_)}}function vl(e,t){return function(n,r){return function(e,t,n,r){return Yr(e,function(e,a,l){t(r,n(e),a,l)}),r}(n,e,t(r),{})}}function gl(e,t){return function(n,r){var a;if(n===l&&r===l)return t;if(n!==l&&(a=n),r!==l){if(a===l)return r;"string"==typeof n||"string"==typeof r?(n=Da(n),r=Da(r)):(n=Ia(n),r=Ia(r)),a=e(n,r)}return a}}function yl(e){return Tl(function(t){return t=en(t,bn(Il())),Sa(function(n){var r=this;return e(t,function(e){return Qt(e,r,n)})})})}function bl(e,t){var n=(t=t===l?" ":Da(t)).length;if(n<2)return n?xa(t,e):t;var r=xa(t,Un(e/Ln(t)));return Cn(t)?Ga(Rn(r),0,e).join(""):r.slice(0,e)}function _l(e){return function(t,n,a){return a&&"number"!=typeof a&&Kl(t,n,a)&&(n=a=l),t=Wo(t),n===l?(n=t,t=0):n=Wo(n),function(e,t,n,a){for(var l=-1,u=qn(Un((t-e)/(n||1)),0),o=r(u);u--;)o[a?u:++l]=e,e+=n;return o}(t,n,a=a===l?t<n?1:-1:Wo(a),e)}}function wl(e){return function(t,n){return"string"==typeof t&&"string"==typeof n||(t=Ho(t),n=Ho(n)),e(t,n)}}function kl(e,t,n,r,a,u,o,i,c,f){var s=t&w;t|=s?E:x,(t&=~(s?x:E))&_||(t&=~(y|b));var d=[e,t,a,s?u:l,s?o:l,s?l:u,s?l:o,i,c,f],p=n.apply(l,d);return Gl(e)&&au(p,d),p.placeholder=r,ou(p,e,t)}function El(e){var t=et[e];return function(e,n){if(e=Ho(e),(n=null==n?0:Kn($o(n),292))&&Vn(e)){var r=(qo(e)+"e").split("e");return+((r=(qo(t(r[0]+"e"+(+r[1]+n)))+"e").split("e"))[0]+"e"+(+r[1]-n))}return t(e)}}var xl=nr&&1/Tn(new nr([,-0]))[1]==R?function(e){return new nr(e)}:Ii;function Sl(e){return function(t){var n=$l(t);return n==X?On(t):n==re?zn(t):function(e,t){return en(t,function(t){return[t,e[t]]})}(t,e(t))}}function Nl(e,t,n,a,u,o,c,f){var s=t&b;if(!s&&"function"!=typeof e)throw new at(i);var p=a?a.length:0;if(p||(t&=~(E|x),a=u=l),c=c===l?c:qn($o(c),0),f=f===l?f:$o(f),p-=u?u.length:0,t&x){var h=a,m=u;a=u=l}var v=s?l:Rl(e),g=[e,t,n,a,u,h,m,o,c,f];if(v&&function(e,t){var n=e[1],r=t[1],a=n|r,l=a<(y|b|S),u=r==S&&n==w||r==S&&n==N&&e[7].length<=t[8]||r==(S|N)&&t[7].length<=t[8]&&n==w;if(!l&&!u)return e;r&y&&(e[2]=t[2],a|=n&y?0:_);var o=t[3];if(o){var i=e[3];e[3]=i?nl(i,o,t[4]):o,e[4]=i?jn(e[3],d):t[4]}(o=t[5])&&(i=e[5],e[5]=i?rl(i,o,t[6]):o,e[6]=i?jn(e[5],d):t[6]);(o=t[7])&&(e[7]=o);r&S&&(e[8]=null==e[8]?t[8]:Kn(e[8],t[8]));null==e[9]&&(e[9]=t[9]);e[0]=t[0],e[1]=a}(g,v),e=g[0],t=g[1],n=g[2],a=g[3],u=g[4],!(f=g[9]=g[9]===l?s?0:e.length:qn(g[9]-p,0))&&t&(w|k)&&(t&=~(w|k)),t&&t!=y)C=t==w||t==k?function(e,t,n){var a=dl(e);return function u(){for(var o=arguments.length,i=r(o),c=o,f=Al(u);c--;)i[c]=arguments[c];var s=o<3&&i[0]!==f&&i[o-1]!==f?[]:jn(i,f);return(o-=s.length)<n?kl(e,t,ml,u.placeholder,l,i,s,l,l,n-o):Qt(this&&this!==Rt&&this instanceof u?a:e,this,i)}}(e,t,f):t!=E&&t!=(y|E)||u.length?ml.apply(l,g):function(e,t,n,a){var l=t&y,u=dl(e);return function t(){for(var o=-1,i=arguments.length,c=-1,f=a.length,s=r(f+i),d=this&&this!==Rt&&this instanceof t?u:e;++c<f;)s[c]=a[c];for(;i--;)s[c++]=arguments[++o];return Qt(d,l?n:this,s)}}(e,t,n,a);else var C=function(e,t,n){var r=t&y,a=dl(e);return function t(){return(this&&this!==Rt&&this instanceof t?a:e).apply(r?n:this,arguments)}}(e,t,n);return ou((v?Pa:au)(C,g),e,t)}function Cl(e,t,n,r){return e===l||mo(e,ot[n])&&!ft.call(r,n)?t:e}function Ol(e,t,n,r,a,u){return Po(e)&&Po(t)&&(u.set(t,e),ga(e,t,l,Ol,u),u.delete(t)),e}function Pl(e){return Lo(e)?l:e}function jl(e,t,n,r,a,u){var o=n&v,i=e.length,c=t.length;if(i!=c&&!(o&&c>i))return!1;var f=u.get(e),s=u.get(t);if(f&&s)return f==t&&s==e;var d=-1,p=!0,h=n&g?new Er:l;for(u.set(e,t),u.set(t,e);++d<i;){var m=e[d],y=t[d];if(r)var b=o?r(y,m,d,t,e,u):r(m,y,d,e,t,u);if(b!==l){if(b)continue;p=!1;break}if(h){if(!an(t,function(e,t){if(!wn(h,t)&&(m===e||a(m,e,n,r,u)))return h.push(t)})){p=!1;break}}else if(m!==y&&!a(m,y,n,r,u)){p=!1;break}}return u.delete(e),u.delete(t),p}function Tl(e){return uu(tu(e,l,bu),e+"")}function zl(e){return Jr(e,ui,Bl)}function Ll(e){return Jr(e,oi,Wl)}var Rl=lr?function(e){return lr.get(e)}:Ii;function Ml(e){for(var t=e.name+"",n=ur[t],r=ft.call(ur,t)?n.length:0;r--;){var a=n[r],l=a.func;if(null==l||l==e)return a.name}return t}function Al(e){return(ft.call(mr,"placeholder")?mr:e).placeholder}function Il(){var e=mr.iteratee||Li;return e=e===Li?fa:e,arguments.length?e(arguments[0],arguments[1]):e}function Dl(e,t){var n,r,a=e.__data__;return("string"==(r=typeof(n=t))||"number"==r||"symbol"==r||"boolean"==r?"__proto__"!==n:null===n)?a["string"==typeof t?"string":"hash"]:a.map}function Fl(e){for(var t=ui(e),n=t.length;n--;){var r=t[n],a=e[r];t[n]=[r,a,Jl(a)]}return t}function Ul(e,t){var n=function(e,t){return null==e?l:e[t]}(e,t);return ca(n)?n:l}var Bl=Wn?function(e){return null==e?[]:(e=tt(e),Xt(Wn(e),function(t){return Lt.call(e,t)}))}:Vi,Wl=Wn?function(e){for(var t=[];e;)tn(t,Bl(e)),e=Pt(e);return t}:Vi,$l=ea;function Vl(e,t,n){for(var r=-1,a=(t=Ka(t,e)).length,l=!1;++r<a;){var u=su(t[r]);if(!(l=null!=e&&n(e,u)))break;e=e[u]}return l||++r!=a?l:!!(a=null==e?0:e.length)&&Oo(a)&&ql(u,a)&&(bo(e)||yo(e))}function Hl(e){return"function"!=typeof e.constructor||Zl(e)?{}:vr(Pt(e))}function Ql(e){return bo(e)||yo(e)||!!(At&&e&&e[At])}function ql(e,t){var n=typeof e;return!!(t=null==t?M:t)&&("number"==n||"symbol"!=n&&Ye.test(e))&&e>-1&&e%1==0&&e<t}function Kl(e,t,n){if(!Po(n))return!1;var r=typeof t;return!!("number"==r?wo(n)&&ql(t,n.length):"string"==r&&t in n)&&mo(n[t],e)}function Yl(e,t){if(bo(e))return!1;var n=typeof e;return!("number"!=n&&"symbol"!=n&&"boolean"!=n&&null!=e&&!Io(e))||(Te.test(e)||!je.test(e)||null!=t&&e in tt(t))}function Gl(e){var t=Ml(e),n=mr[t];if("function"!=typeof n||!(t in br.prototype))return!1;if(e===n)return!0;var r=Rl(n);return!!r&&e===r[0]}(Jn&&$l(new Jn(new ArrayBuffer(1)))!=fe||er&&$l(new er)!=X||tr&&"[object Promise]"!=$l(tr.resolve())||nr&&$l(new nr)!=re||rr&&$l(new rr)!=oe)&&($l=function(e){var t=ea(e),n=t==ee?e.constructor:l,r=n?du(n):"";if(r)switch(r){case or:return fe;case ir:return X;case cr:return"[object Promise]";case fr:return re;case sr:return oe}return t});var Xl=it?No:Hi;function Zl(e){var t=e&&e.constructor;return e===("function"==typeof t&&t.prototype||ot)}function Jl(e){return e==e&&!Po(e)}function eu(e,t){return function(n){return null!=n&&(n[e]===t&&(t!==l||e in tt(n)))}}function tu(e,t,n){return t=qn(t===l?e.length-1:t,0),function(){for(var a=arguments,l=-1,u=qn(a.length-t,0),o=r(u);++l<u;)o[l]=a[t+l];l=-1;for(var i=r(t+1);++l<t;)i[l]=a[l];return i[t]=n(o),Qt(e,this,i)}}function nu(e,t){return t.length<2?e:Zr(e,za(t,0,-1))}function ru(e,t){if(("constructor"!==t||"function"!=typeof e[t])&&"__proto__"!=t)return e[t]}var au=iu(Pa),lu=Fn||function(e,t){return Rt.setTimeout(e,t)},uu=iu(ja);function ou(e,t,n){var r=t+"";return uu(e,function(e,t){var n=t.length;if(!n)return e;var r=n-1;return t[r]=(n>1?"& ":"")+t[r],t=t.join(n>2?", ":" "),e.replace(Ie,"{\n/* [wrapped with "+t+"] */\n")}(r,function(e,t){return Kt(B,function(n){var r="_."+n[0];t&n[1]&&!Zt(e,r)&&e.push(r)}),e.sort()}(function(e){var t=e.match(De);return t?t[1].split(Fe):[]}(r),n)))}function iu(e){var t=0,n=0;return function(){var r=Yn(),a=T-(r-n);if(n=r,a>0){if(++t>=j)return arguments[0]}else t=0;return e.apply(l,arguments)}}function cu(e,t){var n=-1,r=e.length,a=r-1;for(t=t===l?r:t;++n<t;){var u=Ea(n,a),o=e[u];e[u]=e[n],e[n]=o}return e.length=t,e}var fu=function(e){var t=io(e,function(e){return n.size===s&&n.clear(),e}),n=t.cache;return t}(function(e){var t=[];return 46===e.charCodeAt(0)&&t.push(""),e.replace(ze,function(e,n,r,a){t.push(r?a.replace(We,"$1"):n||e)}),t});function su(e){if("string"==typeof e||Io(e))return e;var t=e+"";return"0"==t&&1/e==-R?"-0":t}function du(e){if(null!=e){try{return ct.call(e)}catch(e){}try{return e+""}catch(e){}}return""}function pu(e){if(e instanceof br)return e.clone();var t=new yr(e.__wrapped__,e.__chain__);return t.__actions__=al(e.__actions__),t.__index__=e.__index__,t.__values__=e.__values__,t}var hu=Sa(function(e,t){return ko(e)?Ur(e,Qr(t,1,ko,!0)):[]}),mu=Sa(function(e,t){var n=xu(t);return ko(n)&&(n=l),ko(e)?Ur(e,Qr(t,1,ko,!0),Il(n,2)):[]}),vu=Sa(function(e,t){var n=xu(t);return ko(n)&&(n=l),ko(e)?Ur(e,Qr(t,1,ko,!0),l,n):[]});function gu(e,t,n){var r=null==e?0:e.length;if(!r)return-1;var a=null==n?0:$o(n);return a<0&&(a=qn(r+a,0)),on(e,Il(t,3),a)}function yu(e,t,n){var r=null==e?0:e.length;if(!r)return-1;var a=r-1;return n!==l&&(a=$o(n),a=n<0?qn(r+a,0):Kn(a,r-1)),on(e,Il(t,3),a,!0)}function bu(e){return(null==e?0:e.length)?Qr(e,1):[]}function _u(e){return e&&e.length?e[0]:l}var wu=Sa(function(e){var t=en(e,Qa);return t.length&&t[0]===e[0]?aa(t):[]}),ku=Sa(function(e){var t=xu(e),n=en(e,Qa);return t===xu(n)?t=l:n.pop(),n.length&&n[0]===e[0]?aa(n,Il(t,2)):[]}),Eu=Sa(function(e){var t=xu(e),n=en(e,Qa);return(t="function"==typeof t?t:l)&&n.pop(),n.length&&n[0]===e[0]?aa(n,l,t):[]});function xu(e){var t=null==e?0:e.length;return t?e[t-1]:l}var Su=Sa(Nu);function Nu(e,t){return e&&e.length&&t&&t.length?wa(e,t):e}var Cu=Tl(function(e,t){var n=null==e?0:e.length,r=Mr(e,t);return ka(e,en(t,function(e){return ql(e,n)?+e:e}).sort(tl)),r});function Ou(e){return null==e?e:Zn.call(e)}var Pu=Sa(function(e){return Fa(Qr(e,1,ko,!0))}),ju=Sa(function(e){var t=xu(e);return ko(t)&&(t=l),Fa(Qr(e,1,ko,!0),Il(t,2))}),Tu=Sa(function(e){var t=xu(e);return t="function"==typeof t?t:l,Fa(Qr(e,1,ko,!0),l,t)});function zu(e){if(!e||!e.length)return[];var t=0;return e=Xt(e,function(e){if(ko(e))return t=qn(e.length,t),!0}),gn(t,function(t){return en(e,pn(t))})}function Lu(e,t){if(!e||!e.length)return[];var n=zu(e);return null==t?n:en(n,function(e){return Qt(t,l,e)})}var Ru=Sa(function(e,t){return ko(e)?Ur(e,t):[]}),Mu=Sa(function(e){return Va(Xt(e,ko))}),Au=Sa(function(e){var t=xu(e);return ko(t)&&(t=l),Va(Xt(e,ko),Il(t,2))}),Iu=Sa(function(e){var t=xu(e);return t="function"==typeof t?t:l,Va(Xt(e,ko),l,t)}),Du=Sa(zu);var Fu=Sa(function(e){var t=e.length,n=t>1?e[t-1]:l;return n="function"==typeof n?(e.pop(),n):l,Lu(e,n)});function Uu(e){var t=mr(e);return t.__chain__=!0,t}function Bu(e,t){return t(e)}var Wu=Tl(function(e){var t=e.length,n=t?e[0]:0,r=this.__wrapped__,a=function(t){return Mr(t,e)};return!(t>1||this.__actions__.length)&&r instanceof br&&ql(n)?((r=r.slice(n,+n+(t?1:0))).__actions__.push({func:Bu,args:[a],thisArg:l}),new yr(r,this.__chain__).thru(function(e){return t&&!e.length&&e.push(l),e})):this.thru(a)});var $u=ul(function(e,t,n){ft.call(e,n)?++e[n]:Rr(e,n,1)});var Vu=pl(gu),Hu=pl(yu);function Qu(e,t){return(bo(e)?Kt:Br)(e,Il(t,3))}function qu(e,t){return(bo(e)?Yt:Wr)(e,Il(t,3))}var Ku=ul(function(e,t,n){ft.call(e,n)?e[n].push(t):Rr(e,n,[t])});var Yu=Sa(function(e,t,n){var a=-1,l="function"==typeof t,u=wo(e)?r(e.length):[];return Br(e,function(e){u[++a]=l?Qt(t,e,n):la(e,t,n)}),u}),Gu=ul(function(e,t,n){Rr(e,n,t)});function Xu(e,t){return(bo(e)?en:ha)(e,Il(t,3))}var Zu=ul(function(e,t,n){e[n?0:1].push(t)},function(){return[[],[]]});var Ju=Sa(function(e,t){if(null==e)return[];var n=t.length;return n>1&&Kl(e,t[0],t[1])?t=[]:n>2&&Kl(t[0],t[1],t[2])&&(t=[t[0]]),ba(e,Qr(t,1),[])}),eo=Dn||function(){return Rt.Date.now()};function to(e,t,n){return t=n?l:t,t=e&&null==t?e.length:t,Nl(e,S,l,l,l,l,t)}function no(e,t){var n;if("function"!=typeof t)throw new at(i);return e=$o(e),function(){return--e>0&&(n=t.apply(this,arguments)),e<=1&&(t=l),n}}var ro=Sa(function(e,t,n){var r=y;if(n.length){var a=jn(n,Al(ro));r|=E}return Nl(e,r,t,n,a)}),ao=Sa(function(e,t,n){var r=y|b;if(n.length){var a=jn(n,Al(ao));r|=E}return Nl(t,r,e,n,a)});function lo(e,t,n){var r,a,u,o,c,f,s=0,d=!1,p=!1,h=!0;if("function"!=typeof e)throw new at(i);function m(t){var n=r,u=a;return r=a=l,s=t,o=e.apply(u,n)}function v(e){var n=e-f;return f===l||n>=t||n<0||p&&e-s>=u}function g(){var e=eo();if(v(e))return y(e);c=lu(g,function(e){var n=t-(e-f);return p?Kn(n,u-(e-s)):n}(e))}function y(e){return c=l,h&&r?m(e):(r=a=l,o)}function b(){var e=eo(),n=v(e);if(r=arguments,a=this,f=e,n){if(c===l)return function(e){return s=e,c=lu(g,t),d?m(e):o}(f);if(p)return Xa(c),c=lu(g,t),m(f)}return c===l&&(c=lu(g,t)),o}return t=Ho(t)||0,Po(n)&&(d=!!n.leading,u=(p="maxWait"in n)?qn(Ho(n.maxWait)||0,t):u,h="trailing"in n?!!n.trailing:h),b.cancel=function(){c!==l&&Xa(c),s=0,r=f=a=c=l},b.flush=function(){return c===l?o:y(eo())},b}var uo=Sa(function(e,t){return Fr(e,1,t)}),oo=Sa(function(e,t,n){return Fr(e,Ho(t)||0,n)});function io(e,t){if("function"!=typeof e||null!=t&&"function"!=typeof t)throw new at(i);var n=function(){var r=arguments,a=t?t.apply(this,r):r[0],l=n.cache;if(l.has(a))return l.get(a);var u=e.apply(this,r);return n.cache=l.set(a,u)||l,u};return n.cache=new(io.Cache||kr),n}function co(e){if("function"!=typeof e)throw new at(i);return function(){var t=arguments;switch(t.length){case 0:return!e.call(this);case 1:return!e.call(this,t[0]);case 2:return!e.call(this,t[0],t[1]);case 3:return!e.call(this,t[0],t[1],t[2])}return!e.apply(this,t)}}io.Cache=kr;var fo=Ya(function(e,t){var n=(t=1==t.length&&bo(t[0])?en(t[0],bn(Il())):en(Qr(t,1),bn(Il()))).length;return Sa(function(r){for(var a=-1,l=Kn(r.length,n);++a<l;)r[a]=t[a].call(this,r[a]);return Qt(e,this,r)})}),so=Sa(function(e,t){var n=jn(t,Al(so));return Nl(e,E,l,t,n)}),po=Sa(function(e,t){var n=jn(t,Al(po));return Nl(e,x,l,t,n)}),ho=Tl(function(e,t){return Nl(e,N,l,l,l,t)});function mo(e,t){return e===t||e!=e&&t!=t}var vo=wl(ta),go=wl(function(e,t){return e>=t}),yo=ua(function(){return arguments}())?ua:function(e){return jo(e)&&ft.call(e,"callee")&&!Lt.call(e,"callee")},bo=r.isArray,_o=Ut?bn(Ut):function(e){return jo(e)&&ea(e)==ce};function wo(e){return null!=e&&Oo(e.length)&&!No(e)}function ko(e){return jo(e)&&wo(e)}var Eo=$n||Hi,xo=Bt?bn(Bt):function(e){return jo(e)&&ea(e)==Q};function So(e){if(!jo(e))return!1;var t=ea(e);return t==K||t==q||"string"==typeof e.message&&"string"==typeof e.name&&!Lo(e)}function No(e){if(!Po(e))return!1;var t=ea(e);return t==Y||t==G||t==V||t==te}function Co(e){return"number"==typeof e&&e==$o(e)}function Oo(e){return"number"==typeof e&&e>-1&&e%1==0&&e<=M}function Po(e){var t=typeof e;return null!=e&&("object"==t||"function"==t)}function jo(e){return null!=e&&"object"==typeof e}var To=Wt?bn(Wt):function(e){return jo(e)&&$l(e)==X};function zo(e){return"number"==typeof e||jo(e)&&ea(e)==Z}function Lo(e){if(!jo(e)||ea(e)!=ee)return!1;var t=Pt(e);if(null===t)return!0;var n=ft.call(t,"constructor")&&t.constructor;return"function"==typeof n&&n instanceof n&&ct.call(n)==ht}var Ro=$t?bn($t):function(e){return jo(e)&&ea(e)==ne};var Mo=Vt?bn(Vt):function(e){return jo(e)&&$l(e)==re};function Ao(e){return"string"==typeof e||!bo(e)&&jo(e)&&ea(e)==ae}function Io(e){return"symbol"==typeof e||jo(e)&&ea(e)==le}var Do=Ht?bn(Ht):function(e){return jo(e)&&Oo(e.length)&&!!Ct[ea(e)]};var Fo=wl(pa),Uo=wl(function(e,t){return e<=t});function Bo(e){if(!e)return[];if(wo(e))return Ao(e)?Rn(e):al(e);if(Dt&&e[Dt])return function(e){for(var t,n=[];!(t=e.next()).done;)n.push(t.value);return n}(e[Dt]());var t=$l(e);return(t==X?On:t==re?Tn:mi)(e)}function Wo(e){return e?(e=Ho(e))===R||e===-R?(e<0?-1:1)*A:e==e?e:0:0===e?e:0}function $o(e){var t=Wo(e),n=t%1;return t==t?n?t-n:t:0}function Vo(e){return e?Ar($o(e),0,D):0}function Ho(e){if("number"==typeof e)return e;if(Io(e))return I;if(Po(e)){var t="function"==typeof e.valueOf?e.valueOf():e;e=Po(t)?t+"":t}if("string"!=typeof e)return 0===e?e:+e;e=yn(e);var n=Qe.test(e);return n||Ke.test(e)?Tt(e.slice(2),n?2:8):He.test(e)?I:+e}function Qo(e){return ll(e,oi(e))}function qo(e){return null==e?"":Da(e)}var Ko=ol(function(e,t){if(Zl(t)||wo(t))ll(t,ui(t),e);else for(var n in t)ft.call(t,n)&&jr(e,n,t[n])}),Yo=ol(function(e,t){ll(t,oi(t),e)}),Go=ol(function(e,t,n,r){ll(t,oi(t),e,r)}),Xo=ol(function(e,t,n,r){ll(t,ui(t),e,r)}),Zo=Tl(Mr);var Jo=Sa(function(e,t){e=tt(e);var n=-1,r=t.length,a=r>2?t[2]:l;for(a&&Kl(t[0],t[1],a)&&(r=1);++n<r;)for(var u=t[n],o=oi(u),i=-1,c=o.length;++i<c;){var f=o[i],s=e[f];(s===l||mo(s,ot[f])&&!ft.call(e,f))&&(e[f]=u[f])}return e}),ei=Sa(function(e){return e.push(l,Ol),Qt(ci,l,e)});function ti(e,t,n){var r=null==e?l:Zr(e,t);return r===l?n:r}function ni(e,t){return null!=e&&Vl(e,t,ra)}var ri=vl(function(e,t,n){null!=t&&"function"!=typeof t.toString&&(t=pt.call(t)),e[t]=n},Pi(zi)),ai=vl(function(e,t,n){null!=t&&"function"!=typeof t.toString&&(t=pt.call(t)),ft.call(e,t)?e[t].push(n):e[t]=[n]},Il),li=Sa(la);function ui(e){return wo(e)?Sr(e):sa(e)}function oi(e){return wo(e)?Sr(e,!0):da(e)}var ii=ol(function(e,t,n){ga(e,t,n)}),ci=ol(function(e,t,n,r){ga(e,t,n,r)}),fi=Tl(function(e,t){var n={};if(null==e)return n;var r=!1;t=en(t,function(t){return t=Ka(t,e),r||(r=t.length>1),t}),ll(e,Ll(e),n),r&&(n=Ir(n,p|h|m,Pl));for(var a=t.length;a--;)Ua(n,t[a]);return n});var si=Tl(function(e,t){return null==e?{}:function(e,t){return _a(e,t,function(t,n){return ni(e,n)})}(e,t)});function di(e,t){if(null==e)return{};var n=en(Ll(e),function(e){return[e]});return t=Il(t),_a(e,n,function(e,n){return t(e,n[0])})}var pi=Sl(ui),hi=Sl(oi);function mi(e){return null==e?[]:_n(e,ui(e))}var vi=sl(function(e,t,n){return t=t.toLowerCase(),e+(n?gi(t):t)});function gi(e){return Si(qo(e).toLowerCase())}function yi(e){return(e=qo(e))&&e.replace(Ge,xn).replace(_t,"")}var bi=sl(function(e,t,n){return e+(n?"-":"")+t.toLowerCase()}),_i=sl(function(e,t,n){return e+(n?" ":"")+t.toLowerCase()}),wi=fl("toLowerCase");var ki=sl(function(e,t,n){return e+(n?"_":"")+t.toLowerCase()});var Ei=sl(function(e,t,n){return e+(n?" ":"")+Si(t)});var xi=sl(function(e,t,n){return e+(n?" ":"")+t.toUpperCase()}),Si=fl("toUpperCase");function Ni(e,t,n){return e=qo(e),(t=n?l:t)===l?function(e){return xt.test(e)}(e)?function(e){return e.match(kt)||[]}(e):function(e){return e.match(Ue)||[]}(e):e.match(t)||[]}var Ci=Sa(function(e,t){try{return Qt(e,l,t)}catch(e){return So(e)?e:new Ae(e)}}),Oi=Tl(function(e,t){return Kt(t,function(t){t=su(t),Rr(e,t,ro(e[t],e))}),e});function Pi(e){return function(){return e}}var ji=hl(),Ti=hl(!0);function zi(e){return e}function Li(e){return fa("function"==typeof e?e:Ir(e,p))}var Ri=Sa(function(e,t){return function(n){return la(n,e,t)}}),Mi=Sa(function(e,t){return function(n){return la(e,n,t)}});function Ai(e,t,n){var r=ui(t),a=Xr(t,r);null!=n||Po(t)&&(a.length||!r.length)||(n=t,t=e,e=this,a=Xr(t,ui(t)));var l=!(Po(n)&&"chain"in n&&!n.chain),u=No(e);return Kt(a,function(n){var r=t[n];e[n]=r,u&&(e.prototype[n]=function(){var t=this.__chain__;if(l||t){var n=e(this.__wrapped__),a=n.__actions__=al(this.__actions__);return a.push({func:r,args:arguments,thisArg:e}),n.__chain__=t,n}return r.apply(e,tn([this.value()],arguments))})}),e}function Ii(){}var Di=yl(en),Fi=yl(Gt),Ui=yl(an);function Bi(e){return Yl(e)?pn(su(e)):function(e){return function(t){return Zr(t,e)}}(e)}var Wi=_l(),$i=_l(!0);function Vi(){return[]}function Hi(){return!1}var Qi=gl(function(e,t){return e+t},0),qi=El("ceil"),Ki=gl(function(e,t){return e/t},1),Yi=El("floor");var Gi,Xi=gl(function(e,t){return e*t},1),Zi=El("round"),Ji=gl(function(e,t){return e-t},0);return mr.after=function(e,t){if("function"!=typeof t)throw new at(i);return e=$o(e),function(){if(--e<1)return t.apply(this,arguments)}},mr.ary=to,mr.assign=Ko,mr.assignIn=Yo,mr.assignInWith=Go,mr.assignWith=Xo,mr.at=Zo,mr.before=no,mr.bind=ro,mr.bindAll=Oi,mr.bindKey=ao,mr.castArray=function(){if(!arguments.length)return[];var e=arguments[0];return bo(e)?e:[e]},mr.chain=Uu,mr.chunk=function(e,t,n){t=(n?Kl(e,t,n):t===l)?1:qn($o(t),0);var a=null==e?0:e.length;if(!a||t<1)return[];for(var u=0,o=0,i=r(Un(a/t));u<a;)i[o++]=za(e,u,u+=t);return i},mr.compact=function(e){for(var t=-1,n=null==e?0:e.length,r=0,a=[];++t<n;){var l=e[t];l&&(a[r++]=l)}return a},mr.concat=function(){var e=arguments.length;if(!e)return[];for(var t=r(e-1),n=arguments[0],a=e;a--;)t[a-1]=arguments[a];return tn(bo(n)?al(n):[n],Qr(t,1))},mr.cond=function(e){var t=null==e?0:e.length,n=Il();return e=t?en(e,function(e){if("function"!=typeof e[1])throw new at(i);return[n(e[0]),e[1]]}):[],Sa(function(n){for(var r=-1;++r<t;){var a=e[r];if(Qt(a[0],this,n))return Qt(a[1],this,n)}})},mr.conforms=function(e){return function(e){var t=ui(e);return function(n){return Dr(n,e,t)}}(Ir(e,p))},mr.constant=Pi,mr.countBy=$u,mr.create=function(e,t){var n=vr(e);return null==t?n:Lr(n,t)},mr.curry=function e(t,n,r){var a=Nl(t,w,l,l,l,l,l,n=r?l:n);return a.placeholder=e.placeholder,a},mr.curryRight=function e(t,n,r){var a=Nl(t,k,l,l,l,l,l,n=r?l:n);return a.placeholder=e.placeholder,a},mr.debounce=lo,mr.defaults=Jo,mr.defaultsDeep=ei,mr.defer=uo,mr.delay=oo,mr.difference=hu,mr.differenceBy=mu,mr.differenceWith=vu,mr.drop=function(e,t,n){var r=null==e?0:e.length;return r?za(e,(t=n||t===l?1:$o(t))<0?0:t,r):[]},mr.dropRight=function(e,t,n){var r=null==e?0:e.length;return r?za(e,0,(t=r-(t=n||t===l?1:$o(t)))<0?0:t):[]},mr.dropRightWhile=function(e,t){return e&&e.length?Wa(e,Il(t,3),!0,!0):[]},mr.dropWhile=function(e,t){return e&&e.length?Wa(e,Il(t,3),!0):[]},mr.fill=function(e,t,n,r){var a=null==e?0:e.length;return a?(n&&"number"!=typeof n&&Kl(e,t,n)&&(n=0,r=a),function(e,t,n,r){var a=e.length;for((n=$o(n))<0&&(n=-n>a?0:a+n),(r=r===l||r>a?a:$o(r))<0&&(r+=a),r=n>r?0:Vo(r);n<r;)e[n++]=t;return e}(e,t,n,r)):[]},mr.filter=function(e,t){return(bo(e)?Xt:Hr)(e,Il(t,3))},mr.flatMap=function(e,t){return Qr(Xu(e,t),1)},mr.flatMapDeep=function(e,t){return Qr(Xu(e,t),R)},mr.flatMapDepth=function(e,t,n){return n=n===l?1:$o(n),Qr(Xu(e,t),n)},mr.flatten=bu,mr.flattenDeep=function(e){return(null==e?0:e.length)?Qr(e,R):[]},mr.flattenDepth=function(e,t){return(null==e?0:e.length)?Qr(e,t=t===l?1:$o(t)):[]},mr.flip=function(e){return Nl(e,C)},mr.flow=ji,mr.flowRight=Ti,mr.fromPairs=function(e){for(var t=-1,n=null==e?0:e.length,r={};++t<n;){var a=e[t];r[a[0]]=a[1]}return r},mr.functions=function(e){return null==e?[]:Xr(e,ui(e))},mr.functionsIn=function(e){return null==e?[]:Xr(e,oi(e))},mr.groupBy=Ku,mr.initial=function(e){return(null==e?0:e.length)?za(e,0,-1):[]},mr.intersection=wu,mr.intersectionBy=ku,mr.intersectionWith=Eu,mr.invert=ri,mr.invertBy=ai,mr.invokeMap=Yu,mr.iteratee=Li,mr.keyBy=Gu,mr.keys=ui,mr.keysIn=oi,mr.map=Xu,mr.mapKeys=function(e,t){var n={};return t=Il(t,3),Yr(e,function(e,r,a){Rr(n,t(e,r,a),e)}),n},mr.mapValues=function(e,t){var n={};return t=Il(t,3),Yr(e,function(e,r,a){Rr(n,r,t(e,r,a))}),n},mr.matches=function(e){return ma(Ir(e,p))},mr.matchesProperty=function(e,t){return va(e,Ir(t,p))},mr.memoize=io,mr.merge=ii,mr.mergeWith=ci,mr.method=Ri,mr.methodOf=Mi,mr.mixin=Ai,mr.negate=co,mr.nthArg=function(e){return e=$o(e),Sa(function(t){return ya(t,e)})},mr.omit=fi,mr.omitBy=function(e,t){return di(e,co(Il(t)))},mr.once=function(e){return no(2,e)},mr.orderBy=function(e,t,n,r){return null==e?[]:(bo(t)||(t=null==t?[]:[t]),bo(n=r?l:n)||(n=null==n?[]:[n]),ba(e,t,n))},mr.over=Di,mr.overArgs=fo,mr.overEvery=Fi,mr.overSome=Ui,mr.partial=so,mr.partialRight=po,mr.partition=Zu,mr.pick=si,mr.pickBy=di,mr.property=Bi,mr.propertyOf=function(e){return function(t){return null==e?l:Zr(e,t)}},mr.pull=Su,mr.pullAll=Nu,mr.pullAllBy=function(e,t,n){return e&&e.length&&t&&t.length?wa(e,t,Il(n,2)):e},mr.pullAllWith=function(e,t,n){return e&&e.length&&t&&t.length?wa(e,t,l,n):e},mr.pullAt=Cu,mr.range=Wi,mr.rangeRight=$i,mr.rearg=ho,mr.reject=function(e,t){return(bo(e)?Xt:Hr)(e,co(Il(t,3)))},mr.remove=function(e,t){var n=[];if(!e||!e.length)return n;var r=-1,a=[],l=e.length;for(t=Il(t,3);++r<l;){var u=e[r];t(u,r,e)&&(n.push(u),a.push(r))}return ka(e,a),n},mr.rest=function(e,t){if("function"!=typeof e)throw new at(i);return Sa(e,t=t===l?t:$o(t))},mr.reverse=Ou,mr.sampleSize=function(e,t,n){return t=(n?Kl(e,t,n):t===l)?1:$o(t),(bo(e)?Cr:Ca)(e,t)},mr.set=function(e,t,n){return null==e?e:Oa(e,t,n)},mr.setWith=function(e,t,n,r){return r="function"==typeof r?r:l,null==e?e:Oa(e,t,n,r)},mr.shuffle=function(e){return(bo(e)?Or:Ta)(e)},mr.slice=function(e,t,n){var r=null==e?0:e.length;return r?(n&&"number"!=typeof n&&Kl(e,t,n)?(t=0,n=r):(t=null==t?0:$o(t),n=n===l?r:$o(n)),za(e,t,n)):[]},mr.sortBy=Ju,mr.sortedUniq=function(e){return e&&e.length?Aa(e):[]},mr.sortedUniqBy=function(e,t){return e&&e.length?Aa(e,Il(t,2)):[]},mr.split=function(e,t,n){return n&&"number"!=typeof n&&Kl(e,t,n)&&(t=n=l),(n=n===l?D:n>>>0)?(e=qo(e))&&("string"==typeof t||null!=t&&!Ro(t))&&!(t=Da(t))&&Cn(e)?Ga(Rn(e),0,n):e.split(t,n):[]},mr.spread=function(e,t){if("function"!=typeof e)throw new at(i);return t=null==t?0:qn($o(t),0),Sa(function(n){var r=n[t],a=Ga(n,0,t);return r&&tn(a,r),Qt(e,this,a)})},mr.tail=function(e){var t=null==e?0:e.length;return t?za(e,1,t):[]},mr.take=function(e,t,n){return e&&e.length?za(e,0,(t=n||t===l?1:$o(t))<0?0:t):[]},mr.takeRight=function(e,t,n){var r=null==e?0:e.length;return r?za(e,(t=r-(t=n||t===l?1:$o(t)))<0?0:t,r):[]},mr.takeRightWhile=function(e,t){return e&&e.length?Wa(e,Il(t,3),!1,!0):[]},mr.takeWhile=function(e,t){return e&&e.length?Wa(e,Il(t,3)):[]},mr.tap=function(e,t){return t(e),e},mr.throttle=function(e,t,n){var r=!0,a=!0;if("function"!=typeof e)throw new at(i);return Po(n)&&(r="leading"in n?!!n.leading:r,a="trailing"in n?!!n.trailing:a),lo(e,t,{leading:r,maxWait:t,trailing:a})},mr.thru=Bu,mr.toArray=Bo,mr.toPairs=pi,mr.toPairsIn=hi,mr.toPath=function(e){return bo(e)?en(e,su):Io(e)?[e]:al(fu(qo(e)))},mr.toPlainObject=Qo,mr.transform=function(e,t,n){var r=bo(e),a=r||Eo(e)||Do(e);if(t=Il(t,4),null==n){var l=e&&e.constructor;n=a?r?new l:[]:Po(e)&&No(l)?vr(Pt(e)):{}}return(a?Kt:Yr)(e,function(e,r,a){return t(n,e,r,a)}),n},mr.unary=function(e){return to(e,1)},mr.union=Pu,mr.unionBy=ju,mr.unionWith=Tu,mr.uniq=function(e){return e&&e.length?Fa(e):[]},mr.uniqBy=function(e,t){return e&&e.length?Fa(e,Il(t,2)):[]},mr.uniqWith=function(e,t){return t="function"==typeof t?t:l,e&&e.length?Fa(e,l,t):[]},mr.unset=function(e,t){return null==e||Ua(e,t)},mr.unzip=zu,mr.unzipWith=Lu,mr.update=function(e,t,n){return null==e?e:Ba(e,t,qa(n))},mr.updateWith=function(e,t,n,r){return r="function"==typeof r?r:l,null==e?e:Ba(e,t,qa(n),r)},mr.values=mi,mr.valuesIn=function(e){return null==e?[]:_n(e,oi(e))},mr.without=Ru,mr.words=Ni,mr.wrap=function(e,t){return so(qa(t),e)},mr.xor=Mu,mr.xorBy=Au,mr.xorWith=Iu,mr.zip=Du,mr.zipObject=function(e,t){return Ha(e||[],t||[],jr)},mr.zipObjectDeep=function(e,t){return Ha(e||[],t||[],Oa)},mr.zipWith=Fu,mr.entries=pi,mr.entriesIn=hi,mr.extend=Yo,mr.extendWith=Go,Ai(mr,mr),mr.add=Qi,mr.attempt=Ci,mr.camelCase=vi,mr.capitalize=gi,mr.ceil=qi,mr.clamp=function(e,t,n){return n===l&&(n=t,t=l),n!==l&&(n=(n=Ho(n))==n?n:0),t!==l&&(t=(t=Ho(t))==t?t:0),Ar(Ho(e),t,n)},mr.clone=function(e){return Ir(e,m)},mr.cloneDeep=function(e){return Ir(e,p|m)},mr.cloneDeepWith=function(e,t){return Ir(e,p|m,t="function"==typeof t?t:l)},mr.cloneWith=function(e,t){return Ir(e,m,t="function"==typeof t?t:l)},mr.conformsTo=function(e,t){return null==t||Dr(e,t,ui(t))},mr.deburr=yi,mr.defaultTo=function(e,t){return null==e||e!=e?t:e},mr.divide=Ki,mr.endsWith=function(e,t,n){e=qo(e),t=Da(t);var r=e.length,a=n=n===l?r:Ar($o(n),0,r);return(n-=t.length)>=0&&e.slice(n,a)==t},mr.eq=mo,mr.escape=function(e){return(e=qo(e))&&Ne.test(e)?e.replace(xe,Sn):e},mr.escapeRegExp=function(e){return(e=qo(e))&&Re.test(e)?e.replace(Le,"\\$&"):e},mr.every=function(e,t,n){var r=bo(e)?Gt:$r;return n&&Kl(e,t,n)&&(t=l),r(e,Il(t,3))},mr.find=Vu,mr.findIndex=gu,mr.findKey=function(e,t){return un(e,Il(t,3),Yr)},mr.findLast=Hu,mr.findLastIndex=yu,mr.findLastKey=function(e,t){return un(e,Il(t,3),Gr)},mr.floor=Yi,mr.forEach=Qu,mr.forEachRight=qu,mr.forIn=function(e,t){return null==e?e:qr(e,Il(t,3),oi)},mr.forInRight=function(e,t){return null==e?e:Kr(e,Il(t,3),oi)},mr.forOwn=function(e,t){return e&&Yr(e,Il(t,3))},mr.forOwnRight=function(e,t){return e&&Gr(e,Il(t,3))},mr.get=ti,mr.gt=vo,mr.gte=go,mr.has=function(e,t){return null!=e&&Vl(e,t,na)},mr.hasIn=ni,mr.head=_u,mr.identity=zi,mr.includes=function(e,t,n,r){e=wo(e)?e:mi(e),n=n&&!r?$o(n):0;var a=e.length;return n<0&&(n=qn(a+n,0)),Ao(e)?n<=a&&e.indexOf(t,n)>-1:!!a&&cn(e,t,n)>-1},mr.indexOf=function(e,t,n){var r=null==e?0:e.length;if(!r)return-1;var a=null==n?0:$o(n);return a<0&&(a=qn(r+a,0)),cn(e,t,a)},mr.inRange=function(e,t,n){return t=Wo(t),n===l?(n=t,t=0):n=Wo(n),function(e,t,n){return e>=Kn(t,n)&&e<qn(t,n)}(e=Ho(e),t,n)},mr.invoke=li,mr.isArguments=yo,mr.isArray=bo,mr.isArrayBuffer=_o,mr.isArrayLike=wo,mr.isArrayLikeObject=ko,mr.isBoolean=function(e){return!0===e||!1===e||jo(e)&&ea(e)==H},mr.isBuffer=Eo,mr.isDate=xo,mr.isElement=function(e){return jo(e)&&1===e.nodeType&&!Lo(e)},mr.isEmpty=function(e){if(null==e)return!0;if(wo(e)&&(bo(e)||"string"==typeof e||"function"==typeof e.splice||Eo(e)||Do(e)||yo(e)))return!e.length;var t=$l(e);if(t==X||t==re)return!e.size;if(Zl(e))return!sa(e).length;for(var n in e)if(ft.call(e,n))return!1;return!0},mr.isEqual=function(e,t){return oa(e,t)},mr.isEqualWith=function(e,t,n){var r=(n="function"==typeof n?n:l)?n(e,t):l;return r===l?oa(e,t,l,n):!!r},mr.isError=So,mr.isFinite=function(e){return"number"==typeof e&&Vn(e)},mr.isFunction=No,mr.isInteger=Co,mr.isLength=Oo,mr.isMap=To,mr.isMatch=function(e,t){return e===t||ia(e,t,Fl(t))},mr.isMatchWith=function(e,t,n){return n="function"==typeof n?n:l,ia(e,t,Fl(t),n)},mr.isNaN=function(e){return zo(e)&&e!=+e},mr.isNative=function(e){if(Xl(e))throw new Ae(o);return ca(e)},mr.isNil=function(e){return null==e},mr.isNull=function(e){return null===e},mr.isNumber=zo,mr.isObject=Po,mr.isObjectLike=jo,mr.isPlainObject=Lo,mr.isRegExp=Ro,mr.isSafeInteger=function(e){return Co(e)&&e>=-M&&e<=M},mr.isSet=Mo,mr.isString=Ao,mr.isSymbol=Io,mr.isTypedArray=Do,mr.isUndefined=function(e){return e===l},mr.isWeakMap=function(e){return jo(e)&&$l(e)==oe},mr.isWeakSet=function(e){return jo(e)&&ea(e)==ie},mr.join=function(e,t){return null==e?"":Hn.call(e,t)},mr.kebabCase=bi,mr.last=xu,mr.lastIndexOf=function(e,t,n){var r=null==e?0:e.length;if(!r)return-1;var a=r;return n!==l&&(a=(a=$o(n))<0?qn(r+a,0):Kn(a,r-1)),t==t?function(e,t,n){for(var r=n+1;r--;)if(e[r]===t)return r;return r}(e,t,a):on(e,sn,a,!0)},mr.lowerCase=_i,mr.lowerFirst=wi,mr.lt=Fo,mr.lte=Uo,mr.max=function(e){return e&&e.length?Vr(e,zi,ta):l},mr.maxBy=function(e,t){return e&&e.length?Vr(e,Il(t,2),ta):l},mr.mean=function(e){return dn(e,zi)},mr.meanBy=function(e,t){return dn(e,Il(t,2))},mr.min=function(e){return e&&e.length?Vr(e,zi,pa):l},mr.minBy=function(e,t){return e&&e.length?Vr(e,Il(t,2),pa):l},mr.stubArray=Vi,mr.stubFalse=Hi,mr.stubObject=function(){return{}},mr.stubString=function(){return""},mr.stubTrue=function(){return!0},mr.multiply=Xi,mr.nth=function(e,t){return e&&e.length?ya(e,$o(t)):l},mr.noConflict=function(){return Rt._===this&&(Rt._=mt),this},mr.noop=Ii,mr.now=eo,mr.pad=function(e,t,n){e=qo(e);var r=(t=$o(t))?Ln(e):0;if(!t||r>=t)return e;var a=(t-r)/2;return bl(Bn(a),n)+e+bl(Un(a),n)},mr.padEnd=function(e,t,n){e=qo(e);var r=(t=$o(t))?Ln(e):0;return t&&r<t?e+bl(t-r,n):e},mr.padStart=function(e,t,n){e=qo(e);var r=(t=$o(t))?Ln(e):0;return t&&r<t?bl(t-r,n)+e:e},mr.parseInt=function(e,t,n){return n||null==t?t=0:t&&(t=+t),Gn(qo(e).replace(Me,""),t||0)},mr.random=function(e,t,n){if(n&&"boolean"!=typeof n&&Kl(e,t,n)&&(t=n=l),n===l&&("boolean"==typeof t?(n=t,t=l):"boolean"==typeof e&&(n=e,e=l)),e===l&&t===l?(e=0,t=1):(e=Wo(e),t===l?(t=e,e=0):t=Wo(t)),e>t){var r=e;e=t,t=r}if(n||e%1||t%1){var a=Xn();return Kn(e+a*(t-e+jt("1e-"+((a+"").length-1))),t)}return Ea(e,t)},mr.reduce=function(e,t,n){var r=bo(e)?nn:mn,a=arguments.length<3;return r(e,Il(t,4),n,a,Br)},mr.reduceRight=function(e,t,n){var r=bo(e)?rn:mn,a=arguments.length<3;return r(e,Il(t,4),n,a,Wr)},mr.repeat=function(e,t,n){return t=(n?Kl(e,t,n):t===l)?1:$o(t),xa(qo(e),t)},mr.replace=function(){var e=arguments,t=qo(e[0]);return e.length<3?t:t.replace(e[1],e[2])},mr.result=function(e,t,n){var r=-1,a=(t=Ka(t,e)).length;for(a||(a=1,e=l);++r<a;){var u=null==e?l:e[su(t[r])];u===l&&(r=a,u=n),e=No(u)?u.call(e):u}return e},mr.round=Zi,mr.runInContext=e,mr.sample=function(e){return(bo(e)?Nr:Na)(e)},mr.size=function(e){if(null==e)return 0;if(wo(e))return Ao(e)?Ln(e):e.length;var t=$l(e);return t==X||t==re?e.size:sa(e).length},mr.snakeCase=ki,mr.some=function(e,t,n){var r=bo(e)?an:La;return n&&Kl(e,t,n)&&(t=l),r(e,Il(t,3))},mr.sortedIndex=function(e,t){return Ra(e,t)},mr.sortedIndexBy=function(e,t,n){return Ma(e,t,Il(n,2))},mr.sortedIndexOf=function(e,t){var n=null==e?0:e.length;if(n){var r=Ra(e,t);if(r<n&&mo(e[r],t))return r}return-1},mr.sortedLastIndex=function(e,t){return Ra(e,t,!0)},mr.sortedLastIndexBy=function(e,t,n){return Ma(e,t,Il(n,2),!0)},mr.sortedLastIndexOf=function(e,t){if(null==e?0:e.length){var n=Ra(e,t,!0)-1;if(mo(e[n],t))return n}return-1},mr.startCase=Ei,mr.startsWith=function(e,t,n){return e=qo(e),n=null==n?0:Ar($o(n),0,e.length),t=Da(t),e.slice(n,n+t.length)==t},mr.subtract=Ji,mr.sum=function(e){return e&&e.length?vn(e,zi):0},mr.sumBy=function(e,t){return e&&e.length?vn(e,Il(t,2)):0},mr.template=function(e,t,n){var r=mr.templateSettings;n&&Kl(e,t,n)&&(t=l),e=qo(e),t=Go({},t,r,Cl);var a,u,o=Go({},t.imports,r.imports,Cl),i=ui(o),f=_n(o,i),s=0,d=t.interpolate||Xe,p="__p += '",h=nt((t.escape||Xe).source+"|"+d.source+"|"+(d===Pe?$e:Xe).source+"|"+(t.evaluate||Xe).source+"|$","g"),m="//# sourceURL="+(ft.call(t,"sourceURL")?(t.sourceURL+"").replace(/\s/g," "):"lodash.templateSources["+ ++Nt+"]")+"\n";e.replace(h,function(t,n,r,l,o,i){return r||(r=l),p+=e.slice(s,i).replace(Ze,Nn),n&&(a=!0,p+="' +\n__e("+n+") +\n'"),o&&(u=!0,p+="';\n"+o+";\n__p += '"),r&&(p+="' +\n((__t = ("+r+")) == null ? '' : __t) +\n'"),s=i+t.length,t}),p+="';\n";var v=ft.call(t,"variable")&&t.variable;if(v){if(Be.test(v))throw new Ae(c)}else p="with (obj) {\n"+p+"\n}\n";p=(u?p.replace(_e,""):p).replace(we,"$1").replace(ke,"$1;"),p="function("+(v||"obj")+") {\n"+(v?"":"obj || (obj = {});\n")+"var __t, __p = ''"+(a?", __e = _.escape":"")+(u?", __j = Array.prototype.join;\nfunction print() { __p += __j.call(arguments, '') }\n":";\n")+p+"return __p\n}";var g=Ci(function(){return Je(i,m+"return "+p).apply(l,f)});if(g.source=p,So(g))throw g;return g},mr.times=function(e,t){if((e=$o(e))<1||e>M)return[];var n=D,r=Kn(e,D);t=Il(t),e-=D;for(var a=gn(r,t);++n<e;)t(n);return a},mr.toFinite=Wo,mr.toInteger=$o,mr.toLength=Vo,mr.toLower=function(e){return qo(e).toLowerCase()},mr.toNumber=Ho,mr.toSafeInteger=function(e){return e?Ar($o(e),-M,M):0===e?e:0},mr.toString=qo,mr.toUpper=function(e){return qo(e).toUpperCase()},mr.trim=function(e,t,n){if((e=qo(e))&&(n||t===l))return yn(e);if(!e||!(t=Da(t)))return e;var r=Rn(e),a=Rn(t);return Ga(r,kn(r,a),En(r,a)+1).join("")},mr.trimEnd=function(e,t,n){if((e=qo(e))&&(n||t===l))return e.slice(0,Mn(e)+1);if(!e||!(t=Da(t)))return e;var r=Rn(e);return Ga(r,0,En(r,Rn(t))+1).join("")},mr.trimStart=function(e,t,n){if((e=qo(e))&&(n||t===l))return e.replace(Me,"");if(!e||!(t=Da(t)))return e;var r=Rn(e);return Ga(r,kn(r,Rn(t))).join("")},mr.truncate=function(e,t){var n=O,r=P;if(Po(t)){var a="separator"in t?t.separator:a;n="length"in t?$o(t.length):n,r="omission"in t?Da(t.omission):r}var u=(e=qo(e)).length;if(Cn(e)){var o=Rn(e);u=o.length}if(n>=u)return e;var i=n-Ln(r);if(i<1)return r;var c=o?Ga(o,0,i).join(""):e.slice(0,i);if(a===l)return c+r;if(o&&(i+=c.length-i),Ro(a)){if(e.slice(i).search(a)){var f,s=c;for(a.global||(a=nt(a.source,qo(Ve.exec(a))+"g")),a.lastIndex=0;f=a.exec(s);)var d=f.index;c=c.slice(0,d===l?i:d)}}else if(e.indexOf(Da(a),i)!=i){var p=c.lastIndexOf(a);p>-1&&(c=c.slice(0,p))}return c+r},mr.unescape=function(e){return(e=qo(e))&&Se.test(e)?e.replace(Ee,An):e},mr.uniqueId=function(e){var t=++st;return qo(e)+t},mr.upperCase=xi,mr.upperFirst=Si,mr.each=Qu,mr.eachRight=qu,mr.first=_u,Ai(mr,(Gi={},Yr(mr,function(e,t){ft.call(mr.prototype,t)||(Gi[t]=e)}),Gi),{chain:!1}),mr.VERSION="4.17.21",Kt(["bind","bindKey","curry","curryRight","partial","partialRight"],function(e){mr[e].placeholder=mr}),Kt(["drop","take"],function(e,t){br.prototype[e]=function(n){n=n===l?1:qn($o(n),0);var r=this.__filtered__&&!t?new br(this):this.clone();return r.__filtered__?r.__takeCount__=Kn(n,r.__takeCount__):r.__views__.push({size:Kn(n,D),type:e+(r.__dir__<0?"Right":"")}),r},br.prototype[e+"Right"]=function(t){return this.reverse()[e](t).reverse()}}),Kt(["filter","map","takeWhile"],function(e,t){var n=t+1,r=n==z||3==n;br.prototype[e]=function(e){var t=this.clone();return t.__iteratees__.push({iteratee:Il(e,3),type:n}),t.__filtered__=t.__filtered__||r,t}}),Kt(["head","last"],function(e,t){var n="take"+(t?"Right":"");br.prototype[e]=function(){return this[n](1).value()[0]}}),Kt(["initial","tail"],function(e,t){var n="drop"+(t?"":"Right");br.prototype[e]=function(){return this.__filtered__?new br(this):this[n](1)}}),br.prototype.compact=function(){return this.filter(zi)},br.prototype.find=function(e){return this.filter(e).head()},br.prototype.findLast=function(e){return this.reverse().find(e)},br.prototype.invokeMap=Sa(function(e,t){return"function"==typeof e?new br(this):this.map(function(n){return la(n,e,t)})}),br.prototype.reject=function(e){return this.filter(co(Il(e)))},br.prototype.slice=function(e,t){e=$o(e);var n=this;return n.__filtered__&&(e>0||t<0)?new br(n):(e<0?n=n.takeRight(-e):e&&(n=n.drop(e)),t!==l&&(n=(t=$o(t))<0?n.dropRight(-t):n.take(t-e)),n)},br.prototype.takeRightWhile=function(e){return this.reverse().takeWhile(e).reverse()},br.prototype.toArray=function(){return this.take(D)},Yr(br.prototype,function(e,t){var n=/^(?:filter|find|map|reject)|While$/.test(t),r=/^(?:head|last)$/.test(t),a=mr[r?"take"+("last"==t?"Right":""):t],u=r||/^find/.test(t);a&&(mr.prototype[t]=function(){var t=this.__wrapped__,o=r?[1]:arguments,i=t instanceof br,c=o[0],f=i||bo(t),s=function(e){var t=a.apply(mr,tn([e],o));return r&&d?t[0]:t};f&&n&&"function"==typeof c&&1!=c.length&&(i=f=!1);var d=this.__chain__,p=!!this.__actions__.length,h=u&&!d,m=i&&!p;if(!u&&f){t=m?t:new br(this);var v=e.apply(t,o);return v.__actions__.push({func:Bu,args:[s],thisArg:l}),new yr(v,d)}return h&&m?e.apply(this,o):(v=this.thru(s),h?r?v.value()[0]:v.value():v)})}),Kt(["pop","push","shift","sort","splice","unshift"],function(e){var t=lt[e],n=/^(?:push|sort|unshift)$/.test(e)?"tap":"thru",r=/^(?:pop|shift)$/.test(e);mr.prototype[e]=function(){var e=arguments;if(r&&!this.__chain__){var a=this.value();return t.apply(bo(a)?a:[],e)}return this[n](function(n){return t.apply(bo(n)?n:[],e)})}}),Yr(br.prototype,function(e,t){var n=mr[t];if(n){var r=n.name+"";ft.call(ur,r)||(ur[r]=[]),ur[r].push({name:t,func:n})}}),ur[ml(l,b).name]=[{name:"wrapper",func:l}],br.prototype.clone=function(){var e=new br(this.__wrapped__);return e.__actions__=al(this.__actions__),e.__dir__=this.__dir__,e.__filtered__=this.__filtered__,e.__iteratees__=al(this.__iteratees__),e.__takeCount__=this.__takeCount__,e.__views__=al(this.__views__),e},br.prototype.reverse=function(){if(this.__filtered__){var e=new br(this);e.__dir__=-1,e.__filtered__=!0}else(e=this.clone()).__dir__*=-1;return e},br.prototype.value=function(){var e=this.__wrapped__.value(),t=this.__dir__,n=bo(e),r=t<0,a=n?e.length:0,l=function(e,t,n){var r=-1,a=n.length;for(;++r<a;){var l=n[r],u=l.size;switch(l.type){case"drop":e+=u;break;case"dropRight":t-=u;break;case"take":t=Kn(t,e+u);break;case"takeRight":e=qn(e,t-u)}}return{start:e,end:t}}(0,a,this.__views__),u=l.start,o=l.end,i=o-u,c=r?o:u-1,f=this.__iteratees__,s=f.length,d=0,p=Kn(i,this.__takeCount__);if(!n||!r&&a==i&&p==i)return $a(e,this.__actions__);var h=[];e:for(;i--&&d<p;){for(var m=-1,v=e[c+=t];++m<s;){var g=f[m],y=g.iteratee,b=g.type,_=y(v);if(b==L)v=_;else if(!_){if(b==z)continue e;break e}}h[d++]=v}return h},mr.prototype.at=Wu,mr.prototype.chain=function(){return Uu(this)},mr.prototype.commit=function(){return new yr(this.value(),this.__chain__)},mr.prototype.next=function(){this.__values__===l&&(this.__values__=Bo(this.value()));var e=this.__index__>=this.__values__.length;return{done:e,value:e?l:this.__values__[this.__index__++]}},mr.prototype.plant=function(e){for(var t,n=this;n instanceof gr;){var r=pu(n);r.__index__=0,r.__values__=l,t?a.__wrapped__=r:t=r;var a=r;n=n.__wrapped__}return a.__wrapped__=e,t},mr.prototype.reverse=function(){var e=this.__wrapped__;if(e instanceof br){var t=e;return this.__actions__.length&&(t=new br(this)),(t=t.reverse()).__actions__.push({func:Bu,args:[Ou],thisArg:l}),new yr(t,this.__chain__)}return this.thru(Ou)},mr.prototype.toJSON=mr.prototype.valueOf=mr.prototype.value=function(){return $a(this.__wrapped__,this.__actions__)},mr.prototype.first=mr.prototype.head,Dt&&(mr.prototype[Dt]=function(){return this}),mr}();Rt._=In,(a=function(){return In}.call(t,n,t,r))===l||(r.exports=a)}).call(this)}).call(this,n(22),n(23)(e))},function(e,t){var n;n=function(){return this}();try{n=n||new Function("return this")()}catch(e){"object"==typeof window&&(n=window)}e.exports=n},function(e,t){e.exports=function(e){return e.webpackPolyfill||(e.deprecate=function(){},e.paths=[],e.children||(e.children=[]),Object.defineProperty(e,"loaded",{enumerable:!0,get:function(){return e.l}}),Object.defineProperty(e,"id",{enumerable:!0,get:function(){return e.i}}),e.webpackPolyfill=1),e}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var r=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),a=u(n(0)),l=u(n(2));function u(e){return e&&e.__esModule?e:{default:e}}var o=function(e){function t(){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);var e=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).call(this));return e.state={screenshots:l.default.getAllScreenShots()},e}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,a.default.Component),r(t,[{key:"render",value:function(){return a.default.createElement("div",{className:"container"},a.default.createElement("div",{className:"row"},a.default.createElement("div",{className:"col-md-8 col-md-offset-2 text-center"},a.default.createElement("h2",{className:"title"},"Screenshots"),a.default.createElement("h5",{className:"description"},"Some screenshots of my popular creations"))),a.default.createElement("br",null),a.default.createElement("br",null),a.default.createElement("div",{className:"row"},this.state.screenshots))}}]),t}();t.default=o},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var r,a=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),l=n(0),u=(r=l)&&r.__esModule?r:{default:r};var o=function(e){function t(){return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).call(this))}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,u.default.Component),a(t,[{key:"render",value:function(){return u.default.createElement("div",{className:"container"},u.default.createElement("div",{className:"row"},u.default.createElement("div",{className:"col-md-8 col-md-offset-2 text-center"},u.default.createElement("h2",{className:"title"},"About"),u.default.createElement("h5",{className:"description"},"Know more about me and what I do"))),u.default.createElement("br",null),u.default.createElement("br",null),u.default.createElement("div",{className:"row"},u.default.createElement("div",{className:"col-md-6 col-md-offset-3"},u.default.createElement("div",{className:"card card-profile card-plain"},u.default.createElement("div",{className:"col-md-5"},u.default.createElement("div",{className:"card-image"},u.default.createElement("a",{href:"https://play.google.com/store/apps/dev?id=6631186001868474976"},u.default.createElement("img",{className:"img",src:"./img/myphoto.jpg"})),u.default.createElement("div",{className:"colored-shadow",style:{backgroundImage:"url(./img/myphoto.jpg)",opacity:1}}),u.default.createElement("div",{className:"ripple-container"}))),u.default.createElement("div",{className:"col-md-7"},u.default.createElement("div",{className:"card-content"},u.default.createElement("h4",{className:"card-title"},"Maxwell Mapako"),u.default.createElement("h6",{className:"category text-muted"},"Software Engineer / Freelancer"),u.default.createElement("p",{className:"card-description"},"Without ambition one starts nothing. Without work one finishes nothing. The prize will not be sent to you. You have to win it. 🎸"),u.default.createElement("div",{className:"footer"},u.default.createElement("a",{href:"https://plus.google.com/u/1/+MaxwellMapakot",className:"btn btn-just-icon btn-simple btn-google"},u.default.createElement("i",{className:"fa fa-google"}),u.default.createElement("div",{className:"ripple-container"})),u.default.createElement("a",{href:"https://za.linkedin.com/in/maxwell-mapako-32866b5b",className:"btn btn-just-icon btn-simple btn-linkedin"},u.default.createElement("i",{className:"fa fa-linkedin"}),u.default.createElement("div",{className:"ripple-container"})))))))))}}]),t}();t.default=o}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vd2VicGFjay9ib290c3RyYXAiLCJ3ZWJwYWNrOi8vLy4uL25vZGVfbW9kdWxlcy9yZWFjdC9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi4vbm9kZV9tb2R1bGVzL29iamVjdC1hc3NpZ24vaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vYXBwL3N0b3Jlcy9zdG9yZS5qc3giLCJ3ZWJwYWNrOi8vLy4vYXBwL2FwcC5qc3giLCJ3ZWJwYWNrOi8vLy4uL25vZGVfbW9kdWxlcy9yZWFjdC9janMvcmVhY3QucHJvZHVjdGlvbi5taW4uanMiLCJ3ZWJwYWNrOi8vLy4uL25vZGVfbW9kdWxlcy9yZWFjdC1kb20vaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4uL25vZGVfbW9kdWxlcy9yZWFjdC1kb20vY2pzL3JlYWN0LWRvbS5wcm9kdWN0aW9uLm1pbi5qcyIsIndlYnBhY2s6Ly8vLi4vbm9kZV9tb2R1bGVzL3NjaGVkdWxlci9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi4vbm9kZV9tb2R1bGVzL3NjaGVkdWxlci9janMvc2NoZWR1bGVyLnByb2R1Y3Rpb24ubWluLmpzIiwid2VicGFjazovLy8uL2FwcC9wYWdlcy9iYXNlLmpzeCIsIndlYnBhY2s6Ly8vLi9hcHAvY29tcG9uZW50cy9oZWFkZXIuanN4Iiwid2VicGFjazovLy8uL2FwcC9jb21wb25lbnRzL2Zvb3Rlci5qc3giLCJ3ZWJwYWNrOi8vLy4vYXBwL3BhZ2VzL2luZGV4LmpzeCIsIndlYnBhY2s6Ly8vLi9hcHAvc2VjdGlvbnMvYXBwbGljYXRpb25zLmpzeCIsIndlYnBhY2s6Ly8vLi9hcHAvc2VjdGlvbnMvZmVhdHVyZWQuanN4Iiwid2VicGFjazovLy8uL2FwcC9hZGFwdGVycy9hcHBsaWNhdGlvbi5qc3giLCJ3ZWJwYWNrOi8vLy4vYXBwL2FkYXB0ZXJzL2ZlYXR1cmUuanN4Iiwid2VicGFjazovLy8uL2FwcC9hZGFwdGVycy9zY3JlZW5zaG90LmpzeCIsIndlYnBhY2s6Ly8vLi4vbm9kZV9tb2R1bGVzL2xvZGFzaC9sb2Rhc2guanMiLCJ3ZWJwYWNrOi8vLy4uL25vZGVfbW9kdWxlcy93ZWJwYWNrL2J1aWxkaW4vZ2xvYmFsLmpzIiwid2VicGFjazovLy8uLi9ub2RlX21vZHVsZXMvd2VicGFjay9idWlsZGluL21vZHVsZS5qcyIsIndlYnBhY2s6Ly8vLi9hcHAvc2VjdGlvbnMvc2NyZWVuc2hvdHMuanN4Iiwid2VicGFjazovLy8uL2FwcC9zZWN0aW9ucy9hYm91dC5qc3giXSwibmFtZXMiOlsiaW5zdGFsbGVkTW9kdWxlcyIsIl9fd2VicGFja19yZXF1aXJlX18iLCJtb2R1bGVJZCIsImV4cG9ydHMiLCJtb2R1bGUiLCJpIiwibCIsIm1vZHVsZXMiLCJjYWxsIiwibSIsImMiLCJkIiwibmFtZSIsImdldHRlciIsIm8iLCJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImVudW1lcmFibGUiLCJnZXQiLCJyIiwiU3ltYm9sIiwidG9TdHJpbmdUYWciLCJ2YWx1ZSIsInQiLCJtb2RlIiwiX19lc01vZHVsZSIsIm5zIiwiY3JlYXRlIiwia2V5IiwiYmluZCIsIm4iLCJvYmplY3QiLCJwcm9wZXJ0eSIsInByb3RvdHlwZSIsImhhc093blByb3BlcnR5IiwicCIsInMiLCJnZXRPd25Qcm9wZXJ0eVN5bWJvbHMiLCJwcm9wSXNFbnVtZXJhYmxlIiwicHJvcGVydHlJc0VudW1lcmFibGUiLCJ0b09iamVjdCIsInZhbCIsIlR5cGVFcnJvciIsImFzc2lnbiIsInRlc3QxIiwiU3RyaW5nIiwiZ2V0T3duUHJvcGVydHlOYW1lcyIsInRlc3QyIiwiZnJvbUNoYXJDb2RlIiwibWFwIiwiam9pbiIsInRlc3QzIiwic3BsaXQiLCJmb3JFYWNoIiwibGV0dGVyIiwia2V5cyIsImVyciIsInNob3VsZFVzZU5hdGl2ZSIsInRhcmdldCIsInNvdXJjZSIsImZyb20iLCJzeW1ib2xzIiwidG8iLCJhcmd1bWVudHMiLCJsZW5ndGgiLCJfIiwicmVxdWlyZSIsInN0b3JlIiwiU3RvcmUiLCJfY2xhc3NDYWxsQ2hlY2siLCJ0aGlzIiwiY29sbGVjdGlvbiIsImFwcHMiLCJBcHBsaWNhdGlvbnMiLCJmZWF0dXJlZCIsIkZlYXR1cmVkQXBwcyIsInNjcmVlc2hvdHMiLCJTY3JlZW5zaG90cyIsInNvcnRCeSIsImRhdGEiLCJfcmVhY3QyIiwiZGVmYXVsdCIsImNyZWF0ZUVsZW1lbnQiLCJfZmVhdHVyZTIiLCJ0aXRsZSIsIl9zY3JlZW5zaG90MiIsImltYWdlIiwiYXBwIiwiZG9jdW1lbnQiLCJnZXRFbGVtZW50QnlJZCIsIlJlYWN0RE9NIiwicmVuZGVyIiwiX2Jhc2UyIiwiRnJhZ21lbnQiLCJTdHJpY3RNb2RlIiwiUHJvZmlsZXIiLCJxIiwiU3VzcGVuc2UiLCJ1IiwidiIsImZvciIsInciLCJ4IiwiaXRlcmF0b3IiLCJ6IiwiYSIsImIiLCJlbmNvZGVVUklDb21wb25lbnQiLCJBIiwiaXNNb3VudGVkIiwiZW5xdWV1ZUZvcmNlVXBkYXRlIiwiZW5xdWV1ZVJlcGxhY2VTdGF0ZSIsImVucXVldWVTZXRTdGF0ZSIsIkIiLCJDIiwicHJvcHMiLCJjb250ZXh0IiwicmVmcyIsInVwZGF0ZXIiLCJEIiwiRSIsImlzUmVhY3RDb21wb25lbnQiLCJzZXRTdGF0ZSIsIkVycm9yIiwiZm9yY2VVcGRhdGUiLCJGIiwiY29uc3RydWN0b3IiLCJpc1B1cmVSZWFjdENvbXBvbmVudCIsIkciLCJjdXJyZW50IiwiSCIsIkkiLCJyZWYiLCJfX3NlbGYiLCJfX3NvdXJjZSIsIkoiLCJlIiwiayIsImgiLCJnIiwiY2hpbGRyZW4iLCJmIiwiQXJyYXkiLCJkZWZhdWx0UHJvcHMiLCIkJHR5cGVvZiIsInR5cGUiLCJfb3duZXIiLCJMIiwiTSIsIk4iLCI9IiwiOiIsInJlcGxhY2UiLCJlc2NhcGUiLCJ0b1N0cmluZyIsIk8iLCJpc0FycmF5IiwiSyIsInB1c2giLCJ5IiwibmV4dCIsImRvbmUiLCJQIiwiUSIsIl9zdGF0dXMiLCJfcmVzdWx0IiwidGhlbiIsIlIiLCJTIiwiVCIsIlJlYWN0Q3VycmVudERpc3BhdGNoZXIiLCJSZWFjdEN1cnJlbnRCYXRjaENvbmZpZyIsInRyYW5zaXRpb24iLCJSZWFjdEN1cnJlbnRPd25lciIsIklzU29tZVJlbmRlcmVyQWN0aW5nIiwiQ2hpbGRyZW4iLCJhcHBseSIsImNvdW50IiwidG9BcnJheSIsIm9ubHkiLCJDb21wb25lbnQiLCJQdXJlQ29tcG9uZW50IiwiX19TRUNSRVRfSU5URVJOQUxTX0RPX05PVF9VU0VfT1JfWU9VX1dJTExfQkVfRklSRUQiLCJjbG9uZUVsZW1lbnQiLCJjcmVhdGVDb250ZXh0IiwiX2NhbGN1bGF0ZUNoYW5nZWRCaXRzIiwiX2N1cnJlbnRWYWx1ZSIsIl9jdXJyZW50VmFsdWUyIiwiX3RocmVhZENvdW50IiwiUHJvdmlkZXIiLCJDb25zdW1lciIsIl9jb250ZXh0IiwiY3JlYXRlRmFjdG9yeSIsImNyZWF0ZVJlZiIsImZvcndhcmRSZWYiLCJpc1ZhbGlkRWxlbWVudCIsImxhenkiLCJfcGF5bG9hZCIsIl9pbml0IiwibWVtbyIsImNvbXBhcmUiLCJ1c2VDYWxsYmFjayIsInVzZUNvbnRleHQiLCJ1c2VEZWJ1Z1ZhbHVlIiwidXNlRWZmZWN0IiwidXNlSW1wZXJhdGl2ZUhhbmRsZSIsInVzZUxheW91dEVmZmVjdCIsInVzZU1lbW8iLCJ1c2VSZWR1Y2VyIiwidXNlUmVmIiwidXNlU3RhdGUiLCJ2ZXJzaW9uIiwiY2hlY2tEQ0UiLCJfX1JFQUNUX0RFVlRPT0xTX0dMT0JBTF9IT09LX18iLCJjb25zb2xlIiwiZXJyb3IiLCJhYSIsImJhIiwiU2V0IiwiY2EiLCJkYSIsImVhIiwiYWRkIiwiZmEiLCJ3aW5kb3ciLCJoYSIsImlhIiwiamEiLCJrYSIsImFjY2VwdHNCb29sZWFucyIsImF0dHJpYnV0ZU5hbWUiLCJhdHRyaWJ1dGVOYW1lc3BhY2UiLCJtdXN0VXNlUHJvcGVydHkiLCJwcm9wZXJ0eU5hbWUiLCJzYW5pdGl6ZVVSTCIsInJlbW92ZUVtcHR5U3RyaW5nIiwidG9Mb3dlckNhc2UiLCJvYSIsInBhIiwidG9VcHBlckNhc2UiLCJxYSIsInNsaWNlIiwibWEiLCJpc05hTiIsIm5hIiwidGVzdCIsImxhIiwicmVtb3ZlQXR0cmlidXRlIiwic2V0QXR0cmlidXRlIiwic2V0QXR0cmlidXRlTlMiLCJ4bGlua0hyZWYiLCJyYSIsInNhIiwidGEiLCJ1YSIsIndhIiwieGEiLCJ5YSIsInphIiwiQWEiLCJCYSIsIkNhIiwiRGEiLCJFYSIsIkZhIiwiR2EiLCJIYSIsIklhIiwiSmEiLCJNYSIsIkthIiwiTGEiLCJOYSIsInN0YWNrIiwidHJpbSIsIm1hdGNoIiwiT2EiLCJQYSIsInByZXBhcmVTdGFja1RyYWNlIiwic2V0IiwiUmVmbGVjdCIsImNvbnN0cnVjdCIsImRpc3BsYXlOYW1lIiwiUWEiLCJ0YWciLCJfcmVuZGVyIiwiUmEiLCJTYSIsIlRhIiwibm9kZU5hbWUiLCJWYSIsIl92YWx1ZVRyYWNrZXIiLCJnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IiLCJjb25maWd1cmFibGUiLCJnZXRWYWx1ZSIsInNldFZhbHVlIiwic3RvcFRyYWNraW5nIiwiVWEiLCJXYSIsImNoZWNrZWQiLCJYYSIsImFjdGl2ZUVsZW1lbnQiLCJib2R5IiwiWWEiLCJkZWZhdWx0Q2hlY2tlZCIsImRlZmF1bHRWYWx1ZSIsIl93cmFwcGVyU3RhdGUiLCJpbml0aWFsQ2hlY2tlZCIsIlphIiwiaW5pdGlhbFZhbHVlIiwiY29udHJvbGxlZCIsIiRhIiwiYWIiLCJiYiIsImNiIiwib3duZXJEb2N1bWVudCIsImViIiwiZGIiLCJmYiIsIm9wdGlvbnMiLCJzZWxlY3RlZCIsImRlZmF1bHRTZWxlY3RlZCIsImRpc2FibGVkIiwiZ2IiLCJkYW5nZXJvdXNseVNldElubmVySFRNTCIsImhiIiwiaWIiLCJqYiIsInRleHRDb250ZW50Iiwia2IiLCJodG1sIiwibWF0aG1sIiwic3ZnIiwibGIiLCJtYiIsIm5iIiwib2IiLCJNU0FwcCIsImV4ZWNVbnNhZmVMb2NhbEZ1bmN0aW9uIiwibmFtZXNwYWNlVVJJIiwiaW5uZXJIVE1MIiwidmFsdWVPZiIsImZpcnN0Q2hpbGQiLCJyZW1vdmVDaGlsZCIsImFwcGVuZENoaWxkIiwicGIiLCJsYXN0Q2hpbGQiLCJub2RlVHlwZSIsIm5vZGVWYWx1ZSIsInFiIiwiYW5pbWF0aW9uSXRlcmF0aW9uQ291bnQiLCJib3JkZXJJbWFnZU91dHNldCIsImJvcmRlckltYWdlU2xpY2UiLCJib3JkZXJJbWFnZVdpZHRoIiwiYm94RmxleCIsImJveEZsZXhHcm91cCIsImJveE9yZGluYWxHcm91cCIsImNvbHVtbkNvdW50IiwiY29sdW1ucyIsImZsZXgiLCJmbGV4R3JvdyIsImZsZXhQb3NpdGl2ZSIsImZsZXhTaHJpbmsiLCJmbGV4TmVnYXRpdmUiLCJmbGV4T3JkZXIiLCJncmlkQXJlYSIsImdyaWRSb3ciLCJncmlkUm93RW5kIiwiZ3JpZFJvd1NwYW4iLCJncmlkUm93U3RhcnQiLCJncmlkQ29sdW1uIiwiZ3JpZENvbHVtbkVuZCIsImdyaWRDb2x1bW5TcGFuIiwiZ3JpZENvbHVtblN0YXJ0IiwiZm9udFdlaWdodCIsImxpbmVDbGFtcCIsImxpbmVIZWlnaHQiLCJvcGFjaXR5Iiwib3JkZXIiLCJvcnBoYW5zIiwidGFiU2l6ZSIsIndpZG93cyIsInpJbmRleCIsInpvb20iLCJmaWxsT3BhY2l0eSIsImZsb29kT3BhY2l0eSIsInN0b3BPcGFjaXR5Iiwic3Ryb2tlRGFzaGFycmF5Iiwic3Ryb2tlRGFzaG9mZnNldCIsInN0cm9rZU1pdGVybGltaXQiLCJzdHJva2VPcGFjaXR5Iiwic3Ryb2tlV2lkdGgiLCJyYiIsInNiIiwidGIiLCJzdHlsZSIsImluZGV4T2YiLCJzZXRQcm9wZXJ0eSIsImNoYXJBdCIsInN1YnN0cmluZyIsInViIiwibWVudWl0ZW0iLCJhcmVhIiwiYmFzZSIsImJyIiwiY29sIiwiZW1iZWQiLCJociIsImltZyIsImlucHV0Iiwia2V5Z2VuIiwibGluayIsIm1ldGEiLCJwYXJhbSIsInRyYWNrIiwid2JyIiwidmIiLCJ3YiIsImlzIiwieGIiLCJzcmNFbGVtZW50IiwiY29ycmVzcG9uZGluZ1VzZUVsZW1lbnQiLCJwYXJlbnROb2RlIiwieWIiLCJ6YiIsIkFiIiwiQmIiLCJDYiIsInN0YXRlTm9kZSIsIkRiIiwiRWIiLCJGYiIsIkdiIiwiSGIiLCJJYiIsIkpiIiwiS2IiLCJMYiIsIk1iIiwiT2IiLCJQYiIsIlFiIiwiYWRkRXZlbnRMaXN0ZW5lciIsInJlbW92ZUV2ZW50TGlzdGVuZXIiLCJTYiIsIlRiIiwiVWIiLCJWYiIsIldiIiwib25FcnJvciIsIlhiIiwiWmIiLCJhbHRlcm5hdGUiLCJyZXR1cm4iLCJmbGFncyIsIiRiIiwibWVtb2l6ZWRTdGF0ZSIsImRlaHlkcmF0ZWQiLCJhYyIsImNjIiwiY2hpbGQiLCJzaWJsaW5nIiwiYmMiLCJkYyIsImVjIiwiZmMiLCJnYyIsImhjIiwiaWMiLCJqYyIsImtjIiwibGMiLCJtYyIsIm5jIiwiTWFwIiwib2MiLCJwYyIsInFjIiwicmMiLCJibG9ja2VkT24iLCJkb21FdmVudE5hbWUiLCJldmVudFN5c3RlbUZsYWdzIiwibmF0aXZlRXZlbnQiLCJ0YXJnZXRDb250YWluZXJzIiwic2MiLCJkZWxldGUiLCJwb2ludGVySWQiLCJ0YyIsInZjIiwid2MiLCJsYW5lUHJpb3JpdHkiLCJ1bnN0YWJsZV9ydW5XaXRoUHJpb3JpdHkiLCJwcmlvcml0eSIsImh5ZHJhdGUiLCJjb250YWluZXJJbmZvIiwieGMiLCJ5YyIsInNoaWZ0IiwiemMiLCJBYyIsIkJjIiwidW5zdGFibGVfc2NoZWR1bGVDYWxsYmFjayIsInVuc3RhYmxlX05vcm1hbFByaW9yaXR5IiwiQ2MiLCJEYyIsIkVjIiwiYW5pbWF0aW9uZW5kIiwiYW5pbWF0aW9uaXRlcmF0aW9uIiwiYW5pbWF0aW9uc3RhcnQiLCJ0cmFuc2l0aW9uZW5kIiwiRmMiLCJHYyIsIkhjIiwiYW5pbWF0aW9uIiwiSWMiLCJKYyIsIktjIiwiTGMiLCJNYyIsIk5jIiwiT2MiLCJQYyIsIlFjIiwidW5zdGFibGVfbm93IiwiUmMiLCJVYyIsInBlbmRpbmdMYW5lcyIsImV4cGlyZWRMYW5lcyIsInN1c3BlbmRlZExhbmVzIiwicGluZ2VkTGFuZXMiLCJWYyIsImVudGFuZ2xlZExhbmVzIiwiZW50YW5nbGVtZW50cyIsIldjIiwiWGMiLCJZYyIsIlpjIiwiJGMiLCJldmVudFRpbWVzIiwiTWF0aCIsImNsejMyIiwiYmQiLCJjZCIsImxvZyIsIkxOMiIsImRkIiwidW5zdGFibGVfVXNlckJsb2NraW5nUHJpb3JpdHkiLCJlZCIsImZkIiwiZ2QiLCJoZCIsImlkIiwidWMiLCJqZCIsImtkIiwibGQiLCJtZCIsIm5kIiwib2QiLCJrZXlDb2RlIiwiY2hhckNvZGUiLCJwZCIsInFkIiwicmQiLCJfcmVhY3ROYW1lIiwiX3RhcmdldEluc3QiLCJjdXJyZW50VGFyZ2V0IiwiaXNEZWZhdWx0UHJldmVudGVkIiwiZGVmYXVsdFByZXZlbnRlZCIsInJldHVyblZhbHVlIiwiaXNQcm9wYWdhdGlvblN0b3BwZWQiLCJwcmV2ZW50RGVmYXVsdCIsInN0b3BQcm9wYWdhdGlvbiIsImNhbmNlbEJ1YmJsZSIsInBlcnNpc3QiLCJpc1BlcnNpc3RlbnQiLCJ3ZCIsInhkIiwieWQiLCJzZCIsImV2ZW50UGhhc2UiLCJidWJibGVzIiwiY2FuY2VsYWJsZSIsInRpbWVTdGFtcCIsIkRhdGUiLCJub3ciLCJpc1RydXN0ZWQiLCJ0ZCIsInVkIiwidmlldyIsImRldGFpbCIsInZkIiwiQWQiLCJzY3JlZW5YIiwic2NyZWVuWSIsImNsaWVudFgiLCJjbGllbnRZIiwicGFnZVgiLCJwYWdlWSIsImN0cmxLZXkiLCJzaGlmdEtleSIsImFsdEtleSIsIm1ldGFLZXkiLCJnZXRNb2RpZmllclN0YXRlIiwiemQiLCJidXR0b24iLCJidXR0b25zIiwicmVsYXRlZFRhcmdldCIsImZyb21FbGVtZW50IiwidG9FbGVtZW50IiwibW92ZW1lbnRYIiwibW92ZW1lbnRZIiwiQmQiLCJEZCIsImRhdGFUcmFuc2ZlciIsIkZkIiwiSGQiLCJhbmltYXRpb25OYW1lIiwiZWxhcHNlZFRpbWUiLCJwc2V1ZG9FbGVtZW50IiwiSmQiLCJjbGlwYm9hcmREYXRhIiwiTGQiLCJNZCIsIkVzYyIsIlNwYWNlYmFyIiwiTGVmdCIsIlVwIiwiUmlnaHQiLCJEb3duIiwiRGVsIiwiV2luIiwiTWVudSIsIkFwcHMiLCJTY3JvbGwiLCJNb3pQcmludGFibGVLZXkiLCJOZCIsIjgiLCI5IiwiMTIiLCIxMyIsIjE2IiwiMTciLCIxOCIsIjE5IiwiMjAiLCIyNyIsIjMyIiwiMzMiLCIzNCIsIjM1IiwiMzYiLCIzNyIsIjM4IiwiMzkiLCI0MCIsIjQ1IiwiNDYiLCIxMTIiLCIxMTMiLCIxMTQiLCIxMTUiLCIxMTYiLCIxMTciLCIxMTgiLCIxMTkiLCIxMjAiLCIxMjEiLCIxMjIiLCIxMjMiLCIxNDQiLCIxNDUiLCIyMjQiLCJPZCIsIkFsdCIsIkNvbnRyb2wiLCJNZXRhIiwiU2hpZnQiLCJQZCIsIlJkIiwiY29kZSIsImxvY2F0aW9uIiwicmVwZWF0IiwibG9jYWxlIiwid2hpY2giLCJUZCIsIndpZHRoIiwiaGVpZ2h0IiwicHJlc3N1cmUiLCJ0YW5nZW50aWFsUHJlc3N1cmUiLCJ0aWx0WCIsInRpbHRZIiwidHdpc3QiLCJwb2ludGVyVHlwZSIsImlzUHJpbWFyeSIsIlZkIiwidG91Y2hlcyIsInRhcmdldFRvdWNoZXMiLCJjaGFuZ2VkVG91Y2hlcyIsIlhkIiwiWmQiLCJkZWx0YVgiLCJ3aGVlbERlbHRhWCIsImRlbHRhWSIsIndoZWVsRGVsdGFZIiwid2hlZWxEZWx0YSIsImRlbHRhWiIsImRlbHRhTW9kZSIsIiRkIiwiYWUiLCJiZSIsImRvY3VtZW50TW9kZSIsImNlIiwiZGUiLCJlZSIsImZlIiwiZ2UiLCJoZSIsImllIiwibGUiLCJjb2xvciIsImRhdGUiLCJkYXRldGltZSIsImRhdGV0aW1lLWxvY2FsIiwiZW1haWwiLCJtb250aCIsIm51bWJlciIsInBhc3N3b3JkIiwicmFuZ2UiLCJzZWFyY2giLCJ0ZWwiLCJ0ZXh0IiwidGltZSIsInVybCIsIndlZWsiLCJtZSIsIm5lIiwib2UiLCJldmVudCIsImxpc3RlbmVycyIsInBlIiwicWUiLCJyZSIsInNlIiwidGUiLCJ1ZSIsInZlIiwid2UiLCJ4ZSIsInllIiwiemUiLCJvbmlucHV0IiwiQWUiLCJkZXRhY2hFdmVudCIsIkJlIiwiQ2UiLCJhdHRhY2hFdmVudCIsIkRlIiwiRWUiLCJGZSIsIkhlIiwiSWUiLCJKZSIsIktlIiwiTGUiLCJub2RlIiwib2Zmc2V0IiwibmV4dFNpYmxpbmciLCJOZSIsIkhUTUxJRnJhbWVFbGVtZW50IiwiY29udGVudFdpbmRvdyIsImhyZWYiLCJPZSIsImNvbnRlbnRFZGl0YWJsZSIsIlBlIiwiUWUiLCJSZSIsIlNlIiwiVGUiLCJVZSIsInN0YXJ0Iiwic2VsZWN0aW9uU3RhcnQiLCJlbmQiLCJzZWxlY3Rpb25FbmQiLCJhbmNob3JOb2RlIiwiZGVmYXVsdFZpZXciLCJnZXRTZWxlY3Rpb24iLCJhbmNob3JPZmZzZXQiLCJmb2N1c05vZGUiLCJmb2N1c09mZnNldCIsIlZlIiwiV2UiLCJYZSIsIlllIiwiY29uY2F0IiwiWmUiLCJZYiIsImluc3RhbmNlIiwibGlzdGVuZXIiLCIkZSIsImhhcyIsImFmIiwiYmYiLCJyYW5kb20iLCJjZiIsImRmIiwiY2FwdHVyZSIsInBhc3NpdmUiLCJOYiIsImVmIiwiZmYiLCJwYXJlbnRXaW5kb3ciLCJnZiIsImhmIiwiamUiLCJjaGFyIiwia2UiLCJ1bnNoaWZ0IiwiamYiLCJrZiIsImxmIiwibWYiLCJhdXRvRm9jdXMiLCJuZiIsIl9faHRtbCIsIm9mIiwic2V0VGltZW91dCIsInBmIiwiY2xlYXJUaW1lb3V0IiwicWYiLCJyZiIsInNmIiwicHJldmlvdXNTaWJsaW5nIiwidGYiLCJ2ZiIsIndmIiwieGYiLCJ5ZiIsInpmIiwiQWYiLCJCZiIsIkNmIiwiRGYiLCJFZiIsImNvbnRleHRUeXBlcyIsIl9fcmVhY3RJbnRlcm5hbE1lbW9pemVkVW5tYXNrZWRDaGlsZENvbnRleHQiLCJfX3JlYWN0SW50ZXJuYWxNZW1vaXplZE1hc2tlZENoaWxkQ29udGV4dCIsIkZmIiwiY2hpbGRDb250ZXh0VHlwZXMiLCJHZiIsIkhmIiwiSWYiLCJnZXRDaGlsZENvbnRleHQiLCJKZiIsIl9fcmVhY3RJbnRlcm5hbE1lbW9pemVkTWVyZ2VkQ2hpbGRDb250ZXh0IiwiS2YiLCJMZiIsIk1mIiwiTmYiLCJPZiIsIlBmIiwidW5zdGFibGVfY2FuY2VsQ2FsbGJhY2siLCJRZiIsInVuc3RhYmxlX3Nob3VsZFlpZWxkIiwiUmYiLCJ1bnN0YWJsZV9yZXF1ZXN0UGFpbnQiLCJTZiIsIlRmIiwidW5zdGFibGVfZ2V0Q3VycmVudFByaW9yaXR5TGV2ZWwiLCJVZiIsInVuc3RhYmxlX0ltbWVkaWF0ZVByaW9yaXR5IiwiVmYiLCJXZiIsIlhmIiwidW5zdGFibGVfTG93UHJpb3JpdHkiLCJZZiIsInVuc3RhYmxlX0lkbGVQcmlvcml0eSIsIlpmIiwiJGYiLCJhZyIsImJnIiwiY2ciLCJkZyIsImVnIiwiZmciLCJnZyIsImhnIiwiaWciLCJqZyIsImtnIiwibGciLCJtZyIsIm5nIiwib2ciLCJwZyIsInFnIiwicmciLCJzZyIsImNoaWxkTGFuZXMiLCJ0ZyIsImRlcGVuZGVuY2llcyIsImZpcnN0Q29udGV4dCIsImxhbmVzIiwidWciLCJ2ZyIsIm9ic2VydmVkQml0cyIsInJlc3BvbmRlcnMiLCJ3ZyIsInhnIiwidXBkYXRlUXVldWUiLCJiYXNlU3RhdGUiLCJmaXJzdEJhc2VVcGRhdGUiLCJsYXN0QmFzZVVwZGF0ZSIsInNoYXJlZCIsInBlbmRpbmciLCJlZmZlY3RzIiwieWciLCJ6ZyIsImV2ZW50VGltZSIsImxhbmUiLCJwYXlsb2FkIiwiY2FsbGJhY2siLCJBZyIsIkJnIiwiQ2ciLCJEZyIsIkVnIiwiRmciLCJHZyIsIktnIiwiX3JlYWN0SW50ZXJuYWxzIiwiSGciLCJJZyIsIkpnIiwiTGciLCJzaG91bGRDb21wb25lbnRVcGRhdGUiLCJNZyIsImNvbnRleHRUeXBlIiwic3RhdGUiLCJOZyIsImNvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMiLCJVTlNBRkVfY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyIsIk9nIiwiZ2V0RGVyaXZlZFN0YXRlRnJvbVByb3BzIiwiZ2V0U25hcHNob3RCZWZvcmVVcGRhdGUiLCJVTlNBRkVfY29tcG9uZW50V2lsbE1vdW50IiwiY29tcG9uZW50V2lsbE1vdW50IiwiY29tcG9uZW50RGlkTW91bnQiLCJQZyIsIlFnIiwiX3N0cmluZ1JlZiIsIlJnIiwiU2ciLCJsYXN0RWZmZWN0IiwibmV4dEVmZmVjdCIsImZpcnN0RWZmZWN0IiwiaW5kZXgiLCJUZyIsIlVnIiwiZWxlbWVudFR5cGUiLCJWZyIsImltcGxlbWVudGF0aW9uIiwiV2ciLCJYZyIsIllnIiwiWmciLCIkZyIsImFoIiwiYmgiLCJjaCIsImRoIiwiZWgiLCJkb2N1bWVudEVsZW1lbnQiLCJ0YWdOYW1lIiwiZmgiLCJnaCIsImhoIiwiaWgiLCJtZW1vaXplZFByb3BzIiwicmV2ZWFsT3JkZXIiLCJqaCIsImtoIiwibGgiLCJtaCIsIm5oIiwib2giLCJwZW5kaW5nUHJvcHMiLCJwaCIsInFoIiwicmgiLCJzaCIsInRoIiwidWgiLCJfd29ya0luUHJvZ3Jlc3NWZXJzaW9uUHJpbWFyeSIsInZoIiwid2giLCJ4aCIsInloIiwiemgiLCJBaCIsIkJoIiwiQ2giLCJEaCIsIkVoIiwiRmgiLCJHaCIsIkhoIiwiYmFzZVF1ZXVlIiwicXVldWUiLCJJaCIsIkpoIiwiS2giLCJsYXN0UmVuZGVyZWRSZWR1Y2VyIiwiYWN0aW9uIiwiZWFnZXJSZWR1Y2VyIiwiZWFnZXJTdGF0ZSIsImxhc3RSZW5kZXJlZFN0YXRlIiwiZGlzcGF0Y2giLCJMaCIsIk1oIiwiX2dldFZlcnNpb24iLCJfc291cmNlIiwibXV0YWJsZVJlYWRMYW5lcyIsIk5oIiwiVSIsImdldFNuYXBzaG90Iiwic3Vic2NyaWJlIiwic2V0U25hcHNob3QiLCJPaCIsIlBoIiwiUWgiLCJSaCIsImRlc3Ryb3kiLCJkZXBzIiwiU2giLCJUaCIsIlVoIiwiVmgiLCJXaCIsIlhoIiwiWWgiLCJaaCIsIiRoIiwiYWkiLCJiaSIsImNpIiwicmVhZENvbnRleHQiLCJ1c2VEZWZlcnJlZFZhbHVlIiwidXNlVHJhbnNpdGlvbiIsInVzZU11dGFibGVTb3VyY2UiLCJ1c2VPcGFxdWVJZGVudGlmaWVyIiwidW5zdGFibGVfaXNOZXdSZWNvbmNpbGVyIiwidWYiLCJlaSIsImZpIiwiZ2kiLCJoaSIsImlpIiwiamkiLCJraSIsImxpIiwibWkiLCJiYXNlTGFuZXMiLCJuaSIsIm9pIiwicGkiLCJVTlNBRkVfY29tcG9uZW50V2lsbFVwZGF0ZSIsImNvbXBvbmVudFdpbGxVcGRhdGUiLCJjb21wb25lbnREaWRVcGRhdGUiLCJxaSIsImdldERlcml2ZWRTdGF0ZUZyb21FcnJvciIsInJpIiwicGVuZGluZ0NvbnRleHQiLCJCaSIsIkNpIiwiRGkiLCJFaSIsInNpIiwicmV0cnlMYW5lIiwidGkiLCJmYWxsYmFjayIsInVuc3RhYmxlX2F2b2lkVGhpc0ZhbGxiYWNrIiwidWkiLCJ1bnN0YWJsZV9leHBlY3RlZExvYWRUaW1lIiwidmkiLCJ3aSIsInhpIiwieWkiLCJ6aSIsImlzQmFja3dhcmRzIiwicmVuZGVyaW5nIiwicmVuZGVyaW5nU3RhcnRUaW1lIiwibGFzdCIsInRhaWwiLCJ0YWlsTW9kZSIsIkFpIiwiRmkiLCJHaSIsIndhc011bHRpcGxlIiwibXVsdGlwbGUiLCJvbkNsaWNrIiwib25jbGljayIsInNpemUiLCJjcmVhdGVFbGVtZW50TlMiLCJjcmVhdGVUZXh0Tm9kZSIsIlYiLCJIaSIsIklpIiwiVyIsIkppIiwiS2kiLCJMaSIsIk1pIiwibWVzc2FnZSIsIk5pIiwiT2kiLCJXZWFrTWFwIiwiUGkiLCJlbGVtZW50IiwiUWkiLCJSaSIsIlNpIiwiY29tcG9uZW50RGlkQ2F0Y2giLCJUaSIsImNvbXBvbmVudFN0YWNrIiwiVWkiLCJXZWFrU2V0IiwiVmkiLCJXaSIsIlhpIiwiX19yZWFjdEludGVybmFsU25hcHNob3RCZWZvcmVVcGRhdGUiLCJZaSIsIlppIiwiJGkiLCJmb2N1cyIsImFqIiwiZGlzcGxheSIsImJqIiwib25Db21taXRGaWJlclVubW91bnQiLCJjb21wb25lbnRXaWxsVW5tb3VudCIsImNqIiwiZGoiLCJlaiIsImZqIiwiZ2oiLCJpbnNlcnRCZWZvcmUiLCJfcmVhY3RSb290Q29udGFpbmVyIiwiaGoiLCJpaiIsImpqIiwia2oiLCJHaiIsInRqIiwiS2oiLCJNaiIsIm1qIiwibmoiLCJjZWlsIiwib2oiLCJwaiIsIlgiLCJZIiwicWoiLCJyaiIsInNqIiwidWoiLCJ2aiIsIkluZmluaXR5Iiwid2oiLCJjayIsIloiLCJ4aiIsInlqIiwiemoiLCJBaiIsIkJqIiwiQ2oiLCJEaiIsIkVqIiwiRmoiLCJIaiIsIklqIiwiSmoiLCJTYyIsIkxqIiwiY2FsbGJhY2tOb2RlIiwiZXhwaXJhdGlvblRpbWVzIiwiY2FsbGJhY2tQcmlvcml0eSIsIlRjIiwiTmoiLCJPaiIsIlBqIiwiUWoiLCJSaiIsIlNqIiwiVGoiLCJmaW5pc2hlZFdvcmsiLCJmaW5pc2hlZExhbmVzIiwiVWoiLCJ0aW1lb3V0SGFuZGxlIiwiV2oiLCJYaiIsInBpbmdDYWNoZSIsIllqIiwiWmoiLCJ2YSIsImFrIiwiYmsiLCJyYW5nZUNvdW50IiwiZm9jdXNlZEVsZW0iLCJzZWxlY3Rpb25SYW5nZSIsImVrIiwiTWUiLCJjb250YWlucyIsImNvbXBhcmVEb2N1bWVudFBvc2l0aW9uIiwibWluIiwiZXh0ZW5kIiwiY3JlYXRlUmFuZ2UiLCJzZXRTdGFydCIsInJlbW92ZUFsbFJhbmdlcyIsImFkZFJhbmdlIiwic2V0RW5kIiwibGVmdCIsInNjcm9sbExlZnQiLCJ0b3AiLCJzY3JvbGxUb3AiLCJvbkNvbW1pdEZpYmVyUm9vdCIsImZrIiwiZ2siLCJpayIsInBlbmRpbmdDaGlsZHJlbiIsImprIiwibXV0YWJsZVNvdXJjZUVhZ2VySHlkcmF0aW9uRGF0YSIsImxrIiwibWsiLCJuayIsIm9rIiwicWsiLCJoeWRyYXRpb25PcHRpb25zIiwibXV0YWJsZVNvdXJjZXMiLCJfaW50ZXJuYWxSb290IiwicmsiLCJ0ayIsImhhc0F0dHJpYnV0ZSIsInNrIiwidWsiLCJrayIsImhrIiwidW5zdGFibGVfb2JzZXJ2ZWRCaXRzIiwidW5tb3VudCIsInF1ZXJ5U2VsZWN0b3JBbGwiLCJKU09OIiwic3RyaW5naWZ5IiwiZm9ybSIsIlZqIiwidmsiLCJFdmVudHMiLCJ3ayIsImZpbmRGaWJlckJ5SG9zdEluc3RhbmNlIiwiYnVuZGxlVHlwZSIsInJlbmRlcmVyUGFja2FnZU5hbWUiLCJ4ayIsInJlbmRlcmVyQ29uZmlnIiwib3ZlcnJpZGVIb29rU3RhdGUiLCJvdmVycmlkZUhvb2tTdGF0ZURlbGV0ZVBhdGgiLCJvdmVycmlkZUhvb2tTdGF0ZVJlbmFtZVBhdGgiLCJvdmVycmlkZVByb3BzIiwib3ZlcnJpZGVQcm9wc0RlbGV0ZVBhdGgiLCJvdmVycmlkZVByb3BzUmVuYW1lUGF0aCIsInNldFN1c3BlbnNlSGFuZGxlciIsInNjaGVkdWxlVXBkYXRlIiwiY3VycmVudERpc3BhdGNoZXJSZWYiLCJmaW5kSG9zdEluc3RhbmNlQnlGaWJlciIsImZpbmRIb3N0SW5zdGFuY2VzRm9yUmVmcmVzaCIsInNjaGVkdWxlUmVmcmVzaCIsInNjaGVkdWxlUm9vdCIsInNldFJlZnJlc2hIYW5kbGVyIiwiZ2V0Q3VycmVudEZpYmVyIiwieWsiLCJpc0Rpc2FibGVkIiwic3VwcG9ydHNGaWJlciIsImluamVjdCIsImNyZWF0ZVBvcnRhbCIsImZpbmRET01Ob2RlIiwiZmx1c2hTeW5jIiwidW5tb3VudENvbXBvbmVudEF0Tm9kZSIsInVuc3RhYmxlX2JhdGNoZWRVcGRhdGVzIiwidW5zdGFibGVfY3JlYXRlUG9ydGFsIiwidW5zdGFibGVfcmVuZGVyU3VidHJlZUludG9Db250YWluZXIiLCJwZXJmb3JtYW5jZSIsIk1lc3NhZ2VDaGFubmVsIiwidW5zdGFibGVfZm9yY2VGcmFtZVJhdGUiLCJjYW5jZWxBbmltYXRpb25GcmFtZSIsInJlcXVlc3RBbmltYXRpb25GcmFtZSIsImZsb29yIiwicG9ydDIiLCJwb3J0MSIsIm9ubWVzc2FnZSIsInBvc3RNZXNzYWdlIiwicG9wIiwic29ydEluZGV4Iiwic3RhcnRUaW1lIiwiZXhwaXJhdGlvblRpbWUiLCJwcmlvcml0eUxldmVsIiwidW5zdGFibGVfUHJvZmlsaW5nIiwidW5zdGFibGVfY29udGludWVFeGVjdXRpb24iLCJ1bnN0YWJsZV9nZXRGaXJzdENhbGxiYWNrTm9kZSIsInVuc3RhYmxlX25leHQiLCJ1bnN0YWJsZV9wYXVzZUV4ZWN1dGlvbiIsImRlbGF5IiwidW5zdGFibGVfd3JhcENhbGxiYWNrIiwiQmFzZSIsIlJlYWN0IiwiY2xhc3NOYW1lIiwiX2hlYWRlcjIiLCJkYXRhLXBhcmFsbGF4IiwiYmFja2dyb3VuZEltYWdlIiwiX2luZGV4MiIsIl9mb290ZXIyIiwiX3JlYWN0IiwiSGVhZGVyIiwiZGF0YS10b2dnbGUiLCJkYXRhLXRhcmdldCIsImRhdGEtc2Nyb2xsIiwiRm9vdGVyIiwiSW5kZXgiLCJfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybiIsIl9fcHJvdG9fXyIsImdldFByb3RvdHlwZU9mIiwiX2FwcGxpY2F0aW9uczIiLCJfZmVhdHVyZWQyIiwiX3NjcmVlbnNob3RzMiIsIl9hYm91dDIiLCJGZWF0dXJlZCIsIl90aGlzIiwiZmVhdHVyZWRBcHBzIiwiZ2V0QWxsRmVhdHVyZWRBcHBsaWNhdGlvbnMiLCJGZWF0dXJlIiwiZGVzY3JpcHRpb24iLCJzcmMiLCJpY29uIiwiaW5mb1RpdGxlIiwiZGV0YWlscyIsIlNjcmVlbnNob3QiLCJhbHQiLCJnbG9iYWwiLCJfX1dFQlBBQ0tfQU1EX0RFRklORV9SRVNVTFRfXyIsInVuZGVmaW5lZCIsIkxBUkdFX0FSUkFZX1NJWkUiLCJDT1JFX0VSUk9SX1RFWFQiLCJGVU5DX0VSUk9SX1RFWFQiLCJJTlZBTElEX1RFTVBMX1ZBUl9FUlJPUl9URVhUIiwiSEFTSF9VTkRFRklORUQiLCJNQVhfTUVNT0laRV9TSVpFIiwiUExBQ0VIT0xERVIiLCJDTE9ORV9ERUVQX0ZMQUciLCJDTE9ORV9GTEFUX0ZMQUciLCJDTE9ORV9TWU1CT0xTX0ZMQUciLCJDT01QQVJFX1BBUlRJQUxfRkxBRyIsIkNPTVBBUkVfVU5PUkRFUkVEX0ZMQUciLCJXUkFQX0JJTkRfRkxBRyIsIldSQVBfQklORF9LRVlfRkxBRyIsIldSQVBfQ1VSUllfQk9VTkRfRkxBRyIsIldSQVBfQ1VSUllfRkxBRyIsIldSQVBfQ1VSUllfUklHSFRfRkxBRyIsIldSQVBfUEFSVElBTF9GTEFHIiwiV1JBUF9QQVJUSUFMX1JJR0hUX0ZMQUciLCJXUkFQX0FSWV9GTEFHIiwiV1JBUF9SRUFSR19GTEFHIiwiV1JBUF9GTElQX0ZMQUciLCJERUZBVUxUX1RSVU5DX0xFTkdUSCIsIkRFRkFVTFRfVFJVTkNfT01JU1NJT04iLCJIT1RfQ09VTlQiLCJIT1RfU1BBTiIsIkxBWllfRklMVEVSX0ZMQUciLCJMQVpZX01BUF9GTEFHIiwiSU5GSU5JVFkiLCJNQVhfU0FGRV9JTlRFR0VSIiwiTUFYX0lOVEVHRVIiLCJOQU4iLCJNQVhfQVJSQVlfTEVOR1RIIiwiTUFYX0FSUkFZX0lOREVYIiwiSEFMRl9NQVhfQVJSQVlfTEVOR1RIIiwid3JhcEZsYWdzIiwiYXJnc1RhZyIsImFycmF5VGFnIiwiYXN5bmNUYWciLCJib29sVGFnIiwiZGF0ZVRhZyIsImRvbUV4Y1RhZyIsImVycm9yVGFnIiwiZnVuY1RhZyIsImdlblRhZyIsIm1hcFRhZyIsIm51bWJlclRhZyIsIm51bGxUYWciLCJvYmplY3RUYWciLCJwcm94eVRhZyIsInJlZ2V4cFRhZyIsInNldFRhZyIsInN0cmluZ1RhZyIsInN5bWJvbFRhZyIsInVuZGVmaW5lZFRhZyIsIndlYWtNYXBUYWciLCJ3ZWFrU2V0VGFnIiwiYXJyYXlCdWZmZXJUYWciLCJkYXRhVmlld1RhZyIsImZsb2F0MzJUYWciLCJmbG9hdDY0VGFnIiwiaW50OFRhZyIsImludDE2VGFnIiwiaW50MzJUYWciLCJ1aW50OFRhZyIsInVpbnQ4Q2xhbXBlZFRhZyIsInVpbnQxNlRhZyIsInVpbnQzMlRhZyIsInJlRW1wdHlTdHJpbmdMZWFkaW5nIiwicmVFbXB0eVN0cmluZ01pZGRsZSIsInJlRW1wdHlTdHJpbmdUcmFpbGluZyIsInJlRXNjYXBlZEh0bWwiLCJyZVVuZXNjYXBlZEh0bWwiLCJyZUhhc0VzY2FwZWRIdG1sIiwiUmVnRXhwIiwicmVIYXNVbmVzY2FwZWRIdG1sIiwicmVFc2NhcGUiLCJyZUV2YWx1YXRlIiwicmVJbnRlcnBvbGF0ZSIsInJlSXNEZWVwUHJvcCIsInJlSXNQbGFpblByb3AiLCJyZVByb3BOYW1lIiwicmVSZWdFeHBDaGFyIiwicmVIYXNSZWdFeHBDaGFyIiwicmVUcmltU3RhcnQiLCJyZVdoaXRlc3BhY2UiLCJyZVdyYXBDb21tZW50IiwicmVXcmFwRGV0YWlscyIsInJlU3BsaXREZXRhaWxzIiwicmVBc2NpaVdvcmQiLCJyZUZvcmJpZGRlbklkZW50aWZpZXJDaGFycyIsInJlRXNjYXBlQ2hhciIsInJlRXNUZW1wbGF0ZSIsInJlRmxhZ3MiLCJyZUlzQmFkSGV4IiwicmVJc0JpbmFyeSIsInJlSXNIb3N0Q3RvciIsInJlSXNPY3RhbCIsInJlSXNVaW50IiwicmVMYXRpbiIsInJlTm9NYXRjaCIsInJlVW5lc2NhcGVkU3RyaW5nIiwicnNDb21ib1JhbmdlIiwicnNDb21ib01hcmtzUmFuZ2UiLCJyc0JyZWFrUmFuZ2UiLCJyc01hdGhPcFJhbmdlIiwicnNBc3RyYWwiLCJyc0JyZWFrIiwicnNDb21ibyIsInJzRGlnaXRzIiwicnNEaW5nYmF0IiwicnNMb3dlciIsInJzTWlzYyIsInJzRml0eiIsInJzTm9uQXN0cmFsIiwicnNSZWdpb25hbCIsInJzU3VyclBhaXIiLCJyc1VwcGVyIiwicnNNaXNjTG93ZXIiLCJyc01pc2NVcHBlciIsInJlT3B0TW9kIiwicnNTZXEiLCJyc0Vtb2ppIiwicnNTeW1ib2wiLCJyZUFwb3MiLCJyZUNvbWJvTWFyayIsInJlVW5pY29kZSIsInJlVW5pY29kZVdvcmQiLCJyZUhhc1VuaWNvZGUiLCJyZUhhc1VuaWNvZGVXb3JkIiwiY29udGV4dFByb3BzIiwidGVtcGxhdGVDb3VudGVyIiwidHlwZWRBcnJheVRhZ3MiLCJjbG9uZWFibGVUYWdzIiwic3RyaW5nRXNjYXBlcyIsIlxcIiwiJyIsIlxuIiwiXHIiLCLigKgiLCLigKkiLCJmcmVlUGFyc2VGbG9hdCIsInBhcnNlRmxvYXQiLCJmcmVlUGFyc2VJbnQiLCJwYXJzZUludCIsImZyZWVHbG9iYWwiLCJmcmVlU2VsZiIsInNlbGYiLCJyb290IiwiRnVuY3Rpb24iLCJmcmVlRXhwb3J0cyIsImZyZWVNb2R1bGUiLCJtb2R1bGVFeHBvcnRzIiwiZnJlZVByb2Nlc3MiLCJwcm9jZXNzIiwibm9kZVV0aWwiLCJ0eXBlcyIsImJpbmRpbmciLCJub2RlSXNBcnJheUJ1ZmZlciIsImlzQXJyYXlCdWZmZXIiLCJub2RlSXNEYXRlIiwiaXNEYXRlIiwibm9kZUlzTWFwIiwiaXNNYXAiLCJub2RlSXNSZWdFeHAiLCJpc1JlZ0V4cCIsIm5vZGVJc1NldCIsImlzU2V0Iiwibm9kZUlzVHlwZWRBcnJheSIsImlzVHlwZWRBcnJheSIsImZ1bmMiLCJ0aGlzQXJnIiwiYXJncyIsImFycmF5QWdncmVnYXRvciIsImFycmF5Iiwic2V0dGVyIiwiaXRlcmF0ZWUiLCJhY2N1bXVsYXRvciIsImFycmF5RWFjaCIsImFycmF5RWFjaFJpZ2h0IiwiYXJyYXlFdmVyeSIsInByZWRpY2F0ZSIsImFycmF5RmlsdGVyIiwicmVzSW5kZXgiLCJyZXN1bHQiLCJhcnJheUluY2x1ZGVzIiwiYmFzZUluZGV4T2YiLCJhcnJheUluY2x1ZGVzV2l0aCIsImNvbXBhcmF0b3IiLCJhcnJheU1hcCIsImFycmF5UHVzaCIsInZhbHVlcyIsImFycmF5UmVkdWNlIiwiaW5pdEFjY3VtIiwiYXJyYXlSZWR1Y2VSaWdodCIsImFycmF5U29tZSIsImFzY2lpU2l6ZSIsImJhc2VQcm9wZXJ0eSIsImJhc2VGaW5kS2V5IiwiZWFjaEZ1bmMiLCJiYXNlRmluZEluZGV4IiwiZnJvbUluZGV4IiwiZnJvbVJpZ2h0Iiwic3RyaWN0SW5kZXhPZiIsImJhc2VJc05hTiIsImJhc2VJbmRleE9mV2l0aCIsImJhc2VNZWFuIiwiYmFzZVN1bSIsImJhc2VQcm9wZXJ0eU9mIiwiYmFzZVJlZHVjZSIsImJhc2VUaW1lcyIsImJhc2VUcmltIiwic3RyaW5nIiwidHJpbW1lZEVuZEluZGV4IiwiYmFzZVVuYXJ5IiwiYmFzZVZhbHVlcyIsImNhY2hlSGFzIiwiY2FjaGUiLCJjaGFyc1N0YXJ0SW5kZXgiLCJzdHJTeW1ib2xzIiwiY2hyU3ltYm9scyIsImNoYXJzRW5kSW5kZXgiLCJkZWJ1cnJMZXR0ZXIiLCLDgCIsIsOBIiwiw4IiLCLDgyIsIsOEIiwiw4UiLCLDoCIsIsOhIiwiw6IiLCLDoyIsIsOkIiwiw6UiLCLDhyIsIsOnIiwiw5AiLCLDsCIsIsOIIiwiw4kiLCLDiiIsIsOLIiwiw6giLCLDqSIsIsOqIiwiw6siLCLDjCIsIsONIiwiw44iLCLDjyIsIsOsIiwiw60iLCLDriIsIsOvIiwiw5EiLCLDsSIsIsOSIiwiw5MiLCLDlCIsIsOVIiwiw5YiLCLDmCIsIsOyIiwiw7MiLCLDtCIsIsO1Iiwiw7YiLCLDuCIsIsOZIiwiw5oiLCLDmyIsIsOcIiwiw7kiLCLDuiIsIsO7Iiwiw7wiLCLDnSIsIsO9Iiwiw78iLCLDhiIsIsOmIiwiw54iLCLDviIsIsOfIiwixIAiLCLEgiIsIsSEIiwixIEiLCLEgyIsIsSFIiwixIYiLCLEiCIsIsSKIiwixIwiLCLEhyIsIsSJIiwixIsiLCLEjSIsIsSOIiwixJAiLCLEjyIsIsSRIiwixJIiLCLElCIsIsSWIiwixJgiLCLEmiIsIsSTIiwixJUiLCLElyIsIsSZIiwixJsiLCLEnCIsIsSeIiwixKAiLCLEoiIsIsSdIiwixJ8iLCLEoSIsIsSjIiwixKQiLCLEpiIsIsSlIiwixKciLCLEqCIsIsSqIiwixKwiLCLEriIsIsSwIiwixKkiLCLEqyIsIsStIiwixK8iLCLEsSIsIsS0IiwixLUiLCLEtiIsIsS3IiwixLgiLCLEuSIsIsS7IiwixL0iLCLEvyIsIsWBIiwixLoiLCLEvCIsIsS+IiwixYAiLCLFgiIsIsWDIiwixYUiLCLFhyIsIsWKIiwixYQiLCLFhiIsIsWIIiwixYsiLCLFjCIsIsWOIiwixZAiLCLFjSIsIsWPIiwixZEiLCLFlCIsIsWWIiwixZgiLCLFlSIsIsWXIiwixZkiLCLFmiIsIsWcIiwixZ4iLCLFoCIsIsWbIiwixZ0iLCLFnyIsIsWhIiwixaIiLCLFpCIsIsWmIiwixaMiLCLFpSIsIsWnIiwixagiLCLFqiIsIsWsIiwixa4iLCLFsCIsIsWyIiwixakiLCLFqyIsIsWtIiwixa8iLCLFsSIsIsWzIiwixbQiLCLFtSIsIsW2IiwixbciLCLFuCIsIsW5IiwixbsiLCLFvSIsIsW6IiwixbwiLCLFviIsIsSyIiwixLMiLCLFkiIsIsWTIiwixYkiLCLFvyIsImVzY2FwZUh0bWxDaGFyIiwiJiIsIjwiLCI+IiwiXCIiLCJlc2NhcGVTdHJpbmdDaGFyIiwiY2hyIiwiaGFzVW5pY29kZSIsIm1hcFRvQXJyYXkiLCJvdmVyQXJnIiwidHJhbnNmb3JtIiwiYXJnIiwicmVwbGFjZUhvbGRlcnMiLCJwbGFjZWhvbGRlciIsInNldFRvQXJyYXkiLCJzZXRUb1BhaXJzIiwic3RyaW5nU2l6ZSIsImxhc3RJbmRleCIsInVuaWNvZGVTaXplIiwic3RyaW5nVG9BcnJheSIsInVuaWNvZGVUb0FycmF5IiwiYXNjaWlUb0FycmF5IiwidW5lc2NhcGVIdG1sQ2hhciIsIiZhbXA7IiwiJmx0OyIsIiZndDsiLCImcXVvdDsiLCImIzM5OyIsInJ1bkluQ29udGV4dCIsInVpZCIsImRlZmF1bHRzIiwicGljayIsImFycmF5UHJvdG8iLCJmdW5jUHJvdG8iLCJvYmplY3RQcm90byIsImNvcmVKc0RhdGEiLCJmdW5jVG9TdHJpbmciLCJpZENvdW50ZXIiLCJtYXNrU3JjS2V5IiwiZXhlYyIsIklFX1BST1RPIiwibmF0aXZlT2JqZWN0VG9TdHJpbmciLCJvYmplY3RDdG9yU3RyaW5nIiwib2xkRGFzaCIsInJlSXNOYXRpdmUiLCJCdWZmZXIiLCJVaW50OEFycmF5IiwiYWxsb2NVbnNhZmUiLCJnZXRQcm90b3R5cGUiLCJvYmplY3RDcmVhdGUiLCJzcGxpY2UiLCJzcHJlYWRhYmxlU3ltYm9sIiwiaXNDb25jYXRTcHJlYWRhYmxlIiwic3ltSXRlcmF0b3IiLCJzeW1Ub1N0cmluZ1RhZyIsImdldE5hdGl2ZSIsImN0eENsZWFyVGltZW91dCIsImN0eE5vdyIsImN0eFNldFRpbWVvdXQiLCJuYXRpdmVDZWlsIiwibmF0aXZlRmxvb3IiLCJuYXRpdmVHZXRTeW1ib2xzIiwibmF0aXZlSXNCdWZmZXIiLCJpc0J1ZmZlciIsIm5hdGl2ZUlzRmluaXRlIiwiaXNGaW5pdGUiLCJuYXRpdmVKb2luIiwibmF0aXZlS2V5cyIsIm5hdGl2ZU1heCIsIm1heCIsIm5hdGl2ZU1pbiIsIm5hdGl2ZU5vdyIsIm5hdGl2ZVBhcnNlSW50IiwibmF0aXZlUmFuZG9tIiwibmF0aXZlUmV2ZXJzZSIsInJldmVyc2UiLCJEYXRhVmlldyIsIlByb21pc2UiLCJuYXRpdmVDcmVhdGUiLCJtZXRhTWFwIiwicmVhbE5hbWVzIiwiZGF0YVZpZXdDdG9yU3RyaW5nIiwidG9Tb3VyY2UiLCJtYXBDdG9yU3RyaW5nIiwicHJvbWlzZUN0b3JTdHJpbmciLCJzZXRDdG9yU3RyaW5nIiwid2Vha01hcEN0b3JTdHJpbmciLCJzeW1ib2xQcm90byIsInN5bWJvbFZhbHVlT2YiLCJzeW1ib2xUb1N0cmluZyIsImxvZGFzaCIsImlzT2JqZWN0TGlrZSIsIkxhenlXcmFwcGVyIiwiTG9kYXNoV3JhcHBlciIsIndyYXBwZXJDbG9uZSIsImJhc2VDcmVhdGUiLCJwcm90byIsImlzT2JqZWN0IiwiYmFzZUxvZGFzaCIsImNoYWluQWxsIiwiX193cmFwcGVkX18iLCJfX2FjdGlvbnNfXyIsIl9fY2hhaW5fXyIsIl9faW5kZXhfXyIsIl9fdmFsdWVzX18iLCJfX2Rpcl9fIiwiX19maWx0ZXJlZF9fIiwiX19pdGVyYXRlZXNfXyIsIl9fdGFrZUNvdW50X18iLCJfX3ZpZXdzX18iLCJIYXNoIiwiZW50cmllcyIsImNsZWFyIiwiZW50cnkiLCJMaXN0Q2FjaGUiLCJNYXBDYWNoZSIsIlNldENhY2hlIiwiX19kYXRhX18iLCJTdGFjayIsImFycmF5TGlrZUtleXMiLCJpbmhlcml0ZWQiLCJpc0FyciIsImlzQXJnIiwiaXNBcmd1bWVudHMiLCJpc0J1ZmYiLCJpc1R5cGUiLCJza2lwSW5kZXhlcyIsImlzSW5kZXgiLCJhcnJheVNhbXBsZSIsImJhc2VSYW5kb20iLCJhcnJheVNhbXBsZVNpemUiLCJzaHVmZmxlU2VsZiIsImNvcHlBcnJheSIsImJhc2VDbGFtcCIsImFycmF5U2h1ZmZsZSIsImFzc2lnbk1lcmdlVmFsdWUiLCJlcSIsImJhc2VBc3NpZ25WYWx1ZSIsImFzc2lnblZhbHVlIiwib2JqVmFsdWUiLCJhc3NvY0luZGV4T2YiLCJiYXNlQWdncmVnYXRvciIsImJhc2VFYWNoIiwiYmFzZUFzc2lnbiIsImNvcHlPYmplY3QiLCJ3cml0YWJsZSIsImJhc2VBdCIsInBhdGhzIiwic2tpcCIsImxvd2VyIiwidXBwZXIiLCJiYXNlQ2xvbmUiLCJiaXRtYXNrIiwiY3VzdG9taXplciIsImlzRGVlcCIsImlzRmxhdCIsImlzRnVsbCIsImluaXRDbG9uZUFycmF5IiwiZ2V0VGFnIiwiaXNGdW5jIiwiY2xvbmVCdWZmZXIiLCJpbml0Q2xvbmVPYmplY3QiLCJnZXRTeW1ib2xzSW4iLCJjb3B5U3ltYm9sc0luIiwia2V5c0luIiwiYmFzZUFzc2lnbkluIiwiZ2V0U3ltYm9scyIsImNvcHlTeW1ib2xzIiwiQ3RvciIsImNsb25lQXJyYXlCdWZmZXIiLCJkYXRhVmlldyIsImJ1ZmZlciIsImJ5dGVPZmZzZXQiLCJieXRlTGVuZ3RoIiwiY2xvbmVEYXRhVmlldyIsImNsb25lVHlwZWRBcnJheSIsInJlZ2V4cCIsImNsb25lUmVnRXhwIiwic3ltYm9sIiwiaW5pdENsb25lQnlUYWciLCJzdGFja2VkIiwic3ViVmFsdWUiLCJnZXRBbGxLZXlzSW4iLCJnZXRBbGxLZXlzIiwiYmFzZUNvbmZvcm1zVG8iLCJiYXNlRGVsYXkiLCJ3YWl0IiwiYmFzZURpZmZlcmVuY2UiLCJpbmNsdWRlcyIsImlzQ29tbW9uIiwidmFsdWVzTGVuZ3RoIiwib3V0ZXIiLCJjb21wdXRlZCIsInZhbHVlc0luZGV4IiwidGVtcGxhdGVTZXR0aW5ncyIsImV2YWx1YXRlIiwiaW50ZXJwb2xhdGUiLCJ2YXJpYWJsZSIsImltcG9ydHMiLCJoYXNoIiwiZ2V0TWFwRGF0YSIsInBhaXJzIiwiY3JlYXRlQmFzZUVhY2giLCJiYXNlRm9yT3duIiwiYmFzZUVhY2hSaWdodCIsImJhc2VGb3JPd25SaWdodCIsImJhc2VFdmVyeSIsImJhc2VFeHRyZW11bSIsImlzU3ltYm9sIiwiYmFzZUZpbHRlciIsImJhc2VGbGF0dGVuIiwiZGVwdGgiLCJpc1N0cmljdCIsImlzRmxhdHRlbmFibGUiLCJiYXNlRm9yIiwiY3JlYXRlQmFzZUZvciIsImJhc2VGb3JSaWdodCIsImJhc2VGdW5jdGlvbnMiLCJpc0Z1bmN0aW9uIiwiYmFzZUdldCIsInBhdGgiLCJjYXN0UGF0aCIsInRvS2V5IiwiYmFzZUdldEFsbEtleXMiLCJrZXlzRnVuYyIsInN5bWJvbHNGdW5jIiwiYmFzZUdldFRhZyIsImlzT3duIiwidW5tYXNrZWQiLCJnZXRSYXdUYWciLCJvYmplY3RUb1N0cmluZyIsImJhc2VHdCIsIm90aGVyIiwiYmFzZUhhcyIsImJhc2VIYXNJbiIsImJhc2VJbnRlcnNlY3Rpb24iLCJhcnJheXMiLCJvdGhMZW5ndGgiLCJvdGhJbmRleCIsImNhY2hlcyIsIm1heExlbmd0aCIsInNlZW4iLCJiYXNlSW52b2tlIiwicGFyZW50IiwiYmFzZUlzQXJndW1lbnRzIiwiYmFzZUlzRXF1YWwiLCJlcXVhbEZ1bmMiLCJvYmpJc0FyciIsIm90aElzQXJyIiwib2JqVGFnIiwib3RoVGFnIiwib2JqSXNPYmoiLCJvdGhJc09iaiIsImlzU2FtZVRhZyIsImVxdWFsQXJyYXlzIiwiY29udmVydCIsImlzUGFydGlhbCIsImVxdWFsQnlUYWciLCJvYmpJc1dyYXBwZWQiLCJvdGhJc1dyYXBwZWQiLCJvYmpVbndyYXBwZWQiLCJvdGhVbndyYXBwZWQiLCJvYmpQcm9wcyIsIm9iakxlbmd0aCIsIm9ialN0YWNrZWQiLCJvdGhTdGFja2VkIiwic2tpcEN0b3IiLCJvdGhWYWx1ZSIsImNvbXBhcmVkIiwib2JqQ3RvciIsIm90aEN0b3IiLCJlcXVhbE9iamVjdHMiLCJiYXNlSXNFcXVhbERlZXAiLCJiYXNlSXNNYXRjaCIsIm1hdGNoRGF0YSIsIm5vQ3VzdG9taXplciIsInNyY1ZhbHVlIiwiYmFzZUlzTmF0aXZlIiwiYmFzZUl0ZXJhdGVlIiwiaWRlbnRpdHkiLCJiYXNlTWF0Y2hlc1Byb3BlcnR5IiwiYmFzZU1hdGNoZXMiLCJiYXNlS2V5cyIsImlzUHJvdG90eXBlIiwiYmFzZUtleXNJbiIsIm5hdGl2ZUtleXNJbiIsImlzUHJvdG8iLCJiYXNlTHQiLCJiYXNlTWFwIiwiaXNBcnJheUxpa2UiLCJnZXRNYXRjaERhdGEiLCJtYXRjaGVzU3RyaWN0Q29tcGFyYWJsZSIsImlzS2V5IiwiaXNTdHJpY3RDb21wYXJhYmxlIiwiaGFzSW4iLCJiYXNlTWVyZ2UiLCJzcmNJbmRleCIsIm1lcmdlRnVuYyIsInNhZmVHZXQiLCJuZXdWYWx1ZSIsImlzVHlwZWQiLCJpc0FycmF5TGlrZU9iamVjdCIsImlzUGxhaW5PYmplY3QiLCJ0b1BsYWluT2JqZWN0IiwiYmFzZU1lcmdlRGVlcCIsImJhc2VOdGgiLCJiYXNlT3JkZXJCeSIsIml0ZXJhdGVlcyIsIm9yZGVycyIsImdldEl0ZXJhdGVlIiwiY29tcGFyZXIiLCJzb3J0IiwiYmFzZVNvcnRCeSIsImNyaXRlcmlhIiwib2JqQ3JpdGVyaWEiLCJvdGhDcml0ZXJpYSIsIm9yZGVyc0xlbmd0aCIsImNvbXBhcmVBc2NlbmRpbmciLCJjb21wYXJlTXVsdGlwbGUiLCJiYXNlUGlja0J5IiwiYmFzZVNldCIsImJhc2VQdWxsQWxsIiwiYmFzZVB1bGxBdCIsImluZGV4ZXMiLCJwcmV2aW91cyIsImJhc2VVbnNldCIsImJhc2VSZXBlYXQiLCJiYXNlUmVzdCIsInNldFRvU3RyaW5nIiwib3ZlclJlc3QiLCJiYXNlU2FtcGxlIiwiYmFzZVNhbXBsZVNpemUiLCJuZXN0ZWQiLCJiYXNlU2V0RGF0YSIsImJhc2VTZXRUb1N0cmluZyIsImNvbnN0YW50IiwiYmFzZVNodWZmbGUiLCJiYXNlU2xpY2UiLCJiYXNlU29tZSIsImJhc2VTb3J0ZWRJbmRleCIsInJldEhpZ2hlc3QiLCJsb3ciLCJoaWdoIiwibWlkIiwiYmFzZVNvcnRlZEluZGV4QnkiLCJ2YWxJc05hTiIsInZhbElzTnVsbCIsInZhbElzU3ltYm9sIiwidmFsSXNVbmRlZmluZWQiLCJvdGhJc0RlZmluZWQiLCJvdGhJc051bGwiLCJvdGhJc1JlZmxleGl2ZSIsIm90aElzU3ltYm9sIiwic2V0TG93IiwiYmFzZVNvcnRlZFVuaXEiLCJiYXNlVG9OdW1iZXIiLCJiYXNlVG9TdHJpbmciLCJiYXNlVW5pcSIsImNyZWF0ZVNldCIsInNlZW5JbmRleCIsImJhc2VVcGRhdGUiLCJiYXNlV2hpbGUiLCJpc0Ryb3AiLCJiYXNlV3JhcHBlclZhbHVlIiwiYWN0aW9ucyIsImJhc2VYb3IiLCJiYXNlWmlwT2JqZWN0IiwiYXNzaWduRnVuYyIsInZhbHNMZW5ndGgiLCJjYXN0QXJyYXlMaWtlT2JqZWN0IiwiY2FzdEZ1bmN0aW9uIiwic3RyaW5nVG9QYXRoIiwiY2FzdFJlc3QiLCJjYXN0U2xpY2UiLCJjb3B5IiwiYXJyYXlCdWZmZXIiLCJ0eXBlZEFycmF5IiwidmFsSXNEZWZpbmVkIiwidmFsSXNSZWZsZXhpdmUiLCJjb21wb3NlQXJncyIsInBhcnRpYWxzIiwiaG9sZGVycyIsImlzQ3VycmllZCIsImFyZ3NJbmRleCIsImFyZ3NMZW5ndGgiLCJob2xkZXJzTGVuZ3RoIiwibGVmdEluZGV4IiwibGVmdExlbmd0aCIsInJhbmdlTGVuZ3RoIiwiaXNVbmN1cnJpZWQiLCJjb21wb3NlQXJnc1JpZ2h0IiwiaG9sZGVyc0luZGV4IiwicmlnaHRJbmRleCIsInJpZ2h0TGVuZ3RoIiwiaXNOZXciLCJjcmVhdGVBZ2dyZWdhdG9yIiwiaW5pdGlhbGl6ZXIiLCJjcmVhdGVBc3NpZ25lciIsImFzc2lnbmVyIiwic291cmNlcyIsImd1YXJkIiwiaXNJdGVyYXRlZUNhbGwiLCJpdGVyYWJsZSIsImNyZWF0ZUNhc2VGaXJzdCIsIm1ldGhvZE5hbWUiLCJ0cmFpbGluZyIsImNyZWF0ZUNvbXBvdW5kZXIiLCJ3b3JkcyIsImRlYnVyciIsImNyZWF0ZUN0b3IiLCJ0aGlzQmluZGluZyIsImNyZWF0ZUZpbmQiLCJmaW5kSW5kZXhGdW5jIiwiY3JlYXRlRmxvdyIsImZsYXRSZXN0IiwiZnVuY3MiLCJwcmVyZXEiLCJ0aHJ1Iiwid3JhcHBlciIsImdldEZ1bmNOYW1lIiwiZnVuY05hbWUiLCJnZXREYXRhIiwiaXNMYXppYWJsZSIsInBsYW50IiwiY3JlYXRlSHlicmlkIiwicGFydGlhbHNSaWdodCIsImhvbGRlcnNSaWdodCIsImFyZ1BvcyIsImFyeSIsImFyaXR5IiwiaXNBcnkiLCJpc0JpbmQiLCJpc0JpbmRLZXkiLCJpc0ZsaXAiLCJnZXRIb2xkZXIiLCJob2xkZXJzQ291bnQiLCJjb3VudEhvbGRlcnMiLCJuZXdIb2xkZXJzIiwiY3JlYXRlUmVjdXJyeSIsImZuIiwiYXJyTGVuZ3RoIiwib2xkQXJyYXkiLCJyZW9yZGVyIiwiY3JlYXRlSW52ZXJ0ZXIiLCJ0b0l0ZXJhdGVlIiwiYmFzZUludmVydGVyIiwiY3JlYXRlTWF0aE9wZXJhdGlvbiIsIm9wZXJhdG9yIiwiY3JlYXRlT3ZlciIsImFycmF5RnVuYyIsImNyZWF0ZVBhZGRpbmciLCJjaGFycyIsImNoYXJzTGVuZ3RoIiwic3RlcCIsInRvRmluaXRlIiwiYmFzZVJhbmdlIiwiY3JlYXRlUmVsYXRpb25hbE9wZXJhdGlvbiIsInRvTnVtYmVyIiwid3JhcEZ1bmMiLCJpc0N1cnJ5IiwibmV3RGF0YSIsInNldERhdGEiLCJzZXRXcmFwVG9TdHJpbmciLCJjcmVhdGVSb3VuZCIsInByZWNpc2lvbiIsInRvSW50ZWdlciIsInBhaXIiLCJub29wIiwiY3JlYXRlVG9QYWlycyIsImJhc2VUb1BhaXJzIiwiY3JlYXRlV3JhcCIsInNyY0JpdG1hc2siLCJuZXdCaXRtYXNrIiwiaXNDb21ibyIsIm1lcmdlRGF0YSIsImNyZWF0ZUN1cnJ5IiwiY3JlYXRlUGFydGlhbCIsImNyZWF0ZUJpbmQiLCJjdXN0b21EZWZhdWx0c0Fzc2lnbkluIiwiY3VzdG9tRGVmYXVsdHNNZXJnZSIsImN1c3RvbU9taXRDbG9uZSIsImFyclN0YWNrZWQiLCJhcnJWYWx1ZSIsImZsYXR0ZW4iLCJvdGhlckZ1bmMiLCJzdHViQXJyYXkiLCJoYXNQYXRoIiwiaGFzRnVuYyIsImlzTGVuZ3RoIiwiQXJyYXlCdWZmZXIiLCJyZXNvbHZlIiwiY3RvclN0cmluZyIsImlzTWFza2FibGUiLCJzdHViRmFsc2UiLCJvdGhlckFyZ3MiLCJzaG9ydE91dCIsInJlZmVyZW5jZSIsImluc2VydFdyYXBEZXRhaWxzIiwidXBkYXRlV3JhcERldGFpbHMiLCJnZXRXcmFwRGV0YWlscyIsImxhc3RDYWxsZWQiLCJzdGFtcCIsInJlbWFpbmluZyIsInJhbmQiLCJtZW1vaXplIiwibWVtb2l6ZUNhcHBlZCIsImNoYXJDb2RlQXQiLCJxdW90ZSIsInN1YlN0cmluZyIsImNsb25lIiwiZGlmZmVyZW5jZSIsImRpZmZlcmVuY2VCeSIsImRpZmZlcmVuY2VXaXRoIiwiZmluZEluZGV4IiwiZmluZExhc3RJbmRleCIsImhlYWQiLCJpbnRlcnNlY3Rpb24iLCJtYXBwZWQiLCJpbnRlcnNlY3Rpb25CeSIsImludGVyc2VjdGlvbldpdGgiLCJwdWxsIiwicHVsbEFsbCIsInB1bGxBdCIsInVuaW9uIiwidW5pb25CeSIsInVuaW9uV2l0aCIsInVuemlwIiwiZ3JvdXAiLCJ1bnppcFdpdGgiLCJ3aXRob3V0IiwieG9yIiwieG9yQnkiLCJ4b3JXaXRoIiwiemlwIiwiemlwV2l0aCIsImNoYWluIiwiaW50ZXJjZXB0b3IiLCJ3cmFwcGVyQXQiLCJjb3VudEJ5IiwiZmluZCIsImZpbmRMYXN0IiwiZm9yRWFjaFJpZ2h0IiwiZ3JvdXBCeSIsImludm9rZU1hcCIsImtleUJ5IiwicGFydGl0aW9uIiwiYmVmb3JlIiwiYmluZEtleSIsImRlYm91bmNlIiwibGFzdEFyZ3MiLCJsYXN0VGhpcyIsIm1heFdhaXQiLCJ0aW1lcklkIiwibGFzdENhbGxUaW1lIiwibGFzdEludm9rZVRpbWUiLCJsZWFkaW5nIiwibWF4aW5nIiwiaW52b2tlRnVuYyIsInNob3VsZEludm9rZSIsInRpbWVTaW5jZUxhc3RDYWxsIiwidGltZXJFeHBpcmVkIiwidHJhaWxpbmdFZGdlIiwidGltZVdhaXRpbmciLCJyZW1haW5pbmdXYWl0IiwiZGVib3VuY2VkIiwiaXNJbnZva2luZyIsImxlYWRpbmdFZGdlIiwiY2FuY2VsIiwiZmx1c2giLCJkZWZlciIsInJlc29sdmVyIiwibWVtb2l6ZWQiLCJDYWNoZSIsIm5lZ2F0ZSIsIm92ZXJBcmdzIiwidHJhbnNmb3JtcyIsImZ1bmNzTGVuZ3RoIiwicGFydGlhbCIsInBhcnRpYWxSaWdodCIsInJlYXJnIiwiZ3QiLCJndGUiLCJpc0Vycm9yIiwiaXNJbnRlZ2VyIiwiaXNOdW1iZXIiLCJpc1N0cmluZyIsImx0IiwibHRlIiwiaXRlcmF0b3JUb0FycmF5IiwicmVtYWluZGVyIiwidG9MZW5ndGgiLCJpc0JpbmFyeSIsImFzc2lnbkluIiwiYXNzaWduSW5XaXRoIiwiYXNzaWduV2l0aCIsImF0IiwicHJvcHNJbmRleCIsInByb3BzTGVuZ3RoIiwiZGVmYXVsdHNEZWVwIiwibWVyZ2VXaXRoIiwiaW52ZXJ0IiwiaW52ZXJ0QnkiLCJpbnZva2UiLCJtZXJnZSIsIm9taXQiLCJiYXNlUGljayIsInBpY2tCeSIsInByb3AiLCJ0b1BhaXJzIiwidG9QYWlyc0luIiwiY2FtZWxDYXNlIiwid29yZCIsImNhcGl0YWxpemUiLCJ1cHBlckZpcnN0Iiwia2ViYWJDYXNlIiwibG93ZXJDYXNlIiwibG93ZXJGaXJzdCIsInNuYWtlQ2FzZSIsInN0YXJ0Q2FzZSIsInVwcGVyQ2FzZSIsInBhdHRlcm4iLCJoYXNVbmljb2RlV29yZCIsInVuaWNvZGVXb3JkcyIsImFzY2lpV29yZHMiLCJhdHRlbXB0IiwiYmluZEFsbCIsIm1ldGhvZE5hbWVzIiwiZmxvdyIsImZsb3dSaWdodCIsIm1ldGhvZCIsIm1ldGhvZE9mIiwibWl4aW4iLCJvdmVyIiwib3ZlckV2ZXJ5Iiwib3ZlclNvbWUiLCJiYXNlUHJvcGVydHlEZWVwIiwicmFuZ2VSaWdodCIsImF1Z2VuZCIsImFkZGVuZCIsImRpdmlkZSIsImRpdmlkZW5kIiwiZGl2aXNvciIsIm11bHRpcGx5IiwibXVsdGlwbGllciIsIm11bHRpcGxpY2FuZCIsInJvdW5kIiwic3VidHJhY3QiLCJtaW51ZW5kIiwic3VidHJhaGVuZCIsImFmdGVyIiwiY2FzdEFycmF5IiwiY2h1bmsiLCJjb21wYWN0IiwiY29uZCIsImNvbmZvcm1zIiwiYmFzZUNvbmZvcm1zIiwicHJvcGVydGllcyIsImN1cnJ5IiwiY3VycnlSaWdodCIsImRyb3AiLCJkcm9wUmlnaHQiLCJkcm9wUmlnaHRXaGlsZSIsImRyb3BXaGlsZSIsImZpbGwiLCJiYXNlRmlsbCIsImZpbHRlciIsImZsYXRNYXAiLCJmbGF0TWFwRGVlcCIsImZsYXRNYXBEZXB0aCIsImZsYXR0ZW5EZWVwIiwiZmxhdHRlbkRlcHRoIiwiZmxpcCIsImZyb21QYWlycyIsImZ1bmN0aW9ucyIsImZ1bmN0aW9uc0luIiwiaW5pdGlhbCIsIm1hcEtleXMiLCJtYXBWYWx1ZXMiLCJtYXRjaGVzIiwibWF0Y2hlc1Byb3BlcnR5IiwibnRoQXJnIiwib21pdEJ5Iiwib25jZSIsIm9yZGVyQnkiLCJwcm9wZXJ0eU9mIiwicHVsbEFsbEJ5IiwicHVsbEFsbFdpdGgiLCJyZWplY3QiLCJyZW1vdmUiLCJyZXN0Iiwic2FtcGxlU2l6ZSIsInNldFdpdGgiLCJzaHVmZmxlIiwic29ydGVkVW5pcSIsInNvcnRlZFVuaXFCeSIsInNlcGFyYXRvciIsImxpbWl0Iiwic3ByZWFkIiwidGFrZSIsInRha2VSaWdodCIsInRha2VSaWdodFdoaWxlIiwidGFrZVdoaWxlIiwidGFwIiwidGhyb3R0bGUiLCJ0b1BhdGgiLCJpc0Fyckxpa2UiLCJ1bmFyeSIsInVuaXEiLCJ1bmlxQnkiLCJ1bmlxV2l0aCIsInVuc2V0IiwidXBkYXRlIiwidXBkYXRlV2l0aCIsInZhbHVlc0luIiwid3JhcCIsInppcE9iamVjdCIsInppcE9iamVjdERlZXAiLCJlbnRyaWVzSW4iLCJleHRlbmRXaXRoIiwiY2xhbXAiLCJjbG9uZURlZXAiLCJjbG9uZURlZXBXaXRoIiwiY2xvbmVXaXRoIiwiY29uZm9ybXNUbyIsImRlZmF1bHRUbyIsImVuZHNXaXRoIiwicG9zaXRpb24iLCJlc2NhcGVSZWdFeHAiLCJldmVyeSIsImZpbmRLZXkiLCJmaW5kTGFzdEtleSIsImZvckluIiwiZm9ySW5SaWdodCIsImZvck93biIsImZvck93blJpZ2h0IiwiaW5SYW5nZSIsImJhc2VJblJhbmdlIiwiaXNCb29sZWFuIiwiaXNFbGVtZW50IiwiaXNFbXB0eSIsImlzRXF1YWwiLCJpc0VxdWFsV2l0aCIsImlzTWF0Y2giLCJpc01hdGNoV2l0aCIsImlzTmF0aXZlIiwiaXNOaWwiLCJpc051bGwiLCJpc1NhZmVJbnRlZ2VyIiwiaXNVbmRlZmluZWQiLCJpc1dlYWtNYXAiLCJpc1dlYWtTZXQiLCJsYXN0SW5kZXhPZiIsInN0cmljdExhc3RJbmRleE9mIiwibWF4QnkiLCJtZWFuIiwibWVhbkJ5IiwibWluQnkiLCJzdHViT2JqZWN0Iiwic3R1YlN0cmluZyIsInN0dWJUcnVlIiwibnRoIiwibm9Db25mbGljdCIsInBhZCIsInN0ckxlbmd0aCIsInBhZEVuZCIsInBhZFN0YXJ0IiwicmFkaXgiLCJmbG9hdGluZyIsInRlbXAiLCJyZWR1Y2UiLCJyZWR1Y2VSaWdodCIsInNhbXBsZSIsInNvbWUiLCJzb3J0ZWRJbmRleCIsInNvcnRlZEluZGV4QnkiLCJzb3J0ZWRJbmRleE9mIiwic29ydGVkTGFzdEluZGV4Iiwic29ydGVkTGFzdEluZGV4QnkiLCJzb3J0ZWRMYXN0SW5kZXhPZiIsInN0YXJ0c1dpdGgiLCJzdW0iLCJzdW1CeSIsInRlbXBsYXRlIiwic2V0dGluZ3MiLCJpc0VzY2FwaW5nIiwiaXNFdmFsdWF0aW5nIiwiaW1wb3J0c0tleXMiLCJpbXBvcnRzVmFsdWVzIiwicmVEZWxpbWl0ZXJzIiwic291cmNlVVJMIiwiZXNjYXBlVmFsdWUiLCJpbnRlcnBvbGF0ZVZhbHVlIiwiZXNUZW1wbGF0ZVZhbHVlIiwiZXZhbHVhdGVWYWx1ZSIsInRpbWVzIiwidG9Mb3dlciIsInRvU2FmZUludGVnZXIiLCJ0b1VwcGVyIiwidHJpbUVuZCIsInRyaW1TdGFydCIsInRydW5jYXRlIiwib21pc3Npb24iLCJuZXdFbmQiLCJ1bmVzY2FwZSIsInVuaXF1ZUlkIiwicHJlZml4IiwiZWFjaCIsImVhY2hSaWdodCIsImZpcnN0IiwiVkVSU0lPTiIsImlzRmlsdGVyIiwidGFrZU5hbWUiLCJkcm9wTmFtZSIsImNoZWNrSXRlcmF0ZWUiLCJpc1Rha2VyIiwibG9kYXNoRnVuYyIsInJldFVud3JhcHBlZCIsImlzTGF6eSIsInVzZUxhenkiLCJpc0h5YnJpZCIsImlzVW53cmFwcGVkIiwib25seUxhenkiLCJjaGFpbk5hbWUiLCJkaXIiLCJpc1JpZ2h0IiwiZ2V0VmlldyIsIml0ZXJMZW5ndGgiLCJ0YWtlQ291bnQiLCJpdGVySW5kZXgiLCJjb21taXQiLCJ3cmFwcGVkIiwidG9KU09OIiwid2VicGFja1BvbHlmaWxsIiwiZGVwcmVjYXRlIiwic2NyZWVuc2hvdHMiLCJnZXRBbGxTY3JlZW5TaG90cyIsIkFib3V0Il0sIm1hcHBpbmdzIjoiYUFDRSxJQUFJQSxFQUFtQixHQUd2QixTQUFTQyxFQUFvQkMsR0FHNUIsR0FBR0YsRUFBaUJFLEdBQ25CLE9BQU9GLEVBQWlCRSxHQUFVQyxRQUduQyxJQUFJQyxFQUFTSixFQUFpQkUsR0FBWSxDQUN6Q0csRUFBR0gsRUFDSEksR0FBRyxFQUNISCxRQUFTLElBVVYsT0FOQUksRUFBUUwsR0FBVU0sS0FBS0osRUFBT0QsUUFBU0MsRUFBUUEsRUFBT0QsUUFBU0YsR0FHL0RHLEVBQU9FLEdBQUksRUFHSkYsRUFBT0QsUUFLZkYsRUFBb0JRLEVBQUlGLEVBR3hCTixFQUFvQlMsRUFBSVYsRUFHeEJDLEVBQW9CVSxFQUFJLFNBQVNSLEVBQVNTLEVBQU1DLEdBQzNDWixFQUFvQmEsRUFBRVgsRUFBU1MsSUFDbENHLE9BQU9DLGVBQWViLEVBQVNTLEVBQU0sQ0FBRUssWUFBWSxFQUFNQyxJQUFLTCxLQUtoRVosRUFBb0JrQixFQUFJLFNBQVNoQixHQUNYLG9CQUFYaUIsUUFBMEJBLE9BQU9DLGFBQzFDTixPQUFPQyxlQUFlYixFQUFTaUIsT0FBT0MsWUFBYSxDQUFFQyxNQUFPLFdBRTdEUCxPQUFPQyxlQUFlYixFQUFTLGFBQWMsQ0FBRW1CLE9BQU8sS0FRdkRyQixF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LEtBQ3RCQyxJQUFRLEtBQU1DLElBQVEsS0FDdEJDLElBQVEsS0FFUkMsSUFBVSxJQUFNQyxJQUFVLElBQUtDLElBQVUsSUFDekNDLElBQVUsSUFBTUMsSUFBVSxJQUFLQyxJQUFVLElBQ3pDQyxJQUFVLElBQU1DLElBQVUsSUFBS0MsSUFBVSxJQUFLQyxJQUFVLElBQ3hEQyxJQUFVLElBQU1DLElBQVUsSUFBS0MsSUFBVSxJQUFLQyxJQUFVLElBQ3hEQyxJQUFVLElBQU1DLElBQVUsSUFBS0MsSUFBVSxJQUFLQyxJQUFVLElBQ3hEQyxJQUFVLElBQU1DLElBQVUsSUFBS0MsSUFBVSxJQUFLQyxJQUFVLElBQUtDLElBQVUsSUFDdkVDLElBQVUsSUFBTUMsSUFBVSxJQUFLQyxJQUFVLElBQUtDLElBQVUsSUFBS0MsSUFBVSxJQUN2RUMsSUFBVSxJQUFNQyxJQUFVLElBQUtDLElBQVUsSUFBS0MsSUFBVSxJQUN4REMsSUFBVSxJQUFNQyxJQUFVLElBQUtDLElBQVUsSUFBS0MsSUFBVSxJQUN4REMsSUFBVSxJQUFNQyxJQUFVLElBQUtDLElBQVUsSUFBS0MsSUFBVSxJQUN4REMsSUFBVSxJQUFNQyxJQUFVLElBQUtDLElBQVUsSUFBS0MsSUFBVSxJQUFLQyxJQUFVLElBQ3ZFQyxJQUFVLElBQU1DLElBQVUsSUFBS0MsSUFBVSxJQUFLQyxJQUFVLElBQUtDLElBQVUsSUFDdkVDLElBQVUsSUFBTUMsSUFBVSxJQUMxQkMsSUFBVSxJQUFNQyxJQUFVLElBQUtDLElBQVUsSUFDekNDLElBQVUsSUFBTUMsSUFBVSxJQUFLQyxJQUFVLElBQUtDLElBQVUsSUFBS0MsSUFBVSxJQUN2RUMsSUFBVSxJQUFNQyxJQUFVLElBQUtDLElBQVUsSUFBS0MsSUFBVSxJQUFLQyxJQUFVLElBQ3ZFQyxJQUFVLElBQU1DLElBQVUsSUFBS0MsSUFBVSxJQUFLQyxJQUFVLElBQ3hEQyxJQUFVLElBQU1DLElBQVUsSUFBS0MsSUFBVSxJQUFLQyxJQUFVLElBQ3hEQyxJQUFVLElBQU1DLElBQVUsSUFBS0MsSUFBVSxJQUN6Q0MsSUFB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S0FBRytzQyxVQUFNLG9CQUFULHFJQUlBanRDLEVBQUFDLFFBQUFDLGNBQUEsT0FBSytzQyxVQUFNLFVBQ1BqdEMsRUFBQUMsUUFBQUMsY0FBQSxLQUFHaXJCLEtBQUssOENBQThDOGhCLFVBQU0sMkNBQTBDanRDLEVBQUFDLFFBQUFDLGNBQUEsS0FBRytzQyxVQUFNLGlCQUFtQmp0QyxFQUFBQyxRQUFBQyxjQUFBLE9BQUsrc0MsVUFBTSxzQkFDN0lqdEMsRUFBQUMsUUFBQUMsY0FBQSxLQUFHaXJCLEtBQUsscURBQXFEOGhCLFVBQU0sNkNBQTRDanRDLEVBQUFDLFFBQUFDLGNBQUEsS0FBRytzQyxVQUFNLG1CQUFxQmp0QyxFQUFBQyxRQUFBQyxjQUFBLE9BQUsrc0MsVUFBTSxpQyxlQTVDM0tvd0MiLCJmaWxlIjoiYXBwLm1pbi5qcyIsInNvdXJjZXNDb250ZW50IjpbIiBcdC8vIFRoZSBtb2R1bGUgY2FjaGVcbiBcdHZhciBpbnN0YWxsZWRNb2R1bGVzID0ge307XG5cbiBcdC8vIFRoZSByZXF1aXJlIGZ1bmN0aW9uXG4gXHRmdW5jdGlvbiBfX3dlYnBhY2tfcmVxdWlyZV9fKG1vZHVsZUlkKSB7XG5cbiBcdFx0Ly8gQ2hlY2sgaWYgbW9kdWxlIGlzIGluIGNhY2hlXG4gXHRcdGlmKGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdKSB7XG4gXHRcdFx0cmV0dXJuIGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdLmV4cG9ydHM7XG4gXHRcdH1cbiBcdFx0Ly8gQ3JlYXRlIGEgbmV3IG1vZHVsZSAoYW5kIHB1dCBpdCBpbnRvIHRoZSBjYWNoZSlcbiBcdFx0dmFyIG1vZHVsZSA9IGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdID0ge1xuIFx0XHRcdGk6IG1vZHVsZUlkLFxuIFx0XHRcdGw6IGZhbHNlLFxuIFx0XHRcdGV4cG9ydHM6IHt9XG4gXHRcdH07XG5cbiBcdFx0Ly8gRXhlY3V0ZSB0aGUgbW9kdWxlIGZ1bmN0aW9uXG4gXHRcdG1vZHVsZXNbbW9kdWxlSWRdLmNhbGwobW9kdWxlLmV4cG9ydHMsIG1vZHVsZSwgbW9kdWxlLmV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pO1xuXG4gXHRcdC8vIEZsYWcgdGhlIG1vZHVsZSBhcyBsb2FkZWRcbiBcdFx0bW9kdWxlLmwgPSB0cnVlO1xuXG4gXHRcdC8vIFJldHVybiB0aGUgZXhwb3J0cyBvZiB0aGUgbW9kdWxlXG4gXHRcdHJldHVybiBtb2R1bGUuZXhwb3J0cztcbiBcdH1cblxuXG4gXHQvLyBleHBvc2UgdGhlIG1vZHVsZXMgb2JqZWN0IChfX3dlYnBhY2tfbW9kdWxlc19fKVxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5tID0gbW9kdWxlcztcblxuIFx0Ly8gZXhwb3NlIHRoZSBtb2R1bGUgY2FjaGVcbiBcdF9fd2VicGFja19yZXF1aXJlX18uYyA9IGluc3RhbGxlZE1vZHVsZXM7XG5cbiBcdC8vIGRlZmluZSBnZXR0ZXIgZnVuY3Rpb24gZm9yIGhhcm1vbnkgZXhwb3J0c1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5kID0gZnVuY3Rpb24oZXhwb3J0cywgbmFtZSwgZ2V0dGVyKSB7XG4gXHRcdGlmKCFfX3dlYnBhY2tfcmVxdWlyZV9fLm8oZXhwb3J0cywgbmFtZSkpIHtcbiBcdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgbmFtZSwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGdldHRlciB9KTtcbiBcdFx0fVxuIFx0fTtcblxuIFx0Ly8gZGVmaW5lIF9fZXNNb2R1bGUgb24gZXhwb3J0c1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5yID0gZnVuY3Rpb24oZXhwb3J0cykge1xuIFx0XHRpZih0eXBlb2YgU3ltYm9sICE9PSAndW5kZWZpbmVkJyAmJiBTeW1ib2wudG9TdHJpbmdUYWcpIHtcbiBcdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgU3ltYm9sLnRvU3RyaW5nVGFnLCB7IHZhbHVlOiAnTW9kdWxlJyB9KTtcbiBcdFx0fVxuIFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgJ19fZXNNb2R1bGUnLCB7IHZhbHVlOiB0cnVlIH0pO1xuIFx0fTtcblxuIFx0Ly8gY3JlYXRlIGEgZmFrZSBuYW1lc3BhY2Ugb2JqZWN0XG4gXHQvLyBtb2RlICYgMTogdmFsdWUgaXMgYSBtb2R1bGUgaWQsIHJlcXVpcmUgaXRcbiBcdC8vIG1vZGUgJiAyOiBtZXJnZSBhbGwgcHJvcGVydGllcyBvZiB2YWx1ZSBpbnRvIHRoZSBuc1xuIFx0Ly8gbW9kZSAmIDQ6IHJldHVybiB2YWx1ZSB3aGVuIGFscmVhZHkgbnMgb2JqZWN0XG4gXHQvLyBtb2RlICYgOHwxOiBiZWhhdmUgbGlrZSByZXF1aXJlXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLnQgPSBmdW5jdGlvbih2YWx1ZSwgbW9kZSkge1xuIFx0XHRpZihtb2RlICYgMSkgdmFsdWUgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKHZhbHVlKTtcbiBcdFx0aWYobW9kZSAmIDgpIHJldHVybiB2YWx1ZTtcbiBcdFx0aWYoKG1vZGUgJiA0KSAmJiB0eXBlb2YgdmFsdWUgPT09ICdvYmplY3QnICYmIHZhbHVlICYmIHZhbHVlLl9fZXNNb2R1bGUpIHJldHVybiB2YWx1ZTtcbiBcdFx0dmFyIG5zID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiBcdFx0X193ZWJwYWNrX3JlcXVpcmVfXy5yKG5zKTtcbiBcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KG5zLCAnZGVmYXVsdCcsIHsgZW51bWVyYWJsZTogdHJ1ZSwgdmFsdWU6IHZhbHVlIH0pO1xuIFx0XHRpZihtb2RlICYgMiAmJiB0eXBlb2YgdmFsdWUgIT0gJ3N0cmluZycpIGZvcih2YXIga2V5IGluIHZhbHVlKSBfX3dlYnBhY2tfcmVxdWlyZV9fLmQobnMsIGtleSwgZnVuY3Rpb24oa2V5KSB7IHJldHVybiB2YWx1ZVtrZXldOyB9LmJpbmQobnVsbCwga2V5KSk7XG4gXHRcdHJldHVybiBucztcbiBcdH07XG5cbiBcdC8vIGdldERlZmF1bHRFeHBvcnQgZnVuY3Rpb24gZm9yIGNvbXBhdGliaWxpdHkgd2l0aCBub24taGFybW9ueSBtb2R1bGVzXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm4gPSBmdW5jdGlvbihtb2R1bGUpIHtcbiBcdFx0dmFyIGdldHRlciA9IG1vZHVsZSAmJiBtb2R1bGUuX19lc01vZHVsZSA/XG4gXHRcdFx0ZnVuY3Rpb24gZ2V0RGVmYXVsdCgpIHsgcmV0dXJuIG1vZHVsZVsnZGVmYXVsdCddOyB9IDpcbiBcdFx0XHRmdW5jdGlvbiBnZXRNb2R1bGVFeHBvcnRzKCkgeyByZXR1cm4gbW9kdWxlOyB9O1xuIFx0XHRfX3dlYnBhY2tfcmVxdWlyZV9fLmQoZ2V0dGVyLCAnYScsIGdldHRlcik7XG4gXHRcdHJldHVybiBnZXR0ZXI7XG4gXHR9O1xuXG4gXHQvLyBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGxcbiBcdF9fd2VicGFja19yZXF1aXJlX18ubyA9IGZ1bmN0aW9uKG9iamVjdCwgcHJvcGVydHkpIHsgcmV0dXJuIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmplY3QsIHByb3BlcnR5KTsgfTtcblxuIFx0Ly8gX193ZWJwYWNrX3B1YmxpY19wYXRoX19cbiBcdF9fd2VicGFja19yZXF1aXJlX18ucCA9IFwiXCI7XG5cblxuIFx0Ly8gTG9hZCBlbnRyeSBtb2R1bGUgYW5kIHJldHVybiBleHBvcnRzXG4gXHRyZXR1cm4gX193ZWJwYWNrX3JlcXVpcmVfXyhfX3dlYnBhY2tfcmVxdWlyZV9fLnMgPSAzKTtcbiIsIid1c2Ugc3RyaWN0JztcblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSAncHJvZHVjdGlvbicpIHtcbiAgbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2Nqcy9yZWFjdC5wcm9kdWN0aW9uLm1pbi5qcycpO1xufSBlbHNlIHtcbiAgbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2Nqcy9yZWFjdC5kZXZlbG9wbWVudC5qcycpO1xufVxuIiwiLypcbm9iamVjdC1hc3NpZ25cbihjKSBTaW5kcmUgU29yaHVzXG5AbGljZW5zZSBNSVRcbiovXG5cbid1c2Ugc3RyaWN0Jztcbi8qIGVzbGludC1kaXNhYmxlIG5vLXVudXNlZC12YXJzICovXG52YXIgZ2V0T3duUHJvcGVydHlTeW1ib2xzID0gT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scztcbnZhciBoYXNPd25Qcm9wZXJ0eSA9IE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHk7XG52YXIgcHJvcElzRW51bWVyYWJsZSA9IE9iamVjdC5wcm90b3R5cGUucHJvcGVydHlJc0VudW1lcmFibGU7XG5cbmZ1bmN0aW9uIHRvT2JqZWN0KHZhbCkge1xuXHRpZiAodmFsID09PSBudWxsIHx8IHZhbCA9PT0gdW5kZWZpbmVkKSB7XG5cdFx0dGhyb3cgbmV3IFR5cGVFcnJvcignT2JqZWN0LmFzc2lnbiBjYW5ub3QgYmUgY2FsbGVkIHdpdGggbnVsbCBvciB1bmRlZmluZWQnKTtcblx0fVxuXG5cdHJldHVybiBPYmplY3QodmFsKTtcbn1cblxuZnVuY3Rpb24gc2hvdWxkVXNlTmF0aXZlKCkge1xuXHR0cnkge1xuXHRcdGlmICghT2JqZWN0LmFzc2lnbikge1xuXHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdH1cblxuXHRcdC8vIERldGVjdCBidWdneSBwcm9wZXJ0eSBlbnVtZXJhdGlvbiBvcmRlciBpbiBvbGRlciBWOCB2ZXJzaW9ucy5cblxuXHRcdC8vIGh0dHBzOi8vYnVncy5jaHJvbWl1bS5vcmcvcC92OC9pc3N1ZXMvZGV0YWlsP2lkPTQxMThcblx0XHR2YXIgdGVzdDEgPSBuZXcgU3RyaW5nKCdhYmMnKTsgIC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tbmV3LXdyYXBwZXJzXG5cdFx0dGVzdDFbNV0gPSAnZGUnO1xuXHRcdGlmIChPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyh0ZXN0MSlbMF0gPT09ICc1Jykge1xuXHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdH1cblxuXHRcdC8vIGh0dHBzOi8vYnVncy5jaHJvbWl1bS5vcmcvcC92OC9pc3N1ZXMvZGV0YWlsP2lkPTMwNTZcblx0XHR2YXIgdGVzdDIgPSB7fTtcblx0XHRmb3IgKHZhciBpID0gMDsgaSA8IDEwOyBpKyspIHtcblx0XHRcdHRlc3QyWydfJyArIFN0cmluZy5mcm9tQ2hhckNvZGUoaSldID0gaTtcblx0XHR9XG5cdFx0dmFyIG9yZGVyMiA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzKHRlc3QyKS5tYXAoZnVuY3Rpb24gKG4pIHtcblx0XHRcdHJldHVybiB0ZXN0MltuXTtcblx0XHR9KTtcblx0XHRpZiAob3JkZXIyLmpvaW4oJycpICE9PSAnMDEyMzQ1Njc4OScpIHtcblx0XHRcdHJldHVybiBmYWxzZTtcblx0XHR9XG5cblx0XHQvLyBodHRwczovL2J1Z3MuY2hyb21pdW0ub3JnL3AvdjgvaXNzdWVzL2RldGFpbD9pZD0zMDU2XG5cdFx0dmFyIHRlc3QzID0ge307XG5cdFx0J2FiY2RlZmdoaWprbG1ub3BxcnN0Jy5zcGxpdCgnJykuZm9yRWFjaChmdW5jdGlvbiAobGV0dGVyKSB7XG5cdFx0XHR0ZXN0M1tsZXR0ZXJdID0gbGV0dGVyO1xuXHRcdH0pO1xuXHRcdGlmIChPYmplY3Qua2V5cyhPYmplY3QuYXNzaWduKHt9LCB0ZXN0MykpLmpvaW4oJycpICE9PVxuXHRcdFx0XHQnYWJjZGVmZ2hpamtsbW5vcHFyc3QnKSB7XG5cdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRydWU7XG5cdH0gY2F0Y2ggKGVycikge1xuXHRcdC8vIFdlIGRvbid0IGV4cGVjdCBhbnkgb2YgdGhlIGFib3ZlIHRvIHRocm93LCBidXQgYmV0dGVyIHRvIGJlIHNhZmUuXG5cdFx0cmV0dXJuIGZhbHNlO1xuXHR9XG59XG5cbm1vZHVsZS5leHBvcnRzID0gc2hvdWxkVXNlTmF0aXZlKCkgPyBPYmplY3QuYXNzaWduIDogZnVuY3Rpb24gKHRhcmdldCwgc291cmNlKSB7XG5cdHZhciBmcm9tO1xuXHR2YXIgdG8gPSB0b09iamVjdCh0YXJnZXQpO1xuXHR2YXIgc3ltYm9scztcblxuXHRmb3IgKHZhciBzID0gMTsgcyA8IGFyZ3VtZW50cy5sZW5ndGg7IHMrKykge1xuXHRcdGZyb20gPSBPYmplY3QoYXJndW1lbnRzW3NdKTtcblxuXHRcdGZvciAodmFyIGtleSBpbiBmcm9tKSB7XG5cdFx0XHRpZiAoaGFzT3duUHJvcGVydHkuY2FsbChmcm9tLCBrZXkpKSB7XG5cdFx0XHRcdHRvW2tleV0gPSBmcm9tW2tleV07XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0aWYgKGdldE93blByb3BlcnR5U3ltYm9scykge1xuXHRcdFx0c3ltYm9scyA9IGdldE93blByb3BlcnR5U3ltYm9scyhmcm9tKTtcblx0XHRcdGZvciAodmFyIGkgPSAwOyBpIDwgc3ltYm9scy5sZW5ndGg7IGkrKykge1xuXHRcdFx0XHRpZiAocHJvcElzRW51bWVyYWJsZS5jYWxsKGZyb20sIHN5bWJvbHNbaV0pKSB7XG5cdFx0XHRcdFx0dG9bc3ltYm9sc1tpXV0gPSBmcm9tW3N5bWJvbHNbaV1dO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cblx0cmV0dXJuIHRvO1xufTtcbiIsImltcG9ydCBSZWFjdCBmcm9tIFwicmVhY3RcIjtcblxuaW1wb3J0IEFwcGxpY2F0aW9ucyBmcm9tIFwiLi9hcHBsaWNhdGlvbnMuanNvblwiO1xuaW1wb3J0IEZlYXR1cmVkQXBwcyBmcm9tIFwiLi9mZWF0dXJlZC5qc29uXCI7XG5pbXBvcnQgU2NyZWVuc2hvdHMgZnJvbSBcIi4vc2NyZWVuc2hvdHMuanNvblwiO1xuXG5pbXBvcnQgQXBwVGVtcGxhdGUgZnJvbSBcIi4uL2FkYXB0ZXJzL2FwcGxpY2F0aW9uLmpzeFwiO1xuaW1wb3J0IEZlYXR1cmVUZW1wbGF0ZSBmcm9tIFwiLi4vYWRhcHRlcnMvZmVhdHVyZS5qc3hcIjtcbmltcG9ydCBTY3JlZW5zaG90VGVtcGxhdGUgZnJvbSBcIi4uL2FkYXB0ZXJzL3NjcmVlbnNob3QuanN4XCI7XG5cbnZhciBfID0gcmVxdWlyZShcImxvZGFzaFwiKTtcblxuY2xhc3MgU3RvcmUge1xuXG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgIHRoaXMuY29sbGVjdGlvbiA9IHtcbiAgICAgICAgICAgIGFwcHM6IEFwcGxpY2F0aW9ucyxcbiAgICAgICAgICAgIGZlYXR1cmVkOiBGZWF0dXJlZEFwcHMsXG4gICAgICAgICAgICBzY3JlZXNob3RzOiBTY3JlZW5zaG90c1xuICAgICAgICB9O1xuICAgIH1cblxuICAgIGdldEFsbEZlYXR1cmVkQXBwbGljYXRpb25zKCkge1xuICAgICAgICBjb25zdCByZXN1bHQgPSBfLnNvcnRCeSh0aGlzLmNvbGxlY3Rpb24uZmVhdHVyZWQsIFtcInRpdGxlXCJdLCBbXCJhc2NcIl0pLm1hcCgoZGF0YSwgaSkgPT4gPEZlYXR1cmVUZW1wbGF0ZSBrZXk9e2RhdGEudGl0bGV9IGRhdGE9e2RhdGF9IC8+KTtcbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG5cbiAgICBnZXRBbGxBcHBsaWNhdGlvbnMoKSB7XG4gICAgICAgIC8vdG9kbzogZ2V0IGFwcGxpY2F0aW9ucyBkYXRhIGZyb20gQXBwbGljYXRpb25zXG4gICAgfVxuXG4gICAgZ2V0QWxsU2NyZWVuU2hvdHMoKSB7XG4gICAgICAgIGNvbnN0IHJlc3VsdCA9IF8uc29ydEJ5KHRoaXMuY29sbGVjdGlvbi5zY3JlZXNob3RzLCBbXCJ0aXRsZVwiXSwgW1wiYXNjXCJdKS5tYXAoKGRhdGEsIGkpID0+IDxTY3JlZW5zaG90VGVtcGxhdGUga2V5PXtkYXRhLmltYWdlfSBkYXRhPXtkYXRhfSAvPik7XG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxufVxuXG5jb25zdCBzdG9yZSA9IG5ldyBTdG9yZSgpO1xuZXhwb3J0IGRlZmF1bHQgc3RvcmU7XG4iLCJpbXBvcnQgUmVhY3QgZnJvbSBcInJlYWN0XCI7XG5pbXBvcnQgUmVhY3RET00gZnJvbSBcInJlYWN0LWRvbVwiO1xuXG5jb25zdCBhcHAgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnYXBwJyk7XG5cbmltcG9ydCBCYXNlIGZyb20gXCIuL3BhZ2VzL2Jhc2UuanN4XCI7XG5cblJlYWN0RE9NLnJlbmRlcig8QmFzZSAvPiwgYXBwKTtcbiIsIi8qKiBAbGljZW5zZSBSZWFjdCB2MTcuMC4yXG4gKiByZWFjdC5wcm9kdWN0aW9uLm1pbi5qc1xuICpcbiAqIENvcHlyaWdodCAoYykgRmFjZWJvb2ssIEluYy4gYW5kIGl0cyBhZmZpbGlhdGVzLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICovXG4ndXNlIHN0cmljdCc7dmFyIGw9cmVxdWlyZShcIm9iamVjdC1hc3NpZ25cIiksbj02MDEwMyxwPTYwMTA2O2V4cG9ydHMuRnJhZ21lbnQ9NjAxMDc7ZXhwb3J0cy5TdHJpY3RNb2RlPTYwMTA4O2V4cG9ydHMuUHJvZmlsZXI9NjAxMTQ7dmFyIHE9NjAxMDkscj02MDExMCx0PTYwMTEyO2V4cG9ydHMuU3VzcGVuc2U9NjAxMTM7dmFyIHU9NjAxMTUsdj02MDExNjtcbmlmKFwiZnVuY3Rpb25cIj09PXR5cGVvZiBTeW1ib2wmJlN5bWJvbC5mb3Ipe3ZhciB3PVN5bWJvbC5mb3I7bj13KFwicmVhY3QuZWxlbWVudFwiKTtwPXcoXCJyZWFjdC5wb3J0YWxcIik7ZXhwb3J0cy5GcmFnbWVudD13KFwicmVhY3QuZnJhZ21lbnRcIik7ZXhwb3J0cy5TdHJpY3RNb2RlPXcoXCJyZWFjdC5zdHJpY3RfbW9kZVwiKTtleHBvcnRzLlByb2ZpbGVyPXcoXCJyZWFjdC5wcm9maWxlclwiKTtxPXcoXCJyZWFjdC5wcm92aWRlclwiKTtyPXcoXCJyZWFjdC5jb250ZXh0XCIpO3Q9dyhcInJlYWN0LmZvcndhcmRfcmVmXCIpO2V4cG9ydHMuU3VzcGVuc2U9dyhcInJlYWN0LnN1c3BlbnNlXCIpO3U9dyhcInJlYWN0Lm1lbW9cIik7dj13KFwicmVhY3QubGF6eVwiKX12YXIgeD1cImZ1bmN0aW9uXCI9PT10eXBlb2YgU3ltYm9sJiZTeW1ib2wuaXRlcmF0b3I7XG5mdW5jdGlvbiB5KGEpe2lmKG51bGw9PT1hfHxcIm9iamVjdFwiIT09dHlwZW9mIGEpcmV0dXJuIG51bGw7YT14JiZhW3hdfHxhW1wiQEBpdGVyYXRvclwiXTtyZXR1cm5cImZ1bmN0aW9uXCI9PT10eXBlb2YgYT9hOm51bGx9ZnVuY3Rpb24geihhKXtmb3IodmFyIGI9XCJodHRwczovL3JlYWN0anMub3JnL2RvY3MvZXJyb3ItZGVjb2Rlci5odG1sP2ludmFyaWFudD1cIithLGM9MTtjPGFyZ3VtZW50cy5sZW5ndGg7YysrKWIrPVwiJmFyZ3NbXT1cIitlbmNvZGVVUklDb21wb25lbnQoYXJndW1lbnRzW2NdKTtyZXR1cm5cIk1pbmlmaWVkIFJlYWN0IGVycm9yICNcIithK1wiOyB2aXNpdCBcIitiK1wiIGZvciB0aGUgZnVsbCBtZXNzYWdlIG9yIHVzZSB0aGUgbm9uLW1pbmlmaWVkIGRldiBlbnZpcm9ubWVudCBmb3IgZnVsbCBlcnJvcnMgYW5kIGFkZGl0aW9uYWwgaGVscGZ1bCB3YXJuaW5ncy5cIn1cbnZhciBBPXtpc01vdW50ZWQ6ZnVuY3Rpb24oKXtyZXR1cm4hMX0sZW5xdWV1ZUZvcmNlVXBkYXRlOmZ1bmN0aW9uKCl7fSxlbnF1ZXVlUmVwbGFjZVN0YXRlOmZ1bmN0aW9uKCl7fSxlbnF1ZXVlU2V0U3RhdGU6ZnVuY3Rpb24oKXt9fSxCPXt9O2Z1bmN0aW9uIEMoYSxiLGMpe3RoaXMucHJvcHM9YTt0aGlzLmNvbnRleHQ9Yjt0aGlzLnJlZnM9Qjt0aGlzLnVwZGF0ZXI9Y3x8QX1DLnByb3RvdHlwZS5pc1JlYWN0Q29tcG9uZW50PXt9O0MucHJvdG90eXBlLnNldFN0YXRlPWZ1bmN0aW9uKGEsYil7aWYoXCJvYmplY3RcIiE9PXR5cGVvZiBhJiZcImZ1bmN0aW9uXCIhPT10eXBlb2YgYSYmbnVsbCE9YSl0aHJvdyBFcnJvcih6KDg1KSk7dGhpcy51cGRhdGVyLmVucXVldWVTZXRTdGF0ZSh0aGlzLGEsYixcInNldFN0YXRlXCIpfTtDLnByb3RvdHlwZS5mb3JjZVVwZGF0ZT1mdW5jdGlvbihhKXt0aGlzLnVwZGF0ZXIuZW5xdWV1ZUZvcmNlVXBkYXRlKHRoaXMsYSxcImZvcmNlVXBkYXRlXCIpfTtcbmZ1bmN0aW9uIEQoKXt9RC5wcm90b3R5cGU9Qy5wcm90b3R5cGU7ZnVuY3Rpb24gRShhLGIsYyl7dGhpcy5wcm9wcz1hO3RoaXMuY29udGV4dD1iO3RoaXMucmVmcz1CO3RoaXMudXBkYXRlcj1jfHxBfXZhciBGPUUucHJvdG90eXBlPW5ldyBEO0YuY29uc3RydWN0b3I9RTtsKEYsQy5wcm90b3R5cGUpO0YuaXNQdXJlUmVhY3RDb21wb25lbnQ9ITA7dmFyIEc9e2N1cnJlbnQ6bnVsbH0sSD1PYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LEk9e2tleTohMCxyZWY6ITAsX19zZWxmOiEwLF9fc291cmNlOiEwfTtcbmZ1bmN0aW9uIEooYSxiLGMpe3ZhciBlLGQ9e30saz1udWxsLGg9bnVsbDtpZihudWxsIT1iKWZvcihlIGluIHZvaWQgMCE9PWIucmVmJiYoaD1iLnJlZiksdm9pZCAwIT09Yi5rZXkmJihrPVwiXCIrYi5rZXkpLGIpSC5jYWxsKGIsZSkmJiFJLmhhc093blByb3BlcnR5KGUpJiYoZFtlXT1iW2VdKTt2YXIgZz1hcmd1bWVudHMubGVuZ3RoLTI7aWYoMT09PWcpZC5jaGlsZHJlbj1jO2Vsc2UgaWYoMTxnKXtmb3IodmFyIGY9QXJyYXkoZyksbT0wO208ZzttKyspZlttXT1hcmd1bWVudHNbbSsyXTtkLmNoaWxkcmVuPWZ9aWYoYSYmYS5kZWZhdWx0UHJvcHMpZm9yKGUgaW4gZz1hLmRlZmF1bHRQcm9wcyxnKXZvaWQgMD09PWRbZV0mJihkW2VdPWdbZV0pO3JldHVybnskJHR5cGVvZjpuLHR5cGU6YSxrZXk6ayxyZWY6aCxwcm9wczpkLF9vd25lcjpHLmN1cnJlbnR9fVxuZnVuY3Rpb24gSyhhLGIpe3JldHVybnskJHR5cGVvZjpuLHR5cGU6YS50eXBlLGtleTpiLHJlZjphLnJlZixwcm9wczphLnByb3BzLF9vd25lcjphLl9vd25lcn19ZnVuY3Rpb24gTChhKXtyZXR1cm5cIm9iamVjdFwiPT09dHlwZW9mIGEmJm51bGwhPT1hJiZhLiQkdHlwZW9mPT09bn1mdW5jdGlvbiBlc2NhcGUoYSl7dmFyIGI9e1wiPVwiOlwiPTBcIixcIjpcIjpcIj0yXCJ9O3JldHVyblwiJFwiK2EucmVwbGFjZSgvWz06XS9nLGZ1bmN0aW9uKGEpe3JldHVybiBiW2FdfSl9dmFyIE09L1xcLysvZztmdW5jdGlvbiBOKGEsYil7cmV0dXJuXCJvYmplY3RcIj09PXR5cGVvZiBhJiZudWxsIT09YSYmbnVsbCE9YS5rZXk/ZXNjYXBlKFwiXCIrYS5rZXkpOmIudG9TdHJpbmcoMzYpfVxuZnVuY3Rpb24gTyhhLGIsYyxlLGQpe3ZhciBrPXR5cGVvZiBhO2lmKFwidW5kZWZpbmVkXCI9PT1rfHxcImJvb2xlYW5cIj09PWspYT1udWxsO3ZhciBoPSExO2lmKG51bGw9PT1hKWg9ITA7ZWxzZSBzd2l0Y2goayl7Y2FzZSBcInN0cmluZ1wiOmNhc2UgXCJudW1iZXJcIjpoPSEwO2JyZWFrO2Nhc2UgXCJvYmplY3RcIjpzd2l0Y2goYS4kJHR5cGVvZil7Y2FzZSBuOmNhc2UgcDpoPSEwfX1pZihoKXJldHVybiBoPWEsZD1kKGgpLGE9XCJcIj09PWU/XCIuXCIrTihoLDApOmUsQXJyYXkuaXNBcnJheShkKT8oYz1cIlwiLG51bGwhPWEmJihjPWEucmVwbGFjZShNLFwiJCYvXCIpK1wiL1wiKSxPKGQsYixjLFwiXCIsZnVuY3Rpb24oYSl7cmV0dXJuIGF9KSk6bnVsbCE9ZCYmKEwoZCkmJihkPUsoZCxjKyghZC5rZXl8fGgmJmgua2V5PT09ZC5rZXk/XCJcIjooXCJcIitkLmtleSkucmVwbGFjZShNLFwiJCYvXCIpK1wiL1wiKSthKSksYi5wdXNoKGQpKSwxO2g9MDtlPVwiXCI9PT1lP1wiLlwiOmUrXCI6XCI7aWYoQXJyYXkuaXNBcnJheShhKSlmb3IodmFyIGc9XG4wO2c8YS5sZW5ndGg7ZysrKXtrPWFbZ107dmFyIGY9ZStOKGssZyk7aCs9TyhrLGIsYyxmLGQpfWVsc2UgaWYoZj15KGEpLFwiZnVuY3Rpb25cIj09PXR5cGVvZiBmKWZvcihhPWYuY2FsbChhKSxnPTA7IShrPWEubmV4dCgpKS5kb25lOylrPWsudmFsdWUsZj1lK04oayxnKyspLGgrPU8oayxiLGMsZixkKTtlbHNlIGlmKFwib2JqZWN0XCI9PT1rKXRocm93IGI9XCJcIithLEVycm9yKHooMzEsXCJbb2JqZWN0IE9iamVjdF1cIj09PWI/XCJvYmplY3Qgd2l0aCBrZXlzIHtcIitPYmplY3Qua2V5cyhhKS5qb2luKFwiLCBcIikrXCJ9XCI6YikpO3JldHVybiBofWZ1bmN0aW9uIFAoYSxiLGMpe2lmKG51bGw9PWEpcmV0dXJuIGE7dmFyIGU9W10sZD0wO08oYSxlLFwiXCIsXCJcIixmdW5jdGlvbihhKXtyZXR1cm4gYi5jYWxsKGMsYSxkKyspfSk7cmV0dXJuIGV9XG5mdW5jdGlvbiBRKGEpe2lmKC0xPT09YS5fc3RhdHVzKXt2YXIgYj1hLl9yZXN1bHQ7Yj1iKCk7YS5fc3RhdHVzPTA7YS5fcmVzdWx0PWI7Yi50aGVuKGZ1bmN0aW9uKGIpezA9PT1hLl9zdGF0dXMmJihiPWIuZGVmYXVsdCxhLl9zdGF0dXM9MSxhLl9yZXN1bHQ9Yil9LGZ1bmN0aW9uKGIpezA9PT1hLl9zdGF0dXMmJihhLl9zdGF0dXM9MixhLl9yZXN1bHQ9Yil9KX1pZigxPT09YS5fc3RhdHVzKXJldHVybiBhLl9yZXN1bHQ7dGhyb3cgYS5fcmVzdWx0O312YXIgUj17Y3VycmVudDpudWxsfTtmdW5jdGlvbiBTKCl7dmFyIGE9Ui5jdXJyZW50O2lmKG51bGw9PT1hKXRocm93IEVycm9yKHooMzIxKSk7cmV0dXJuIGF9dmFyIFQ9e1JlYWN0Q3VycmVudERpc3BhdGNoZXI6UixSZWFjdEN1cnJlbnRCYXRjaENvbmZpZzp7dHJhbnNpdGlvbjowfSxSZWFjdEN1cnJlbnRPd25lcjpHLElzU29tZVJlbmRlcmVyQWN0aW5nOntjdXJyZW50OiExfSxhc3NpZ246bH07XG5leHBvcnRzLkNoaWxkcmVuPXttYXA6UCxmb3JFYWNoOmZ1bmN0aW9uKGEsYixjKXtQKGEsZnVuY3Rpb24oKXtiLmFwcGx5KHRoaXMsYXJndW1lbnRzKX0sYyl9LGNvdW50OmZ1bmN0aW9uKGEpe3ZhciBiPTA7UChhLGZ1bmN0aW9uKCl7YisrfSk7cmV0dXJuIGJ9LHRvQXJyYXk6ZnVuY3Rpb24oYSl7cmV0dXJuIFAoYSxmdW5jdGlvbihhKXtyZXR1cm4gYX0pfHxbXX0sb25seTpmdW5jdGlvbihhKXtpZighTChhKSl0aHJvdyBFcnJvcih6KDE0MykpO3JldHVybiBhfX07ZXhwb3J0cy5Db21wb25lbnQ9QztleHBvcnRzLlB1cmVDb21wb25lbnQ9RTtleHBvcnRzLl9fU0VDUkVUX0lOVEVSTkFMU19ET19OT1RfVVNFX09SX1lPVV9XSUxMX0JFX0ZJUkVEPVQ7XG5leHBvcnRzLmNsb25lRWxlbWVudD1mdW5jdGlvbihhLGIsYyl7aWYobnVsbD09PWF8fHZvaWQgMD09PWEpdGhyb3cgRXJyb3IoeigyNjcsYSkpO3ZhciBlPWwoe30sYS5wcm9wcyksZD1hLmtleSxrPWEucmVmLGg9YS5fb3duZXI7aWYobnVsbCE9Yil7dm9pZCAwIT09Yi5yZWYmJihrPWIucmVmLGg9Ry5jdXJyZW50KTt2b2lkIDAhPT1iLmtleSYmKGQ9XCJcIitiLmtleSk7aWYoYS50eXBlJiZhLnR5cGUuZGVmYXVsdFByb3BzKXZhciBnPWEudHlwZS5kZWZhdWx0UHJvcHM7Zm9yKGYgaW4gYilILmNhbGwoYixmKSYmIUkuaGFzT3duUHJvcGVydHkoZikmJihlW2ZdPXZvaWQgMD09PWJbZl0mJnZvaWQgMCE9PWc/Z1tmXTpiW2ZdKX12YXIgZj1hcmd1bWVudHMubGVuZ3RoLTI7aWYoMT09PWYpZS5jaGlsZHJlbj1jO2Vsc2UgaWYoMTxmKXtnPUFycmF5KGYpO2Zvcih2YXIgbT0wO208ZjttKyspZ1ttXT1hcmd1bWVudHNbbSsyXTtlLmNoaWxkcmVuPWd9cmV0dXJueyQkdHlwZW9mOm4sdHlwZTphLnR5cGUsXG5rZXk6ZCxyZWY6ayxwcm9wczplLF9vd25lcjpofX07ZXhwb3J0cy5jcmVhdGVDb250ZXh0PWZ1bmN0aW9uKGEsYil7dm9pZCAwPT09YiYmKGI9bnVsbCk7YT17JCR0eXBlb2Y6cixfY2FsY3VsYXRlQ2hhbmdlZEJpdHM6YixfY3VycmVudFZhbHVlOmEsX2N1cnJlbnRWYWx1ZTI6YSxfdGhyZWFkQ291bnQ6MCxQcm92aWRlcjpudWxsLENvbnN1bWVyOm51bGx9O2EuUHJvdmlkZXI9eyQkdHlwZW9mOnEsX2NvbnRleHQ6YX07cmV0dXJuIGEuQ29uc3VtZXI9YX07ZXhwb3J0cy5jcmVhdGVFbGVtZW50PUo7ZXhwb3J0cy5jcmVhdGVGYWN0b3J5PWZ1bmN0aW9uKGEpe3ZhciBiPUouYmluZChudWxsLGEpO2IudHlwZT1hO3JldHVybiBifTtleHBvcnRzLmNyZWF0ZVJlZj1mdW5jdGlvbigpe3JldHVybntjdXJyZW50Om51bGx9fTtleHBvcnRzLmZvcndhcmRSZWY9ZnVuY3Rpb24oYSl7cmV0dXJueyQkdHlwZW9mOnQscmVuZGVyOmF9fTtleHBvcnRzLmlzVmFsaWRFbGVtZW50PUw7XG5leHBvcnRzLmxhenk9ZnVuY3Rpb24oYSl7cmV0dXJueyQkdHlwZW9mOnYsX3BheWxvYWQ6e19zdGF0dXM6LTEsX3Jlc3VsdDphfSxfaW5pdDpRfX07ZXhwb3J0cy5tZW1vPWZ1bmN0aW9uKGEsYil7cmV0dXJueyQkdHlwZW9mOnUsdHlwZTphLGNvbXBhcmU6dm9pZCAwPT09Yj9udWxsOmJ9fTtleHBvcnRzLnVzZUNhbGxiYWNrPWZ1bmN0aW9uKGEsYil7cmV0dXJuIFMoKS51c2VDYWxsYmFjayhhLGIpfTtleHBvcnRzLnVzZUNvbnRleHQ9ZnVuY3Rpb24oYSxiKXtyZXR1cm4gUygpLnVzZUNvbnRleHQoYSxiKX07ZXhwb3J0cy51c2VEZWJ1Z1ZhbHVlPWZ1bmN0aW9uKCl7fTtleHBvcnRzLnVzZUVmZmVjdD1mdW5jdGlvbihhLGIpe3JldHVybiBTKCkudXNlRWZmZWN0KGEsYil9O2V4cG9ydHMudXNlSW1wZXJhdGl2ZUhhbmRsZT1mdW5jdGlvbihhLGIsYyl7cmV0dXJuIFMoKS51c2VJbXBlcmF0aXZlSGFuZGxlKGEsYixjKX07XG5leHBvcnRzLnVzZUxheW91dEVmZmVjdD1mdW5jdGlvbihhLGIpe3JldHVybiBTKCkudXNlTGF5b3V0RWZmZWN0KGEsYil9O2V4cG9ydHMudXNlTWVtbz1mdW5jdGlvbihhLGIpe3JldHVybiBTKCkudXNlTWVtbyhhLGIpfTtleHBvcnRzLnVzZVJlZHVjZXI9ZnVuY3Rpb24oYSxiLGMpe3JldHVybiBTKCkudXNlUmVkdWNlcihhLGIsYyl9O2V4cG9ydHMudXNlUmVmPWZ1bmN0aW9uKGEpe3JldHVybiBTKCkudXNlUmVmKGEpfTtleHBvcnRzLnVzZVN0YXRlPWZ1bmN0aW9uKGEpe3JldHVybiBTKCkudXNlU3RhdGUoYSl9O2V4cG9ydHMudmVyc2lvbj1cIjE3LjAuMlwiO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG5mdW5jdGlvbiBjaGVja0RDRSgpIHtcbiAgLyogZ2xvYmFsIF9fUkVBQ1RfREVWVE9PTFNfR0xPQkFMX0hPT0tfXyAqL1xuICBpZiAoXG4gICAgdHlwZW9mIF9fUkVBQ1RfREVWVE9PTFNfR0xPQkFMX0hPT0tfXyA9PT0gJ3VuZGVmaW5lZCcgfHxcbiAgICB0eXBlb2YgX19SRUFDVF9ERVZUT09MU19HTE9CQUxfSE9PS19fLmNoZWNrRENFICE9PSAnZnVuY3Rpb24nXG4gICkge1xuICAgIHJldHVybjtcbiAgfVxuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgIC8vIFRoaXMgYnJhbmNoIGlzIHVucmVhY2hhYmxlIGJlY2F1c2UgdGhpcyBmdW5jdGlvbiBpcyBvbmx5IGNhbGxlZFxuICAgIC8vIGluIHByb2R1Y3Rpb24sIGJ1dCB0aGUgY29uZGl0aW9uIGlzIHRydWUgb25seSBpbiBkZXZlbG9wbWVudC5cbiAgICAvLyBUaGVyZWZvcmUgaWYgdGhlIGJyYW5jaCBpcyBzdGlsbCBoZXJlLCBkZWFkIGNvZGUgZWxpbWluYXRpb24gd2Fzbid0XG4gICAgLy8gcHJvcGVybHkgYXBwbGllZC5cbiAgICAvLyBEb24ndCBjaGFuZ2UgdGhlIG1lc3NhZ2UuIFJlYWN0IERldlRvb2xzIHJlbGllcyBvbiBpdC4gQWxzbyBtYWtlIHN1cmVcbiAgICAvLyB0aGlzIG1lc3NhZ2UgZG9lc24ndCBvY2N1ciBlbHNld2hlcmUgaW4gdGhpcyBmdW5jdGlvbiwgb3IgaXQgd2lsbCBjYXVzZVxuICAgIC8vIGEgZmFsc2UgcG9zaXRpdmUuXG4gICAgdGhyb3cgbmV3IEVycm9yKCdeX14nKTtcbiAgfVxuICB0cnkge1xuICAgIC8vIFZlcmlmeSB0aGF0IHRoZSBjb2RlIGFib3ZlIGhhcyBiZWVuIGRlYWQgY29kZSBlbGltaW5hdGVkIChEQ0UnZCkuXG4gICAgX19SRUFDVF9ERVZUT09MU19HTE9CQUxfSE9PS19fLmNoZWNrRENFKGNoZWNrRENFKTtcbiAgfSBjYXRjaCAoZXJyKSB7XG4gICAgLy8gRGV2VG9vbHMgc2hvdWxkbid0IGNyYXNoIFJlYWN0LCBubyBtYXR0ZXIgd2hhdC5cbiAgICAvLyBXZSBzaG91bGQgc3RpbGwgcmVwb3J0IGluIGNhc2Ugd2UgYnJlYWsgdGhpcyBjb2RlLlxuICAgIGNvbnNvbGUuZXJyb3IoZXJyKTtcbiAgfVxufVxuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09ICdwcm9kdWN0aW9uJykge1xuICAvLyBEQ0UgY2hlY2sgc2hvdWxkIGhhcHBlbiBiZWZvcmUgUmVhY3RET00gYnVuZGxlIGV4ZWN1dGVzIHNvIHRoYXRcbiAgLy8gRGV2VG9vbHMgY2FuIHJlcG9ydCBiYWQgbWluaWZpY2F0aW9uIGR1cmluZyBpbmplY3Rpb24uXG4gIGNoZWNrRENFKCk7XG4gIG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9janMvcmVhY3QtZG9tLnByb2R1Y3Rpb24ubWluLmpzJyk7XG59IGVsc2Uge1xuICBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vY2pzL3JlYWN0LWRvbS5kZXZlbG9wbWVudC5qcycpO1xufVxuIiwiLyoqIEBsaWNlbnNlIFJlYWN0IHYxNy4wLjJcbiAqIHJlYWN0LWRvbS5wcm9kdWN0aW9uLm1pbi5qc1xuICpcbiAqIENvcHlyaWdodCAoYykgRmFjZWJvb2ssIEluYy4gYW5kIGl0cyBhZmZpbGlhdGVzLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICovXG4vKlxuIE1vZGVybml6ciAzLjAuMHByZSAoQ3VzdG9tIEJ1aWxkKSB8IE1JVFxuKi9cbid1c2Ugc3RyaWN0Jzt2YXIgYWE9cmVxdWlyZShcInJlYWN0XCIpLG09cmVxdWlyZShcIm9iamVjdC1hc3NpZ25cIikscj1yZXF1aXJlKFwic2NoZWR1bGVyXCIpO2Z1bmN0aW9uIHkoYSl7Zm9yKHZhciBiPVwiaHR0cHM6Ly9yZWFjdGpzLm9yZy9kb2NzL2Vycm9yLWRlY29kZXIuaHRtbD9pbnZhcmlhbnQ9XCIrYSxjPTE7Yzxhcmd1bWVudHMubGVuZ3RoO2MrKyliKz1cIiZhcmdzW109XCIrZW5jb2RlVVJJQ29tcG9uZW50KGFyZ3VtZW50c1tjXSk7cmV0dXJuXCJNaW5pZmllZCBSZWFjdCBlcnJvciAjXCIrYStcIjsgdmlzaXQgXCIrYitcIiBmb3IgdGhlIGZ1bGwgbWVzc2FnZSBvciB1c2UgdGhlIG5vbi1taW5pZmllZCBkZXYgZW52aXJvbm1lbnQgZm9yIGZ1bGwgZXJyb3JzIGFuZCBhZGRpdGlvbmFsIGhlbHBmdWwgd2FybmluZ3MuXCJ9aWYoIWFhKXRocm93IEVycm9yKHkoMjI3KSk7dmFyIGJhPW5ldyBTZXQsY2E9e307ZnVuY3Rpb24gZGEoYSxiKXtlYShhLGIpO2VhKGErXCJDYXB0dXJlXCIsYil9XG5mdW5jdGlvbiBlYShhLGIpe2NhW2FdPWI7Zm9yKGE9MDthPGIubGVuZ3RoO2ErKyliYS5hZGQoYlthXSl9XG52YXIgZmE9IShcInVuZGVmaW5lZFwiPT09dHlwZW9mIHdpbmRvd3x8XCJ1bmRlZmluZWRcIj09PXR5cGVvZiB3aW5kb3cuZG9jdW1lbnR8fFwidW5kZWZpbmVkXCI9PT10eXBlb2Ygd2luZG93LmRvY3VtZW50LmNyZWF0ZUVsZW1lbnQpLGhhPS9eWzpBLVpfYS16XFx1MDBDMC1cXHUwMEQ2XFx1MDBEOC1cXHUwMEY2XFx1MDBGOC1cXHUwMkZGXFx1MDM3MC1cXHUwMzdEXFx1MDM3Ri1cXHUxRkZGXFx1MjAwQy1cXHUyMDBEXFx1MjA3MC1cXHUyMThGXFx1MkMwMC1cXHUyRkVGXFx1MzAwMS1cXHVEN0ZGXFx1RjkwMC1cXHVGRENGXFx1RkRGMC1cXHVGRkZEXVs6QS1aX2EtelxcdTAwQzAtXFx1MDBENlxcdTAwRDgtXFx1MDBGNlxcdTAwRjgtXFx1MDJGRlxcdTAzNzAtXFx1MDM3RFxcdTAzN0YtXFx1MUZGRlxcdTIwMEMtXFx1MjAwRFxcdTIwNzAtXFx1MjE4RlxcdTJDMDAtXFx1MkZFRlxcdTMwMDEtXFx1RDdGRlxcdUY5MDAtXFx1RkRDRlxcdUZERjAtXFx1RkZGRFxcLS4wLTlcXHUwMEI3XFx1MDMwMC1cXHUwMzZGXFx1MjAzRi1cXHUyMDQwXSokLyxpYT1PYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LFxuamE9e30sa2E9e307ZnVuY3Rpb24gbGEoYSl7aWYoaWEuY2FsbChrYSxhKSlyZXR1cm4hMDtpZihpYS5jYWxsKGphLGEpKXJldHVybiExO2lmKGhhLnRlc3QoYSkpcmV0dXJuIGthW2FdPSEwO2phW2FdPSEwO3JldHVybiExfWZ1bmN0aW9uIG1hKGEsYixjLGQpe2lmKG51bGwhPT1jJiYwPT09Yy50eXBlKXJldHVybiExO3N3aXRjaCh0eXBlb2YgYil7Y2FzZSBcImZ1bmN0aW9uXCI6Y2FzZSBcInN5bWJvbFwiOnJldHVybiEwO2Nhc2UgXCJib29sZWFuXCI6aWYoZClyZXR1cm4hMTtpZihudWxsIT09YylyZXR1cm4hYy5hY2NlcHRzQm9vbGVhbnM7YT1hLnRvTG93ZXJDYXNlKCkuc2xpY2UoMCw1KTtyZXR1cm5cImRhdGEtXCIhPT1hJiZcImFyaWEtXCIhPT1hO2RlZmF1bHQ6cmV0dXJuITF9fVxuZnVuY3Rpb24gbmEoYSxiLGMsZCl7aWYobnVsbD09PWJ8fFwidW5kZWZpbmVkXCI9PT10eXBlb2YgYnx8bWEoYSxiLGMsZCkpcmV0dXJuITA7aWYoZClyZXR1cm4hMTtpZihudWxsIT09Yylzd2l0Y2goYy50eXBlKXtjYXNlIDM6cmV0dXJuIWI7Y2FzZSA0OnJldHVybiExPT09YjtjYXNlIDU6cmV0dXJuIGlzTmFOKGIpO2Nhc2UgNjpyZXR1cm4gaXNOYU4oYil8fDE+Yn1yZXR1cm4hMX1mdW5jdGlvbiBCKGEsYixjLGQsZSxmLGcpe3RoaXMuYWNjZXB0c0Jvb2xlYW5zPTI9PT1ifHwzPT09Ynx8ND09PWI7dGhpcy5hdHRyaWJ1dGVOYW1lPWQ7dGhpcy5hdHRyaWJ1dGVOYW1lc3BhY2U9ZTt0aGlzLm11c3RVc2VQcm9wZXJ0eT1jO3RoaXMucHJvcGVydHlOYW1lPWE7dGhpcy50eXBlPWI7dGhpcy5zYW5pdGl6ZVVSTD1mO3RoaXMucmVtb3ZlRW1wdHlTdHJpbmc9Z312YXIgRD17fTtcblwiY2hpbGRyZW4gZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUwgZGVmYXVsdFZhbHVlIGRlZmF1bHRDaGVja2VkIGlubmVySFRNTCBzdXBwcmVzc0NvbnRlbnRFZGl0YWJsZVdhcm5pbmcgc3VwcHJlc3NIeWRyYXRpb25XYXJuaW5nIHN0eWxlXCIuc3BsaXQoXCIgXCIpLmZvckVhY2goZnVuY3Rpb24oYSl7RFthXT1uZXcgQihhLDAsITEsYSxudWxsLCExLCExKX0pO1tbXCJhY2NlcHRDaGFyc2V0XCIsXCJhY2NlcHQtY2hhcnNldFwiXSxbXCJjbGFzc05hbWVcIixcImNsYXNzXCJdLFtcImh0bWxGb3JcIixcImZvclwiXSxbXCJodHRwRXF1aXZcIixcImh0dHAtZXF1aXZcIl1dLmZvckVhY2goZnVuY3Rpb24oYSl7dmFyIGI9YVswXTtEW2JdPW5ldyBCKGIsMSwhMSxhWzFdLG51bGwsITEsITEpfSk7W1wiY29udGVudEVkaXRhYmxlXCIsXCJkcmFnZ2FibGVcIixcInNwZWxsQ2hlY2tcIixcInZhbHVlXCJdLmZvckVhY2goZnVuY3Rpb24oYSl7RFthXT1uZXcgQihhLDIsITEsYS50b0xvd2VyQ2FzZSgpLG51bGwsITEsITEpfSk7XG5bXCJhdXRvUmV2ZXJzZVwiLFwiZXh0ZXJuYWxSZXNvdXJjZXNSZXF1aXJlZFwiLFwiZm9jdXNhYmxlXCIsXCJwcmVzZXJ2ZUFscGhhXCJdLmZvckVhY2goZnVuY3Rpb24oYSl7RFthXT1uZXcgQihhLDIsITEsYSxudWxsLCExLCExKX0pO1wiYWxsb3dGdWxsU2NyZWVuIGFzeW5jIGF1dG9Gb2N1cyBhdXRvUGxheSBjb250cm9scyBkZWZhdWx0IGRlZmVyIGRpc2FibGVkIGRpc2FibGVQaWN0dXJlSW5QaWN0dXJlIGRpc2FibGVSZW1vdGVQbGF5YmFjayBmb3JtTm9WYWxpZGF0ZSBoaWRkZW4gbG9vcCBub01vZHVsZSBub1ZhbGlkYXRlIG9wZW4gcGxheXNJbmxpbmUgcmVhZE9ubHkgcmVxdWlyZWQgcmV2ZXJzZWQgc2NvcGVkIHNlYW1sZXNzIGl0ZW1TY29wZVwiLnNwbGl0KFwiIFwiKS5mb3JFYWNoKGZ1bmN0aW9uKGEpe0RbYV09bmV3IEIoYSwzLCExLGEudG9Mb3dlckNhc2UoKSxudWxsLCExLCExKX0pO1xuW1wiY2hlY2tlZFwiLFwibXVsdGlwbGVcIixcIm11dGVkXCIsXCJzZWxlY3RlZFwiXS5mb3JFYWNoKGZ1bmN0aW9uKGEpe0RbYV09bmV3IEIoYSwzLCEwLGEsbnVsbCwhMSwhMSl9KTtbXCJjYXB0dXJlXCIsXCJkb3dubG9hZFwiXS5mb3JFYWNoKGZ1bmN0aW9uKGEpe0RbYV09bmV3IEIoYSw0LCExLGEsbnVsbCwhMSwhMSl9KTtbXCJjb2xzXCIsXCJyb3dzXCIsXCJzaXplXCIsXCJzcGFuXCJdLmZvckVhY2goZnVuY3Rpb24oYSl7RFthXT1uZXcgQihhLDYsITEsYSxudWxsLCExLCExKX0pO1tcInJvd1NwYW5cIixcInN0YXJ0XCJdLmZvckVhY2goZnVuY3Rpb24oYSl7RFthXT1uZXcgQihhLDUsITEsYS50b0xvd2VyQ2FzZSgpLG51bGwsITEsITEpfSk7dmFyIG9hPS9bXFwtOl0oW2Etel0pL2c7ZnVuY3Rpb24gcGEoYSl7cmV0dXJuIGFbMV0udG9VcHBlckNhc2UoKX1cblwiYWNjZW50LWhlaWdodCBhbGlnbm1lbnQtYmFzZWxpbmUgYXJhYmljLWZvcm0gYmFzZWxpbmUtc2hpZnQgY2FwLWhlaWdodCBjbGlwLXBhdGggY2xpcC1ydWxlIGNvbG9yLWludGVycG9sYXRpb24gY29sb3ItaW50ZXJwb2xhdGlvbi1maWx0ZXJzIGNvbG9yLXByb2ZpbGUgY29sb3ItcmVuZGVyaW5nIGRvbWluYW50LWJhc2VsaW5lIGVuYWJsZS1iYWNrZ3JvdW5kIGZpbGwtb3BhY2l0eSBmaWxsLXJ1bGUgZmxvb2QtY29sb3IgZmxvb2Qtb3BhY2l0eSBmb250LWZhbWlseSBmb250LXNpemUgZm9udC1zaXplLWFkanVzdCBmb250LXN0cmV0Y2ggZm9udC1zdHlsZSBmb250LXZhcmlhbnQgZm9udC13ZWlnaHQgZ2x5cGgtbmFtZSBnbHlwaC1vcmllbnRhdGlvbi1ob3Jpem9udGFsIGdseXBoLW9yaWVudGF0aW9uLXZlcnRpY2FsIGhvcml6LWFkdi14IGhvcml6LW9yaWdpbi14IGltYWdlLXJlbmRlcmluZyBsZXR0ZXItc3BhY2luZyBsaWdodGluZy1jb2xvciBtYXJrZXItZW5kIG1hcmtlci1taWQgbWFya2VyLXN0YXJ0IG92ZXJsaW5lLXBvc2l0aW9uIG92ZXJsaW5lLXRoaWNrbmVzcyBwYWludC1vcmRlciBwYW5vc2UtMSBwb2ludGVyLWV2ZW50cyByZW5kZXJpbmctaW50ZW50IHNoYXBlLXJlbmRlcmluZyBzdG9wLWNvbG9yIHN0b3Atb3BhY2l0eSBzdHJpa2V0aHJvdWdoLXBvc2l0aW9uIHN0cmlrZXRocm91Z2gtdGhpY2tuZXNzIHN0cm9rZS1kYXNoYXJyYXkgc3Ryb2tlLWRhc2hvZmZzZXQgc3Ryb2tlLWxpbmVjYXAgc3Ryb2tlLWxpbmVqb2luIHN0cm9rZS1taXRlcmxpbWl0IHN0cm9rZS1vcGFjaXR5IHN0cm9rZS13aWR0aCB0ZXh0LWFuY2hvciB0ZXh0LWRlY29yYXRpb24gdGV4dC1yZW5kZXJpbmcgdW5kZXJsaW5lLXBvc2l0aW9uIHVuZGVybGluZS10aGlja25lc3MgdW5pY29kZS1iaWRpIHVuaWNvZGUtcmFuZ2UgdW5pdHMtcGVyLWVtIHYtYWxwaGFiZXRpYyB2LWhhbmdpbmcgdi1pZGVvZ3JhcGhpYyB2LW1hdGhlbWF0aWNhbCB2ZWN0b3ItZWZmZWN0IHZlcnQtYWR2LXkgdmVydC1vcmlnaW4teCB2ZXJ0LW9yaWdpbi15IHdvcmQtc3BhY2luZyB3cml0aW5nLW1vZGUgeG1sbnM6eGxpbmsgeC1oZWlnaHRcIi5zcGxpdChcIiBcIikuZm9yRWFjaChmdW5jdGlvbihhKXt2YXIgYj1hLnJlcGxhY2Uob2EsXG5wYSk7RFtiXT1uZXcgQihiLDEsITEsYSxudWxsLCExLCExKX0pO1wieGxpbms6YWN0dWF0ZSB4bGluazphcmNyb2xlIHhsaW5rOnJvbGUgeGxpbms6c2hvdyB4bGluazp0aXRsZSB4bGluazp0eXBlXCIuc3BsaXQoXCIgXCIpLmZvckVhY2goZnVuY3Rpb24oYSl7dmFyIGI9YS5yZXBsYWNlKG9hLHBhKTtEW2JdPW5ldyBCKGIsMSwhMSxhLFwiaHR0cDovL3d3dy53My5vcmcvMTk5OS94bGlua1wiLCExLCExKX0pO1tcInhtbDpiYXNlXCIsXCJ4bWw6bGFuZ1wiLFwieG1sOnNwYWNlXCJdLmZvckVhY2goZnVuY3Rpb24oYSl7dmFyIGI9YS5yZXBsYWNlKG9hLHBhKTtEW2JdPW5ldyBCKGIsMSwhMSxhLFwiaHR0cDovL3d3dy53My5vcmcvWE1MLzE5OTgvbmFtZXNwYWNlXCIsITEsITEpfSk7W1widGFiSW5kZXhcIixcImNyb3NzT3JpZ2luXCJdLmZvckVhY2goZnVuY3Rpb24oYSl7RFthXT1uZXcgQihhLDEsITEsYS50b0xvd2VyQ2FzZSgpLG51bGwsITEsITEpfSk7XG5ELnhsaW5rSHJlZj1uZXcgQihcInhsaW5rSHJlZlwiLDEsITEsXCJ4bGluazpocmVmXCIsXCJodHRwOi8vd3d3LnczLm9yZy8xOTk5L3hsaW5rXCIsITAsITEpO1tcInNyY1wiLFwiaHJlZlwiLFwiYWN0aW9uXCIsXCJmb3JtQWN0aW9uXCJdLmZvckVhY2goZnVuY3Rpb24oYSl7RFthXT1uZXcgQihhLDEsITEsYS50b0xvd2VyQ2FzZSgpLG51bGwsITAsITApfSk7XG5mdW5jdGlvbiBxYShhLGIsYyxkKXt2YXIgZT1ELmhhc093blByb3BlcnR5KGIpP0RbYl06bnVsbDt2YXIgZj1udWxsIT09ZT8wPT09ZS50eXBlOmQ/ITE6ISgyPGIubGVuZ3RoKXx8XCJvXCIhPT1iWzBdJiZcIk9cIiE9PWJbMF18fFwiblwiIT09YlsxXSYmXCJOXCIhPT1iWzFdPyExOiEwO2Z8fChuYShiLGMsZSxkKSYmKGM9bnVsbCksZHx8bnVsbD09PWU/bGEoYikmJihudWxsPT09Yz9hLnJlbW92ZUF0dHJpYnV0ZShiKTphLnNldEF0dHJpYnV0ZShiLFwiXCIrYykpOmUubXVzdFVzZVByb3BlcnR5P2FbZS5wcm9wZXJ0eU5hbWVdPW51bGw9PT1jPzM9PT1lLnR5cGU/ITE6XCJcIjpjOihiPWUuYXR0cmlidXRlTmFtZSxkPWUuYXR0cmlidXRlTmFtZXNwYWNlLG51bGw9PT1jP2EucmVtb3ZlQXR0cmlidXRlKGIpOihlPWUudHlwZSxjPTM9PT1lfHw0PT09ZSYmITA9PT1jP1wiXCI6XCJcIitjLGQ/YS5zZXRBdHRyaWJ1dGVOUyhkLGIsYyk6YS5zZXRBdHRyaWJ1dGUoYixjKSkpKX1cbnZhciByYT1hYS5fX1NFQ1JFVF9JTlRFUk5BTFNfRE9fTk9UX1VTRV9PUl9ZT1VfV0lMTF9CRV9GSVJFRCxzYT02MDEwMyx0YT02MDEwNix1YT02MDEwNyx3YT02MDEwOCx4YT02MDExNCx5YT02MDEwOSx6YT02MDExMCxBYT02MDExMixCYT02MDExMyxDYT02MDEyMCxEYT02MDExNSxFYT02MDExNixGYT02MDEyMSxHYT02MDEyOCxIYT02MDEyOSxJYT02MDEzMCxKYT02MDEzMTtcbmlmKFwiZnVuY3Rpb25cIj09PXR5cGVvZiBTeW1ib2wmJlN5bWJvbC5mb3Ipe3ZhciBFPVN5bWJvbC5mb3I7c2E9RShcInJlYWN0LmVsZW1lbnRcIik7dGE9RShcInJlYWN0LnBvcnRhbFwiKTt1YT1FKFwicmVhY3QuZnJhZ21lbnRcIik7d2E9RShcInJlYWN0LnN0cmljdF9tb2RlXCIpO3hhPUUoXCJyZWFjdC5wcm9maWxlclwiKTt5YT1FKFwicmVhY3QucHJvdmlkZXJcIik7emE9RShcInJlYWN0LmNvbnRleHRcIik7QWE9RShcInJlYWN0LmZvcndhcmRfcmVmXCIpO0JhPUUoXCJyZWFjdC5zdXNwZW5zZVwiKTtDYT1FKFwicmVhY3Quc3VzcGVuc2VfbGlzdFwiKTtEYT1FKFwicmVhY3QubWVtb1wiKTtFYT1FKFwicmVhY3QubGF6eVwiKTtGYT1FKFwicmVhY3QuYmxvY2tcIik7RShcInJlYWN0LnNjb3BlXCIpO0dhPUUoXCJyZWFjdC5vcGFxdWUuaWRcIik7SGE9RShcInJlYWN0LmRlYnVnX3RyYWNlX21vZGVcIik7SWE9RShcInJlYWN0Lm9mZnNjcmVlblwiKTtKYT1FKFwicmVhY3QubGVnYWN5X2hpZGRlblwiKX1cbnZhciBLYT1cImZ1bmN0aW9uXCI9PT10eXBlb2YgU3ltYm9sJiZTeW1ib2wuaXRlcmF0b3I7ZnVuY3Rpb24gTGEoYSl7aWYobnVsbD09PWF8fFwib2JqZWN0XCIhPT10eXBlb2YgYSlyZXR1cm4gbnVsbDthPUthJiZhW0thXXx8YVtcIkBAaXRlcmF0b3JcIl07cmV0dXJuXCJmdW5jdGlvblwiPT09dHlwZW9mIGE/YTpudWxsfXZhciBNYTtmdW5jdGlvbiBOYShhKXtpZih2b2lkIDA9PT1NYSl0cnl7dGhyb3cgRXJyb3IoKTt9Y2F0Y2goYyl7dmFyIGI9Yy5zdGFjay50cmltKCkubWF0Y2goL1xcbiggKihhdCApPykvKTtNYT1iJiZiWzFdfHxcIlwifXJldHVyblwiXFxuXCIrTWErYX12YXIgT2E9ITE7XG5mdW5jdGlvbiBQYShhLGIpe2lmKCFhfHxPYSlyZXR1cm5cIlwiO09hPSEwO3ZhciBjPUVycm9yLnByZXBhcmVTdGFja1RyYWNlO0Vycm9yLnByZXBhcmVTdGFja1RyYWNlPXZvaWQgMDt0cnl7aWYoYilpZihiPWZ1bmN0aW9uKCl7dGhyb3cgRXJyb3IoKTt9LE9iamVjdC5kZWZpbmVQcm9wZXJ0eShiLnByb3RvdHlwZSxcInByb3BzXCIse3NldDpmdW5jdGlvbigpe3Rocm93IEVycm9yKCk7fX0pLFwib2JqZWN0XCI9PT10eXBlb2YgUmVmbGVjdCYmUmVmbGVjdC5jb25zdHJ1Y3Qpe3RyeXtSZWZsZWN0LmNvbnN0cnVjdChiLFtdKX1jYXRjaChrKXt2YXIgZD1rfVJlZmxlY3QuY29uc3RydWN0KGEsW10sYil9ZWxzZXt0cnl7Yi5jYWxsKCl9Y2F0Y2goayl7ZD1rfWEuY2FsbChiLnByb3RvdHlwZSl9ZWxzZXt0cnl7dGhyb3cgRXJyb3IoKTt9Y2F0Y2goayl7ZD1rfWEoKX19Y2F0Y2goayl7aWYoayYmZCYmXCJzdHJpbmdcIj09PXR5cGVvZiBrLnN0YWNrKXtmb3IodmFyIGU9ay5zdGFjay5zcGxpdChcIlxcblwiKSxcbmY9ZC5zdGFjay5zcGxpdChcIlxcblwiKSxnPWUubGVuZ3RoLTEsaD1mLmxlbmd0aC0xOzE8PWcmJjA8PWgmJmVbZ10hPT1mW2hdOyloLS07Zm9yKDsxPD1nJiYwPD1oO2ctLSxoLS0paWYoZVtnXSE9PWZbaF0pe2lmKDEhPT1nfHwxIT09aCl7ZG8gaWYoZy0tLGgtLSwwPmh8fGVbZ10hPT1mW2hdKXJldHVyblwiXFxuXCIrZVtnXS5yZXBsYWNlKFwiIGF0IG5ldyBcIixcIiBhdCBcIik7d2hpbGUoMTw9ZyYmMDw9aCl9YnJlYWt9fX1maW5hbGx5e09hPSExLEVycm9yLnByZXBhcmVTdGFja1RyYWNlPWN9cmV0dXJuKGE9YT9hLmRpc3BsYXlOYW1lfHxhLm5hbWU6XCJcIik/TmEoYSk6XCJcIn1cbmZ1bmN0aW9uIFFhKGEpe3N3aXRjaChhLnRhZyl7Y2FzZSA1OnJldHVybiBOYShhLnR5cGUpO2Nhc2UgMTY6cmV0dXJuIE5hKFwiTGF6eVwiKTtjYXNlIDEzOnJldHVybiBOYShcIlN1c3BlbnNlXCIpO2Nhc2UgMTk6cmV0dXJuIE5hKFwiU3VzcGVuc2VMaXN0XCIpO2Nhc2UgMDpjYXNlIDI6Y2FzZSAxNTpyZXR1cm4gYT1QYShhLnR5cGUsITEpLGE7Y2FzZSAxMTpyZXR1cm4gYT1QYShhLnR5cGUucmVuZGVyLCExKSxhO2Nhc2UgMjI6cmV0dXJuIGE9UGEoYS50eXBlLl9yZW5kZXIsITEpLGE7Y2FzZSAxOnJldHVybiBhPVBhKGEudHlwZSwhMCksYTtkZWZhdWx0OnJldHVyblwiXCJ9fVxuZnVuY3Rpb24gUmEoYSl7aWYobnVsbD09YSlyZXR1cm4gbnVsbDtpZihcImZ1bmN0aW9uXCI9PT10eXBlb2YgYSlyZXR1cm4gYS5kaXNwbGF5TmFtZXx8YS5uYW1lfHxudWxsO2lmKFwic3RyaW5nXCI9PT10eXBlb2YgYSlyZXR1cm4gYTtzd2l0Y2goYSl7Y2FzZSB1YTpyZXR1cm5cIkZyYWdtZW50XCI7Y2FzZSB0YTpyZXR1cm5cIlBvcnRhbFwiO2Nhc2UgeGE6cmV0dXJuXCJQcm9maWxlclwiO2Nhc2Ugd2E6cmV0dXJuXCJTdHJpY3RNb2RlXCI7Y2FzZSBCYTpyZXR1cm5cIlN1c3BlbnNlXCI7Y2FzZSBDYTpyZXR1cm5cIlN1c3BlbnNlTGlzdFwifWlmKFwib2JqZWN0XCI9PT10eXBlb2YgYSlzd2l0Y2goYS4kJHR5cGVvZil7Y2FzZSB6YTpyZXR1cm4oYS5kaXNwbGF5TmFtZXx8XCJDb250ZXh0XCIpK1wiLkNvbnN1bWVyXCI7Y2FzZSB5YTpyZXR1cm4oYS5fY29udGV4dC5kaXNwbGF5TmFtZXx8XCJDb250ZXh0XCIpK1wiLlByb3ZpZGVyXCI7Y2FzZSBBYTp2YXIgYj1hLnJlbmRlcjtiPWIuZGlzcGxheU5hbWV8fGIubmFtZXx8XCJcIjtcbnJldHVybiBhLmRpc3BsYXlOYW1lfHwoXCJcIiE9PWI/XCJGb3J3YXJkUmVmKFwiK2IrXCIpXCI6XCJGb3J3YXJkUmVmXCIpO2Nhc2UgRGE6cmV0dXJuIFJhKGEudHlwZSk7Y2FzZSBGYTpyZXR1cm4gUmEoYS5fcmVuZGVyKTtjYXNlIEVhOmI9YS5fcGF5bG9hZDthPWEuX2luaXQ7dHJ5e3JldHVybiBSYShhKGIpKX1jYXRjaChjKXt9fXJldHVybiBudWxsfWZ1bmN0aW9uIFNhKGEpe3N3aXRjaCh0eXBlb2YgYSl7Y2FzZSBcImJvb2xlYW5cIjpjYXNlIFwibnVtYmVyXCI6Y2FzZSBcIm9iamVjdFwiOmNhc2UgXCJzdHJpbmdcIjpjYXNlIFwidW5kZWZpbmVkXCI6cmV0dXJuIGE7ZGVmYXVsdDpyZXR1cm5cIlwifX1mdW5jdGlvbiBUYShhKXt2YXIgYj1hLnR5cGU7cmV0dXJuKGE9YS5ub2RlTmFtZSkmJlwiaW5wdXRcIj09PWEudG9Mb3dlckNhc2UoKSYmKFwiY2hlY2tib3hcIj09PWJ8fFwicmFkaW9cIj09PWIpfVxuZnVuY3Rpb24gVWEoYSl7dmFyIGI9VGEoYSk/XCJjaGVja2VkXCI6XCJ2YWx1ZVwiLGM9T2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihhLmNvbnN0cnVjdG9yLnByb3RvdHlwZSxiKSxkPVwiXCIrYVtiXTtpZighYS5oYXNPd25Qcm9wZXJ0eShiKSYmXCJ1bmRlZmluZWRcIiE9PXR5cGVvZiBjJiZcImZ1bmN0aW9uXCI9PT10eXBlb2YgYy5nZXQmJlwiZnVuY3Rpb25cIj09PXR5cGVvZiBjLnNldCl7dmFyIGU9Yy5nZXQsZj1jLnNldDtPYmplY3QuZGVmaW5lUHJvcGVydHkoYSxiLHtjb25maWd1cmFibGU6ITAsZ2V0OmZ1bmN0aW9uKCl7cmV0dXJuIGUuY2FsbCh0aGlzKX0sc2V0OmZ1bmN0aW9uKGEpe2Q9XCJcIithO2YuY2FsbCh0aGlzLGEpfX0pO09iamVjdC5kZWZpbmVQcm9wZXJ0eShhLGIse2VudW1lcmFibGU6Yy5lbnVtZXJhYmxlfSk7cmV0dXJue2dldFZhbHVlOmZ1bmN0aW9uKCl7cmV0dXJuIGR9LHNldFZhbHVlOmZ1bmN0aW9uKGEpe2Q9XCJcIithfSxzdG9wVHJhY2tpbmc6ZnVuY3Rpb24oKXthLl92YWx1ZVRyYWNrZXI9XG5udWxsO2RlbGV0ZSBhW2JdfX19fWZ1bmN0aW9uIFZhKGEpe2EuX3ZhbHVlVHJhY2tlcnx8KGEuX3ZhbHVlVHJhY2tlcj1VYShhKSl9ZnVuY3Rpb24gV2EoYSl7aWYoIWEpcmV0dXJuITE7dmFyIGI9YS5fdmFsdWVUcmFja2VyO2lmKCFiKXJldHVybiEwO3ZhciBjPWIuZ2V0VmFsdWUoKTt2YXIgZD1cIlwiO2EmJihkPVRhKGEpP2EuY2hlY2tlZD9cInRydWVcIjpcImZhbHNlXCI6YS52YWx1ZSk7YT1kO3JldHVybiBhIT09Yz8oYi5zZXRWYWx1ZShhKSwhMCk6ITF9ZnVuY3Rpb24gWGEoYSl7YT1hfHwoXCJ1bmRlZmluZWRcIiE9PXR5cGVvZiBkb2N1bWVudD9kb2N1bWVudDp2b2lkIDApO2lmKFwidW5kZWZpbmVkXCI9PT10eXBlb2YgYSlyZXR1cm4gbnVsbDt0cnl7cmV0dXJuIGEuYWN0aXZlRWxlbWVudHx8YS5ib2R5fWNhdGNoKGIpe3JldHVybiBhLmJvZHl9fVxuZnVuY3Rpb24gWWEoYSxiKXt2YXIgYz1iLmNoZWNrZWQ7cmV0dXJuIG0oe30sYix7ZGVmYXVsdENoZWNrZWQ6dm9pZCAwLGRlZmF1bHRWYWx1ZTp2b2lkIDAsdmFsdWU6dm9pZCAwLGNoZWNrZWQ6bnVsbCE9Yz9jOmEuX3dyYXBwZXJTdGF0ZS5pbml0aWFsQ2hlY2tlZH0pfWZ1bmN0aW9uIFphKGEsYil7dmFyIGM9bnVsbD09Yi5kZWZhdWx0VmFsdWU/XCJcIjpiLmRlZmF1bHRWYWx1ZSxkPW51bGwhPWIuY2hlY2tlZD9iLmNoZWNrZWQ6Yi5kZWZhdWx0Q2hlY2tlZDtjPVNhKG51bGwhPWIudmFsdWU/Yi52YWx1ZTpjKTthLl93cmFwcGVyU3RhdGU9e2luaXRpYWxDaGVja2VkOmQsaW5pdGlhbFZhbHVlOmMsY29udHJvbGxlZDpcImNoZWNrYm94XCI9PT1iLnR5cGV8fFwicmFkaW9cIj09PWIudHlwZT9udWxsIT1iLmNoZWNrZWQ6bnVsbCE9Yi52YWx1ZX19ZnVuY3Rpb24gJGEoYSxiKXtiPWIuY2hlY2tlZDtudWxsIT1iJiZxYShhLFwiY2hlY2tlZFwiLGIsITEpfVxuZnVuY3Rpb24gYWIoYSxiKXskYShhLGIpO3ZhciBjPVNhKGIudmFsdWUpLGQ9Yi50eXBlO2lmKG51bGwhPWMpaWYoXCJudW1iZXJcIj09PWQpe2lmKDA9PT1jJiZcIlwiPT09YS52YWx1ZXx8YS52YWx1ZSE9YylhLnZhbHVlPVwiXCIrY31lbHNlIGEudmFsdWUhPT1cIlwiK2MmJihhLnZhbHVlPVwiXCIrYyk7ZWxzZSBpZihcInN1Ym1pdFwiPT09ZHx8XCJyZXNldFwiPT09ZCl7YS5yZW1vdmVBdHRyaWJ1dGUoXCJ2YWx1ZVwiKTtyZXR1cm59Yi5oYXNPd25Qcm9wZXJ0eShcInZhbHVlXCIpP2JiKGEsYi50eXBlLGMpOmIuaGFzT3duUHJvcGVydHkoXCJkZWZhdWx0VmFsdWVcIikmJmJiKGEsYi50eXBlLFNhKGIuZGVmYXVsdFZhbHVlKSk7bnVsbD09Yi5jaGVja2VkJiZudWxsIT1iLmRlZmF1bHRDaGVja2VkJiYoYS5kZWZhdWx0Q2hlY2tlZD0hIWIuZGVmYXVsdENoZWNrZWQpfVxuZnVuY3Rpb24gY2IoYSxiLGMpe2lmKGIuaGFzT3duUHJvcGVydHkoXCJ2YWx1ZVwiKXx8Yi5oYXNPd25Qcm9wZXJ0eShcImRlZmF1bHRWYWx1ZVwiKSl7dmFyIGQ9Yi50eXBlO2lmKCEoXCJzdWJtaXRcIiE9PWQmJlwicmVzZXRcIiE9PWR8fHZvaWQgMCE9PWIudmFsdWUmJm51bGwhPT1iLnZhbHVlKSlyZXR1cm47Yj1cIlwiK2EuX3dyYXBwZXJTdGF0ZS5pbml0aWFsVmFsdWU7Y3x8Yj09PWEudmFsdWV8fChhLnZhbHVlPWIpO2EuZGVmYXVsdFZhbHVlPWJ9Yz1hLm5hbWU7XCJcIiE9PWMmJihhLm5hbWU9XCJcIik7YS5kZWZhdWx0Q2hlY2tlZD0hIWEuX3dyYXBwZXJTdGF0ZS5pbml0aWFsQ2hlY2tlZDtcIlwiIT09YyYmKGEubmFtZT1jKX1cbmZ1bmN0aW9uIGJiKGEsYixjKXtpZihcIm51bWJlclwiIT09Ynx8WGEoYS5vd25lckRvY3VtZW50KSE9PWEpbnVsbD09Yz9hLmRlZmF1bHRWYWx1ZT1cIlwiK2EuX3dyYXBwZXJTdGF0ZS5pbml0aWFsVmFsdWU6YS5kZWZhdWx0VmFsdWUhPT1cIlwiK2MmJihhLmRlZmF1bHRWYWx1ZT1cIlwiK2MpfWZ1bmN0aW9uIGRiKGEpe3ZhciBiPVwiXCI7YWEuQ2hpbGRyZW4uZm9yRWFjaChhLGZ1bmN0aW9uKGEpe251bGwhPWEmJihiKz1hKX0pO3JldHVybiBifWZ1bmN0aW9uIGViKGEsYil7YT1tKHtjaGlsZHJlbjp2b2lkIDB9LGIpO2lmKGI9ZGIoYi5jaGlsZHJlbikpYS5jaGlsZHJlbj1iO3JldHVybiBhfVxuZnVuY3Rpb24gZmIoYSxiLGMsZCl7YT1hLm9wdGlvbnM7aWYoYil7Yj17fTtmb3IodmFyIGU9MDtlPGMubGVuZ3RoO2UrKyliW1wiJFwiK2NbZV1dPSEwO2ZvcihjPTA7YzxhLmxlbmd0aDtjKyspZT1iLmhhc093blByb3BlcnR5KFwiJFwiK2FbY10udmFsdWUpLGFbY10uc2VsZWN0ZWQhPT1lJiYoYVtjXS5zZWxlY3RlZD1lKSxlJiZkJiYoYVtjXS5kZWZhdWx0U2VsZWN0ZWQ9ITApfWVsc2V7Yz1cIlwiK1NhKGMpO2I9bnVsbDtmb3IoZT0wO2U8YS5sZW5ndGg7ZSsrKXtpZihhW2VdLnZhbHVlPT09Yyl7YVtlXS5zZWxlY3RlZD0hMDtkJiYoYVtlXS5kZWZhdWx0U2VsZWN0ZWQ9ITApO3JldHVybn1udWxsIT09Ynx8YVtlXS5kaXNhYmxlZHx8KGI9YVtlXSl9bnVsbCE9PWImJihiLnNlbGVjdGVkPSEwKX19XG5mdW5jdGlvbiBnYihhLGIpe2lmKG51bGwhPWIuZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUwpdGhyb3cgRXJyb3IoeSg5MSkpO3JldHVybiBtKHt9LGIse3ZhbHVlOnZvaWQgMCxkZWZhdWx0VmFsdWU6dm9pZCAwLGNoaWxkcmVuOlwiXCIrYS5fd3JhcHBlclN0YXRlLmluaXRpYWxWYWx1ZX0pfWZ1bmN0aW9uIGhiKGEsYil7dmFyIGM9Yi52YWx1ZTtpZihudWxsPT1jKXtjPWIuY2hpbGRyZW47Yj1iLmRlZmF1bHRWYWx1ZTtpZihudWxsIT1jKXtpZihudWxsIT1iKXRocm93IEVycm9yKHkoOTIpKTtpZihBcnJheS5pc0FycmF5KGMpKXtpZighKDE+PWMubGVuZ3RoKSl0aHJvdyBFcnJvcih5KDkzKSk7Yz1jWzBdfWI9Y31udWxsPT1iJiYoYj1cIlwiKTtjPWJ9YS5fd3JhcHBlclN0YXRlPXtpbml0aWFsVmFsdWU6U2EoYyl9fVxuZnVuY3Rpb24gaWIoYSxiKXt2YXIgYz1TYShiLnZhbHVlKSxkPVNhKGIuZGVmYXVsdFZhbHVlKTtudWxsIT1jJiYoYz1cIlwiK2MsYyE9PWEudmFsdWUmJihhLnZhbHVlPWMpLG51bGw9PWIuZGVmYXVsdFZhbHVlJiZhLmRlZmF1bHRWYWx1ZSE9PWMmJihhLmRlZmF1bHRWYWx1ZT1jKSk7bnVsbCE9ZCYmKGEuZGVmYXVsdFZhbHVlPVwiXCIrZCl9ZnVuY3Rpb24gamIoYSl7dmFyIGI9YS50ZXh0Q29udGVudDtiPT09YS5fd3JhcHBlclN0YXRlLmluaXRpYWxWYWx1ZSYmXCJcIiE9PWImJm51bGwhPT1iJiYoYS52YWx1ZT1iKX12YXIga2I9e2h0bWw6XCJodHRwOi8vd3d3LnczLm9yZy8xOTk5L3hodG1sXCIsbWF0aG1sOlwiaHR0cDovL3d3dy53My5vcmcvMTk5OC9NYXRoL01hdGhNTFwiLHN2ZzpcImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXCJ9O1xuZnVuY3Rpb24gbGIoYSl7c3dpdGNoKGEpe2Nhc2UgXCJzdmdcIjpyZXR1cm5cImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXCI7Y2FzZSBcIm1hdGhcIjpyZXR1cm5cImh0dHA6Ly93d3cudzMub3JnLzE5OTgvTWF0aC9NYXRoTUxcIjtkZWZhdWx0OnJldHVyblwiaHR0cDovL3d3dy53My5vcmcvMTk5OS94aHRtbFwifX1mdW5jdGlvbiBtYihhLGIpe3JldHVybiBudWxsPT1hfHxcImh0dHA6Ly93d3cudzMub3JnLzE5OTkveGh0bWxcIj09PWE/bGIoYik6XCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1wiPT09YSYmXCJmb3JlaWduT2JqZWN0XCI9PT1iP1wiaHR0cDovL3d3dy53My5vcmcvMTk5OS94aHRtbFwiOmF9XG52YXIgbmIsb2I9ZnVuY3Rpb24oYSl7cmV0dXJuXCJ1bmRlZmluZWRcIiE9PXR5cGVvZiBNU0FwcCYmTVNBcHAuZXhlY1Vuc2FmZUxvY2FsRnVuY3Rpb24/ZnVuY3Rpb24oYixjLGQsZSl7TVNBcHAuZXhlY1Vuc2FmZUxvY2FsRnVuY3Rpb24oZnVuY3Rpb24oKXtyZXR1cm4gYShiLGMsZCxlKX0pfTphfShmdW5jdGlvbihhLGIpe2lmKGEubmFtZXNwYWNlVVJJIT09a2Iuc3ZnfHxcImlubmVySFRNTFwiaW4gYSlhLmlubmVySFRNTD1iO2Vsc2V7bmI9bmJ8fGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7bmIuaW5uZXJIVE1MPVwiPHN2Zz5cIitiLnZhbHVlT2YoKS50b1N0cmluZygpK1wiPC9zdmc+XCI7Zm9yKGI9bmIuZmlyc3RDaGlsZDthLmZpcnN0Q2hpbGQ7KWEucmVtb3ZlQ2hpbGQoYS5maXJzdENoaWxkKTtmb3IoO2IuZmlyc3RDaGlsZDspYS5hcHBlbmRDaGlsZChiLmZpcnN0Q2hpbGQpfX0pO1xuZnVuY3Rpb24gcGIoYSxiKXtpZihiKXt2YXIgYz1hLmZpcnN0Q2hpbGQ7aWYoYyYmYz09PWEubGFzdENoaWxkJiYzPT09Yy5ub2RlVHlwZSl7Yy5ub2RlVmFsdWU9YjtyZXR1cm59fWEudGV4dENvbnRlbnQ9Yn1cbnZhciBxYj17YW5pbWF0aW9uSXRlcmF0aW9uQ291bnQ6ITAsYm9yZGVySW1hZ2VPdXRzZXQ6ITAsYm9yZGVySW1hZ2VTbGljZTohMCxib3JkZXJJbWFnZVdpZHRoOiEwLGJveEZsZXg6ITAsYm94RmxleEdyb3VwOiEwLGJveE9yZGluYWxHcm91cDohMCxjb2x1bW5Db3VudDohMCxjb2x1bW5zOiEwLGZsZXg6ITAsZmxleEdyb3c6ITAsZmxleFBvc2l0aXZlOiEwLGZsZXhTaHJpbms6ITAsZmxleE5lZ2F0aXZlOiEwLGZsZXhPcmRlcjohMCxncmlkQXJlYTohMCxncmlkUm93OiEwLGdyaWRSb3dFbmQ6ITAsZ3JpZFJvd1NwYW46ITAsZ3JpZFJvd1N0YXJ0OiEwLGdyaWRDb2x1bW46ITAsZ3JpZENvbHVtbkVuZDohMCxncmlkQ29sdW1uU3BhbjohMCxncmlkQ29sdW1uU3RhcnQ6ITAsZm9udFdlaWdodDohMCxsaW5lQ2xhbXA6ITAsbGluZUhlaWdodDohMCxvcGFjaXR5OiEwLG9yZGVyOiEwLG9ycGhhbnM6ITAsdGFiU2l6ZTohMCx3aWRvd3M6ITAsekluZGV4OiEwLHpvb206ITAsZmlsbE9wYWNpdHk6ITAsXG5mbG9vZE9wYWNpdHk6ITAsc3RvcE9wYWNpdHk6ITAsc3Ryb2tlRGFzaGFycmF5OiEwLHN0cm9rZURhc2hvZmZzZXQ6ITAsc3Ryb2tlTWl0ZXJsaW1pdDohMCxzdHJva2VPcGFjaXR5OiEwLHN0cm9rZVdpZHRoOiEwfSxyYj1bXCJXZWJraXRcIixcIm1zXCIsXCJNb3pcIixcIk9cIl07T2JqZWN0LmtleXMocWIpLmZvckVhY2goZnVuY3Rpb24oYSl7cmIuZm9yRWFjaChmdW5jdGlvbihiKXtiPWIrYS5jaGFyQXQoMCkudG9VcHBlckNhc2UoKSthLnN1YnN0cmluZygxKTtxYltiXT1xYlthXX0pfSk7ZnVuY3Rpb24gc2IoYSxiLGMpe3JldHVybiBudWxsPT1ifHxcImJvb2xlYW5cIj09PXR5cGVvZiBifHxcIlwiPT09Yj9cIlwiOmN8fFwibnVtYmVyXCIhPT10eXBlb2YgYnx8MD09PWJ8fHFiLmhhc093blByb3BlcnR5KGEpJiZxYlthXT8oXCJcIitiKS50cmltKCk6YitcInB4XCJ9XG5mdW5jdGlvbiB0YihhLGIpe2E9YS5zdHlsZTtmb3IodmFyIGMgaW4gYilpZihiLmhhc093blByb3BlcnR5KGMpKXt2YXIgZD0wPT09Yy5pbmRleE9mKFwiLS1cIiksZT1zYihjLGJbY10sZCk7XCJmbG9hdFwiPT09YyYmKGM9XCJjc3NGbG9hdFwiKTtkP2Euc2V0UHJvcGVydHkoYyxlKTphW2NdPWV9fXZhciB1Yj1tKHttZW51aXRlbTohMH0se2FyZWE6ITAsYmFzZTohMCxicjohMCxjb2w6ITAsZW1iZWQ6ITAsaHI6ITAsaW1nOiEwLGlucHV0OiEwLGtleWdlbjohMCxsaW5rOiEwLG1ldGE6ITAscGFyYW06ITAsc291cmNlOiEwLHRyYWNrOiEwLHdicjohMH0pO1xuZnVuY3Rpb24gdmIoYSxiKXtpZihiKXtpZih1YlthXSYmKG51bGwhPWIuY2hpbGRyZW58fG51bGwhPWIuZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUwpKXRocm93IEVycm9yKHkoMTM3LGEpKTtpZihudWxsIT1iLmRhbmdlcm91c2x5U2V0SW5uZXJIVE1MKXtpZihudWxsIT1iLmNoaWxkcmVuKXRocm93IEVycm9yKHkoNjApKTtpZighKFwib2JqZWN0XCI9PT10eXBlb2YgYi5kYW5nZXJvdXNseVNldElubmVySFRNTCYmXCJfX2h0bWxcImluIGIuZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUwpKXRocm93IEVycm9yKHkoNjEpKTt9aWYobnVsbCE9Yi5zdHlsZSYmXCJvYmplY3RcIiE9PXR5cGVvZiBiLnN0eWxlKXRocm93IEVycm9yKHkoNjIpKTt9fVxuZnVuY3Rpb24gd2IoYSxiKXtpZigtMT09PWEuaW5kZXhPZihcIi1cIikpcmV0dXJuXCJzdHJpbmdcIj09PXR5cGVvZiBiLmlzO3N3aXRjaChhKXtjYXNlIFwiYW5ub3RhdGlvbi14bWxcIjpjYXNlIFwiY29sb3ItcHJvZmlsZVwiOmNhc2UgXCJmb250LWZhY2VcIjpjYXNlIFwiZm9udC1mYWNlLXNyY1wiOmNhc2UgXCJmb250LWZhY2UtdXJpXCI6Y2FzZSBcImZvbnQtZmFjZS1mb3JtYXRcIjpjYXNlIFwiZm9udC1mYWNlLW5hbWVcIjpjYXNlIFwibWlzc2luZy1nbHlwaFwiOnJldHVybiExO2RlZmF1bHQ6cmV0dXJuITB9fWZ1bmN0aW9uIHhiKGEpe2E9YS50YXJnZXR8fGEuc3JjRWxlbWVudHx8d2luZG93O2EuY29ycmVzcG9uZGluZ1VzZUVsZW1lbnQmJihhPWEuY29ycmVzcG9uZGluZ1VzZUVsZW1lbnQpO3JldHVybiAzPT09YS5ub2RlVHlwZT9hLnBhcmVudE5vZGU6YX12YXIgeWI9bnVsbCx6Yj1udWxsLEFiPW51bGw7XG5mdW5jdGlvbiBCYihhKXtpZihhPUNiKGEpKXtpZihcImZ1bmN0aW9uXCIhPT10eXBlb2YgeWIpdGhyb3cgRXJyb3IoeSgyODApKTt2YXIgYj1hLnN0YXRlTm9kZTtiJiYoYj1EYihiKSx5YihhLnN0YXRlTm9kZSxhLnR5cGUsYikpfX1mdW5jdGlvbiBFYihhKXt6Yj9BYj9BYi5wdXNoKGEpOkFiPVthXTp6Yj1hfWZ1bmN0aW9uIEZiKCl7aWYoemIpe3ZhciBhPXpiLGI9QWI7QWI9emI9bnVsbDtCYihhKTtpZihiKWZvcihhPTA7YTxiLmxlbmd0aDthKyspQmIoYlthXSl9fWZ1bmN0aW9uIEdiKGEsYil7cmV0dXJuIGEoYil9ZnVuY3Rpb24gSGIoYSxiLGMsZCxlKXtyZXR1cm4gYShiLGMsZCxlKX1mdW5jdGlvbiBJYigpe312YXIgSmI9R2IsS2I9ITEsTGI9ITE7ZnVuY3Rpb24gTWIoKXtpZihudWxsIT09emJ8fG51bGwhPT1BYilJYigpLEZiKCl9XG5mdW5jdGlvbiBOYihhLGIsYyl7aWYoTGIpcmV0dXJuIGEoYixjKTtMYj0hMDt0cnl7cmV0dXJuIEpiKGEsYixjKX1maW5hbGx5e0xiPSExLE1iKCl9fVxuZnVuY3Rpb24gT2IoYSxiKXt2YXIgYz1hLnN0YXRlTm9kZTtpZihudWxsPT09YylyZXR1cm4gbnVsbDt2YXIgZD1EYihjKTtpZihudWxsPT09ZClyZXR1cm4gbnVsbDtjPWRbYl07YTpzd2l0Y2goYil7Y2FzZSBcIm9uQ2xpY2tcIjpjYXNlIFwib25DbGlja0NhcHR1cmVcIjpjYXNlIFwib25Eb3VibGVDbGlja1wiOmNhc2UgXCJvbkRvdWJsZUNsaWNrQ2FwdHVyZVwiOmNhc2UgXCJvbk1vdXNlRG93blwiOmNhc2UgXCJvbk1vdXNlRG93bkNhcHR1cmVcIjpjYXNlIFwib25Nb3VzZU1vdmVcIjpjYXNlIFwib25Nb3VzZU1vdmVDYXB0dXJlXCI6Y2FzZSBcIm9uTW91c2VVcFwiOmNhc2UgXCJvbk1vdXNlVXBDYXB0dXJlXCI6Y2FzZSBcIm9uTW91c2VFbnRlclwiOihkPSFkLmRpc2FibGVkKXx8KGE9YS50eXBlLGQ9IShcImJ1dHRvblwiPT09YXx8XCJpbnB1dFwiPT09YXx8XCJzZWxlY3RcIj09PWF8fFwidGV4dGFyZWFcIj09PWEpKTthPSFkO2JyZWFrIGE7ZGVmYXVsdDphPSExfWlmKGEpcmV0dXJuIG51bGw7aWYoYyYmXCJmdW5jdGlvblwiIT09XG50eXBlb2YgYyl0aHJvdyBFcnJvcih5KDIzMSxiLHR5cGVvZiBjKSk7cmV0dXJuIGN9dmFyIFBiPSExO2lmKGZhKXRyeXt2YXIgUWI9e307T2JqZWN0LmRlZmluZVByb3BlcnR5KFFiLFwicGFzc2l2ZVwiLHtnZXQ6ZnVuY3Rpb24oKXtQYj0hMH19KTt3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcihcInRlc3RcIixRYixRYik7d2luZG93LnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJ0ZXN0XCIsUWIsUWIpfWNhdGNoKGEpe1BiPSExfWZ1bmN0aW9uIFJiKGEsYixjLGQsZSxmLGcsaCxrKXt2YXIgbD1BcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChhcmd1bWVudHMsMyk7dHJ5e2IuYXBwbHkoYyxsKX1jYXRjaChuKXt0aGlzLm9uRXJyb3Iobil9fXZhciBTYj0hMSxUYj1udWxsLFViPSExLFZiPW51bGwsV2I9e29uRXJyb3I6ZnVuY3Rpb24oYSl7U2I9ITA7VGI9YX19O2Z1bmN0aW9uIFhiKGEsYixjLGQsZSxmLGcsaCxrKXtTYj0hMTtUYj1udWxsO1JiLmFwcGx5KFdiLGFyZ3VtZW50cyl9XG5mdW5jdGlvbiBZYihhLGIsYyxkLGUsZixnLGgsayl7WGIuYXBwbHkodGhpcyxhcmd1bWVudHMpO2lmKFNiKXtpZihTYil7dmFyIGw9VGI7U2I9ITE7VGI9bnVsbH1lbHNlIHRocm93IEVycm9yKHkoMTk4KSk7VWJ8fChVYj0hMCxWYj1sKX19ZnVuY3Rpb24gWmIoYSl7dmFyIGI9YSxjPWE7aWYoYS5hbHRlcm5hdGUpZm9yKDtiLnJldHVybjspYj1iLnJldHVybjtlbHNle2E9YjtkbyBiPWEsMCE9PShiLmZsYWdzJjEwMjYpJiYoYz1iLnJldHVybiksYT1iLnJldHVybjt3aGlsZShhKX1yZXR1cm4gMz09PWIudGFnP2M6bnVsbH1mdW5jdGlvbiAkYihhKXtpZigxMz09PWEudGFnKXt2YXIgYj1hLm1lbW9pemVkU3RhdGU7bnVsbD09PWImJihhPWEuYWx0ZXJuYXRlLG51bGwhPT1hJiYoYj1hLm1lbW9pemVkU3RhdGUpKTtpZihudWxsIT09YilyZXR1cm4gYi5kZWh5ZHJhdGVkfXJldHVybiBudWxsfWZ1bmN0aW9uIGFjKGEpe2lmKFpiKGEpIT09YSl0aHJvdyBFcnJvcih5KDE4OCkpO31cbmZ1bmN0aW9uIGJjKGEpe3ZhciBiPWEuYWx0ZXJuYXRlO2lmKCFiKXtiPVpiKGEpO2lmKG51bGw9PT1iKXRocm93IEVycm9yKHkoMTg4KSk7cmV0dXJuIGIhPT1hP251bGw6YX1mb3IodmFyIGM9YSxkPWI7Oyl7dmFyIGU9Yy5yZXR1cm47aWYobnVsbD09PWUpYnJlYWs7dmFyIGY9ZS5hbHRlcm5hdGU7aWYobnVsbD09PWYpe2Q9ZS5yZXR1cm47aWYobnVsbCE9PWQpe2M9ZDtjb250aW51ZX1icmVha31pZihlLmNoaWxkPT09Zi5jaGlsZCl7Zm9yKGY9ZS5jaGlsZDtmOyl7aWYoZj09PWMpcmV0dXJuIGFjKGUpLGE7aWYoZj09PWQpcmV0dXJuIGFjKGUpLGI7Zj1mLnNpYmxpbmd9dGhyb3cgRXJyb3IoeSgxODgpKTt9aWYoYy5yZXR1cm4hPT1kLnJldHVybiljPWUsZD1mO2Vsc2V7Zm9yKHZhciBnPSExLGg9ZS5jaGlsZDtoOyl7aWYoaD09PWMpe2c9ITA7Yz1lO2Q9ZjticmVha31pZihoPT09ZCl7Zz0hMDtkPWU7Yz1mO2JyZWFrfWg9aC5zaWJsaW5nfWlmKCFnKXtmb3IoaD1mLmNoaWxkO2g7KXtpZihoPT09XG5jKXtnPSEwO2M9ZjtkPWU7YnJlYWt9aWYoaD09PWQpe2c9ITA7ZD1mO2M9ZTticmVha31oPWguc2libGluZ31pZighZyl0aHJvdyBFcnJvcih5KDE4OSkpO319aWYoYy5hbHRlcm5hdGUhPT1kKXRocm93IEVycm9yKHkoMTkwKSk7fWlmKDMhPT1jLnRhZyl0aHJvdyBFcnJvcih5KDE4OCkpO3JldHVybiBjLnN0YXRlTm9kZS5jdXJyZW50PT09Yz9hOmJ9ZnVuY3Rpb24gY2MoYSl7YT1iYyhhKTtpZighYSlyZXR1cm4gbnVsbDtmb3IodmFyIGI9YTs7KXtpZig1PT09Yi50YWd8fDY9PT1iLnRhZylyZXR1cm4gYjtpZihiLmNoaWxkKWIuY2hpbGQucmV0dXJuPWIsYj1iLmNoaWxkO2Vsc2V7aWYoYj09PWEpYnJlYWs7Zm9yKDshYi5zaWJsaW5nOyl7aWYoIWIucmV0dXJufHxiLnJldHVybj09PWEpcmV0dXJuIG51bGw7Yj1iLnJldHVybn1iLnNpYmxpbmcucmV0dXJuPWIucmV0dXJuO2I9Yi5zaWJsaW5nfX1yZXR1cm4gbnVsbH1cbmZ1bmN0aW9uIGRjKGEsYil7Zm9yKHZhciBjPWEuYWx0ZXJuYXRlO251bGwhPT1iOyl7aWYoYj09PWF8fGI9PT1jKXJldHVybiEwO2I9Yi5yZXR1cm59cmV0dXJuITF9dmFyIGVjLGZjLGdjLGhjLGljPSExLGpjPVtdLGtjPW51bGwsbGM9bnVsbCxtYz1udWxsLG5jPW5ldyBNYXAsb2M9bmV3IE1hcCxwYz1bXSxxYz1cIm1vdXNlZG93biBtb3VzZXVwIHRvdWNoY2FuY2VsIHRvdWNoZW5kIHRvdWNoc3RhcnQgYXV4Y2xpY2sgZGJsY2xpY2sgcG9pbnRlcmNhbmNlbCBwb2ludGVyZG93biBwb2ludGVydXAgZHJhZ2VuZCBkcmFnc3RhcnQgZHJvcCBjb21wb3NpdGlvbmVuZCBjb21wb3NpdGlvbnN0YXJ0IGtleWRvd24ga2V5cHJlc3Mga2V5dXAgaW5wdXQgdGV4dElucHV0IGNvcHkgY3V0IHBhc3RlIGNsaWNrIGNoYW5nZSBjb250ZXh0bWVudSByZXNldCBzdWJtaXRcIi5zcGxpdChcIiBcIik7XG5mdW5jdGlvbiByYyhhLGIsYyxkLGUpe3JldHVybntibG9ja2VkT246YSxkb21FdmVudE5hbWU6YixldmVudFN5c3RlbUZsYWdzOmN8MTYsbmF0aXZlRXZlbnQ6ZSx0YXJnZXRDb250YWluZXJzOltkXX19ZnVuY3Rpb24gc2MoYSxiKXtzd2l0Y2goYSl7Y2FzZSBcImZvY3VzaW5cIjpjYXNlIFwiZm9jdXNvdXRcIjprYz1udWxsO2JyZWFrO2Nhc2UgXCJkcmFnZW50ZXJcIjpjYXNlIFwiZHJhZ2xlYXZlXCI6bGM9bnVsbDticmVhaztjYXNlIFwibW91c2VvdmVyXCI6Y2FzZSBcIm1vdXNlb3V0XCI6bWM9bnVsbDticmVhaztjYXNlIFwicG9pbnRlcm92ZXJcIjpjYXNlIFwicG9pbnRlcm91dFwiOm5jLmRlbGV0ZShiLnBvaW50ZXJJZCk7YnJlYWs7Y2FzZSBcImdvdHBvaW50ZXJjYXB0dXJlXCI6Y2FzZSBcImxvc3Rwb2ludGVyY2FwdHVyZVwiOm9jLmRlbGV0ZShiLnBvaW50ZXJJZCl9fVxuZnVuY3Rpb24gdGMoYSxiLGMsZCxlLGYpe2lmKG51bGw9PT1hfHxhLm5hdGl2ZUV2ZW50IT09ZilyZXR1cm4gYT1yYyhiLGMsZCxlLGYpLG51bGwhPT1iJiYoYj1DYihiKSxudWxsIT09YiYmZmMoYikpLGE7YS5ldmVudFN5c3RlbUZsYWdzfD1kO2I9YS50YXJnZXRDb250YWluZXJzO251bGwhPT1lJiYtMT09PWIuaW5kZXhPZihlKSYmYi5wdXNoKGUpO3JldHVybiBhfVxuZnVuY3Rpb24gdWMoYSxiLGMsZCxlKXtzd2l0Y2goYil7Y2FzZSBcImZvY3VzaW5cIjpyZXR1cm4ga2M9dGMoa2MsYSxiLGMsZCxlKSwhMDtjYXNlIFwiZHJhZ2VudGVyXCI6cmV0dXJuIGxjPXRjKGxjLGEsYixjLGQsZSksITA7Y2FzZSBcIm1vdXNlb3ZlclwiOnJldHVybiBtYz10YyhtYyxhLGIsYyxkLGUpLCEwO2Nhc2UgXCJwb2ludGVyb3ZlclwiOnZhciBmPWUucG9pbnRlcklkO25jLnNldChmLHRjKG5jLmdldChmKXx8bnVsbCxhLGIsYyxkLGUpKTtyZXR1cm4hMDtjYXNlIFwiZ290cG9pbnRlcmNhcHR1cmVcIjpyZXR1cm4gZj1lLnBvaW50ZXJJZCxvYy5zZXQoZix0YyhvYy5nZXQoZil8fG51bGwsYSxiLGMsZCxlKSksITB9cmV0dXJuITF9XG5mdW5jdGlvbiB2YyhhKXt2YXIgYj13YyhhLnRhcmdldCk7aWYobnVsbCE9PWIpe3ZhciBjPVpiKGIpO2lmKG51bGwhPT1jKWlmKGI9Yy50YWcsMTM9PT1iKXtpZihiPSRiKGMpLG51bGwhPT1iKXthLmJsb2NrZWRPbj1iO2hjKGEubGFuZVByaW9yaXR5LGZ1bmN0aW9uKCl7ci51bnN0YWJsZV9ydW5XaXRoUHJpb3JpdHkoYS5wcmlvcml0eSxmdW5jdGlvbigpe2djKGMpfSl9KTtyZXR1cm59fWVsc2UgaWYoMz09PWImJmMuc3RhdGVOb2RlLmh5ZHJhdGUpe2EuYmxvY2tlZE9uPTM9PT1jLnRhZz9jLnN0YXRlTm9kZS5jb250YWluZXJJbmZvOm51bGw7cmV0dXJufX1hLmJsb2NrZWRPbj1udWxsfVxuZnVuY3Rpb24geGMoYSl7aWYobnVsbCE9PWEuYmxvY2tlZE9uKXJldHVybiExO2Zvcih2YXIgYj1hLnRhcmdldENvbnRhaW5lcnM7MDxiLmxlbmd0aDspe3ZhciBjPXljKGEuZG9tRXZlbnROYW1lLGEuZXZlbnRTeXN0ZW1GbGFncyxiWzBdLGEubmF0aXZlRXZlbnQpO2lmKG51bGwhPT1jKXJldHVybiBiPUNiKGMpLG51bGwhPT1iJiZmYyhiKSxhLmJsb2NrZWRPbj1jLCExO2Iuc2hpZnQoKX1yZXR1cm4hMH1mdW5jdGlvbiB6YyhhLGIsYyl7eGMoYSkmJmMuZGVsZXRlKGIpfVxuZnVuY3Rpb24gQWMoKXtmb3IoaWM9ITE7MDxqYy5sZW5ndGg7KXt2YXIgYT1qY1swXTtpZihudWxsIT09YS5ibG9ja2VkT24pe2E9Q2IoYS5ibG9ja2VkT24pO251bGwhPT1hJiZlYyhhKTticmVha31mb3IodmFyIGI9YS50YXJnZXRDb250YWluZXJzOzA8Yi5sZW5ndGg7KXt2YXIgYz15YyhhLmRvbUV2ZW50TmFtZSxhLmV2ZW50U3lzdGVtRmxhZ3MsYlswXSxhLm5hdGl2ZUV2ZW50KTtpZihudWxsIT09Yyl7YS5ibG9ja2VkT249YzticmVha31iLnNoaWZ0KCl9bnVsbD09PWEuYmxvY2tlZE9uJiZqYy5zaGlmdCgpfW51bGwhPT1rYyYmeGMoa2MpJiYoa2M9bnVsbCk7bnVsbCE9PWxjJiZ4YyhsYykmJihsYz1udWxsKTtudWxsIT09bWMmJnhjKG1jKSYmKG1jPW51bGwpO25jLmZvckVhY2goemMpO29jLmZvckVhY2goemMpfVxuZnVuY3Rpb24gQmMoYSxiKXthLmJsb2NrZWRPbj09PWImJihhLmJsb2NrZWRPbj1udWxsLGljfHwoaWM9ITAsci51bnN0YWJsZV9zY2hlZHVsZUNhbGxiYWNrKHIudW5zdGFibGVfTm9ybWFsUHJpb3JpdHksQWMpKSl9XG5mdW5jdGlvbiBDYyhhKXtmdW5jdGlvbiBiKGIpe3JldHVybiBCYyhiLGEpfWlmKDA8amMubGVuZ3RoKXtCYyhqY1swXSxhKTtmb3IodmFyIGM9MTtjPGpjLmxlbmd0aDtjKyspe3ZhciBkPWpjW2NdO2QuYmxvY2tlZE9uPT09YSYmKGQuYmxvY2tlZE9uPW51bGwpfX1udWxsIT09a2MmJkJjKGtjLGEpO251bGwhPT1sYyYmQmMobGMsYSk7bnVsbCE9PW1jJiZCYyhtYyxhKTtuYy5mb3JFYWNoKGIpO29jLmZvckVhY2goYik7Zm9yKGM9MDtjPHBjLmxlbmd0aDtjKyspZD1wY1tjXSxkLmJsb2NrZWRPbj09PWEmJihkLmJsb2NrZWRPbj1udWxsKTtmb3IoOzA8cGMubGVuZ3RoJiYoYz1wY1swXSxudWxsPT09Yy5ibG9ja2VkT24pOyl2YyhjKSxudWxsPT09Yy5ibG9ja2VkT24mJnBjLnNoaWZ0KCl9XG5mdW5jdGlvbiBEYyhhLGIpe3ZhciBjPXt9O2NbYS50b0xvd2VyQ2FzZSgpXT1iLnRvTG93ZXJDYXNlKCk7Y1tcIldlYmtpdFwiK2FdPVwid2Via2l0XCIrYjtjW1wiTW96XCIrYV09XCJtb3pcIitiO3JldHVybiBjfXZhciBFYz17YW5pbWF0aW9uZW5kOkRjKFwiQW5pbWF0aW9uXCIsXCJBbmltYXRpb25FbmRcIiksYW5pbWF0aW9uaXRlcmF0aW9uOkRjKFwiQW5pbWF0aW9uXCIsXCJBbmltYXRpb25JdGVyYXRpb25cIiksYW5pbWF0aW9uc3RhcnQ6RGMoXCJBbmltYXRpb25cIixcIkFuaW1hdGlvblN0YXJ0XCIpLHRyYW5zaXRpb25lbmQ6RGMoXCJUcmFuc2l0aW9uXCIsXCJUcmFuc2l0aW9uRW5kXCIpfSxGYz17fSxHYz17fTtcbmZhJiYoR2M9ZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKS5zdHlsZSxcIkFuaW1hdGlvbkV2ZW50XCJpbiB3aW5kb3d8fChkZWxldGUgRWMuYW5pbWF0aW9uZW5kLmFuaW1hdGlvbixkZWxldGUgRWMuYW5pbWF0aW9uaXRlcmF0aW9uLmFuaW1hdGlvbixkZWxldGUgRWMuYW5pbWF0aW9uc3RhcnQuYW5pbWF0aW9uKSxcIlRyYW5zaXRpb25FdmVudFwiaW4gd2luZG93fHxkZWxldGUgRWMudHJhbnNpdGlvbmVuZC50cmFuc2l0aW9uKTtmdW5jdGlvbiBIYyhhKXtpZihGY1thXSlyZXR1cm4gRmNbYV07aWYoIUVjW2FdKXJldHVybiBhO3ZhciBiPUVjW2FdLGM7Zm9yKGMgaW4gYilpZihiLmhhc093blByb3BlcnR5KGMpJiZjIGluIEdjKXJldHVybiBGY1thXT1iW2NdO3JldHVybiBhfVxudmFyIEljPUhjKFwiYW5pbWF0aW9uZW5kXCIpLEpjPUhjKFwiYW5pbWF0aW9uaXRlcmF0aW9uXCIpLEtjPUhjKFwiYW5pbWF0aW9uc3RhcnRcIiksTGM9SGMoXCJ0cmFuc2l0aW9uZW5kXCIpLE1jPW5ldyBNYXAsTmM9bmV3IE1hcCxPYz1bXCJhYm9ydFwiLFwiYWJvcnRcIixJYyxcImFuaW1hdGlvbkVuZFwiLEpjLFwiYW5pbWF0aW9uSXRlcmF0aW9uXCIsS2MsXCJhbmltYXRpb25TdGFydFwiLFwiY2FucGxheVwiLFwiY2FuUGxheVwiLFwiY2FucGxheXRocm91Z2hcIixcImNhblBsYXlUaHJvdWdoXCIsXCJkdXJhdGlvbmNoYW5nZVwiLFwiZHVyYXRpb25DaGFuZ2VcIixcImVtcHRpZWRcIixcImVtcHRpZWRcIixcImVuY3J5cHRlZFwiLFwiZW5jcnlwdGVkXCIsXCJlbmRlZFwiLFwiZW5kZWRcIixcImVycm9yXCIsXCJlcnJvclwiLFwiZ290cG9pbnRlcmNhcHR1cmVcIixcImdvdFBvaW50ZXJDYXB0dXJlXCIsXCJsb2FkXCIsXCJsb2FkXCIsXCJsb2FkZWRkYXRhXCIsXCJsb2FkZWREYXRhXCIsXCJsb2FkZWRtZXRhZGF0YVwiLFwibG9hZGVkTWV0YWRhdGFcIixcImxvYWRzdGFydFwiLFwibG9hZFN0YXJ0XCIsXG5cImxvc3Rwb2ludGVyY2FwdHVyZVwiLFwibG9zdFBvaW50ZXJDYXB0dXJlXCIsXCJwbGF5aW5nXCIsXCJwbGF5aW5nXCIsXCJwcm9ncmVzc1wiLFwicHJvZ3Jlc3NcIixcInNlZWtpbmdcIixcInNlZWtpbmdcIixcInN0YWxsZWRcIixcInN0YWxsZWRcIixcInN1c3BlbmRcIixcInN1c3BlbmRcIixcInRpbWV1cGRhdGVcIixcInRpbWVVcGRhdGVcIixMYyxcInRyYW5zaXRpb25FbmRcIixcIndhaXRpbmdcIixcIndhaXRpbmdcIl07ZnVuY3Rpb24gUGMoYSxiKXtmb3IodmFyIGM9MDtjPGEubGVuZ3RoO2MrPTIpe3ZhciBkPWFbY10sZT1hW2MrMV07ZT1cIm9uXCIrKGVbMF0udG9VcHBlckNhc2UoKStlLnNsaWNlKDEpKTtOYy5zZXQoZCxiKTtNYy5zZXQoZCxlKTtkYShlLFtkXSl9fXZhciBRYz1yLnVuc3RhYmxlX25vdztRYygpO3ZhciBGPTg7XG5mdW5jdGlvbiBSYyhhKXtpZigwIT09KDEmYSkpcmV0dXJuIEY9MTUsMTtpZigwIT09KDImYSkpcmV0dXJuIEY9MTQsMjtpZigwIT09KDQmYSkpcmV0dXJuIEY9MTMsNDt2YXIgYj0yNCZhO2lmKDAhPT1iKXJldHVybiBGPTEyLGI7aWYoMCE9PShhJjMyKSlyZXR1cm4gRj0xMSwzMjtiPTE5MiZhO2lmKDAhPT1iKXJldHVybiBGPTEwLGI7aWYoMCE9PShhJjI1NikpcmV0dXJuIEY9OSwyNTY7Yj0zNTg0JmE7aWYoMCE9PWIpcmV0dXJuIEY9OCxiO2lmKDAhPT0oYSY0MDk2KSlyZXR1cm4gRj03LDQwOTY7Yj00MTg2MTEyJmE7aWYoMCE9PWIpcmV0dXJuIEY9NixiO2I9NjI5MTQ1NjAmYTtpZigwIT09YilyZXR1cm4gRj01LGI7aWYoYSY2NzEwODg2NClyZXR1cm4gRj00LDY3MTA4ODY0O2lmKDAhPT0oYSYxMzQyMTc3MjgpKXJldHVybiBGPTMsMTM0MjE3NzI4O2I9ODA1MzA2MzY4JmE7aWYoMCE9PWIpcmV0dXJuIEY9MixiO2lmKDAhPT0oMTA3Mzc0MTgyNCZhKSlyZXR1cm4gRj0xLDEwNzM3NDE4MjQ7XG5GPTg7cmV0dXJuIGF9ZnVuY3Rpb24gU2MoYSl7c3dpdGNoKGEpe2Nhc2UgOTk6cmV0dXJuIDE1O2Nhc2UgOTg6cmV0dXJuIDEwO2Nhc2UgOTc6Y2FzZSA5NjpyZXR1cm4gODtjYXNlIDk1OnJldHVybiAyO2RlZmF1bHQ6cmV0dXJuIDB9fWZ1bmN0aW9uIFRjKGEpe3N3aXRjaChhKXtjYXNlIDE1OmNhc2UgMTQ6cmV0dXJuIDk5O2Nhc2UgMTM6Y2FzZSAxMjpjYXNlIDExOmNhc2UgMTA6cmV0dXJuIDk4O2Nhc2UgOTpjYXNlIDg6Y2FzZSA3OmNhc2UgNjpjYXNlIDQ6Y2FzZSA1OnJldHVybiA5NztjYXNlIDM6Y2FzZSAyOmNhc2UgMTpyZXR1cm4gOTU7Y2FzZSAwOnJldHVybiA5MDtkZWZhdWx0OnRocm93IEVycm9yKHkoMzU4LGEpKTt9fVxuZnVuY3Rpb24gVWMoYSxiKXt2YXIgYz1hLnBlbmRpbmdMYW5lcztpZigwPT09YylyZXR1cm4gRj0wO3ZhciBkPTAsZT0wLGY9YS5leHBpcmVkTGFuZXMsZz1hLnN1c3BlbmRlZExhbmVzLGg9YS5waW5nZWRMYW5lcztpZigwIT09ZilkPWYsZT1GPTE1O2Vsc2UgaWYoZj1jJjEzNDIxNzcyNywwIT09Zil7dmFyIGs9ZiZ+ZzswIT09az8oZD1SYyhrKSxlPUYpOihoJj1mLDAhPT1oJiYoZD1SYyhoKSxlPUYpKX1lbHNlIGY9YyZ+ZywwIT09Zj8oZD1SYyhmKSxlPUYpOjAhPT1oJiYoZD1SYyhoKSxlPUYpO2lmKDA9PT1kKXJldHVybiAwO2Q9MzEtVmMoZCk7ZD1jJigoMD5kPzA6MTw8ZCk8PDEpLTE7aWYoMCE9PWImJmIhPT1kJiYwPT09KGImZykpe1JjKGIpO2lmKGU8PUYpcmV0dXJuIGI7Rj1lfWI9YS5lbnRhbmdsZWRMYW5lcztpZigwIT09Yilmb3IoYT1hLmVudGFuZ2xlbWVudHMsYiY9ZDswPGI7KWM9MzEtVmMoYiksZT0xPDxjLGR8PWFbY10sYiY9fmU7cmV0dXJuIGR9XG5mdW5jdGlvbiBXYyhhKXthPWEucGVuZGluZ0xhbmVzJi0xMDczNzQxODI1O3JldHVybiAwIT09YT9hOmEmMTA3Mzc0MTgyND8xMDczNzQxODI0OjB9ZnVuY3Rpb24gWGMoYSxiKXtzd2l0Y2goYSl7Y2FzZSAxNTpyZXR1cm4gMTtjYXNlIDE0OnJldHVybiAyO2Nhc2UgMTI6cmV0dXJuIGE9WWMoMjQmfmIpLDA9PT1hP1hjKDEwLGIpOmE7Y2FzZSAxMDpyZXR1cm4gYT1ZYygxOTImfmIpLDA9PT1hP1hjKDgsYik6YTtjYXNlIDg6cmV0dXJuIGE9WWMoMzU4NCZ+YiksMD09PWEmJihhPVljKDQxODYxMTImfmIpLDA9PT1hJiYoYT01MTIpKSxhO2Nhc2UgMjpyZXR1cm4gYj1ZYyg4MDUzMDYzNjgmfmIpLDA9PT1iJiYoYj0yNjg0MzU0NTYpLGJ9dGhyb3cgRXJyb3IoeSgzNTgsYSkpO31mdW5jdGlvbiBZYyhhKXtyZXR1cm4gYSYtYX1mdW5jdGlvbiBaYyhhKXtmb3IodmFyIGI9W10sYz0wOzMxPmM7YysrKWIucHVzaChhKTtyZXR1cm4gYn1cbmZ1bmN0aW9uICRjKGEsYixjKXthLnBlbmRpbmdMYW5lc3w9Yjt2YXIgZD1iLTE7YS5zdXNwZW5kZWRMYW5lcyY9ZDthLnBpbmdlZExhbmVzJj1kO2E9YS5ldmVudFRpbWVzO2I9MzEtVmMoYik7YVtiXT1jfXZhciBWYz1NYXRoLmNsejMyP01hdGguY2x6MzI6YWQsYmQ9TWF0aC5sb2csY2Q9TWF0aC5MTjI7ZnVuY3Rpb24gYWQoYSl7cmV0dXJuIDA9PT1hPzMyOjMxLShiZChhKS9jZHwwKXwwfXZhciBkZD1yLnVuc3RhYmxlX1VzZXJCbG9ja2luZ1ByaW9yaXR5LGVkPXIudW5zdGFibGVfcnVuV2l0aFByaW9yaXR5LGZkPSEwO2Z1bmN0aW9uIGdkKGEsYixjLGQpe0tifHxJYigpO3ZhciBlPWhkLGY9S2I7S2I9ITA7dHJ5e0hiKGUsYSxiLGMsZCl9ZmluYWxseXsoS2I9Zil8fE1iKCl9fWZ1bmN0aW9uIGlkKGEsYixjLGQpe2VkKGRkLGhkLmJpbmQobnVsbCxhLGIsYyxkKSl9XG5mdW5jdGlvbiBoZChhLGIsYyxkKXtpZihmZCl7dmFyIGU7aWYoKGU9MD09PShiJjQpKSYmMDxqYy5sZW5ndGgmJi0xPHFjLmluZGV4T2YoYSkpYT1yYyhudWxsLGEsYixjLGQpLGpjLnB1c2goYSk7ZWxzZXt2YXIgZj15YyhhLGIsYyxkKTtpZihudWxsPT09ZillJiZzYyhhLGQpO2Vsc2V7aWYoZSl7aWYoLTE8cWMuaW5kZXhPZihhKSl7YT1yYyhmLGEsYixjLGQpO2pjLnB1c2goYSk7cmV0dXJufWlmKHVjKGYsYSxiLGMsZCkpcmV0dXJuO3NjKGEsZCl9amQoYSxiLGQsbnVsbCxjKX19fX1cbmZ1bmN0aW9uIHljKGEsYixjLGQpe3ZhciBlPXhiKGQpO2U9d2MoZSk7aWYobnVsbCE9PWUpe3ZhciBmPVpiKGUpO2lmKG51bGw9PT1mKWU9bnVsbDtlbHNle3ZhciBnPWYudGFnO2lmKDEzPT09Zyl7ZT0kYihmKTtpZihudWxsIT09ZSlyZXR1cm4gZTtlPW51bGx9ZWxzZSBpZigzPT09Zyl7aWYoZi5zdGF0ZU5vZGUuaHlkcmF0ZSlyZXR1cm4gMz09PWYudGFnP2Yuc3RhdGVOb2RlLmNvbnRhaW5lckluZm86bnVsbDtlPW51bGx9ZWxzZSBmIT09ZSYmKGU9bnVsbCl9fWpkKGEsYixkLGUsYyk7cmV0dXJuIG51bGx9dmFyIGtkPW51bGwsbGQ9bnVsbCxtZD1udWxsO1xuZnVuY3Rpb24gbmQoKXtpZihtZClyZXR1cm4gbWQ7dmFyIGEsYj1sZCxjPWIubGVuZ3RoLGQsZT1cInZhbHVlXCJpbiBrZD9rZC52YWx1ZTprZC50ZXh0Q29udGVudCxmPWUubGVuZ3RoO2ZvcihhPTA7YTxjJiZiW2FdPT09ZVthXTthKyspO3ZhciBnPWMtYTtmb3IoZD0xO2Q8PWcmJmJbYy1kXT09PWVbZi1kXTtkKyspO3JldHVybiBtZD1lLnNsaWNlKGEsMTxkPzEtZDp2b2lkIDApfWZ1bmN0aW9uIG9kKGEpe3ZhciBiPWEua2V5Q29kZTtcImNoYXJDb2RlXCJpbiBhPyhhPWEuY2hhckNvZGUsMD09PWEmJjEzPT09YiYmKGE9MTMpKTphPWI7MTA9PT1hJiYoYT0xMyk7cmV0dXJuIDMyPD1hfHwxMz09PWE/YTowfWZ1bmN0aW9uIHBkKCl7cmV0dXJuITB9ZnVuY3Rpb24gcWQoKXtyZXR1cm4hMX1cbmZ1bmN0aW9uIHJkKGEpe2Z1bmN0aW9uIGIoYixkLGUsZixnKXt0aGlzLl9yZWFjdE5hbWU9Yjt0aGlzLl90YXJnZXRJbnN0PWU7dGhpcy50eXBlPWQ7dGhpcy5uYXRpdmVFdmVudD1mO3RoaXMudGFyZ2V0PWc7dGhpcy5jdXJyZW50VGFyZ2V0PW51bGw7Zm9yKHZhciBjIGluIGEpYS5oYXNPd25Qcm9wZXJ0eShjKSYmKGI9YVtjXSx0aGlzW2NdPWI/YihmKTpmW2NdKTt0aGlzLmlzRGVmYXVsdFByZXZlbnRlZD0obnVsbCE9Zi5kZWZhdWx0UHJldmVudGVkP2YuZGVmYXVsdFByZXZlbnRlZDohMT09PWYucmV0dXJuVmFsdWUpP3BkOnFkO3RoaXMuaXNQcm9wYWdhdGlvblN0b3BwZWQ9cWQ7cmV0dXJuIHRoaXN9bShiLnByb3RvdHlwZSx7cHJldmVudERlZmF1bHQ6ZnVuY3Rpb24oKXt0aGlzLmRlZmF1bHRQcmV2ZW50ZWQ9ITA7dmFyIGE9dGhpcy5uYXRpdmVFdmVudDthJiYoYS5wcmV2ZW50RGVmYXVsdD9hLnByZXZlbnREZWZhdWx0KCk6XCJ1bmtub3duXCIhPT10eXBlb2YgYS5yZXR1cm5WYWx1ZSYmXG4oYS5yZXR1cm5WYWx1ZT0hMSksdGhpcy5pc0RlZmF1bHRQcmV2ZW50ZWQ9cGQpfSxzdG9wUHJvcGFnYXRpb246ZnVuY3Rpb24oKXt2YXIgYT10aGlzLm5hdGl2ZUV2ZW50O2EmJihhLnN0b3BQcm9wYWdhdGlvbj9hLnN0b3BQcm9wYWdhdGlvbigpOlwidW5rbm93blwiIT09dHlwZW9mIGEuY2FuY2VsQnViYmxlJiYoYS5jYW5jZWxCdWJibGU9ITApLHRoaXMuaXNQcm9wYWdhdGlvblN0b3BwZWQ9cGQpfSxwZXJzaXN0OmZ1bmN0aW9uKCl7fSxpc1BlcnNpc3RlbnQ6cGR9KTtyZXR1cm4gYn1cbnZhciBzZD17ZXZlbnRQaGFzZTowLGJ1YmJsZXM6MCxjYW5jZWxhYmxlOjAsdGltZVN0YW1wOmZ1bmN0aW9uKGEpe3JldHVybiBhLnRpbWVTdGFtcHx8RGF0ZS5ub3coKX0sZGVmYXVsdFByZXZlbnRlZDowLGlzVHJ1c3RlZDowfSx0ZD1yZChzZCksdWQ9bSh7fSxzZCx7dmlldzowLGRldGFpbDowfSksdmQ9cmQodWQpLHdkLHhkLHlkLEFkPW0oe30sdWQse3NjcmVlblg6MCxzY3JlZW5ZOjAsY2xpZW50WDowLGNsaWVudFk6MCxwYWdlWDowLHBhZ2VZOjAsY3RybEtleTowLHNoaWZ0S2V5OjAsYWx0S2V5OjAsbWV0YUtleTowLGdldE1vZGlmaWVyU3RhdGU6emQsYnV0dG9uOjAsYnV0dG9uczowLHJlbGF0ZWRUYXJnZXQ6ZnVuY3Rpb24oYSl7cmV0dXJuIHZvaWQgMD09PWEucmVsYXRlZFRhcmdldD9hLmZyb21FbGVtZW50PT09YS5zcmNFbGVtZW50P2EudG9FbGVtZW50OmEuZnJvbUVsZW1lbnQ6YS5yZWxhdGVkVGFyZ2V0fSxtb3ZlbWVudFg6ZnVuY3Rpb24oYSl7aWYoXCJtb3ZlbWVudFhcImluXG5hKXJldHVybiBhLm1vdmVtZW50WDthIT09eWQmJih5ZCYmXCJtb3VzZW1vdmVcIj09PWEudHlwZT8od2Q9YS5zY3JlZW5YLXlkLnNjcmVlblgseGQ9YS5zY3JlZW5ZLXlkLnNjcmVlblkpOnhkPXdkPTAseWQ9YSk7cmV0dXJuIHdkfSxtb3ZlbWVudFk6ZnVuY3Rpb24oYSl7cmV0dXJuXCJtb3ZlbWVudFlcImluIGE/YS5tb3ZlbWVudFk6eGR9fSksQmQ9cmQoQWQpLENkPW0oe30sQWQse2RhdGFUcmFuc2ZlcjowfSksRGQ9cmQoQ2QpLEVkPW0oe30sdWQse3JlbGF0ZWRUYXJnZXQ6MH0pLEZkPXJkKEVkKSxHZD1tKHt9LHNkLHthbmltYXRpb25OYW1lOjAsZWxhcHNlZFRpbWU6MCxwc2V1ZG9FbGVtZW50OjB9KSxIZD1yZChHZCksSWQ9bSh7fSxzZCx7Y2xpcGJvYXJkRGF0YTpmdW5jdGlvbihhKXtyZXR1cm5cImNsaXBib2FyZERhdGFcImluIGE/YS5jbGlwYm9hcmREYXRhOndpbmRvdy5jbGlwYm9hcmREYXRhfX0pLEpkPXJkKElkKSxLZD1tKHt9LHNkLHtkYXRhOjB9KSxMZD1yZChLZCksTWQ9e0VzYzpcIkVzY2FwZVwiLFxuU3BhY2ViYXI6XCIgXCIsTGVmdDpcIkFycm93TGVmdFwiLFVwOlwiQXJyb3dVcFwiLFJpZ2h0OlwiQXJyb3dSaWdodFwiLERvd246XCJBcnJvd0Rvd25cIixEZWw6XCJEZWxldGVcIixXaW46XCJPU1wiLE1lbnU6XCJDb250ZXh0TWVudVwiLEFwcHM6XCJDb250ZXh0TWVudVwiLFNjcm9sbDpcIlNjcm9sbExvY2tcIixNb3pQcmludGFibGVLZXk6XCJVbmlkZW50aWZpZWRcIn0sTmQ9ezg6XCJCYWNrc3BhY2VcIiw5OlwiVGFiXCIsMTI6XCJDbGVhclwiLDEzOlwiRW50ZXJcIiwxNjpcIlNoaWZ0XCIsMTc6XCJDb250cm9sXCIsMTg6XCJBbHRcIiwxOTpcIlBhdXNlXCIsMjA6XCJDYXBzTG9ja1wiLDI3OlwiRXNjYXBlXCIsMzI6XCIgXCIsMzM6XCJQYWdlVXBcIiwzNDpcIlBhZ2VEb3duXCIsMzU6XCJFbmRcIiwzNjpcIkhvbWVcIiwzNzpcIkFycm93TGVmdFwiLDM4OlwiQXJyb3dVcFwiLDM5OlwiQXJyb3dSaWdodFwiLDQwOlwiQXJyb3dEb3duXCIsNDU6XCJJbnNlcnRcIiw0NjpcIkRlbGV0ZVwiLDExMjpcIkYxXCIsMTEzOlwiRjJcIiwxMTQ6XCJGM1wiLDExNTpcIkY0XCIsMTE2OlwiRjVcIiwxMTc6XCJGNlwiLDExODpcIkY3XCIsXG4xMTk6XCJGOFwiLDEyMDpcIkY5XCIsMTIxOlwiRjEwXCIsMTIyOlwiRjExXCIsMTIzOlwiRjEyXCIsMTQ0OlwiTnVtTG9ja1wiLDE0NTpcIlNjcm9sbExvY2tcIiwyMjQ6XCJNZXRhXCJ9LE9kPXtBbHQ6XCJhbHRLZXlcIixDb250cm9sOlwiY3RybEtleVwiLE1ldGE6XCJtZXRhS2V5XCIsU2hpZnQ6XCJzaGlmdEtleVwifTtmdW5jdGlvbiBQZChhKXt2YXIgYj10aGlzLm5hdGl2ZUV2ZW50O3JldHVybiBiLmdldE1vZGlmaWVyU3RhdGU/Yi5nZXRNb2RpZmllclN0YXRlKGEpOihhPU9kW2FdKT8hIWJbYV06ITF9ZnVuY3Rpb24gemQoKXtyZXR1cm4gUGR9XG52YXIgUWQ9bSh7fSx1ZCx7a2V5OmZ1bmN0aW9uKGEpe2lmKGEua2V5KXt2YXIgYj1NZFthLmtleV18fGEua2V5O2lmKFwiVW5pZGVudGlmaWVkXCIhPT1iKXJldHVybiBifXJldHVyblwia2V5cHJlc3NcIj09PWEudHlwZT8oYT1vZChhKSwxMz09PWE/XCJFbnRlclwiOlN0cmluZy5mcm9tQ2hhckNvZGUoYSkpOlwia2V5ZG93blwiPT09YS50eXBlfHxcImtleXVwXCI9PT1hLnR5cGU/TmRbYS5rZXlDb2RlXXx8XCJVbmlkZW50aWZpZWRcIjpcIlwifSxjb2RlOjAsbG9jYXRpb246MCxjdHJsS2V5OjAsc2hpZnRLZXk6MCxhbHRLZXk6MCxtZXRhS2V5OjAscmVwZWF0OjAsbG9jYWxlOjAsZ2V0TW9kaWZpZXJTdGF0ZTp6ZCxjaGFyQ29kZTpmdW5jdGlvbihhKXtyZXR1cm5cImtleXByZXNzXCI9PT1hLnR5cGU/b2QoYSk6MH0sa2V5Q29kZTpmdW5jdGlvbihhKXtyZXR1cm5cImtleWRvd25cIj09PWEudHlwZXx8XCJrZXl1cFwiPT09YS50eXBlP2Eua2V5Q29kZTowfSx3aGljaDpmdW5jdGlvbihhKXtyZXR1cm5cImtleXByZXNzXCI9PT1cbmEudHlwZT9vZChhKTpcImtleWRvd25cIj09PWEudHlwZXx8XCJrZXl1cFwiPT09YS50eXBlP2Eua2V5Q29kZTowfX0pLFJkPXJkKFFkKSxTZD1tKHt9LEFkLHtwb2ludGVySWQ6MCx3aWR0aDowLGhlaWdodDowLHByZXNzdXJlOjAsdGFuZ2VudGlhbFByZXNzdXJlOjAsdGlsdFg6MCx0aWx0WTowLHR3aXN0OjAscG9pbnRlclR5cGU6MCxpc1ByaW1hcnk6MH0pLFRkPXJkKFNkKSxVZD1tKHt9LHVkLHt0b3VjaGVzOjAsdGFyZ2V0VG91Y2hlczowLGNoYW5nZWRUb3VjaGVzOjAsYWx0S2V5OjAsbWV0YUtleTowLGN0cmxLZXk6MCxzaGlmdEtleTowLGdldE1vZGlmaWVyU3RhdGU6emR9KSxWZD1yZChVZCksV2Q9bSh7fSxzZCx7cHJvcGVydHlOYW1lOjAsZWxhcHNlZFRpbWU6MCxwc2V1ZG9FbGVtZW50OjB9KSxYZD1yZChXZCksWWQ9bSh7fSxBZCx7ZGVsdGFYOmZ1bmN0aW9uKGEpe3JldHVyblwiZGVsdGFYXCJpbiBhP2EuZGVsdGFYOlwid2hlZWxEZWx0YVhcImluIGE/LWEud2hlZWxEZWx0YVg6MH0sXG5kZWx0YVk6ZnVuY3Rpb24oYSl7cmV0dXJuXCJkZWx0YVlcImluIGE/YS5kZWx0YVk6XCJ3aGVlbERlbHRhWVwiaW4gYT8tYS53aGVlbERlbHRhWTpcIndoZWVsRGVsdGFcImluIGE/LWEud2hlZWxEZWx0YTowfSxkZWx0YVo6MCxkZWx0YU1vZGU6MH0pLFpkPXJkKFlkKSwkZD1bOSwxMywyNywzMl0sYWU9ZmEmJlwiQ29tcG9zaXRpb25FdmVudFwiaW4gd2luZG93LGJlPW51bGw7ZmEmJlwiZG9jdW1lbnRNb2RlXCJpbiBkb2N1bWVudCYmKGJlPWRvY3VtZW50LmRvY3VtZW50TW9kZSk7dmFyIGNlPWZhJiZcIlRleHRFdmVudFwiaW4gd2luZG93JiYhYmUsZGU9ZmEmJighYWV8fGJlJiY4PGJlJiYxMT49YmUpLGVlPVN0cmluZy5mcm9tQ2hhckNvZGUoMzIpLGZlPSExO1xuZnVuY3Rpb24gZ2UoYSxiKXtzd2l0Y2goYSl7Y2FzZSBcImtleXVwXCI6cmV0dXJuLTEhPT0kZC5pbmRleE9mKGIua2V5Q29kZSk7Y2FzZSBcImtleWRvd25cIjpyZXR1cm4gMjI5IT09Yi5rZXlDb2RlO2Nhc2UgXCJrZXlwcmVzc1wiOmNhc2UgXCJtb3VzZWRvd25cIjpjYXNlIFwiZm9jdXNvdXRcIjpyZXR1cm4hMDtkZWZhdWx0OnJldHVybiExfX1mdW5jdGlvbiBoZShhKXthPWEuZGV0YWlsO3JldHVyblwib2JqZWN0XCI9PT10eXBlb2YgYSYmXCJkYXRhXCJpbiBhP2EuZGF0YTpudWxsfXZhciBpZT0hMTtmdW5jdGlvbiBqZShhLGIpe3N3aXRjaChhKXtjYXNlIFwiY29tcG9zaXRpb25lbmRcIjpyZXR1cm4gaGUoYik7Y2FzZSBcImtleXByZXNzXCI6aWYoMzIhPT1iLndoaWNoKXJldHVybiBudWxsO2ZlPSEwO3JldHVybiBlZTtjYXNlIFwidGV4dElucHV0XCI6cmV0dXJuIGE9Yi5kYXRhLGE9PT1lZSYmZmU/bnVsbDphO2RlZmF1bHQ6cmV0dXJuIG51bGx9fVxuZnVuY3Rpb24ga2UoYSxiKXtpZihpZSlyZXR1cm5cImNvbXBvc2l0aW9uZW5kXCI9PT1hfHwhYWUmJmdlKGEsYik/KGE9bmQoKSxtZD1sZD1rZD1udWxsLGllPSExLGEpOm51bGw7c3dpdGNoKGEpe2Nhc2UgXCJwYXN0ZVwiOnJldHVybiBudWxsO2Nhc2UgXCJrZXlwcmVzc1wiOmlmKCEoYi5jdHJsS2V5fHxiLmFsdEtleXx8Yi5tZXRhS2V5KXx8Yi5jdHJsS2V5JiZiLmFsdEtleSl7aWYoYi5jaGFyJiYxPGIuY2hhci5sZW5ndGgpcmV0dXJuIGIuY2hhcjtpZihiLndoaWNoKXJldHVybiBTdHJpbmcuZnJvbUNoYXJDb2RlKGIud2hpY2gpfXJldHVybiBudWxsO2Nhc2UgXCJjb21wb3NpdGlvbmVuZFwiOnJldHVybiBkZSYmXCJrb1wiIT09Yi5sb2NhbGU/bnVsbDpiLmRhdGE7ZGVmYXVsdDpyZXR1cm4gbnVsbH19XG52YXIgbGU9e2NvbG9yOiEwLGRhdGU6ITAsZGF0ZXRpbWU6ITAsXCJkYXRldGltZS1sb2NhbFwiOiEwLGVtYWlsOiEwLG1vbnRoOiEwLG51bWJlcjohMCxwYXNzd29yZDohMCxyYW5nZTohMCxzZWFyY2g6ITAsdGVsOiEwLHRleHQ6ITAsdGltZTohMCx1cmw6ITAsd2VlazohMH07ZnVuY3Rpb24gbWUoYSl7dmFyIGI9YSYmYS5ub2RlTmFtZSYmYS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpO3JldHVyblwiaW5wdXRcIj09PWI/ISFsZVthLnR5cGVdOlwidGV4dGFyZWFcIj09PWI/ITA6ITF9ZnVuY3Rpb24gbmUoYSxiLGMsZCl7RWIoZCk7Yj1vZShiLFwib25DaGFuZ2VcIik7MDxiLmxlbmd0aCYmKGM9bmV3IHRkKFwib25DaGFuZ2VcIixcImNoYW5nZVwiLG51bGwsYyxkKSxhLnB1c2goe2V2ZW50OmMsbGlzdGVuZXJzOmJ9KSl9dmFyIHBlPW51bGwscWU9bnVsbDtmdW5jdGlvbiByZShhKXtzZShhLDApfWZ1bmN0aW9uIHRlKGEpe3ZhciBiPXVlKGEpO2lmKFdhKGIpKXJldHVybiBhfVxuZnVuY3Rpb24gdmUoYSxiKXtpZihcImNoYW5nZVwiPT09YSlyZXR1cm4gYn12YXIgd2U9ITE7aWYoZmEpe3ZhciB4ZTtpZihmYSl7dmFyIHllPVwib25pbnB1dFwiaW4gZG9jdW1lbnQ7aWYoIXllKXt2YXIgemU9ZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTt6ZS5zZXRBdHRyaWJ1dGUoXCJvbmlucHV0XCIsXCJyZXR1cm47XCIpO3llPVwiZnVuY3Rpb25cIj09PXR5cGVvZiB6ZS5vbmlucHV0fXhlPXllfWVsc2UgeGU9ITE7d2U9eGUmJighZG9jdW1lbnQuZG9jdW1lbnRNb2RlfHw5PGRvY3VtZW50LmRvY3VtZW50TW9kZSl9ZnVuY3Rpb24gQWUoKXtwZSYmKHBlLmRldGFjaEV2ZW50KFwib25wcm9wZXJ0eWNoYW5nZVwiLEJlKSxxZT1wZT1udWxsKX1mdW5jdGlvbiBCZShhKXtpZihcInZhbHVlXCI9PT1hLnByb3BlcnR5TmFtZSYmdGUocWUpKXt2YXIgYj1bXTtuZShiLHFlLGEseGIoYSkpO2E9cmU7aWYoS2IpYShiKTtlbHNle0tiPSEwO3RyeXtHYihhLGIpfWZpbmFsbHl7S2I9ITEsTWIoKX19fX1cbmZ1bmN0aW9uIENlKGEsYixjKXtcImZvY3VzaW5cIj09PWE/KEFlKCkscGU9YixxZT1jLHBlLmF0dGFjaEV2ZW50KFwib25wcm9wZXJ0eWNoYW5nZVwiLEJlKSk6XCJmb2N1c291dFwiPT09YSYmQWUoKX1mdW5jdGlvbiBEZShhKXtpZihcInNlbGVjdGlvbmNoYW5nZVwiPT09YXx8XCJrZXl1cFwiPT09YXx8XCJrZXlkb3duXCI9PT1hKXJldHVybiB0ZShxZSl9ZnVuY3Rpb24gRWUoYSxiKXtpZihcImNsaWNrXCI9PT1hKXJldHVybiB0ZShiKX1mdW5jdGlvbiBGZShhLGIpe2lmKFwiaW5wdXRcIj09PWF8fFwiY2hhbmdlXCI9PT1hKXJldHVybiB0ZShiKX1mdW5jdGlvbiBHZShhLGIpe3JldHVybiBhPT09YiYmKDAhPT1hfHwxL2E9PT0xL2IpfHxhIT09YSYmYiE9PWJ9dmFyIEhlPVwiZnVuY3Rpb25cIj09PXR5cGVvZiBPYmplY3QuaXM/T2JqZWN0LmlzOkdlLEllPU9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHk7XG5mdW5jdGlvbiBKZShhLGIpe2lmKEhlKGEsYikpcmV0dXJuITA7aWYoXCJvYmplY3RcIiE9PXR5cGVvZiBhfHxudWxsPT09YXx8XCJvYmplY3RcIiE9PXR5cGVvZiBifHxudWxsPT09YilyZXR1cm4hMTt2YXIgYz1PYmplY3Qua2V5cyhhKSxkPU9iamVjdC5rZXlzKGIpO2lmKGMubGVuZ3RoIT09ZC5sZW5ndGgpcmV0dXJuITE7Zm9yKGQ9MDtkPGMubGVuZ3RoO2QrKylpZighSWUuY2FsbChiLGNbZF0pfHwhSGUoYVtjW2RdXSxiW2NbZF1dKSlyZXR1cm4hMTtyZXR1cm4hMH1mdW5jdGlvbiBLZShhKXtmb3IoO2EmJmEuZmlyc3RDaGlsZDspYT1hLmZpcnN0Q2hpbGQ7cmV0dXJuIGF9XG5mdW5jdGlvbiBMZShhLGIpe3ZhciBjPUtlKGEpO2E9MDtmb3IodmFyIGQ7Yzspe2lmKDM9PT1jLm5vZGVUeXBlKXtkPWErYy50ZXh0Q29udGVudC5sZW5ndGg7aWYoYTw9YiYmZD49YilyZXR1cm57bm9kZTpjLG9mZnNldDpiLWF9O2E9ZH1hOntmb3IoO2M7KXtpZihjLm5leHRTaWJsaW5nKXtjPWMubmV4dFNpYmxpbmc7YnJlYWsgYX1jPWMucGFyZW50Tm9kZX1jPXZvaWQgMH1jPUtlKGMpfX1mdW5jdGlvbiBNZShhLGIpe3JldHVybiBhJiZiP2E9PT1iPyEwOmEmJjM9PT1hLm5vZGVUeXBlPyExOmImJjM9PT1iLm5vZGVUeXBlP01lKGEsYi5wYXJlbnROb2RlKTpcImNvbnRhaW5zXCJpbiBhP2EuY29udGFpbnMoYik6YS5jb21wYXJlRG9jdW1lbnRQb3NpdGlvbj8hIShhLmNvbXBhcmVEb2N1bWVudFBvc2l0aW9uKGIpJjE2KTohMTohMX1cbmZ1bmN0aW9uIE5lKCl7Zm9yKHZhciBhPXdpbmRvdyxiPVhhKCk7YiBpbnN0YW5jZW9mIGEuSFRNTElGcmFtZUVsZW1lbnQ7KXt0cnl7dmFyIGM9XCJzdHJpbmdcIj09PXR5cGVvZiBiLmNvbnRlbnRXaW5kb3cubG9jYXRpb24uaHJlZn1jYXRjaChkKXtjPSExfWlmKGMpYT1iLmNvbnRlbnRXaW5kb3c7ZWxzZSBicmVhaztiPVhhKGEuZG9jdW1lbnQpfXJldHVybiBifWZ1bmN0aW9uIE9lKGEpe3ZhciBiPWEmJmEubm9kZU5hbWUmJmEubm9kZU5hbWUudG9Mb3dlckNhc2UoKTtyZXR1cm4gYiYmKFwiaW5wdXRcIj09PWImJihcInRleHRcIj09PWEudHlwZXx8XCJzZWFyY2hcIj09PWEudHlwZXx8XCJ0ZWxcIj09PWEudHlwZXx8XCJ1cmxcIj09PWEudHlwZXx8XCJwYXNzd29yZFwiPT09YS50eXBlKXx8XCJ0ZXh0YXJlYVwiPT09Ynx8XCJ0cnVlXCI9PT1hLmNvbnRlbnRFZGl0YWJsZSl9XG52YXIgUGU9ZmEmJlwiZG9jdW1lbnRNb2RlXCJpbiBkb2N1bWVudCYmMTE+PWRvY3VtZW50LmRvY3VtZW50TW9kZSxRZT1udWxsLFJlPW51bGwsU2U9bnVsbCxUZT0hMTtcbmZ1bmN0aW9uIFVlKGEsYixjKXt2YXIgZD1jLndpbmRvdz09PWM/Yy5kb2N1bWVudDo5PT09Yy5ub2RlVHlwZT9jOmMub3duZXJEb2N1bWVudDtUZXx8bnVsbD09UWV8fFFlIT09WGEoZCl8fChkPVFlLFwic2VsZWN0aW9uU3RhcnRcImluIGQmJk9lKGQpP2Q9e3N0YXJ0OmQuc2VsZWN0aW9uU3RhcnQsZW5kOmQuc2VsZWN0aW9uRW5kfTooZD0oZC5vd25lckRvY3VtZW50JiZkLm93bmVyRG9jdW1lbnQuZGVmYXVsdFZpZXd8fHdpbmRvdykuZ2V0U2VsZWN0aW9uKCksZD17YW5jaG9yTm9kZTpkLmFuY2hvck5vZGUsYW5jaG9yT2Zmc2V0OmQuYW5jaG9yT2Zmc2V0LGZvY3VzTm9kZTpkLmZvY3VzTm9kZSxmb2N1c09mZnNldDpkLmZvY3VzT2Zmc2V0fSksU2UmJkplKFNlLGQpfHwoU2U9ZCxkPW9lKFJlLFwib25TZWxlY3RcIiksMDxkLmxlbmd0aCYmKGI9bmV3IHRkKFwib25TZWxlY3RcIixcInNlbGVjdFwiLG51bGwsYixjKSxhLnB1c2goe2V2ZW50OmIsbGlzdGVuZXJzOmR9KSxiLnRhcmdldD1RZSkpKX1cblBjKFwiY2FuY2VsIGNhbmNlbCBjbGljayBjbGljayBjbG9zZSBjbG9zZSBjb250ZXh0bWVudSBjb250ZXh0TWVudSBjb3B5IGNvcHkgY3V0IGN1dCBhdXhjbGljayBhdXhDbGljayBkYmxjbGljayBkb3VibGVDbGljayBkcmFnZW5kIGRyYWdFbmQgZHJhZ3N0YXJ0IGRyYWdTdGFydCBkcm9wIGRyb3AgZm9jdXNpbiBmb2N1cyBmb2N1c291dCBibHVyIGlucHV0IGlucHV0IGludmFsaWQgaW52YWxpZCBrZXlkb3duIGtleURvd24ga2V5cHJlc3Mga2V5UHJlc3Mga2V5dXAga2V5VXAgbW91c2Vkb3duIG1vdXNlRG93biBtb3VzZXVwIG1vdXNlVXAgcGFzdGUgcGFzdGUgcGF1c2UgcGF1c2UgcGxheSBwbGF5IHBvaW50ZXJjYW5jZWwgcG9pbnRlckNhbmNlbCBwb2ludGVyZG93biBwb2ludGVyRG93biBwb2ludGVydXAgcG9pbnRlclVwIHJhdGVjaGFuZ2UgcmF0ZUNoYW5nZSByZXNldCByZXNldCBzZWVrZWQgc2Vla2VkIHN1Ym1pdCBzdWJtaXQgdG91Y2hjYW5jZWwgdG91Y2hDYW5jZWwgdG91Y2hlbmQgdG91Y2hFbmQgdG91Y2hzdGFydCB0b3VjaFN0YXJ0IHZvbHVtZWNoYW5nZSB2b2x1bWVDaGFuZ2VcIi5zcGxpdChcIiBcIiksXG4wKTtQYyhcImRyYWcgZHJhZyBkcmFnZW50ZXIgZHJhZ0VudGVyIGRyYWdleGl0IGRyYWdFeGl0IGRyYWdsZWF2ZSBkcmFnTGVhdmUgZHJhZ292ZXIgZHJhZ092ZXIgbW91c2Vtb3ZlIG1vdXNlTW92ZSBtb3VzZW91dCBtb3VzZU91dCBtb3VzZW92ZXIgbW91c2VPdmVyIHBvaW50ZXJtb3ZlIHBvaW50ZXJNb3ZlIHBvaW50ZXJvdXQgcG9pbnRlck91dCBwb2ludGVyb3ZlciBwb2ludGVyT3ZlciBzY3JvbGwgc2Nyb2xsIHRvZ2dsZSB0b2dnbGUgdG91Y2htb3ZlIHRvdWNoTW92ZSB3aGVlbCB3aGVlbFwiLnNwbGl0KFwiIFwiKSwxKTtQYyhPYywyKTtmb3IodmFyIFZlPVwiY2hhbmdlIHNlbGVjdGlvbmNoYW5nZSB0ZXh0SW5wdXQgY29tcG9zaXRpb25zdGFydCBjb21wb3NpdGlvbmVuZCBjb21wb3NpdGlvbnVwZGF0ZVwiLnNwbGl0KFwiIFwiKSxXZT0wO1dlPFZlLmxlbmd0aDtXZSsrKU5jLnNldChWZVtXZV0sMCk7ZWEoXCJvbk1vdXNlRW50ZXJcIixbXCJtb3VzZW91dFwiLFwibW91c2VvdmVyXCJdKTtcbmVhKFwib25Nb3VzZUxlYXZlXCIsW1wibW91c2VvdXRcIixcIm1vdXNlb3ZlclwiXSk7ZWEoXCJvblBvaW50ZXJFbnRlclwiLFtcInBvaW50ZXJvdXRcIixcInBvaW50ZXJvdmVyXCJdKTtlYShcIm9uUG9pbnRlckxlYXZlXCIsW1wicG9pbnRlcm91dFwiLFwicG9pbnRlcm92ZXJcIl0pO2RhKFwib25DaGFuZ2VcIixcImNoYW5nZSBjbGljayBmb2N1c2luIGZvY3Vzb3V0IGlucHV0IGtleWRvd24ga2V5dXAgc2VsZWN0aW9uY2hhbmdlXCIuc3BsaXQoXCIgXCIpKTtkYShcIm9uU2VsZWN0XCIsXCJmb2N1c291dCBjb250ZXh0bWVudSBkcmFnZW5kIGZvY3VzaW4ga2V5ZG93biBrZXl1cCBtb3VzZWRvd24gbW91c2V1cCBzZWxlY3Rpb25jaGFuZ2VcIi5zcGxpdChcIiBcIikpO2RhKFwib25CZWZvcmVJbnB1dFwiLFtcImNvbXBvc2l0aW9uZW5kXCIsXCJrZXlwcmVzc1wiLFwidGV4dElucHV0XCIsXCJwYXN0ZVwiXSk7ZGEoXCJvbkNvbXBvc2l0aW9uRW5kXCIsXCJjb21wb3NpdGlvbmVuZCBmb2N1c291dCBrZXlkb3duIGtleXByZXNzIGtleXVwIG1vdXNlZG93blwiLnNwbGl0KFwiIFwiKSk7XG5kYShcIm9uQ29tcG9zaXRpb25TdGFydFwiLFwiY29tcG9zaXRpb25zdGFydCBmb2N1c291dCBrZXlkb3duIGtleXByZXNzIGtleXVwIG1vdXNlZG93blwiLnNwbGl0KFwiIFwiKSk7ZGEoXCJvbkNvbXBvc2l0aW9uVXBkYXRlXCIsXCJjb21wb3NpdGlvbnVwZGF0ZSBmb2N1c291dCBrZXlkb3duIGtleXByZXNzIGtleXVwIG1vdXNlZG93blwiLnNwbGl0KFwiIFwiKSk7dmFyIFhlPVwiYWJvcnQgY2FucGxheSBjYW5wbGF5dGhyb3VnaCBkdXJhdGlvbmNoYW5nZSBlbXB0aWVkIGVuY3J5cHRlZCBlbmRlZCBlcnJvciBsb2FkZWRkYXRhIGxvYWRlZG1ldGFkYXRhIGxvYWRzdGFydCBwYXVzZSBwbGF5IHBsYXlpbmcgcHJvZ3Jlc3MgcmF0ZWNoYW5nZSBzZWVrZWQgc2Vla2luZyBzdGFsbGVkIHN1c3BlbmQgdGltZXVwZGF0ZSB2b2x1bWVjaGFuZ2Ugd2FpdGluZ1wiLnNwbGl0KFwiIFwiKSxZZT1uZXcgU2V0KFwiY2FuY2VsIGNsb3NlIGludmFsaWQgbG9hZCBzY3JvbGwgdG9nZ2xlXCIuc3BsaXQoXCIgXCIpLmNvbmNhdChYZSkpO1xuZnVuY3Rpb24gWmUoYSxiLGMpe3ZhciBkPWEudHlwZXx8XCJ1bmtub3duLWV2ZW50XCI7YS5jdXJyZW50VGFyZ2V0PWM7WWIoZCxiLHZvaWQgMCxhKTthLmN1cnJlbnRUYXJnZXQ9bnVsbH1cbmZ1bmN0aW9uIHNlKGEsYil7Yj0wIT09KGImNCk7Zm9yKHZhciBjPTA7YzxhLmxlbmd0aDtjKyspe3ZhciBkPWFbY10sZT1kLmV2ZW50O2Q9ZC5saXN0ZW5lcnM7YTp7dmFyIGY9dm9pZCAwO2lmKGIpZm9yKHZhciBnPWQubGVuZ3RoLTE7MDw9ZztnLS0pe3ZhciBoPWRbZ10saz1oLmluc3RhbmNlLGw9aC5jdXJyZW50VGFyZ2V0O2g9aC5saXN0ZW5lcjtpZihrIT09ZiYmZS5pc1Byb3BhZ2F0aW9uU3RvcHBlZCgpKWJyZWFrIGE7WmUoZSxoLGwpO2Y9a31lbHNlIGZvcihnPTA7ZzxkLmxlbmd0aDtnKyspe2g9ZFtnXTtrPWguaW5zdGFuY2U7bD1oLmN1cnJlbnRUYXJnZXQ7aD1oLmxpc3RlbmVyO2lmKGshPT1mJiZlLmlzUHJvcGFnYXRpb25TdG9wcGVkKCkpYnJlYWsgYTtaZShlLGgsbCk7Zj1rfX19aWYoVWIpdGhyb3cgYT1WYixVYj0hMSxWYj1udWxsLGE7fVxuZnVuY3Rpb24gRyhhLGIpe3ZhciBjPSRlKGIpLGQ9YStcIl9fYnViYmxlXCI7Yy5oYXMoZCl8fChhZihiLGEsMiwhMSksYy5hZGQoZCkpfXZhciBiZj1cIl9yZWFjdExpc3RlbmluZ1wiK01hdGgucmFuZG9tKCkudG9TdHJpbmcoMzYpLnNsaWNlKDIpO2Z1bmN0aW9uIGNmKGEpe2FbYmZdfHwoYVtiZl09ITAsYmEuZm9yRWFjaChmdW5jdGlvbihiKXtZZS5oYXMoYil8fGRmKGIsITEsYSxudWxsKTtkZihiLCEwLGEsbnVsbCl9KSl9XG5mdW5jdGlvbiBkZihhLGIsYyxkKXt2YXIgZT00PGFyZ3VtZW50cy5sZW5ndGgmJnZvaWQgMCE9PWFyZ3VtZW50c1s0XT9hcmd1bWVudHNbNF06MCxmPWM7XCJzZWxlY3Rpb25jaGFuZ2VcIj09PWEmJjkhPT1jLm5vZGVUeXBlJiYoZj1jLm93bmVyRG9jdW1lbnQpO2lmKG51bGwhPT1kJiYhYiYmWWUuaGFzKGEpKXtpZihcInNjcm9sbFwiIT09YSlyZXR1cm47ZXw9MjtmPWR9dmFyIGc9JGUoZiksaD1hK1wiX19cIisoYj9cImNhcHR1cmVcIjpcImJ1YmJsZVwiKTtnLmhhcyhoKXx8KGImJihlfD00KSxhZihmLGEsZSxiKSxnLmFkZChoKSl9XG5mdW5jdGlvbiBhZihhLGIsYyxkKXt2YXIgZT1OYy5nZXQoYik7c3dpdGNoKHZvaWQgMD09PWU/MjplKXtjYXNlIDA6ZT1nZDticmVhaztjYXNlIDE6ZT1pZDticmVhaztkZWZhdWx0OmU9aGR9Yz1lLmJpbmQobnVsbCxiLGMsYSk7ZT12b2lkIDA7IVBifHxcInRvdWNoc3RhcnRcIiE9PWImJlwidG91Y2htb3ZlXCIhPT1iJiZcIndoZWVsXCIhPT1ifHwoZT0hMCk7ZD92b2lkIDAhPT1lP2EuYWRkRXZlbnRMaXN0ZW5lcihiLGMse2NhcHR1cmU6ITAscGFzc2l2ZTplfSk6YS5hZGRFdmVudExpc3RlbmVyKGIsYywhMCk6dm9pZCAwIT09ZT9hLmFkZEV2ZW50TGlzdGVuZXIoYixjLHtwYXNzaXZlOmV9KTphLmFkZEV2ZW50TGlzdGVuZXIoYixjLCExKX1cbmZ1bmN0aW9uIGpkKGEsYixjLGQsZSl7dmFyIGY9ZDtpZigwPT09KGImMSkmJjA9PT0oYiYyKSYmbnVsbCE9PWQpYTpmb3IoOzspe2lmKG51bGw9PT1kKXJldHVybjt2YXIgZz1kLnRhZztpZigzPT09Z3x8ND09PWcpe3ZhciBoPWQuc3RhdGVOb2RlLmNvbnRhaW5lckluZm87aWYoaD09PWV8fDg9PT1oLm5vZGVUeXBlJiZoLnBhcmVudE5vZGU9PT1lKWJyZWFrO2lmKDQ9PT1nKWZvcihnPWQucmV0dXJuO251bGwhPT1nOyl7dmFyIGs9Zy50YWc7aWYoMz09PWt8fDQ9PT1rKWlmKGs9Zy5zdGF0ZU5vZGUuY29udGFpbmVySW5mbyxrPT09ZXx8OD09PWsubm9kZVR5cGUmJmsucGFyZW50Tm9kZT09PWUpcmV0dXJuO2c9Zy5yZXR1cm59Zm9yKDtudWxsIT09aDspe2c9d2MoaCk7aWYobnVsbD09PWcpcmV0dXJuO2s9Zy50YWc7aWYoNT09PWt8fDY9PT1rKXtkPWY9Zztjb250aW51ZSBhfWg9aC5wYXJlbnROb2RlfX1kPWQucmV0dXJufU5iKGZ1bmN0aW9uKCl7dmFyIGQ9ZixlPXhiKGMpLGc9W107XG5hOnt2YXIgaD1NYy5nZXQoYSk7aWYodm9pZCAwIT09aCl7dmFyIGs9dGQseD1hO3N3aXRjaChhKXtjYXNlIFwia2V5cHJlc3NcIjppZigwPT09b2QoYykpYnJlYWsgYTtjYXNlIFwia2V5ZG93blwiOmNhc2UgXCJrZXl1cFwiOms9UmQ7YnJlYWs7Y2FzZSBcImZvY3VzaW5cIjp4PVwiZm9jdXNcIjtrPUZkO2JyZWFrO2Nhc2UgXCJmb2N1c291dFwiOng9XCJibHVyXCI7az1GZDticmVhaztjYXNlIFwiYmVmb3JlYmx1clwiOmNhc2UgXCJhZnRlcmJsdXJcIjprPUZkO2JyZWFrO2Nhc2UgXCJjbGlja1wiOmlmKDI9PT1jLmJ1dHRvbilicmVhayBhO2Nhc2UgXCJhdXhjbGlja1wiOmNhc2UgXCJkYmxjbGlja1wiOmNhc2UgXCJtb3VzZWRvd25cIjpjYXNlIFwibW91c2Vtb3ZlXCI6Y2FzZSBcIm1vdXNldXBcIjpjYXNlIFwibW91c2VvdXRcIjpjYXNlIFwibW91c2VvdmVyXCI6Y2FzZSBcImNvbnRleHRtZW51XCI6az1CZDticmVhaztjYXNlIFwiZHJhZ1wiOmNhc2UgXCJkcmFnZW5kXCI6Y2FzZSBcImRyYWdlbnRlclwiOmNhc2UgXCJkcmFnZXhpdFwiOmNhc2UgXCJkcmFnbGVhdmVcIjpjYXNlIFwiZHJhZ292ZXJcIjpjYXNlIFwiZHJhZ3N0YXJ0XCI6Y2FzZSBcImRyb3BcIjprPVxuRGQ7YnJlYWs7Y2FzZSBcInRvdWNoY2FuY2VsXCI6Y2FzZSBcInRvdWNoZW5kXCI6Y2FzZSBcInRvdWNobW92ZVwiOmNhc2UgXCJ0b3VjaHN0YXJ0XCI6az1WZDticmVhaztjYXNlIEljOmNhc2UgSmM6Y2FzZSBLYzprPUhkO2JyZWFrO2Nhc2UgTGM6az1YZDticmVhaztjYXNlIFwic2Nyb2xsXCI6az12ZDticmVhaztjYXNlIFwid2hlZWxcIjprPVpkO2JyZWFrO2Nhc2UgXCJjb3B5XCI6Y2FzZSBcImN1dFwiOmNhc2UgXCJwYXN0ZVwiOms9SmQ7YnJlYWs7Y2FzZSBcImdvdHBvaW50ZXJjYXB0dXJlXCI6Y2FzZSBcImxvc3Rwb2ludGVyY2FwdHVyZVwiOmNhc2UgXCJwb2ludGVyY2FuY2VsXCI6Y2FzZSBcInBvaW50ZXJkb3duXCI6Y2FzZSBcInBvaW50ZXJtb3ZlXCI6Y2FzZSBcInBvaW50ZXJvdXRcIjpjYXNlIFwicG9pbnRlcm92ZXJcIjpjYXNlIFwicG9pbnRlcnVwXCI6az1UZH12YXIgdz0wIT09KGImNCksej0hdyYmXCJzY3JvbGxcIj09PWEsdT13P251bGwhPT1oP2grXCJDYXB0dXJlXCI6bnVsbDpoO3c9W107Zm9yKHZhciB0PWQscTtudWxsIT09XG50Oyl7cT10O3ZhciB2PXEuc3RhdGVOb2RlOzU9PT1xLnRhZyYmbnVsbCE9PXYmJihxPXYsbnVsbCE9PXUmJih2PU9iKHQsdSksbnVsbCE9diYmdy5wdXNoKGVmKHQsdixxKSkpKTtpZih6KWJyZWFrO3Q9dC5yZXR1cm59MDx3Lmxlbmd0aCYmKGg9bmV3IGsoaCx4LG51bGwsYyxlKSxnLnB1c2goe2V2ZW50OmgsbGlzdGVuZXJzOnd9KSl9fWlmKDA9PT0oYiY3KSl7YTp7aD1cIm1vdXNlb3ZlclwiPT09YXx8XCJwb2ludGVyb3ZlclwiPT09YTtrPVwibW91c2VvdXRcIj09PWF8fFwicG9pbnRlcm91dFwiPT09YTtpZihoJiYwPT09KGImMTYpJiYoeD1jLnJlbGF0ZWRUYXJnZXR8fGMuZnJvbUVsZW1lbnQpJiYod2MoeCl8fHhbZmZdKSlicmVhayBhO2lmKGt8fGgpe2g9ZS53aW5kb3c9PT1lP2U6KGg9ZS5vd25lckRvY3VtZW50KT9oLmRlZmF1bHRWaWV3fHxoLnBhcmVudFdpbmRvdzp3aW5kb3c7aWYoayl7aWYoeD1jLnJlbGF0ZWRUYXJnZXR8fGMudG9FbGVtZW50LGs9ZCx4PXg/d2MoeCk6bnVsbCxudWxsIT09XG54JiYoej1aYih4KSx4IT09enx8NSE9PXgudGFnJiY2IT09eC50YWcpKXg9bnVsbH1lbHNlIGs9bnVsbCx4PWQ7aWYoayE9PXgpe3c9QmQ7dj1cIm9uTW91c2VMZWF2ZVwiO3U9XCJvbk1vdXNlRW50ZXJcIjt0PVwibW91c2VcIjtpZihcInBvaW50ZXJvdXRcIj09PWF8fFwicG9pbnRlcm92ZXJcIj09PWEpdz1UZCx2PVwib25Qb2ludGVyTGVhdmVcIix1PVwib25Qb2ludGVyRW50ZXJcIix0PVwicG9pbnRlclwiO3o9bnVsbD09az9oOnVlKGspO3E9bnVsbD09eD9oOnVlKHgpO2g9bmV3IHcodix0K1wibGVhdmVcIixrLGMsZSk7aC50YXJnZXQ9ejtoLnJlbGF0ZWRUYXJnZXQ9cTt2PW51bGw7d2MoZSk9PT1kJiYodz1uZXcgdyh1LHQrXCJlbnRlclwiLHgsYyxlKSx3LnRhcmdldD1xLHcucmVsYXRlZFRhcmdldD16LHY9dyk7ej12O2lmKGsmJngpYjp7dz1rO3U9eDt0PTA7Zm9yKHE9dztxO3E9Z2YocSkpdCsrO3E9MDtmb3Iodj11O3Y7dj1nZih2KSlxKys7Zm9yKDswPHQtcTspdz1nZih3KSx0LS07Zm9yKDswPHEtdDspdT1cbmdmKHUpLHEtLTtmb3IoO3QtLTspe2lmKHc9PT11fHxudWxsIT09dSYmdz09PXUuYWx0ZXJuYXRlKWJyZWFrIGI7dz1nZih3KTt1PWdmKHUpfXc9bnVsbH1lbHNlIHc9bnVsbDtudWxsIT09ayYmaGYoZyxoLGssdywhMSk7bnVsbCE9PXgmJm51bGwhPT16JiZoZihnLHoseCx3LCEwKX19fWE6e2g9ZD91ZShkKTp3aW5kb3c7az1oLm5vZGVOYW1lJiZoLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCk7aWYoXCJzZWxlY3RcIj09PWt8fFwiaW5wdXRcIj09PWsmJlwiZmlsZVwiPT09aC50eXBlKXZhciBKPXZlO2Vsc2UgaWYobWUoaCkpaWYod2UpSj1GZTtlbHNle0o9RGU7dmFyIEs9Q2V9ZWxzZShrPWgubm9kZU5hbWUpJiZcImlucHV0XCI9PT1rLnRvTG93ZXJDYXNlKCkmJihcImNoZWNrYm94XCI9PT1oLnR5cGV8fFwicmFkaW9cIj09PWgudHlwZSkmJihKPUVlKTtpZihKJiYoSj1KKGEsZCkpKXtuZShnLEosYyxlKTticmVhayBhfUsmJksoYSxoLGQpO1wiZm9jdXNvdXRcIj09PWEmJihLPWguX3dyYXBwZXJTdGF0ZSkmJlxuSy5jb250cm9sbGVkJiZcIm51bWJlclwiPT09aC50eXBlJiZiYihoLFwibnVtYmVyXCIsaC52YWx1ZSl9Sz1kP3VlKGQpOndpbmRvdztzd2l0Y2goYSl7Y2FzZSBcImZvY3VzaW5cIjppZihtZShLKXx8XCJ0cnVlXCI9PT1LLmNvbnRlbnRFZGl0YWJsZSlRZT1LLFJlPWQsU2U9bnVsbDticmVhaztjYXNlIFwiZm9jdXNvdXRcIjpTZT1SZT1RZT1udWxsO2JyZWFrO2Nhc2UgXCJtb3VzZWRvd25cIjpUZT0hMDticmVhaztjYXNlIFwiY29udGV4dG1lbnVcIjpjYXNlIFwibW91c2V1cFwiOmNhc2UgXCJkcmFnZW5kXCI6VGU9ITE7VWUoZyxjLGUpO2JyZWFrO2Nhc2UgXCJzZWxlY3Rpb25jaGFuZ2VcIjppZihQZSlicmVhaztjYXNlIFwia2V5ZG93blwiOmNhc2UgXCJrZXl1cFwiOlVlKGcsYyxlKX12YXIgUTtpZihhZSliOntzd2l0Y2goYSl7Y2FzZSBcImNvbXBvc2l0aW9uc3RhcnRcIjp2YXIgTD1cIm9uQ29tcG9zaXRpb25TdGFydFwiO2JyZWFrIGI7Y2FzZSBcImNvbXBvc2l0aW9uZW5kXCI6TD1cIm9uQ29tcG9zaXRpb25FbmRcIjticmVhayBiO1xuY2FzZSBcImNvbXBvc2l0aW9udXBkYXRlXCI6TD1cIm9uQ29tcG9zaXRpb25VcGRhdGVcIjticmVhayBifUw9dm9pZCAwfWVsc2UgaWU/Z2UoYSxjKSYmKEw9XCJvbkNvbXBvc2l0aW9uRW5kXCIpOlwia2V5ZG93blwiPT09YSYmMjI5PT09Yy5rZXlDb2RlJiYoTD1cIm9uQ29tcG9zaXRpb25TdGFydFwiKTtMJiYoZGUmJlwia29cIiE9PWMubG9jYWxlJiYoaWV8fFwib25Db21wb3NpdGlvblN0YXJ0XCIhPT1MP1wib25Db21wb3NpdGlvbkVuZFwiPT09TCYmaWUmJihRPW5kKCkpOihrZD1lLGxkPVwidmFsdWVcImluIGtkP2tkLnZhbHVlOmtkLnRleHRDb250ZW50LGllPSEwKSksSz1vZShkLEwpLDA8Sy5sZW5ndGgmJihMPW5ldyBMZChMLGEsbnVsbCxjLGUpLGcucHVzaCh7ZXZlbnQ6TCxsaXN0ZW5lcnM6S30pLFE/TC5kYXRhPVE6KFE9aGUoYyksbnVsbCE9PVEmJihMLmRhdGE9USkpKSk7aWYoUT1jZT9qZShhLGMpOmtlKGEsYykpZD1vZShkLFwib25CZWZvcmVJbnB1dFwiKSwwPGQubGVuZ3RoJiYoZT1uZXcgTGQoXCJvbkJlZm9yZUlucHV0XCIsXG5cImJlZm9yZWlucHV0XCIsbnVsbCxjLGUpLGcucHVzaCh7ZXZlbnQ6ZSxsaXN0ZW5lcnM6ZH0pLGUuZGF0YT1RKX1zZShnLGIpfSl9ZnVuY3Rpb24gZWYoYSxiLGMpe3JldHVybntpbnN0YW5jZTphLGxpc3RlbmVyOmIsY3VycmVudFRhcmdldDpjfX1mdW5jdGlvbiBvZShhLGIpe2Zvcih2YXIgYz1iK1wiQ2FwdHVyZVwiLGQ9W107bnVsbCE9PWE7KXt2YXIgZT1hLGY9ZS5zdGF0ZU5vZGU7NT09PWUudGFnJiZudWxsIT09ZiYmKGU9ZixmPU9iKGEsYyksbnVsbCE9ZiYmZC51bnNoaWZ0KGVmKGEsZixlKSksZj1PYihhLGIpLG51bGwhPWYmJmQucHVzaChlZihhLGYsZSkpKTthPWEucmV0dXJufXJldHVybiBkfWZ1bmN0aW9uIGdmKGEpe2lmKG51bGw9PT1hKXJldHVybiBudWxsO2RvIGE9YS5yZXR1cm47d2hpbGUoYSYmNSE9PWEudGFnKTtyZXR1cm4gYT9hOm51bGx9XG5mdW5jdGlvbiBoZihhLGIsYyxkLGUpe2Zvcih2YXIgZj1iLl9yZWFjdE5hbWUsZz1bXTtudWxsIT09YyYmYyE9PWQ7KXt2YXIgaD1jLGs9aC5hbHRlcm5hdGUsbD1oLnN0YXRlTm9kZTtpZihudWxsIT09ayYmaz09PWQpYnJlYWs7NT09PWgudGFnJiZudWxsIT09bCYmKGg9bCxlPyhrPU9iKGMsZiksbnVsbCE9ayYmZy51bnNoaWZ0KGVmKGMsayxoKSkpOmV8fChrPU9iKGMsZiksbnVsbCE9ayYmZy5wdXNoKGVmKGMsayxoKSkpKTtjPWMucmV0dXJufTAhPT1nLmxlbmd0aCYmYS5wdXNoKHtldmVudDpiLGxpc3RlbmVyczpnfSl9ZnVuY3Rpb24gamYoKXt9dmFyIGtmPW51bGwsbGY9bnVsbDtmdW5jdGlvbiBtZihhLGIpe3N3aXRjaChhKXtjYXNlIFwiYnV0dG9uXCI6Y2FzZSBcImlucHV0XCI6Y2FzZSBcInNlbGVjdFwiOmNhc2UgXCJ0ZXh0YXJlYVwiOnJldHVybiEhYi5hdXRvRm9jdXN9cmV0dXJuITF9XG5mdW5jdGlvbiBuZihhLGIpe3JldHVyblwidGV4dGFyZWFcIj09PWF8fFwib3B0aW9uXCI9PT1hfHxcIm5vc2NyaXB0XCI9PT1hfHxcInN0cmluZ1wiPT09dHlwZW9mIGIuY2hpbGRyZW58fFwibnVtYmVyXCI9PT10eXBlb2YgYi5jaGlsZHJlbnx8XCJvYmplY3RcIj09PXR5cGVvZiBiLmRhbmdlcm91c2x5U2V0SW5uZXJIVE1MJiZudWxsIT09Yi5kYW5nZXJvdXNseVNldElubmVySFRNTCYmbnVsbCE9Yi5kYW5nZXJvdXNseVNldElubmVySFRNTC5fX2h0bWx9dmFyIG9mPVwiZnVuY3Rpb25cIj09PXR5cGVvZiBzZXRUaW1lb3V0P3NldFRpbWVvdXQ6dm9pZCAwLHBmPVwiZnVuY3Rpb25cIj09PXR5cGVvZiBjbGVhclRpbWVvdXQ/Y2xlYXJUaW1lb3V0OnZvaWQgMDtmdW5jdGlvbiBxZihhKXsxPT09YS5ub2RlVHlwZT9hLnRleHRDb250ZW50PVwiXCI6OT09PWEubm9kZVR5cGUmJihhPWEuYm9keSxudWxsIT1hJiYoYS50ZXh0Q29udGVudD1cIlwiKSl9XG5mdW5jdGlvbiByZihhKXtmb3IoO251bGwhPWE7YT1hLm5leHRTaWJsaW5nKXt2YXIgYj1hLm5vZGVUeXBlO2lmKDE9PT1ifHwzPT09YilicmVha31yZXR1cm4gYX1mdW5jdGlvbiBzZihhKXthPWEucHJldmlvdXNTaWJsaW5nO2Zvcih2YXIgYj0wO2E7KXtpZig4PT09YS5ub2RlVHlwZSl7dmFyIGM9YS5kYXRhO2lmKFwiJFwiPT09Y3x8XCIkIVwiPT09Y3x8XCIkP1wiPT09Yyl7aWYoMD09PWIpcmV0dXJuIGE7Yi0tfWVsc2VcIi8kXCI9PT1jJiZiKyt9YT1hLnByZXZpb3VzU2libGluZ31yZXR1cm4gbnVsbH12YXIgdGY9MDtmdW5jdGlvbiB1ZihhKXtyZXR1cm57JCR0eXBlb2Y6R2EsdG9TdHJpbmc6YSx2YWx1ZU9mOmF9fXZhciB2Zj1NYXRoLnJhbmRvbSgpLnRvU3RyaW5nKDM2KS5zbGljZSgyKSx3Zj1cIl9fcmVhY3RGaWJlciRcIit2Zix4Zj1cIl9fcmVhY3RQcm9wcyRcIit2ZixmZj1cIl9fcmVhY3RDb250YWluZXIkXCIrdmYseWY9XCJfX3JlYWN0RXZlbnRzJFwiK3ZmO1xuZnVuY3Rpb24gd2MoYSl7dmFyIGI9YVt3Zl07aWYoYilyZXR1cm4gYjtmb3IodmFyIGM9YS5wYXJlbnROb2RlO2M7KXtpZihiPWNbZmZdfHxjW3dmXSl7Yz1iLmFsdGVybmF0ZTtpZihudWxsIT09Yi5jaGlsZHx8bnVsbCE9PWMmJm51bGwhPT1jLmNoaWxkKWZvcihhPXNmKGEpO251bGwhPT1hOyl7aWYoYz1hW3dmXSlyZXR1cm4gYzthPXNmKGEpfXJldHVybiBifWE9YztjPWEucGFyZW50Tm9kZX1yZXR1cm4gbnVsbH1mdW5jdGlvbiBDYihhKXthPWFbd2ZdfHxhW2ZmXTtyZXR1cm4hYXx8NSE9PWEudGFnJiY2IT09YS50YWcmJjEzIT09YS50YWcmJjMhPT1hLnRhZz9udWxsOmF9ZnVuY3Rpb24gdWUoYSl7aWYoNT09PWEudGFnfHw2PT09YS50YWcpcmV0dXJuIGEuc3RhdGVOb2RlO3Rocm93IEVycm9yKHkoMzMpKTt9ZnVuY3Rpb24gRGIoYSl7cmV0dXJuIGFbeGZdfHxudWxsfVxuZnVuY3Rpb24gJGUoYSl7dmFyIGI9YVt5Zl07dm9pZCAwPT09YiYmKGI9YVt5Zl09bmV3IFNldCk7cmV0dXJuIGJ9dmFyIHpmPVtdLEFmPS0xO2Z1bmN0aW9uIEJmKGEpe3JldHVybntjdXJyZW50OmF9fWZ1bmN0aW9uIEgoYSl7MD5BZnx8KGEuY3VycmVudD16ZltBZl0semZbQWZdPW51bGwsQWYtLSl9ZnVuY3Rpb24gSShhLGIpe0FmKys7emZbQWZdPWEuY3VycmVudDthLmN1cnJlbnQ9Yn12YXIgQ2Y9e30sTT1CZihDZiksTj1CZighMSksRGY9Q2Y7XG5mdW5jdGlvbiBFZihhLGIpe3ZhciBjPWEudHlwZS5jb250ZXh0VHlwZXM7aWYoIWMpcmV0dXJuIENmO3ZhciBkPWEuc3RhdGVOb2RlO2lmKGQmJmQuX19yZWFjdEludGVybmFsTWVtb2l6ZWRVbm1hc2tlZENoaWxkQ29udGV4dD09PWIpcmV0dXJuIGQuX19yZWFjdEludGVybmFsTWVtb2l6ZWRNYXNrZWRDaGlsZENvbnRleHQ7dmFyIGU9e30sZjtmb3IoZiBpbiBjKWVbZl09YltmXTtkJiYoYT1hLnN0YXRlTm9kZSxhLl9fcmVhY3RJbnRlcm5hbE1lbW9pemVkVW5tYXNrZWRDaGlsZENvbnRleHQ9YixhLl9fcmVhY3RJbnRlcm5hbE1lbW9pemVkTWFza2VkQ2hpbGRDb250ZXh0PWUpO3JldHVybiBlfWZ1bmN0aW9uIEZmKGEpe2E9YS5jaGlsZENvbnRleHRUeXBlcztyZXR1cm4gbnVsbCE9PWEmJnZvaWQgMCE9PWF9ZnVuY3Rpb24gR2YoKXtIKE4pO0goTSl9ZnVuY3Rpb24gSGYoYSxiLGMpe2lmKE0uY3VycmVudCE9PUNmKXRocm93IEVycm9yKHkoMTY4KSk7SShNLGIpO0koTixjKX1cbmZ1bmN0aW9uIElmKGEsYixjKXt2YXIgZD1hLnN0YXRlTm9kZTthPWIuY2hpbGRDb250ZXh0VHlwZXM7aWYoXCJmdW5jdGlvblwiIT09dHlwZW9mIGQuZ2V0Q2hpbGRDb250ZXh0KXJldHVybiBjO2Q9ZC5nZXRDaGlsZENvbnRleHQoKTtmb3IodmFyIGUgaW4gZClpZighKGUgaW4gYSkpdGhyb3cgRXJyb3IoeSgxMDgsUmEoYil8fFwiVW5rbm93blwiLGUpKTtyZXR1cm4gbSh7fSxjLGQpfWZ1bmN0aW9uIEpmKGEpe2E9KGE9YS5zdGF0ZU5vZGUpJiZhLl9fcmVhY3RJbnRlcm5hbE1lbW9pemVkTWVyZ2VkQ2hpbGRDb250ZXh0fHxDZjtEZj1NLmN1cnJlbnQ7SShNLGEpO0koTixOLmN1cnJlbnQpO3JldHVybiEwfWZ1bmN0aW9uIEtmKGEsYixjKXt2YXIgZD1hLnN0YXRlTm9kZTtpZighZCl0aHJvdyBFcnJvcih5KDE2OSkpO2M/KGE9SWYoYSxiLERmKSxkLl9fcmVhY3RJbnRlcm5hbE1lbW9pemVkTWVyZ2VkQ2hpbGRDb250ZXh0PWEsSChOKSxIKE0pLEkoTSxhKSk6SChOKTtJKE4sYyl9XG52YXIgTGY9bnVsbCxNZj1udWxsLE5mPXIudW5zdGFibGVfcnVuV2l0aFByaW9yaXR5LE9mPXIudW5zdGFibGVfc2NoZWR1bGVDYWxsYmFjayxQZj1yLnVuc3RhYmxlX2NhbmNlbENhbGxiYWNrLFFmPXIudW5zdGFibGVfc2hvdWxkWWllbGQsUmY9ci51bnN0YWJsZV9yZXF1ZXN0UGFpbnQsU2Y9ci51bnN0YWJsZV9ub3csVGY9ci51bnN0YWJsZV9nZXRDdXJyZW50UHJpb3JpdHlMZXZlbCxVZj1yLnVuc3RhYmxlX0ltbWVkaWF0ZVByaW9yaXR5LFZmPXIudW5zdGFibGVfVXNlckJsb2NraW5nUHJpb3JpdHksV2Y9ci51bnN0YWJsZV9Ob3JtYWxQcmlvcml0eSxYZj1yLnVuc3RhYmxlX0xvd1ByaW9yaXR5LFlmPXIudW5zdGFibGVfSWRsZVByaW9yaXR5LFpmPXt9LCRmPXZvaWQgMCE9PVJmP1JmOmZ1bmN0aW9uKCl7fSxhZz1udWxsLGJnPW51bGwsY2c9ITEsZGc9U2YoKSxPPTFFND5kZz9TZjpmdW5jdGlvbigpe3JldHVybiBTZigpLWRnfTtcbmZ1bmN0aW9uIGVnKCl7c3dpdGNoKFRmKCkpe2Nhc2UgVWY6cmV0dXJuIDk5O2Nhc2UgVmY6cmV0dXJuIDk4O2Nhc2UgV2Y6cmV0dXJuIDk3O2Nhc2UgWGY6cmV0dXJuIDk2O2Nhc2UgWWY6cmV0dXJuIDk1O2RlZmF1bHQ6dGhyb3cgRXJyb3IoeSgzMzIpKTt9fWZ1bmN0aW9uIGZnKGEpe3N3aXRjaChhKXtjYXNlIDk5OnJldHVybiBVZjtjYXNlIDk4OnJldHVybiBWZjtjYXNlIDk3OnJldHVybiBXZjtjYXNlIDk2OnJldHVybiBYZjtjYXNlIDk1OnJldHVybiBZZjtkZWZhdWx0OnRocm93IEVycm9yKHkoMzMyKSk7fX1mdW5jdGlvbiBnZyhhLGIpe2E9ZmcoYSk7cmV0dXJuIE5mKGEsYil9ZnVuY3Rpb24gaGcoYSxiLGMpe2E9ZmcoYSk7cmV0dXJuIE9mKGEsYixjKX1mdW5jdGlvbiBpZygpe2lmKG51bGwhPT1iZyl7dmFyIGE9Ymc7Ymc9bnVsbDtQZihhKX1qZygpfVxuZnVuY3Rpb24gamcoKXtpZighY2cmJm51bGwhPT1hZyl7Y2c9ITA7dmFyIGE9MDt0cnl7dmFyIGI9YWc7Z2coOTksZnVuY3Rpb24oKXtmb3IoO2E8Yi5sZW5ndGg7YSsrKXt2YXIgYz1iW2FdO2RvIGM9YyghMCk7d2hpbGUobnVsbCE9PWMpfX0pO2FnPW51bGx9Y2F0Y2goYyl7dGhyb3cgbnVsbCE9PWFnJiYoYWc9YWcuc2xpY2UoYSsxKSksT2YoVWYsaWcpLGM7fWZpbmFsbHl7Y2c9ITF9fX12YXIga2c9cmEuUmVhY3RDdXJyZW50QmF0Y2hDb25maWc7ZnVuY3Rpb24gbGcoYSxiKXtpZihhJiZhLmRlZmF1bHRQcm9wcyl7Yj1tKHt9LGIpO2E9YS5kZWZhdWx0UHJvcHM7Zm9yKHZhciBjIGluIGEpdm9pZCAwPT09YltjXSYmKGJbY109YVtjXSk7cmV0dXJuIGJ9cmV0dXJuIGJ9dmFyIG1nPUJmKG51bGwpLG5nPW51bGwsb2c9bnVsbCxwZz1udWxsO2Z1bmN0aW9uIHFnKCl7cGc9b2c9bmc9bnVsbH1cbmZ1bmN0aW9uIHJnKGEpe3ZhciBiPW1nLmN1cnJlbnQ7SChtZyk7YS50eXBlLl9jb250ZXh0Ll9jdXJyZW50VmFsdWU9Yn1mdW5jdGlvbiBzZyhhLGIpe2Zvcig7bnVsbCE9PWE7KXt2YXIgYz1hLmFsdGVybmF0ZTtpZigoYS5jaGlsZExhbmVzJmIpPT09YilpZihudWxsPT09Y3x8KGMuY2hpbGRMYW5lcyZiKT09PWIpYnJlYWs7ZWxzZSBjLmNoaWxkTGFuZXN8PWI7ZWxzZSBhLmNoaWxkTGFuZXN8PWIsbnVsbCE9PWMmJihjLmNoaWxkTGFuZXN8PWIpO2E9YS5yZXR1cm59fWZ1bmN0aW9uIHRnKGEsYil7bmc9YTtwZz1vZz1udWxsO2E9YS5kZXBlbmRlbmNpZXM7bnVsbCE9PWEmJm51bGwhPT1hLmZpcnN0Q29udGV4dCYmKDAhPT0oYS5sYW5lcyZiKSYmKHVnPSEwKSxhLmZpcnN0Q29udGV4dD1udWxsKX1cbmZ1bmN0aW9uIHZnKGEsYil7aWYocGchPT1hJiYhMSE9PWImJjAhPT1iKXtpZihcIm51bWJlclwiIT09dHlwZW9mIGJ8fDEwNzM3NDE4MjM9PT1iKXBnPWEsYj0xMDczNzQxODIzO2I9e2NvbnRleHQ6YSxvYnNlcnZlZEJpdHM6YixuZXh0Om51bGx9O2lmKG51bGw9PT1vZyl7aWYobnVsbD09PW5nKXRocm93IEVycm9yKHkoMzA4KSk7b2c9YjtuZy5kZXBlbmRlbmNpZXM9e2xhbmVzOjAsZmlyc3RDb250ZXh0OmIscmVzcG9uZGVyczpudWxsfX1lbHNlIG9nPW9nLm5leHQ9Yn1yZXR1cm4gYS5fY3VycmVudFZhbHVlfXZhciB3Zz0hMTtmdW5jdGlvbiB4ZyhhKXthLnVwZGF0ZVF1ZXVlPXtiYXNlU3RhdGU6YS5tZW1vaXplZFN0YXRlLGZpcnN0QmFzZVVwZGF0ZTpudWxsLGxhc3RCYXNlVXBkYXRlOm51bGwsc2hhcmVkOntwZW5kaW5nOm51bGx9LGVmZmVjdHM6bnVsbH19XG5mdW5jdGlvbiB5ZyhhLGIpe2E9YS51cGRhdGVRdWV1ZTtiLnVwZGF0ZVF1ZXVlPT09YSYmKGIudXBkYXRlUXVldWU9e2Jhc2VTdGF0ZTphLmJhc2VTdGF0ZSxmaXJzdEJhc2VVcGRhdGU6YS5maXJzdEJhc2VVcGRhdGUsbGFzdEJhc2VVcGRhdGU6YS5sYXN0QmFzZVVwZGF0ZSxzaGFyZWQ6YS5zaGFyZWQsZWZmZWN0czphLmVmZmVjdHN9KX1mdW5jdGlvbiB6ZyhhLGIpe3JldHVybntldmVudFRpbWU6YSxsYW5lOmIsdGFnOjAscGF5bG9hZDpudWxsLGNhbGxiYWNrOm51bGwsbmV4dDpudWxsfX1mdW5jdGlvbiBBZyhhLGIpe2E9YS51cGRhdGVRdWV1ZTtpZihudWxsIT09YSl7YT1hLnNoYXJlZDt2YXIgYz1hLnBlbmRpbmc7bnVsbD09PWM/Yi5uZXh0PWI6KGIubmV4dD1jLm5leHQsYy5uZXh0PWIpO2EucGVuZGluZz1ifX1cbmZ1bmN0aW9uIEJnKGEsYil7dmFyIGM9YS51cGRhdGVRdWV1ZSxkPWEuYWx0ZXJuYXRlO2lmKG51bGwhPT1kJiYoZD1kLnVwZGF0ZVF1ZXVlLGM9PT1kKSl7dmFyIGU9bnVsbCxmPW51bGw7Yz1jLmZpcnN0QmFzZVVwZGF0ZTtpZihudWxsIT09Yyl7ZG97dmFyIGc9e2V2ZW50VGltZTpjLmV2ZW50VGltZSxsYW5lOmMubGFuZSx0YWc6Yy50YWcscGF5bG9hZDpjLnBheWxvYWQsY2FsbGJhY2s6Yy5jYWxsYmFjayxuZXh0Om51bGx9O251bGw9PT1mP2U9Zj1nOmY9Zi5uZXh0PWc7Yz1jLm5leHR9d2hpbGUobnVsbCE9PWMpO251bGw9PT1mP2U9Zj1iOmY9Zi5uZXh0PWJ9ZWxzZSBlPWY9YjtjPXtiYXNlU3RhdGU6ZC5iYXNlU3RhdGUsZmlyc3RCYXNlVXBkYXRlOmUsbGFzdEJhc2VVcGRhdGU6ZixzaGFyZWQ6ZC5zaGFyZWQsZWZmZWN0czpkLmVmZmVjdHN9O2EudXBkYXRlUXVldWU9YztyZXR1cm59YT1jLmxhc3RCYXNlVXBkYXRlO251bGw9PT1hP2MuZmlyc3RCYXNlVXBkYXRlPWI6YS5uZXh0PVxuYjtjLmxhc3RCYXNlVXBkYXRlPWJ9XG5mdW5jdGlvbiBDZyhhLGIsYyxkKXt2YXIgZT1hLnVwZGF0ZVF1ZXVlO3dnPSExO3ZhciBmPWUuZmlyc3RCYXNlVXBkYXRlLGc9ZS5sYXN0QmFzZVVwZGF0ZSxoPWUuc2hhcmVkLnBlbmRpbmc7aWYobnVsbCE9PWgpe2Uuc2hhcmVkLnBlbmRpbmc9bnVsbDt2YXIgaz1oLGw9ay5uZXh0O2submV4dD1udWxsO251bGw9PT1nP2Y9bDpnLm5leHQ9bDtnPWs7dmFyIG49YS5hbHRlcm5hdGU7aWYobnVsbCE9PW4pe249bi51cGRhdGVRdWV1ZTt2YXIgQT1uLmxhc3RCYXNlVXBkYXRlO0EhPT1nJiYobnVsbD09PUE/bi5maXJzdEJhc2VVcGRhdGU9bDpBLm5leHQ9bCxuLmxhc3RCYXNlVXBkYXRlPWspfX1pZihudWxsIT09Zil7QT1lLmJhc2VTdGF0ZTtnPTA7bj1sPWs9bnVsbDtkb3toPWYubGFuZTt2YXIgcD1mLmV2ZW50VGltZTtpZigoZCZoKT09PWgpe251bGwhPT1uJiYobj1uLm5leHQ9e2V2ZW50VGltZTpwLGxhbmU6MCx0YWc6Zi50YWcscGF5bG9hZDpmLnBheWxvYWQsY2FsbGJhY2s6Zi5jYWxsYmFjayxcbm5leHQ6bnVsbH0pO2E6e3ZhciBDPWEseD1mO2g9YjtwPWM7c3dpdGNoKHgudGFnKXtjYXNlIDE6Qz14LnBheWxvYWQ7aWYoXCJmdW5jdGlvblwiPT09dHlwZW9mIEMpe0E9Qy5jYWxsKHAsQSxoKTticmVhayBhfUE9QzticmVhayBhO2Nhc2UgMzpDLmZsYWdzPUMuZmxhZ3MmLTQwOTd8NjQ7Y2FzZSAwOkM9eC5wYXlsb2FkO2g9XCJmdW5jdGlvblwiPT09dHlwZW9mIEM/Qy5jYWxsKHAsQSxoKTpDO2lmKG51bGw9PT1ofHx2b2lkIDA9PT1oKWJyZWFrIGE7QT1tKHt9LEEsaCk7YnJlYWsgYTtjYXNlIDI6d2c9ITB9fW51bGwhPT1mLmNhbGxiYWNrJiYoYS5mbGFnc3w9MzIsaD1lLmVmZmVjdHMsbnVsbD09PWg/ZS5lZmZlY3RzPVtmXTpoLnB1c2goZikpfWVsc2UgcD17ZXZlbnRUaW1lOnAsbGFuZTpoLHRhZzpmLnRhZyxwYXlsb2FkOmYucGF5bG9hZCxjYWxsYmFjazpmLmNhbGxiYWNrLG5leHQ6bnVsbH0sbnVsbD09PW4/KGw9bj1wLGs9QSk6bj1uLm5leHQ9cCxnfD1oO2Y9Zi5uZXh0O2lmKG51bGw9PT1cbmYpaWYoaD1lLnNoYXJlZC5wZW5kaW5nLG51bGw9PT1oKWJyZWFrO2Vsc2UgZj1oLm5leHQsaC5uZXh0PW51bGwsZS5sYXN0QmFzZVVwZGF0ZT1oLGUuc2hhcmVkLnBlbmRpbmc9bnVsbH13aGlsZSgxKTtudWxsPT09biYmKGs9QSk7ZS5iYXNlU3RhdGU9aztlLmZpcnN0QmFzZVVwZGF0ZT1sO2UubGFzdEJhc2VVcGRhdGU9bjtEZ3w9ZzthLmxhbmVzPWc7YS5tZW1vaXplZFN0YXRlPUF9fWZ1bmN0aW9uIEVnKGEsYixjKXthPWIuZWZmZWN0cztiLmVmZmVjdHM9bnVsbDtpZihudWxsIT09YSlmb3IoYj0wO2I8YS5sZW5ndGg7YisrKXt2YXIgZD1hW2JdLGU9ZC5jYWxsYmFjaztpZihudWxsIT09ZSl7ZC5jYWxsYmFjaz1udWxsO2Q9YztpZihcImZ1bmN0aW9uXCIhPT10eXBlb2YgZSl0aHJvdyBFcnJvcih5KDE5MSxlKSk7ZS5jYWxsKGQpfX19dmFyIEZnPShuZXcgYWEuQ29tcG9uZW50KS5yZWZzO1xuZnVuY3Rpb24gR2coYSxiLGMsZCl7Yj1hLm1lbW9pemVkU3RhdGU7Yz1jKGQsYik7Yz1udWxsPT09Y3x8dm9pZCAwPT09Yz9iOm0oe30sYixjKTthLm1lbW9pemVkU3RhdGU9YzswPT09YS5sYW5lcyYmKGEudXBkYXRlUXVldWUuYmFzZVN0YXRlPWMpfVxudmFyIEtnPXtpc01vdW50ZWQ6ZnVuY3Rpb24oYSl7cmV0dXJuKGE9YS5fcmVhY3RJbnRlcm5hbHMpP1piKGEpPT09YTohMX0sZW5xdWV1ZVNldFN0YXRlOmZ1bmN0aW9uKGEsYixjKXthPWEuX3JlYWN0SW50ZXJuYWxzO3ZhciBkPUhnKCksZT1JZyhhKSxmPXpnKGQsZSk7Zi5wYXlsb2FkPWI7dm9pZCAwIT09YyYmbnVsbCE9PWMmJihmLmNhbGxiYWNrPWMpO0FnKGEsZik7SmcoYSxlLGQpfSxlbnF1ZXVlUmVwbGFjZVN0YXRlOmZ1bmN0aW9uKGEsYixjKXthPWEuX3JlYWN0SW50ZXJuYWxzO3ZhciBkPUhnKCksZT1JZyhhKSxmPXpnKGQsZSk7Zi50YWc9MTtmLnBheWxvYWQ9Yjt2b2lkIDAhPT1jJiZudWxsIT09YyYmKGYuY2FsbGJhY2s9Yyk7QWcoYSxmKTtKZyhhLGUsZCl9LGVucXVldWVGb3JjZVVwZGF0ZTpmdW5jdGlvbihhLGIpe2E9YS5fcmVhY3RJbnRlcm5hbHM7dmFyIGM9SGcoKSxkPUlnKGEpLGU9emcoYyxkKTtlLnRhZz0yO3ZvaWQgMCE9PWImJm51bGwhPT1iJiYoZS5jYWxsYmFjaz1cbmIpO0FnKGEsZSk7SmcoYSxkLGMpfX07ZnVuY3Rpb24gTGcoYSxiLGMsZCxlLGYsZyl7YT1hLnN0YXRlTm9kZTtyZXR1cm5cImZ1bmN0aW9uXCI9PT10eXBlb2YgYS5zaG91bGRDb21wb25lbnRVcGRhdGU/YS5zaG91bGRDb21wb25lbnRVcGRhdGUoZCxmLGcpOmIucHJvdG90eXBlJiZiLnByb3RvdHlwZS5pc1B1cmVSZWFjdENvbXBvbmVudD8hSmUoYyxkKXx8IUplKGUsZik6ITB9XG5mdW5jdGlvbiBNZyhhLGIsYyl7dmFyIGQ9ITEsZT1DZjt2YXIgZj1iLmNvbnRleHRUeXBlO1wib2JqZWN0XCI9PT10eXBlb2YgZiYmbnVsbCE9PWY/Zj12ZyhmKTooZT1GZihiKT9EZjpNLmN1cnJlbnQsZD1iLmNvbnRleHRUeXBlcyxmPShkPW51bGwhPT1kJiZ2b2lkIDAhPT1kKT9FZihhLGUpOkNmKTtiPW5ldyBiKGMsZik7YS5tZW1vaXplZFN0YXRlPW51bGwhPT1iLnN0YXRlJiZ2b2lkIDAhPT1iLnN0YXRlP2Iuc3RhdGU6bnVsbDtiLnVwZGF0ZXI9S2c7YS5zdGF0ZU5vZGU9YjtiLl9yZWFjdEludGVybmFscz1hO2QmJihhPWEuc3RhdGVOb2RlLGEuX19yZWFjdEludGVybmFsTWVtb2l6ZWRVbm1hc2tlZENoaWxkQ29udGV4dD1lLGEuX19yZWFjdEludGVybmFsTWVtb2l6ZWRNYXNrZWRDaGlsZENvbnRleHQ9Zik7cmV0dXJuIGJ9XG5mdW5jdGlvbiBOZyhhLGIsYyxkKXthPWIuc3RhdGU7XCJmdW5jdGlvblwiPT09dHlwZW9mIGIuY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyYmYi5jb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzKGMsZCk7XCJmdW5jdGlvblwiPT09dHlwZW9mIGIuVU5TQUZFX2NvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMmJmIuVU5TQUZFX2NvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMoYyxkKTtiLnN0YXRlIT09YSYmS2cuZW5xdWV1ZVJlcGxhY2VTdGF0ZShiLGIuc3RhdGUsbnVsbCl9XG5mdW5jdGlvbiBPZyhhLGIsYyxkKXt2YXIgZT1hLnN0YXRlTm9kZTtlLnByb3BzPWM7ZS5zdGF0ZT1hLm1lbW9pemVkU3RhdGU7ZS5yZWZzPUZnO3hnKGEpO3ZhciBmPWIuY29udGV4dFR5cGU7XCJvYmplY3RcIj09PXR5cGVvZiBmJiZudWxsIT09Zj9lLmNvbnRleHQ9dmcoZik6KGY9RmYoYik/RGY6TS5jdXJyZW50LGUuY29udGV4dD1FZihhLGYpKTtDZyhhLGMsZSxkKTtlLnN0YXRlPWEubWVtb2l6ZWRTdGF0ZTtmPWIuZ2V0RGVyaXZlZFN0YXRlRnJvbVByb3BzO1wiZnVuY3Rpb25cIj09PXR5cGVvZiBmJiYoR2coYSxiLGYsYyksZS5zdGF0ZT1hLm1lbW9pemVkU3RhdGUpO1wiZnVuY3Rpb25cIj09PXR5cGVvZiBiLmdldERlcml2ZWRTdGF0ZUZyb21Qcm9wc3x8XCJmdW5jdGlvblwiPT09dHlwZW9mIGUuZ2V0U25hcHNob3RCZWZvcmVVcGRhdGV8fFwiZnVuY3Rpb25cIiE9PXR5cGVvZiBlLlVOU0FGRV9jb21wb25lbnRXaWxsTW91bnQmJlwiZnVuY3Rpb25cIiE9PXR5cGVvZiBlLmNvbXBvbmVudFdpbGxNb3VudHx8XG4oYj1lLnN0YXRlLFwiZnVuY3Rpb25cIj09PXR5cGVvZiBlLmNvbXBvbmVudFdpbGxNb3VudCYmZS5jb21wb25lbnRXaWxsTW91bnQoKSxcImZ1bmN0aW9uXCI9PT10eXBlb2YgZS5VTlNBRkVfY29tcG9uZW50V2lsbE1vdW50JiZlLlVOU0FGRV9jb21wb25lbnRXaWxsTW91bnQoKSxiIT09ZS5zdGF0ZSYmS2cuZW5xdWV1ZVJlcGxhY2VTdGF0ZShlLGUuc3RhdGUsbnVsbCksQ2coYSxjLGUsZCksZS5zdGF0ZT1hLm1lbW9pemVkU3RhdGUpO1wiZnVuY3Rpb25cIj09PXR5cGVvZiBlLmNvbXBvbmVudERpZE1vdW50JiYoYS5mbGFnc3w9NCl9dmFyIFBnPUFycmF5LmlzQXJyYXk7XG5mdW5jdGlvbiBRZyhhLGIsYyl7YT1jLnJlZjtpZihudWxsIT09YSYmXCJmdW5jdGlvblwiIT09dHlwZW9mIGEmJlwib2JqZWN0XCIhPT10eXBlb2YgYSl7aWYoYy5fb3duZXIpe2M9Yy5fb3duZXI7aWYoYyl7aWYoMSE9PWMudGFnKXRocm93IEVycm9yKHkoMzA5KSk7dmFyIGQ9Yy5zdGF0ZU5vZGV9aWYoIWQpdGhyb3cgRXJyb3IoeSgxNDcsYSkpO3ZhciBlPVwiXCIrYTtpZihudWxsIT09YiYmbnVsbCE9PWIucmVmJiZcImZ1bmN0aW9uXCI9PT10eXBlb2YgYi5yZWYmJmIucmVmLl9zdHJpbmdSZWY9PT1lKXJldHVybiBiLnJlZjtiPWZ1bmN0aW9uKGEpe3ZhciBiPWQucmVmcztiPT09RmcmJihiPWQucmVmcz17fSk7bnVsbD09PWE/ZGVsZXRlIGJbZV06YltlXT1hfTtiLl9zdHJpbmdSZWY9ZTtyZXR1cm4gYn1pZihcInN0cmluZ1wiIT09dHlwZW9mIGEpdGhyb3cgRXJyb3IoeSgyODQpKTtpZighYy5fb3duZXIpdGhyb3cgRXJyb3IoeSgyOTAsYSkpO31yZXR1cm4gYX1cbmZ1bmN0aW9uIFJnKGEsYil7aWYoXCJ0ZXh0YXJlYVwiIT09YS50eXBlKXRocm93IEVycm9yKHkoMzEsXCJbb2JqZWN0IE9iamVjdF1cIj09PU9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChiKT9cIm9iamVjdCB3aXRoIGtleXMge1wiK09iamVjdC5rZXlzKGIpLmpvaW4oXCIsIFwiKStcIn1cIjpiKSk7fVxuZnVuY3Rpb24gU2coYSl7ZnVuY3Rpb24gYihiLGMpe2lmKGEpe3ZhciBkPWIubGFzdEVmZmVjdDtudWxsIT09ZD8oZC5uZXh0RWZmZWN0PWMsYi5sYXN0RWZmZWN0PWMpOmIuZmlyc3RFZmZlY3Q9Yi5sYXN0RWZmZWN0PWM7Yy5uZXh0RWZmZWN0PW51bGw7Yy5mbGFncz04fX1mdW5jdGlvbiBjKGMsZCl7aWYoIWEpcmV0dXJuIG51bGw7Zm9yKDtudWxsIT09ZDspYihjLGQpLGQ9ZC5zaWJsaW5nO3JldHVybiBudWxsfWZ1bmN0aW9uIGQoYSxiKXtmb3IoYT1uZXcgTWFwO251bGwhPT1iOyludWxsIT09Yi5rZXk/YS5zZXQoYi5rZXksYik6YS5zZXQoYi5pbmRleCxiKSxiPWIuc2libGluZztyZXR1cm4gYX1mdW5jdGlvbiBlKGEsYil7YT1UZyhhLGIpO2EuaW5kZXg9MDthLnNpYmxpbmc9bnVsbDtyZXR1cm4gYX1mdW5jdGlvbiBmKGIsYyxkKXtiLmluZGV4PWQ7aWYoIWEpcmV0dXJuIGM7ZD1iLmFsdGVybmF0ZTtpZihudWxsIT09ZClyZXR1cm4gZD1kLmluZGV4LGQ8Yz8oYi5mbGFncz0yLFxuYyk6ZDtiLmZsYWdzPTI7cmV0dXJuIGN9ZnVuY3Rpb24gZyhiKXthJiZudWxsPT09Yi5hbHRlcm5hdGUmJihiLmZsYWdzPTIpO3JldHVybiBifWZ1bmN0aW9uIGgoYSxiLGMsZCl7aWYobnVsbD09PWJ8fDYhPT1iLnRhZylyZXR1cm4gYj1VZyhjLGEubW9kZSxkKSxiLnJldHVybj1hLGI7Yj1lKGIsYyk7Yi5yZXR1cm49YTtyZXR1cm4gYn1mdW5jdGlvbiBrKGEsYixjLGQpe2lmKG51bGwhPT1iJiZiLmVsZW1lbnRUeXBlPT09Yy50eXBlKXJldHVybiBkPWUoYixjLnByb3BzKSxkLnJlZj1RZyhhLGIsYyksZC5yZXR1cm49YSxkO2Q9VmcoYy50eXBlLGMua2V5LGMucHJvcHMsbnVsbCxhLm1vZGUsZCk7ZC5yZWY9UWcoYSxiLGMpO2QucmV0dXJuPWE7cmV0dXJuIGR9ZnVuY3Rpb24gbChhLGIsYyxkKXtpZihudWxsPT09Ynx8NCE9PWIudGFnfHxiLnN0YXRlTm9kZS5jb250YWluZXJJbmZvIT09Yy5jb250YWluZXJJbmZvfHxiLnN0YXRlTm9kZS5pbXBsZW1lbnRhdGlvbiE9PWMuaW1wbGVtZW50YXRpb24pcmV0dXJuIGI9XG5XZyhjLGEubW9kZSxkKSxiLnJldHVybj1hLGI7Yj1lKGIsYy5jaGlsZHJlbnx8W10pO2IucmV0dXJuPWE7cmV0dXJuIGJ9ZnVuY3Rpb24gbihhLGIsYyxkLGYpe2lmKG51bGw9PT1ifHw3IT09Yi50YWcpcmV0dXJuIGI9WGcoYyxhLm1vZGUsZCxmKSxiLnJldHVybj1hLGI7Yj1lKGIsYyk7Yi5yZXR1cm49YTtyZXR1cm4gYn1mdW5jdGlvbiBBKGEsYixjKXtpZihcInN0cmluZ1wiPT09dHlwZW9mIGJ8fFwibnVtYmVyXCI9PT10eXBlb2YgYilyZXR1cm4gYj1VZyhcIlwiK2IsYS5tb2RlLGMpLGIucmV0dXJuPWEsYjtpZihcIm9iamVjdFwiPT09dHlwZW9mIGImJm51bGwhPT1iKXtzd2l0Y2goYi4kJHR5cGVvZil7Y2FzZSBzYTpyZXR1cm4gYz1WZyhiLnR5cGUsYi5rZXksYi5wcm9wcyxudWxsLGEubW9kZSxjKSxjLnJlZj1RZyhhLG51bGwsYiksYy5yZXR1cm49YSxjO2Nhc2UgdGE6cmV0dXJuIGI9V2coYixhLm1vZGUsYyksYi5yZXR1cm49YSxifWlmKFBnKGIpfHxMYShiKSlyZXR1cm4gYj1YZyhiLFxuYS5tb2RlLGMsbnVsbCksYi5yZXR1cm49YSxiO1JnKGEsYil9cmV0dXJuIG51bGx9ZnVuY3Rpb24gcChhLGIsYyxkKXt2YXIgZT1udWxsIT09Yj9iLmtleTpudWxsO2lmKFwic3RyaW5nXCI9PT10eXBlb2YgY3x8XCJudW1iZXJcIj09PXR5cGVvZiBjKXJldHVybiBudWxsIT09ZT9udWxsOmgoYSxiLFwiXCIrYyxkKTtpZihcIm9iamVjdFwiPT09dHlwZW9mIGMmJm51bGwhPT1jKXtzd2l0Y2goYy4kJHR5cGVvZil7Y2FzZSBzYTpyZXR1cm4gYy5rZXk9PT1lP2MudHlwZT09PXVhP24oYSxiLGMucHJvcHMuY2hpbGRyZW4sZCxlKTprKGEsYixjLGQpOm51bGw7Y2FzZSB0YTpyZXR1cm4gYy5rZXk9PT1lP2woYSxiLGMsZCk6bnVsbH1pZihQZyhjKXx8TGEoYykpcmV0dXJuIG51bGwhPT1lP251bGw6bihhLGIsYyxkLG51bGwpO1JnKGEsYyl9cmV0dXJuIG51bGx9ZnVuY3Rpb24gQyhhLGIsYyxkLGUpe2lmKFwic3RyaW5nXCI9PT10eXBlb2YgZHx8XCJudW1iZXJcIj09PXR5cGVvZiBkKXJldHVybiBhPWEuZ2V0KGMpfHxcbm51bGwsaChiLGEsXCJcIitkLGUpO2lmKFwib2JqZWN0XCI9PT10eXBlb2YgZCYmbnVsbCE9PWQpe3N3aXRjaChkLiQkdHlwZW9mKXtjYXNlIHNhOnJldHVybiBhPWEuZ2V0KG51bGw9PT1kLmtleT9jOmQua2V5KXx8bnVsbCxkLnR5cGU9PT11YT9uKGIsYSxkLnByb3BzLmNoaWxkcmVuLGUsZC5rZXkpOmsoYixhLGQsZSk7Y2FzZSB0YTpyZXR1cm4gYT1hLmdldChudWxsPT09ZC5rZXk/YzpkLmtleSl8fG51bGwsbChiLGEsZCxlKX1pZihQZyhkKXx8TGEoZCkpcmV0dXJuIGE9YS5nZXQoYyl8fG51bGwsbihiLGEsZCxlLG51bGwpO1JnKGIsZCl9cmV0dXJuIG51bGx9ZnVuY3Rpb24geChlLGcsaCxrKXtmb3IodmFyIGw9bnVsbCx0PW51bGwsdT1nLHo9Zz0wLHE9bnVsbDtudWxsIT09dSYmejxoLmxlbmd0aDt6Kyspe3UuaW5kZXg+ej8ocT11LHU9bnVsbCk6cT11LnNpYmxpbmc7dmFyIG49cChlLHUsaFt6XSxrKTtpZihudWxsPT09bil7bnVsbD09PXUmJih1PXEpO2JyZWFrfWEmJnUmJm51bGw9PT1cbm4uYWx0ZXJuYXRlJiZiKGUsdSk7Zz1mKG4sZyx6KTtudWxsPT09dD9sPW46dC5zaWJsaW5nPW47dD1uO3U9cX1pZih6PT09aC5sZW5ndGgpcmV0dXJuIGMoZSx1KSxsO2lmKG51bGw9PT11KXtmb3IoO3o8aC5sZW5ndGg7eisrKXU9QShlLGhbel0sayksbnVsbCE9PXUmJihnPWYodSxnLHopLG51bGw9PT10P2w9dTp0LnNpYmxpbmc9dSx0PXUpO3JldHVybiBsfWZvcih1PWQoZSx1KTt6PGgubGVuZ3RoO3orKylxPUModSxlLHosaFt6XSxrKSxudWxsIT09cSYmKGEmJm51bGwhPT1xLmFsdGVybmF0ZSYmdS5kZWxldGUobnVsbD09PXEua2V5P3o6cS5rZXkpLGc9ZihxLGcseiksbnVsbD09PXQ/bD1xOnQuc2libGluZz1xLHQ9cSk7YSYmdS5mb3JFYWNoKGZ1bmN0aW9uKGEpe3JldHVybiBiKGUsYSl9KTtyZXR1cm4gbH1mdW5jdGlvbiB3KGUsZyxoLGspe3ZhciBsPUxhKGgpO2lmKFwiZnVuY3Rpb25cIiE9PXR5cGVvZiBsKXRocm93IEVycm9yKHkoMTUwKSk7aD1sLmNhbGwoaCk7aWYobnVsbD09XG5oKXRocm93IEVycm9yKHkoMTUxKSk7Zm9yKHZhciB0PWw9bnVsbCx1PWcsej1nPTAscT1udWxsLG49aC5uZXh0KCk7bnVsbCE9PXUmJiFuLmRvbmU7eisrLG49aC5uZXh0KCkpe3UuaW5kZXg+ej8ocT11LHU9bnVsbCk6cT11LnNpYmxpbmc7dmFyIHc9cChlLHUsbi52YWx1ZSxrKTtpZihudWxsPT09dyl7bnVsbD09PXUmJih1PXEpO2JyZWFrfWEmJnUmJm51bGw9PT13LmFsdGVybmF0ZSYmYihlLHUpO2c9Zih3LGcseik7bnVsbD09PXQ/bD13OnQuc2libGluZz13O3Q9dzt1PXF9aWYobi5kb25lKXJldHVybiBjKGUsdSksbDtpZihudWxsPT09dSl7Zm9yKDshbi5kb25lO3orKyxuPWgubmV4dCgpKW49QShlLG4udmFsdWUsayksbnVsbCE9PW4mJihnPWYobixnLHopLG51bGw9PT10P2w9bjp0LnNpYmxpbmc9bix0PW4pO3JldHVybiBsfWZvcih1PWQoZSx1KTshbi5kb25lO3orKyxuPWgubmV4dCgpKW49Qyh1LGUseixuLnZhbHVlLGspLG51bGwhPT1uJiYoYSYmbnVsbCE9PW4uYWx0ZXJuYXRlJiZcbnUuZGVsZXRlKG51bGw9PT1uLmtleT96Om4ua2V5KSxnPWYobixnLHopLG51bGw9PT10P2w9bjp0LnNpYmxpbmc9bix0PW4pO2EmJnUuZm9yRWFjaChmdW5jdGlvbihhKXtyZXR1cm4gYihlLGEpfSk7cmV0dXJuIGx9cmV0dXJuIGZ1bmN0aW9uKGEsZCxmLGgpe3ZhciBrPVwib2JqZWN0XCI9PT10eXBlb2YgZiYmbnVsbCE9PWYmJmYudHlwZT09PXVhJiZudWxsPT09Zi5rZXk7ayYmKGY9Zi5wcm9wcy5jaGlsZHJlbik7dmFyIGw9XCJvYmplY3RcIj09PXR5cGVvZiBmJiZudWxsIT09ZjtpZihsKXN3aXRjaChmLiQkdHlwZW9mKXtjYXNlIHNhOmE6e2w9Zi5rZXk7Zm9yKGs9ZDtudWxsIT09azspe2lmKGsua2V5PT09bCl7c3dpdGNoKGsudGFnKXtjYXNlIDc6aWYoZi50eXBlPT09dWEpe2MoYSxrLnNpYmxpbmcpO2Q9ZShrLGYucHJvcHMuY2hpbGRyZW4pO2QucmV0dXJuPWE7YT1kO2JyZWFrIGF9YnJlYWs7ZGVmYXVsdDppZihrLmVsZW1lbnRUeXBlPT09Zi50eXBlKXtjKGEsay5zaWJsaW5nKTtcbmQ9ZShrLGYucHJvcHMpO2QucmVmPVFnKGEsayxmKTtkLnJldHVybj1hO2E9ZDticmVhayBhfX1jKGEsayk7YnJlYWt9ZWxzZSBiKGEsayk7az1rLnNpYmxpbmd9Zi50eXBlPT09dWE/KGQ9WGcoZi5wcm9wcy5jaGlsZHJlbixhLm1vZGUsaCxmLmtleSksZC5yZXR1cm49YSxhPWQpOihoPVZnKGYudHlwZSxmLmtleSxmLnByb3BzLG51bGwsYS5tb2RlLGgpLGgucmVmPVFnKGEsZCxmKSxoLnJldHVybj1hLGE9aCl9cmV0dXJuIGcoYSk7Y2FzZSB0YTphOntmb3Ioaz1mLmtleTtudWxsIT09ZDspe2lmKGQua2V5PT09aylpZig0PT09ZC50YWcmJmQuc3RhdGVOb2RlLmNvbnRhaW5lckluZm89PT1mLmNvbnRhaW5lckluZm8mJmQuc3RhdGVOb2RlLmltcGxlbWVudGF0aW9uPT09Zi5pbXBsZW1lbnRhdGlvbil7YyhhLGQuc2libGluZyk7ZD1lKGQsZi5jaGlsZHJlbnx8W10pO2QucmV0dXJuPWE7YT1kO2JyZWFrIGF9ZWxzZXtjKGEsZCk7YnJlYWt9ZWxzZSBiKGEsZCk7ZD1kLnNpYmxpbmd9ZD1cbldnKGYsYS5tb2RlLGgpO2QucmV0dXJuPWE7YT1kfXJldHVybiBnKGEpfWlmKFwic3RyaW5nXCI9PT10eXBlb2YgZnx8XCJudW1iZXJcIj09PXR5cGVvZiBmKXJldHVybiBmPVwiXCIrZixudWxsIT09ZCYmNj09PWQudGFnPyhjKGEsZC5zaWJsaW5nKSxkPWUoZCxmKSxkLnJldHVybj1hLGE9ZCk6KGMoYSxkKSxkPVVnKGYsYS5tb2RlLGgpLGQucmV0dXJuPWEsYT1kKSxnKGEpO2lmKFBnKGYpKXJldHVybiB4KGEsZCxmLGgpO2lmKExhKGYpKXJldHVybiB3KGEsZCxmLGgpO2wmJlJnKGEsZik7aWYoXCJ1bmRlZmluZWRcIj09PXR5cGVvZiBmJiYhaylzd2l0Y2goYS50YWcpe2Nhc2UgMTpjYXNlIDIyOmNhc2UgMDpjYXNlIDExOmNhc2UgMTU6dGhyb3cgRXJyb3IoeSgxNTIsUmEoYS50eXBlKXx8XCJDb21wb25lbnRcIikpO31yZXR1cm4gYyhhLGQpfX12YXIgWWc9U2coITApLFpnPVNnKCExKSwkZz17fSxhaD1CZigkZyksYmg9QmYoJGcpLGNoPUJmKCRnKTtcbmZ1bmN0aW9uIGRoKGEpe2lmKGE9PT0kZyl0aHJvdyBFcnJvcih5KDE3NCkpO3JldHVybiBhfWZ1bmN0aW9uIGVoKGEsYil7SShjaCxiKTtJKGJoLGEpO0koYWgsJGcpO2E9Yi5ub2RlVHlwZTtzd2l0Y2goYSl7Y2FzZSA5OmNhc2UgMTE6Yj0oYj1iLmRvY3VtZW50RWxlbWVudCk/Yi5uYW1lc3BhY2VVUkk6bWIobnVsbCxcIlwiKTticmVhaztkZWZhdWx0OmE9OD09PWE/Yi5wYXJlbnROb2RlOmIsYj1hLm5hbWVzcGFjZVVSSXx8bnVsbCxhPWEudGFnTmFtZSxiPW1iKGIsYSl9SChhaCk7SShhaCxiKX1mdW5jdGlvbiBmaCgpe0goYWgpO0goYmgpO0goY2gpfWZ1bmN0aW9uIGdoKGEpe2RoKGNoLmN1cnJlbnQpO3ZhciBiPWRoKGFoLmN1cnJlbnQpO3ZhciBjPW1iKGIsYS50eXBlKTtiIT09YyYmKEkoYmgsYSksSShhaCxjKSl9ZnVuY3Rpb24gaGgoYSl7YmguY3VycmVudD09PWEmJihIKGFoKSxIKGJoKSl9dmFyIFA9QmYoMCk7XG5mdW5jdGlvbiBpaChhKXtmb3IodmFyIGI9YTtudWxsIT09Yjspe2lmKDEzPT09Yi50YWcpe3ZhciBjPWIubWVtb2l6ZWRTdGF0ZTtpZihudWxsIT09YyYmKGM9Yy5kZWh5ZHJhdGVkLG51bGw9PT1jfHxcIiQ/XCI9PT1jLmRhdGF8fFwiJCFcIj09PWMuZGF0YSkpcmV0dXJuIGJ9ZWxzZSBpZigxOT09PWIudGFnJiZ2b2lkIDAhPT1iLm1lbW9pemVkUHJvcHMucmV2ZWFsT3JkZXIpe2lmKDAhPT0oYi5mbGFncyY2NCkpcmV0dXJuIGJ9ZWxzZSBpZihudWxsIT09Yi5jaGlsZCl7Yi5jaGlsZC5yZXR1cm49YjtiPWIuY2hpbGQ7Y29udGludWV9aWYoYj09PWEpYnJlYWs7Zm9yKDtudWxsPT09Yi5zaWJsaW5nOyl7aWYobnVsbD09PWIucmV0dXJufHxiLnJldHVybj09PWEpcmV0dXJuIG51bGw7Yj1iLnJldHVybn1iLnNpYmxpbmcucmV0dXJuPWIucmV0dXJuO2I9Yi5zaWJsaW5nfXJldHVybiBudWxsfXZhciBqaD1udWxsLGtoPW51bGwsbGg9ITE7XG5mdW5jdGlvbiBtaChhLGIpe3ZhciBjPW5oKDUsbnVsbCxudWxsLDApO2MuZWxlbWVudFR5cGU9XCJERUxFVEVEXCI7Yy50eXBlPVwiREVMRVRFRFwiO2Muc3RhdGVOb2RlPWI7Yy5yZXR1cm49YTtjLmZsYWdzPTg7bnVsbCE9PWEubGFzdEVmZmVjdD8oYS5sYXN0RWZmZWN0Lm5leHRFZmZlY3Q9YyxhLmxhc3RFZmZlY3Q9Yyk6YS5maXJzdEVmZmVjdD1hLmxhc3RFZmZlY3Q9Y31mdW5jdGlvbiBvaChhLGIpe3N3aXRjaChhLnRhZyl7Y2FzZSA1OnZhciBjPWEudHlwZTtiPTEhPT1iLm5vZGVUeXBlfHxjLnRvTG93ZXJDYXNlKCkhPT1iLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCk/bnVsbDpiO3JldHVybiBudWxsIT09Yj8oYS5zdGF0ZU5vZGU9YiwhMCk6ITE7Y2FzZSA2OnJldHVybiBiPVwiXCI9PT1hLnBlbmRpbmdQcm9wc3x8MyE9PWIubm9kZVR5cGU/bnVsbDpiLG51bGwhPT1iPyhhLnN0YXRlTm9kZT1iLCEwKTohMTtjYXNlIDEzOnJldHVybiExO2RlZmF1bHQ6cmV0dXJuITF9fVxuZnVuY3Rpb24gcGgoYSl7aWYobGgpe3ZhciBiPWtoO2lmKGIpe3ZhciBjPWI7aWYoIW9oKGEsYikpe2I9cmYoYy5uZXh0U2libGluZyk7aWYoIWJ8fCFvaChhLGIpKXthLmZsYWdzPWEuZmxhZ3MmLTEwMjV8MjtsaD0hMTtqaD1hO3JldHVybn1taChqaCxjKX1qaD1hO2toPXJmKGIuZmlyc3RDaGlsZCl9ZWxzZSBhLmZsYWdzPWEuZmxhZ3MmLTEwMjV8MixsaD0hMSxqaD1hfX1mdW5jdGlvbiBxaChhKXtmb3IoYT1hLnJldHVybjtudWxsIT09YSYmNSE9PWEudGFnJiYzIT09YS50YWcmJjEzIT09YS50YWc7KWE9YS5yZXR1cm47amg9YX1cbmZ1bmN0aW9uIHJoKGEpe2lmKGEhPT1qaClyZXR1cm4hMTtpZighbGgpcmV0dXJuIHFoKGEpLGxoPSEwLCExO3ZhciBiPWEudHlwZTtpZig1IT09YS50YWd8fFwiaGVhZFwiIT09YiYmXCJib2R5XCIhPT1iJiYhbmYoYixhLm1lbW9pemVkUHJvcHMpKWZvcihiPWtoO2I7KW1oKGEsYiksYj1yZihiLm5leHRTaWJsaW5nKTtxaChhKTtpZigxMz09PWEudGFnKXthPWEubWVtb2l6ZWRTdGF0ZTthPW51bGwhPT1hP2EuZGVoeWRyYXRlZDpudWxsO2lmKCFhKXRocm93IEVycm9yKHkoMzE3KSk7YTp7YT1hLm5leHRTaWJsaW5nO2ZvcihiPTA7YTspe2lmKDg9PT1hLm5vZGVUeXBlKXt2YXIgYz1hLmRhdGE7aWYoXCIvJFwiPT09Yyl7aWYoMD09PWIpe2toPXJmKGEubmV4dFNpYmxpbmcpO2JyZWFrIGF9Yi0tfWVsc2VcIiRcIiE9PWMmJlwiJCFcIiE9PWMmJlwiJD9cIiE9PWN8fGIrK31hPWEubmV4dFNpYmxpbmd9a2g9bnVsbH19ZWxzZSBraD1qaD9yZihhLnN0YXRlTm9kZS5uZXh0U2libGluZyk6bnVsbDtyZXR1cm4hMH1cbmZ1bmN0aW9uIHNoKCl7a2g9amg9bnVsbDtsaD0hMX12YXIgdGg9W107ZnVuY3Rpb24gdWgoKXtmb3IodmFyIGE9MDthPHRoLmxlbmd0aDthKyspdGhbYV0uX3dvcmtJblByb2dyZXNzVmVyc2lvblByaW1hcnk9bnVsbDt0aC5sZW5ndGg9MH12YXIgdmg9cmEuUmVhY3RDdXJyZW50RGlzcGF0Y2hlcix3aD1yYS5SZWFjdEN1cnJlbnRCYXRjaENvbmZpZyx4aD0wLFI9bnVsbCxTPW51bGwsVD1udWxsLHloPSExLHpoPSExO2Z1bmN0aW9uIEFoKCl7dGhyb3cgRXJyb3IoeSgzMjEpKTt9ZnVuY3Rpb24gQmgoYSxiKXtpZihudWxsPT09YilyZXR1cm4hMTtmb3IodmFyIGM9MDtjPGIubGVuZ3RoJiZjPGEubGVuZ3RoO2MrKylpZighSGUoYVtjXSxiW2NdKSlyZXR1cm4hMTtyZXR1cm4hMH1cbmZ1bmN0aW9uIENoKGEsYixjLGQsZSxmKXt4aD1mO1I9YjtiLm1lbW9pemVkU3RhdGU9bnVsbDtiLnVwZGF0ZVF1ZXVlPW51bGw7Yi5sYW5lcz0wO3ZoLmN1cnJlbnQ9bnVsbD09PWF8fG51bGw9PT1hLm1lbW9pemVkU3RhdGU/RGg6RWg7YT1jKGQsZSk7aWYoemgpe2Y9MDtkb3t6aD0hMTtpZighKDI1PmYpKXRocm93IEVycm9yKHkoMzAxKSk7Zis9MTtUPVM9bnVsbDtiLnVwZGF0ZVF1ZXVlPW51bGw7dmguY3VycmVudD1GaDthPWMoZCxlKX13aGlsZSh6aCl9dmguY3VycmVudD1HaDtiPW51bGwhPT1TJiZudWxsIT09Uy5uZXh0O3hoPTA7VD1TPVI9bnVsbDt5aD0hMTtpZihiKXRocm93IEVycm9yKHkoMzAwKSk7cmV0dXJuIGF9ZnVuY3Rpb24gSGgoKXt2YXIgYT17bWVtb2l6ZWRTdGF0ZTpudWxsLGJhc2VTdGF0ZTpudWxsLGJhc2VRdWV1ZTpudWxsLHF1ZXVlOm51bGwsbmV4dDpudWxsfTtudWxsPT09VD9SLm1lbW9pemVkU3RhdGU9VD1hOlQ9VC5uZXh0PWE7cmV0dXJuIFR9XG5mdW5jdGlvbiBJaCgpe2lmKG51bGw9PT1TKXt2YXIgYT1SLmFsdGVybmF0ZTthPW51bGwhPT1hP2EubWVtb2l6ZWRTdGF0ZTpudWxsfWVsc2UgYT1TLm5leHQ7dmFyIGI9bnVsbD09PVQ/Ui5tZW1vaXplZFN0YXRlOlQubmV4dDtpZihudWxsIT09YilUPWIsUz1hO2Vsc2V7aWYobnVsbD09PWEpdGhyb3cgRXJyb3IoeSgzMTApKTtTPWE7YT17bWVtb2l6ZWRTdGF0ZTpTLm1lbW9pemVkU3RhdGUsYmFzZVN0YXRlOlMuYmFzZVN0YXRlLGJhc2VRdWV1ZTpTLmJhc2VRdWV1ZSxxdWV1ZTpTLnF1ZXVlLG5leHQ6bnVsbH07bnVsbD09PVQ/Ui5tZW1vaXplZFN0YXRlPVQ9YTpUPVQubmV4dD1hfXJldHVybiBUfWZ1bmN0aW9uIEpoKGEsYil7cmV0dXJuXCJmdW5jdGlvblwiPT09dHlwZW9mIGI/YihhKTpifVxuZnVuY3Rpb24gS2goYSl7dmFyIGI9SWgoKSxjPWIucXVldWU7aWYobnVsbD09PWMpdGhyb3cgRXJyb3IoeSgzMTEpKTtjLmxhc3RSZW5kZXJlZFJlZHVjZXI9YTt2YXIgZD1TLGU9ZC5iYXNlUXVldWUsZj1jLnBlbmRpbmc7aWYobnVsbCE9PWYpe2lmKG51bGwhPT1lKXt2YXIgZz1lLm5leHQ7ZS5uZXh0PWYubmV4dDtmLm5leHQ9Z31kLmJhc2VRdWV1ZT1lPWY7Yy5wZW5kaW5nPW51bGx9aWYobnVsbCE9PWUpe2U9ZS5uZXh0O2Q9ZC5iYXNlU3RhdGU7dmFyIGg9Zz1mPW51bGwsaz1lO2Rve3ZhciBsPWsubGFuZTtpZigoeGgmbCk9PT1sKW51bGwhPT1oJiYoaD1oLm5leHQ9e2xhbmU6MCxhY3Rpb246ay5hY3Rpb24sZWFnZXJSZWR1Y2VyOmsuZWFnZXJSZWR1Y2VyLGVhZ2VyU3RhdGU6ay5lYWdlclN0YXRlLG5leHQ6bnVsbH0pLGQ9ay5lYWdlclJlZHVjZXI9PT1hP2suZWFnZXJTdGF0ZTphKGQsay5hY3Rpb24pO2Vsc2V7dmFyIG49e2xhbmU6bCxhY3Rpb246ay5hY3Rpb24sZWFnZXJSZWR1Y2VyOmsuZWFnZXJSZWR1Y2VyLFxuZWFnZXJTdGF0ZTprLmVhZ2VyU3RhdGUsbmV4dDpudWxsfTtudWxsPT09aD8oZz1oPW4sZj1kKTpoPWgubmV4dD1uO1IubGFuZXN8PWw7RGd8PWx9az1rLm5leHR9d2hpbGUobnVsbCE9PWsmJmshPT1lKTtudWxsPT09aD9mPWQ6aC5uZXh0PWc7SGUoZCxiLm1lbW9pemVkU3RhdGUpfHwodWc9ITApO2IubWVtb2l6ZWRTdGF0ZT1kO2IuYmFzZVN0YXRlPWY7Yi5iYXNlUXVldWU9aDtjLmxhc3RSZW5kZXJlZFN0YXRlPWR9cmV0dXJuW2IubWVtb2l6ZWRTdGF0ZSxjLmRpc3BhdGNoXX1cbmZ1bmN0aW9uIExoKGEpe3ZhciBiPUloKCksYz1iLnF1ZXVlO2lmKG51bGw9PT1jKXRocm93IEVycm9yKHkoMzExKSk7Yy5sYXN0UmVuZGVyZWRSZWR1Y2VyPWE7dmFyIGQ9Yy5kaXNwYXRjaCxlPWMucGVuZGluZyxmPWIubWVtb2l6ZWRTdGF0ZTtpZihudWxsIT09ZSl7Yy5wZW5kaW5nPW51bGw7dmFyIGc9ZT1lLm5leHQ7ZG8gZj1hKGYsZy5hY3Rpb24pLGc9Zy5uZXh0O3doaWxlKGchPT1lKTtIZShmLGIubWVtb2l6ZWRTdGF0ZSl8fCh1Zz0hMCk7Yi5tZW1vaXplZFN0YXRlPWY7bnVsbD09PWIuYmFzZVF1ZXVlJiYoYi5iYXNlU3RhdGU9Zik7Yy5sYXN0UmVuZGVyZWRTdGF0ZT1mfXJldHVybltmLGRdfVxuZnVuY3Rpb24gTWgoYSxiLGMpe3ZhciBkPWIuX2dldFZlcnNpb247ZD1kKGIuX3NvdXJjZSk7dmFyIGU9Yi5fd29ya0luUHJvZ3Jlc3NWZXJzaW9uUHJpbWFyeTtpZihudWxsIT09ZSlhPWU9PT1kO2Vsc2UgaWYoYT1hLm11dGFibGVSZWFkTGFuZXMsYT0oeGgmYSk9PT1hKWIuX3dvcmtJblByb2dyZXNzVmVyc2lvblByaW1hcnk9ZCx0aC5wdXNoKGIpO2lmKGEpcmV0dXJuIGMoYi5fc291cmNlKTt0aC5wdXNoKGIpO3Rocm93IEVycm9yKHkoMzUwKSk7fVxuZnVuY3Rpb24gTmgoYSxiLGMsZCl7dmFyIGU9VTtpZihudWxsPT09ZSl0aHJvdyBFcnJvcih5KDM0OSkpO3ZhciBmPWIuX2dldFZlcnNpb24sZz1mKGIuX3NvdXJjZSksaD12aC5jdXJyZW50LGs9aC51c2VTdGF0ZShmdW5jdGlvbigpe3JldHVybiBNaChlLGIsYyl9KSxsPWtbMV0sbj1rWzBdO2s9VDt2YXIgQT1hLm1lbW9pemVkU3RhdGUscD1BLnJlZnMsQz1wLmdldFNuYXBzaG90LHg9QS5zb3VyY2U7QT1BLnN1YnNjcmliZTt2YXIgdz1SO2EubWVtb2l6ZWRTdGF0ZT17cmVmczpwLHNvdXJjZTpiLHN1YnNjcmliZTpkfTtoLnVzZUVmZmVjdChmdW5jdGlvbigpe3AuZ2V0U25hcHNob3Q9YztwLnNldFNuYXBzaG90PWw7dmFyIGE9ZihiLl9zb3VyY2UpO2lmKCFIZShnLGEpKXthPWMoYi5fc291cmNlKTtIZShuLGEpfHwobChhKSxhPUlnKHcpLGUubXV0YWJsZVJlYWRMYW5lc3w9YSZlLnBlbmRpbmdMYW5lcyk7YT1lLm11dGFibGVSZWFkTGFuZXM7ZS5lbnRhbmdsZWRMYW5lc3w9YTtmb3IodmFyIGQ9XG5lLmVudGFuZ2xlbWVudHMsaD1hOzA8aDspe3ZhciBrPTMxLVZjKGgpLHY9MTw8aztkW2tdfD1hO2gmPX52fX19LFtjLGIsZF0pO2gudXNlRWZmZWN0KGZ1bmN0aW9uKCl7cmV0dXJuIGQoYi5fc291cmNlLGZ1bmN0aW9uKCl7dmFyIGE9cC5nZXRTbmFwc2hvdCxjPXAuc2V0U25hcHNob3Q7dHJ5e2MoYShiLl9zb3VyY2UpKTt2YXIgZD1JZyh3KTtlLm11dGFibGVSZWFkTGFuZXN8PWQmZS5wZW5kaW5nTGFuZXN9Y2F0Y2gocSl7YyhmdW5jdGlvbigpe3Rocm93IHE7fSl9fSl9LFtiLGRdKTtIZShDLGMpJiZIZSh4LGIpJiZIZShBLGQpfHwoYT17cGVuZGluZzpudWxsLGRpc3BhdGNoOm51bGwsbGFzdFJlbmRlcmVkUmVkdWNlcjpKaCxsYXN0UmVuZGVyZWRTdGF0ZTpufSxhLmRpc3BhdGNoPWw9T2guYmluZChudWxsLFIsYSksay5xdWV1ZT1hLGsuYmFzZVF1ZXVlPW51bGwsbj1NaChlLGIsYyksay5tZW1vaXplZFN0YXRlPWsuYmFzZVN0YXRlPW4pO3JldHVybiBufVxuZnVuY3Rpb24gUGgoYSxiLGMpe3ZhciBkPUloKCk7cmV0dXJuIE5oKGQsYSxiLGMpfWZ1bmN0aW9uIFFoKGEpe3ZhciBiPUhoKCk7XCJmdW5jdGlvblwiPT09dHlwZW9mIGEmJihhPWEoKSk7Yi5tZW1vaXplZFN0YXRlPWIuYmFzZVN0YXRlPWE7YT1iLnF1ZXVlPXtwZW5kaW5nOm51bGwsZGlzcGF0Y2g6bnVsbCxsYXN0UmVuZGVyZWRSZWR1Y2VyOkpoLGxhc3RSZW5kZXJlZFN0YXRlOmF9O2E9YS5kaXNwYXRjaD1PaC5iaW5kKG51bGwsUixhKTtyZXR1cm5bYi5tZW1vaXplZFN0YXRlLGFdfVxuZnVuY3Rpb24gUmgoYSxiLGMsZCl7YT17dGFnOmEsY3JlYXRlOmIsZGVzdHJveTpjLGRlcHM6ZCxuZXh0Om51bGx9O2I9Ui51cGRhdGVRdWV1ZTtudWxsPT09Yj8oYj17bGFzdEVmZmVjdDpudWxsfSxSLnVwZGF0ZVF1ZXVlPWIsYi5sYXN0RWZmZWN0PWEubmV4dD1hKTooYz1iLmxhc3RFZmZlY3QsbnVsbD09PWM/Yi5sYXN0RWZmZWN0PWEubmV4dD1hOihkPWMubmV4dCxjLm5leHQ9YSxhLm5leHQ9ZCxiLmxhc3RFZmZlY3Q9YSkpO3JldHVybiBhfWZ1bmN0aW9uIFNoKGEpe3ZhciBiPUhoKCk7YT17Y3VycmVudDphfTtyZXR1cm4gYi5tZW1vaXplZFN0YXRlPWF9ZnVuY3Rpb24gVGgoKXtyZXR1cm4gSWgoKS5tZW1vaXplZFN0YXRlfWZ1bmN0aW9uIFVoKGEsYixjLGQpe3ZhciBlPUhoKCk7Ui5mbGFnc3w9YTtlLm1lbW9pemVkU3RhdGU9UmgoMXxiLGMsdm9pZCAwLHZvaWQgMD09PWQ/bnVsbDpkKX1cbmZ1bmN0aW9uIFZoKGEsYixjLGQpe3ZhciBlPUloKCk7ZD12b2lkIDA9PT1kP251bGw6ZDt2YXIgZj12b2lkIDA7aWYobnVsbCE9PVMpe3ZhciBnPVMubWVtb2l6ZWRTdGF0ZTtmPWcuZGVzdHJveTtpZihudWxsIT09ZCYmQmgoZCxnLmRlcHMpKXtSaChiLGMsZixkKTtyZXR1cm59fVIuZmxhZ3N8PWE7ZS5tZW1vaXplZFN0YXRlPVJoKDF8YixjLGYsZCl9ZnVuY3Rpb24gV2goYSxiKXtyZXR1cm4gVWgoNTE2LDQsYSxiKX1mdW5jdGlvbiBYaChhLGIpe3JldHVybiBWaCg1MTYsNCxhLGIpfWZ1bmN0aW9uIFloKGEsYil7cmV0dXJuIFZoKDQsMixhLGIpfWZ1bmN0aW9uIFpoKGEsYil7aWYoXCJmdW5jdGlvblwiPT09dHlwZW9mIGIpcmV0dXJuIGE9YSgpLGIoYSksZnVuY3Rpb24oKXtiKG51bGwpfTtpZihudWxsIT09YiYmdm9pZCAwIT09YilyZXR1cm4gYT1hKCksYi5jdXJyZW50PWEsZnVuY3Rpb24oKXtiLmN1cnJlbnQ9bnVsbH19XG5mdW5jdGlvbiAkaChhLGIsYyl7Yz1udWxsIT09YyYmdm9pZCAwIT09Yz9jLmNvbmNhdChbYV0pOm51bGw7cmV0dXJuIFZoKDQsMixaaC5iaW5kKG51bGwsYixhKSxjKX1mdW5jdGlvbiBhaSgpe31mdW5jdGlvbiBiaShhLGIpe3ZhciBjPUloKCk7Yj12b2lkIDA9PT1iP251bGw6Yjt2YXIgZD1jLm1lbW9pemVkU3RhdGU7aWYobnVsbCE9PWQmJm51bGwhPT1iJiZCaChiLGRbMV0pKXJldHVybiBkWzBdO2MubWVtb2l6ZWRTdGF0ZT1bYSxiXTtyZXR1cm4gYX1mdW5jdGlvbiBjaShhLGIpe3ZhciBjPUloKCk7Yj12b2lkIDA9PT1iP251bGw6Yjt2YXIgZD1jLm1lbW9pemVkU3RhdGU7aWYobnVsbCE9PWQmJm51bGwhPT1iJiZCaChiLGRbMV0pKXJldHVybiBkWzBdO2E9YSgpO2MubWVtb2l6ZWRTdGF0ZT1bYSxiXTtyZXR1cm4gYX1cbmZ1bmN0aW9uIGRpKGEsYil7dmFyIGM9ZWcoKTtnZyg5OD5jPzk4OmMsZnVuY3Rpb24oKXthKCEwKX0pO2dnKDk3PGM/OTc6YyxmdW5jdGlvbigpe3ZhciBjPXdoLnRyYW5zaXRpb247d2gudHJhbnNpdGlvbj0xO3RyeXthKCExKSxiKCl9ZmluYWxseXt3aC50cmFuc2l0aW9uPWN9fSl9XG5mdW5jdGlvbiBPaChhLGIsYyl7dmFyIGQ9SGcoKSxlPUlnKGEpLGY9e2xhbmU6ZSxhY3Rpb246YyxlYWdlclJlZHVjZXI6bnVsbCxlYWdlclN0YXRlOm51bGwsbmV4dDpudWxsfSxnPWIucGVuZGluZztudWxsPT09Zz9mLm5leHQ9ZjooZi5uZXh0PWcubmV4dCxnLm5leHQ9Zik7Yi5wZW5kaW5nPWY7Zz1hLmFsdGVybmF0ZTtpZihhPT09Unx8bnVsbCE9PWcmJmc9PT1SKXpoPXloPSEwO2Vsc2V7aWYoMD09PWEubGFuZXMmJihudWxsPT09Z3x8MD09PWcubGFuZXMpJiYoZz1iLmxhc3RSZW5kZXJlZFJlZHVjZXIsbnVsbCE9PWcpKXRyeXt2YXIgaD1iLmxhc3RSZW5kZXJlZFN0YXRlLGs9ZyhoLGMpO2YuZWFnZXJSZWR1Y2VyPWc7Zi5lYWdlclN0YXRlPWs7aWYoSGUoayxoKSlyZXR1cm59Y2F0Y2gobCl7fWZpbmFsbHl7fUpnKGEsZSxkKX19XG52YXIgR2g9e3JlYWRDb250ZXh0OnZnLHVzZUNhbGxiYWNrOkFoLHVzZUNvbnRleHQ6QWgsdXNlRWZmZWN0OkFoLHVzZUltcGVyYXRpdmVIYW5kbGU6QWgsdXNlTGF5b3V0RWZmZWN0OkFoLHVzZU1lbW86QWgsdXNlUmVkdWNlcjpBaCx1c2VSZWY6QWgsdXNlU3RhdGU6QWgsdXNlRGVidWdWYWx1ZTpBaCx1c2VEZWZlcnJlZFZhbHVlOkFoLHVzZVRyYW5zaXRpb246QWgsdXNlTXV0YWJsZVNvdXJjZTpBaCx1c2VPcGFxdWVJZGVudGlmaWVyOkFoLHVuc3RhYmxlX2lzTmV3UmVjb25jaWxlcjohMX0sRGg9e3JlYWRDb250ZXh0OnZnLHVzZUNhbGxiYWNrOmZ1bmN0aW9uKGEsYil7SGgoKS5tZW1vaXplZFN0YXRlPVthLHZvaWQgMD09PWI/bnVsbDpiXTtyZXR1cm4gYX0sdXNlQ29udGV4dDp2Zyx1c2VFZmZlY3Q6V2gsdXNlSW1wZXJhdGl2ZUhhbmRsZTpmdW5jdGlvbihhLGIsYyl7Yz1udWxsIT09YyYmdm9pZCAwIT09Yz9jLmNvbmNhdChbYV0pOm51bGw7cmV0dXJuIFVoKDQsMixaaC5iaW5kKG51bGwsXG5iLGEpLGMpfSx1c2VMYXlvdXRFZmZlY3Q6ZnVuY3Rpb24oYSxiKXtyZXR1cm4gVWgoNCwyLGEsYil9LHVzZU1lbW86ZnVuY3Rpb24oYSxiKXt2YXIgYz1IaCgpO2I9dm9pZCAwPT09Yj9udWxsOmI7YT1hKCk7Yy5tZW1vaXplZFN0YXRlPVthLGJdO3JldHVybiBhfSx1c2VSZWR1Y2VyOmZ1bmN0aW9uKGEsYixjKXt2YXIgZD1IaCgpO2I9dm9pZCAwIT09Yz9jKGIpOmI7ZC5tZW1vaXplZFN0YXRlPWQuYmFzZVN0YXRlPWI7YT1kLnF1ZXVlPXtwZW5kaW5nOm51bGwsZGlzcGF0Y2g6bnVsbCxsYXN0UmVuZGVyZWRSZWR1Y2VyOmEsbGFzdFJlbmRlcmVkU3RhdGU6Yn07YT1hLmRpc3BhdGNoPU9oLmJpbmQobnVsbCxSLGEpO3JldHVybltkLm1lbW9pemVkU3RhdGUsYV19LHVzZVJlZjpTaCx1c2VTdGF0ZTpRaCx1c2VEZWJ1Z1ZhbHVlOmFpLHVzZURlZmVycmVkVmFsdWU6ZnVuY3Rpb24oYSl7dmFyIGI9UWgoYSksYz1iWzBdLGQ9YlsxXTtXaChmdW5jdGlvbigpe3ZhciBiPXdoLnRyYW5zaXRpb247XG53aC50cmFuc2l0aW9uPTE7dHJ5e2QoYSl9ZmluYWxseXt3aC50cmFuc2l0aW9uPWJ9fSxbYV0pO3JldHVybiBjfSx1c2VUcmFuc2l0aW9uOmZ1bmN0aW9uKCl7dmFyIGE9UWgoITEpLGI9YVswXTthPWRpLmJpbmQobnVsbCxhWzFdKTtTaChhKTtyZXR1cm5bYSxiXX0sdXNlTXV0YWJsZVNvdXJjZTpmdW5jdGlvbihhLGIsYyl7dmFyIGQ9SGgoKTtkLm1lbW9pemVkU3RhdGU9e3JlZnM6e2dldFNuYXBzaG90OmIsc2V0U25hcHNob3Q6bnVsbH0sc291cmNlOmEsc3Vic2NyaWJlOmN9O3JldHVybiBOaChkLGEsYixjKX0sdXNlT3BhcXVlSWRlbnRpZmllcjpmdW5jdGlvbigpe2lmKGxoKXt2YXIgYT0hMSxiPXVmKGZ1bmN0aW9uKCl7YXx8KGE9ITAsYyhcInI6XCIrKHRmKyspLnRvU3RyaW5nKDM2KSkpO3Rocm93IEVycm9yKHkoMzU1KSk7fSksYz1RaChiKVsxXTswPT09KFIubW9kZSYyKSYmKFIuZmxhZ3N8PTUxNixSaCg1LGZ1bmN0aW9uKCl7YyhcInI6XCIrKHRmKyspLnRvU3RyaW5nKDM2KSl9LFxudm9pZCAwLG51bGwpKTtyZXR1cm4gYn1iPVwicjpcIisodGYrKykudG9TdHJpbmcoMzYpO1FoKGIpO3JldHVybiBifSx1bnN0YWJsZV9pc05ld1JlY29uY2lsZXI6ITF9LEVoPXtyZWFkQ29udGV4dDp2Zyx1c2VDYWxsYmFjazpiaSx1c2VDb250ZXh0OnZnLHVzZUVmZmVjdDpYaCx1c2VJbXBlcmF0aXZlSGFuZGxlOiRoLHVzZUxheW91dEVmZmVjdDpZaCx1c2VNZW1vOmNpLHVzZVJlZHVjZXI6S2gsdXNlUmVmOlRoLHVzZVN0YXRlOmZ1bmN0aW9uKCl7cmV0dXJuIEtoKEpoKX0sdXNlRGVidWdWYWx1ZTphaSx1c2VEZWZlcnJlZFZhbHVlOmZ1bmN0aW9uKGEpe3ZhciBiPUtoKEpoKSxjPWJbMF0sZD1iWzFdO1hoKGZ1bmN0aW9uKCl7dmFyIGI9d2gudHJhbnNpdGlvbjt3aC50cmFuc2l0aW9uPTE7dHJ5e2QoYSl9ZmluYWxseXt3aC50cmFuc2l0aW9uPWJ9fSxbYV0pO3JldHVybiBjfSx1c2VUcmFuc2l0aW9uOmZ1bmN0aW9uKCl7dmFyIGE9S2goSmgpWzBdO3JldHVybltUaCgpLmN1cnJlbnQsXG5hXX0sdXNlTXV0YWJsZVNvdXJjZTpQaCx1c2VPcGFxdWVJZGVudGlmaWVyOmZ1bmN0aW9uKCl7cmV0dXJuIEtoKEpoKVswXX0sdW5zdGFibGVfaXNOZXdSZWNvbmNpbGVyOiExfSxGaD17cmVhZENvbnRleHQ6dmcsdXNlQ2FsbGJhY2s6YmksdXNlQ29udGV4dDp2Zyx1c2VFZmZlY3Q6WGgsdXNlSW1wZXJhdGl2ZUhhbmRsZTokaCx1c2VMYXlvdXRFZmZlY3Q6WWgsdXNlTWVtbzpjaSx1c2VSZWR1Y2VyOkxoLHVzZVJlZjpUaCx1c2VTdGF0ZTpmdW5jdGlvbigpe3JldHVybiBMaChKaCl9LHVzZURlYnVnVmFsdWU6YWksdXNlRGVmZXJyZWRWYWx1ZTpmdW5jdGlvbihhKXt2YXIgYj1MaChKaCksYz1iWzBdLGQ9YlsxXTtYaChmdW5jdGlvbigpe3ZhciBiPXdoLnRyYW5zaXRpb247d2gudHJhbnNpdGlvbj0xO3RyeXtkKGEpfWZpbmFsbHl7d2gudHJhbnNpdGlvbj1ifX0sW2FdKTtyZXR1cm4gY30sdXNlVHJhbnNpdGlvbjpmdW5jdGlvbigpe3ZhciBhPUxoKEpoKVswXTtyZXR1cm5bVGgoKS5jdXJyZW50LFxuYV19LHVzZU11dGFibGVTb3VyY2U6UGgsdXNlT3BhcXVlSWRlbnRpZmllcjpmdW5jdGlvbigpe3JldHVybiBMaChKaClbMF19LHVuc3RhYmxlX2lzTmV3UmVjb25jaWxlcjohMX0sZWk9cmEuUmVhY3RDdXJyZW50T3duZXIsdWc9ITE7ZnVuY3Rpb24gZmkoYSxiLGMsZCl7Yi5jaGlsZD1udWxsPT09YT9aZyhiLG51bGwsYyxkKTpZZyhiLGEuY2hpbGQsYyxkKX1mdW5jdGlvbiBnaShhLGIsYyxkLGUpe2M9Yy5yZW5kZXI7dmFyIGY9Yi5yZWY7dGcoYixlKTtkPUNoKGEsYixjLGQsZixlKTtpZihudWxsIT09YSYmIXVnKXJldHVybiBiLnVwZGF0ZVF1ZXVlPWEudXBkYXRlUXVldWUsYi5mbGFncyY9LTUxNyxhLmxhbmVzJj1+ZSxoaShhLGIsZSk7Yi5mbGFnc3w9MTtmaShhLGIsZCxlKTtyZXR1cm4gYi5jaGlsZH1cbmZ1bmN0aW9uIGlpKGEsYixjLGQsZSxmKXtpZihudWxsPT09YSl7dmFyIGc9Yy50eXBlO2lmKFwiZnVuY3Rpb25cIj09PXR5cGVvZiBnJiYhamkoZykmJnZvaWQgMD09PWcuZGVmYXVsdFByb3BzJiZudWxsPT09Yy5jb21wYXJlJiZ2b2lkIDA9PT1jLmRlZmF1bHRQcm9wcylyZXR1cm4gYi50YWc9MTUsYi50eXBlPWcsa2koYSxiLGcsZCxlLGYpO2E9VmcoYy50eXBlLG51bGwsZCxiLGIubW9kZSxmKTthLnJlZj1iLnJlZjthLnJldHVybj1iO3JldHVybiBiLmNoaWxkPWF9Zz1hLmNoaWxkO2lmKDA9PT0oZSZmKSYmKGU9Zy5tZW1vaXplZFByb3BzLGM9Yy5jb21wYXJlLGM9bnVsbCE9PWM/YzpKZSxjKGUsZCkmJmEucmVmPT09Yi5yZWYpKXJldHVybiBoaShhLGIsZik7Yi5mbGFnc3w9MTthPVRnKGcsZCk7YS5yZWY9Yi5yZWY7YS5yZXR1cm49YjtyZXR1cm4gYi5jaGlsZD1hfVxuZnVuY3Rpb24ga2koYSxiLGMsZCxlLGYpe2lmKG51bGwhPT1hJiZKZShhLm1lbW9pemVkUHJvcHMsZCkmJmEucmVmPT09Yi5yZWYpaWYodWc9ITEsMCE9PShmJmUpKTAhPT0oYS5mbGFncyYxNjM4NCkmJih1Zz0hMCk7ZWxzZSByZXR1cm4gYi5sYW5lcz1hLmxhbmVzLGhpKGEsYixmKTtyZXR1cm4gbGkoYSxiLGMsZCxmKX1cbmZ1bmN0aW9uIG1pKGEsYixjKXt2YXIgZD1iLnBlbmRpbmdQcm9wcyxlPWQuY2hpbGRyZW4sZj1udWxsIT09YT9hLm1lbW9pemVkU3RhdGU6bnVsbDtpZihcImhpZGRlblwiPT09ZC5tb2RlfHxcInVuc3RhYmxlLWRlZmVyLXdpdGhvdXQtaGlkaW5nXCI9PT1kLm1vZGUpaWYoMD09PShiLm1vZGUmNCkpYi5tZW1vaXplZFN0YXRlPXtiYXNlTGFuZXM6MH0sbmkoYixjKTtlbHNlIGlmKDAhPT0oYyYxMDczNzQxODI0KSliLm1lbW9pemVkU3RhdGU9e2Jhc2VMYW5lczowfSxuaShiLG51bGwhPT1mP2YuYmFzZUxhbmVzOmMpO2Vsc2UgcmV0dXJuIGE9bnVsbCE9PWY/Zi5iYXNlTGFuZXN8YzpjLGIubGFuZXM9Yi5jaGlsZExhbmVzPTEwNzM3NDE4MjQsYi5tZW1vaXplZFN0YXRlPXtiYXNlTGFuZXM6YX0sbmkoYixhKSxudWxsO2Vsc2UgbnVsbCE9PWY/KGQ9Zi5iYXNlTGFuZXN8YyxiLm1lbW9pemVkU3RhdGU9bnVsbCk6ZD1jLG5pKGIsZCk7ZmkoYSxiLGUsYyk7cmV0dXJuIGIuY2hpbGR9XG5mdW5jdGlvbiBvaShhLGIpe3ZhciBjPWIucmVmO2lmKG51bGw9PT1hJiZudWxsIT09Y3x8bnVsbCE9PWEmJmEucmVmIT09YyliLmZsYWdzfD0xMjh9ZnVuY3Rpb24gbGkoYSxiLGMsZCxlKXt2YXIgZj1GZihjKT9EZjpNLmN1cnJlbnQ7Zj1FZihiLGYpO3RnKGIsZSk7Yz1DaChhLGIsYyxkLGYsZSk7aWYobnVsbCE9PWEmJiF1ZylyZXR1cm4gYi51cGRhdGVRdWV1ZT1hLnVwZGF0ZVF1ZXVlLGIuZmxhZ3MmPS01MTcsYS5sYW5lcyY9fmUsaGkoYSxiLGUpO2IuZmxhZ3N8PTE7ZmkoYSxiLGMsZSk7cmV0dXJuIGIuY2hpbGR9XG5mdW5jdGlvbiBwaShhLGIsYyxkLGUpe2lmKEZmKGMpKXt2YXIgZj0hMDtKZihiKX1lbHNlIGY9ITE7dGcoYixlKTtpZihudWxsPT09Yi5zdGF0ZU5vZGUpbnVsbCE9PWEmJihhLmFsdGVybmF0ZT1udWxsLGIuYWx0ZXJuYXRlPW51bGwsYi5mbGFnc3w9MiksTWcoYixjLGQpLE9nKGIsYyxkLGUpLGQ9ITA7ZWxzZSBpZihudWxsPT09YSl7dmFyIGc9Yi5zdGF0ZU5vZGUsaD1iLm1lbW9pemVkUHJvcHM7Zy5wcm9wcz1oO3ZhciBrPWcuY29udGV4dCxsPWMuY29udGV4dFR5cGU7XCJvYmplY3RcIj09PXR5cGVvZiBsJiZudWxsIT09bD9sPXZnKGwpOihsPUZmKGMpP0RmOk0uY3VycmVudCxsPUVmKGIsbCkpO3ZhciBuPWMuZ2V0RGVyaXZlZFN0YXRlRnJvbVByb3BzLEE9XCJmdW5jdGlvblwiPT09dHlwZW9mIG58fFwiZnVuY3Rpb25cIj09PXR5cGVvZiBnLmdldFNuYXBzaG90QmVmb3JlVXBkYXRlO0F8fFwiZnVuY3Rpb25cIiE9PXR5cGVvZiBnLlVOU0FGRV9jb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzJiZcblwiZnVuY3Rpb25cIiE9PXR5cGVvZiBnLmNvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHN8fChoIT09ZHx8ayE9PWwpJiZOZyhiLGcsZCxsKTt3Zz0hMTt2YXIgcD1iLm1lbW9pemVkU3RhdGU7Zy5zdGF0ZT1wO0NnKGIsZCxnLGUpO2s9Yi5tZW1vaXplZFN0YXRlO2ghPT1kfHxwIT09a3x8Ti5jdXJyZW50fHx3Zz8oXCJmdW5jdGlvblwiPT09dHlwZW9mIG4mJihHZyhiLGMsbixkKSxrPWIubWVtb2l6ZWRTdGF0ZSksKGg9d2d8fExnKGIsYyxoLGQscCxrLGwpKT8oQXx8XCJmdW5jdGlvblwiIT09dHlwZW9mIGcuVU5TQUZFX2NvbXBvbmVudFdpbGxNb3VudCYmXCJmdW5jdGlvblwiIT09dHlwZW9mIGcuY29tcG9uZW50V2lsbE1vdW50fHwoXCJmdW5jdGlvblwiPT09dHlwZW9mIGcuY29tcG9uZW50V2lsbE1vdW50JiZnLmNvbXBvbmVudFdpbGxNb3VudCgpLFwiZnVuY3Rpb25cIj09PXR5cGVvZiBnLlVOU0FGRV9jb21wb25lbnRXaWxsTW91bnQmJmcuVU5TQUZFX2NvbXBvbmVudFdpbGxNb3VudCgpKSxcImZ1bmN0aW9uXCI9PT1cbnR5cGVvZiBnLmNvbXBvbmVudERpZE1vdW50JiYoYi5mbGFnc3w9NCkpOihcImZ1bmN0aW9uXCI9PT10eXBlb2YgZy5jb21wb25lbnREaWRNb3VudCYmKGIuZmxhZ3N8PTQpLGIubWVtb2l6ZWRQcm9wcz1kLGIubWVtb2l6ZWRTdGF0ZT1rKSxnLnByb3BzPWQsZy5zdGF0ZT1rLGcuY29udGV4dD1sLGQ9aCk6KFwiZnVuY3Rpb25cIj09PXR5cGVvZiBnLmNvbXBvbmVudERpZE1vdW50JiYoYi5mbGFnc3w9NCksZD0hMSl9ZWxzZXtnPWIuc3RhdGVOb2RlO3lnKGEsYik7aD1iLm1lbW9pemVkUHJvcHM7bD1iLnR5cGU9PT1iLmVsZW1lbnRUeXBlP2g6bGcoYi50eXBlLGgpO2cucHJvcHM9bDtBPWIucGVuZGluZ1Byb3BzO3A9Zy5jb250ZXh0O2s9Yy5jb250ZXh0VHlwZTtcIm9iamVjdFwiPT09dHlwZW9mIGsmJm51bGwhPT1rP2s9dmcoayk6KGs9RmYoYyk/RGY6TS5jdXJyZW50LGs9RWYoYixrKSk7dmFyIEM9Yy5nZXREZXJpdmVkU3RhdGVGcm9tUHJvcHM7KG49XCJmdW5jdGlvblwiPT09dHlwZW9mIEN8fFxuXCJmdW5jdGlvblwiPT09dHlwZW9mIGcuZ2V0U25hcHNob3RCZWZvcmVVcGRhdGUpfHxcImZ1bmN0aW9uXCIhPT10eXBlb2YgZy5VTlNBRkVfY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyYmXCJmdW5jdGlvblwiIT09dHlwZW9mIGcuY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wc3x8KGghPT1BfHxwIT09aykmJk5nKGIsZyxkLGspO3dnPSExO3A9Yi5tZW1vaXplZFN0YXRlO2cuc3RhdGU9cDtDZyhiLGQsZyxlKTt2YXIgeD1iLm1lbW9pemVkU3RhdGU7aCE9PUF8fHAhPT14fHxOLmN1cnJlbnR8fHdnPyhcImZ1bmN0aW9uXCI9PT10eXBlb2YgQyYmKEdnKGIsYyxDLGQpLHg9Yi5tZW1vaXplZFN0YXRlKSwobD13Z3x8TGcoYixjLGwsZCxwLHgsaykpPyhufHxcImZ1bmN0aW9uXCIhPT10eXBlb2YgZy5VTlNBRkVfY29tcG9uZW50V2lsbFVwZGF0ZSYmXCJmdW5jdGlvblwiIT09dHlwZW9mIGcuY29tcG9uZW50V2lsbFVwZGF0ZXx8KFwiZnVuY3Rpb25cIj09PXR5cGVvZiBnLmNvbXBvbmVudFdpbGxVcGRhdGUmJmcuY29tcG9uZW50V2lsbFVwZGF0ZShkLFxueCxrKSxcImZ1bmN0aW9uXCI9PT10eXBlb2YgZy5VTlNBRkVfY29tcG9uZW50V2lsbFVwZGF0ZSYmZy5VTlNBRkVfY29tcG9uZW50V2lsbFVwZGF0ZShkLHgsaykpLFwiZnVuY3Rpb25cIj09PXR5cGVvZiBnLmNvbXBvbmVudERpZFVwZGF0ZSYmKGIuZmxhZ3N8PTQpLFwiZnVuY3Rpb25cIj09PXR5cGVvZiBnLmdldFNuYXBzaG90QmVmb3JlVXBkYXRlJiYoYi5mbGFnc3w9MjU2KSk6KFwiZnVuY3Rpb25cIiE9PXR5cGVvZiBnLmNvbXBvbmVudERpZFVwZGF0ZXx8aD09PWEubWVtb2l6ZWRQcm9wcyYmcD09PWEubWVtb2l6ZWRTdGF0ZXx8KGIuZmxhZ3N8PTQpLFwiZnVuY3Rpb25cIiE9PXR5cGVvZiBnLmdldFNuYXBzaG90QmVmb3JlVXBkYXRlfHxoPT09YS5tZW1vaXplZFByb3BzJiZwPT09YS5tZW1vaXplZFN0YXRlfHwoYi5mbGFnc3w9MjU2KSxiLm1lbW9pemVkUHJvcHM9ZCxiLm1lbW9pemVkU3RhdGU9eCksZy5wcm9wcz1kLGcuc3RhdGU9eCxnLmNvbnRleHQ9ayxkPWwpOihcImZ1bmN0aW9uXCIhPT10eXBlb2YgZy5jb21wb25lbnREaWRVcGRhdGV8fFxuaD09PWEubWVtb2l6ZWRQcm9wcyYmcD09PWEubWVtb2l6ZWRTdGF0ZXx8KGIuZmxhZ3N8PTQpLFwiZnVuY3Rpb25cIiE9PXR5cGVvZiBnLmdldFNuYXBzaG90QmVmb3JlVXBkYXRlfHxoPT09YS5tZW1vaXplZFByb3BzJiZwPT09YS5tZW1vaXplZFN0YXRlfHwoYi5mbGFnc3w9MjU2KSxkPSExKX1yZXR1cm4gcWkoYSxiLGMsZCxmLGUpfVxuZnVuY3Rpb24gcWkoYSxiLGMsZCxlLGYpe29pKGEsYik7dmFyIGc9MCE9PShiLmZsYWdzJjY0KTtpZighZCYmIWcpcmV0dXJuIGUmJktmKGIsYywhMSksaGkoYSxiLGYpO2Q9Yi5zdGF0ZU5vZGU7ZWkuY3VycmVudD1iO3ZhciBoPWcmJlwiZnVuY3Rpb25cIiE9PXR5cGVvZiBjLmdldERlcml2ZWRTdGF0ZUZyb21FcnJvcj9udWxsOmQucmVuZGVyKCk7Yi5mbGFnc3w9MTtudWxsIT09YSYmZz8oYi5jaGlsZD1ZZyhiLGEuY2hpbGQsbnVsbCxmKSxiLmNoaWxkPVlnKGIsbnVsbCxoLGYpKTpmaShhLGIsaCxmKTtiLm1lbW9pemVkU3RhdGU9ZC5zdGF0ZTtlJiZLZihiLGMsITApO3JldHVybiBiLmNoaWxkfWZ1bmN0aW9uIHJpKGEpe3ZhciBiPWEuc3RhdGVOb2RlO2IucGVuZGluZ0NvbnRleHQ/SGYoYSxiLnBlbmRpbmdDb250ZXh0LGIucGVuZGluZ0NvbnRleHQhPT1iLmNvbnRleHQpOmIuY29udGV4dCYmSGYoYSxiLmNvbnRleHQsITEpO2VoKGEsYi5jb250YWluZXJJbmZvKX1cbnZhciBzaT17ZGVoeWRyYXRlZDpudWxsLHJldHJ5TGFuZTowfTtcbmZ1bmN0aW9uIHRpKGEsYixjKXt2YXIgZD1iLnBlbmRpbmdQcm9wcyxlPVAuY3VycmVudCxmPSExLGc7KGc9MCE9PShiLmZsYWdzJjY0KSl8fChnPW51bGwhPT1hJiZudWxsPT09YS5tZW1vaXplZFN0YXRlPyExOjAhPT0oZSYyKSk7Zz8oZj0hMCxiLmZsYWdzJj0tNjUpOm51bGwhPT1hJiZudWxsPT09YS5tZW1vaXplZFN0YXRlfHx2b2lkIDA9PT1kLmZhbGxiYWNrfHwhMD09PWQudW5zdGFibGVfYXZvaWRUaGlzRmFsbGJhY2t8fChlfD0xKTtJKFAsZSYxKTtpZihudWxsPT09YSl7dm9pZCAwIT09ZC5mYWxsYmFjayYmcGgoYik7YT1kLmNoaWxkcmVuO2U9ZC5mYWxsYmFjaztpZihmKXJldHVybiBhPXVpKGIsYSxlLGMpLGIuY2hpbGQubWVtb2l6ZWRTdGF0ZT17YmFzZUxhbmVzOmN9LGIubWVtb2l6ZWRTdGF0ZT1zaSxhO2lmKFwibnVtYmVyXCI9PT10eXBlb2YgZC51bnN0YWJsZV9leHBlY3RlZExvYWRUaW1lKXJldHVybiBhPXVpKGIsYSxlLGMpLGIuY2hpbGQubWVtb2l6ZWRTdGF0ZT17YmFzZUxhbmVzOmN9LFxuYi5tZW1vaXplZFN0YXRlPXNpLGIubGFuZXM9MzM1NTQ0MzIsYTtjPXZpKHttb2RlOlwidmlzaWJsZVwiLGNoaWxkcmVuOmF9LGIubW9kZSxjLG51bGwpO2MucmV0dXJuPWI7cmV0dXJuIGIuY2hpbGQ9Y31pZihudWxsIT09YS5tZW1vaXplZFN0YXRlKXtpZihmKXJldHVybiBkPXdpKGEsYixkLmNoaWxkcmVuLGQuZmFsbGJhY2ssYyksZj1iLmNoaWxkLGU9YS5jaGlsZC5tZW1vaXplZFN0YXRlLGYubWVtb2l6ZWRTdGF0ZT1udWxsPT09ZT97YmFzZUxhbmVzOmN9OntiYXNlTGFuZXM6ZS5iYXNlTGFuZXN8Y30sZi5jaGlsZExhbmVzPWEuY2hpbGRMYW5lcyZ+YyxiLm1lbW9pemVkU3RhdGU9c2ksZDtjPXhpKGEsYixkLmNoaWxkcmVuLGMpO2IubWVtb2l6ZWRTdGF0ZT1udWxsO3JldHVybiBjfWlmKGYpcmV0dXJuIGQ9d2koYSxiLGQuY2hpbGRyZW4sZC5mYWxsYmFjayxjKSxmPWIuY2hpbGQsZT1hLmNoaWxkLm1lbW9pemVkU3RhdGUsZi5tZW1vaXplZFN0YXRlPW51bGw9PT1lP3tiYXNlTGFuZXM6Y306XG57YmFzZUxhbmVzOmUuYmFzZUxhbmVzfGN9LGYuY2hpbGRMYW5lcz1hLmNoaWxkTGFuZXMmfmMsYi5tZW1vaXplZFN0YXRlPXNpLGQ7Yz14aShhLGIsZC5jaGlsZHJlbixjKTtiLm1lbW9pemVkU3RhdGU9bnVsbDtyZXR1cm4gY31mdW5jdGlvbiB1aShhLGIsYyxkKXt2YXIgZT1hLm1vZGUsZj1hLmNoaWxkO2I9e21vZGU6XCJoaWRkZW5cIixjaGlsZHJlbjpifTswPT09KGUmMikmJm51bGwhPT1mPyhmLmNoaWxkTGFuZXM9MCxmLnBlbmRpbmdQcm9wcz1iKTpmPXZpKGIsZSwwLG51bGwpO2M9WGcoYyxlLGQsbnVsbCk7Zi5yZXR1cm49YTtjLnJldHVybj1hO2Yuc2libGluZz1jO2EuY2hpbGQ9ZjtyZXR1cm4gY31cbmZ1bmN0aW9uIHhpKGEsYixjLGQpe3ZhciBlPWEuY2hpbGQ7YT1lLnNpYmxpbmc7Yz1UZyhlLHttb2RlOlwidmlzaWJsZVwiLGNoaWxkcmVuOmN9KTswPT09KGIubW9kZSYyKSYmKGMubGFuZXM9ZCk7Yy5yZXR1cm49YjtjLnNpYmxpbmc9bnVsbDtudWxsIT09YSYmKGEubmV4dEVmZmVjdD1udWxsLGEuZmxhZ3M9OCxiLmZpcnN0RWZmZWN0PWIubGFzdEVmZmVjdD1hKTtyZXR1cm4gYi5jaGlsZD1jfVxuZnVuY3Rpb24gd2koYSxiLGMsZCxlKXt2YXIgZj1iLm1vZGUsZz1hLmNoaWxkO2E9Zy5zaWJsaW5nO3ZhciBoPXttb2RlOlwiaGlkZGVuXCIsY2hpbGRyZW46Y307MD09PShmJjIpJiZiLmNoaWxkIT09Zz8oYz1iLmNoaWxkLGMuY2hpbGRMYW5lcz0wLGMucGVuZGluZ1Byb3BzPWgsZz1jLmxhc3RFZmZlY3QsbnVsbCE9PWc/KGIuZmlyc3RFZmZlY3Q9Yy5maXJzdEVmZmVjdCxiLmxhc3RFZmZlY3Q9ZyxnLm5leHRFZmZlY3Q9bnVsbCk6Yi5maXJzdEVmZmVjdD1iLmxhc3RFZmZlY3Q9bnVsbCk6Yz1UZyhnLGgpO251bGwhPT1hP2Q9VGcoYSxkKTooZD1YZyhkLGYsZSxudWxsKSxkLmZsYWdzfD0yKTtkLnJldHVybj1iO2MucmV0dXJuPWI7Yy5zaWJsaW5nPWQ7Yi5jaGlsZD1jO3JldHVybiBkfWZ1bmN0aW9uIHlpKGEsYil7YS5sYW5lc3w9Yjt2YXIgYz1hLmFsdGVybmF0ZTtudWxsIT09YyYmKGMubGFuZXN8PWIpO3NnKGEucmV0dXJuLGIpfVxuZnVuY3Rpb24gemkoYSxiLGMsZCxlLGYpe3ZhciBnPWEubWVtb2l6ZWRTdGF0ZTtudWxsPT09Zz9hLm1lbW9pemVkU3RhdGU9e2lzQmFja3dhcmRzOmIscmVuZGVyaW5nOm51bGwscmVuZGVyaW5nU3RhcnRUaW1lOjAsbGFzdDpkLHRhaWw6Yyx0YWlsTW9kZTplLGxhc3RFZmZlY3Q6Zn06KGcuaXNCYWNrd2FyZHM9YixnLnJlbmRlcmluZz1udWxsLGcucmVuZGVyaW5nU3RhcnRUaW1lPTAsZy5sYXN0PWQsZy50YWlsPWMsZy50YWlsTW9kZT1lLGcubGFzdEVmZmVjdD1mKX1cbmZ1bmN0aW9uIEFpKGEsYixjKXt2YXIgZD1iLnBlbmRpbmdQcm9wcyxlPWQucmV2ZWFsT3JkZXIsZj1kLnRhaWw7ZmkoYSxiLGQuY2hpbGRyZW4sYyk7ZD1QLmN1cnJlbnQ7aWYoMCE9PShkJjIpKWQ9ZCYxfDIsYi5mbGFnc3w9NjQ7ZWxzZXtpZihudWxsIT09YSYmMCE9PShhLmZsYWdzJjY0KSlhOmZvcihhPWIuY2hpbGQ7bnVsbCE9PWE7KXtpZigxMz09PWEudGFnKW51bGwhPT1hLm1lbW9pemVkU3RhdGUmJnlpKGEsYyk7ZWxzZSBpZigxOT09PWEudGFnKXlpKGEsYyk7ZWxzZSBpZihudWxsIT09YS5jaGlsZCl7YS5jaGlsZC5yZXR1cm49YTthPWEuY2hpbGQ7Y29udGludWV9aWYoYT09PWIpYnJlYWsgYTtmb3IoO251bGw9PT1hLnNpYmxpbmc7KXtpZihudWxsPT09YS5yZXR1cm58fGEucmV0dXJuPT09YilicmVhayBhO2E9YS5yZXR1cm59YS5zaWJsaW5nLnJldHVybj1hLnJldHVybjthPWEuc2libGluZ31kJj0xfUkoUCxkKTtpZigwPT09KGIubW9kZSYyKSliLm1lbW9pemVkU3RhdGU9XG5udWxsO2Vsc2Ugc3dpdGNoKGUpe2Nhc2UgXCJmb3J3YXJkc1wiOmM9Yi5jaGlsZDtmb3IoZT1udWxsO251bGwhPT1jOylhPWMuYWx0ZXJuYXRlLG51bGwhPT1hJiZudWxsPT09aWgoYSkmJihlPWMpLGM9Yy5zaWJsaW5nO2M9ZTtudWxsPT09Yz8oZT1iLmNoaWxkLGIuY2hpbGQ9bnVsbCk6KGU9Yy5zaWJsaW5nLGMuc2libGluZz1udWxsKTt6aShiLCExLGUsYyxmLGIubGFzdEVmZmVjdCk7YnJlYWs7Y2FzZSBcImJhY2t3YXJkc1wiOmM9bnVsbDtlPWIuY2hpbGQ7Zm9yKGIuY2hpbGQ9bnVsbDtudWxsIT09ZTspe2E9ZS5hbHRlcm5hdGU7aWYobnVsbCE9PWEmJm51bGw9PT1paChhKSl7Yi5jaGlsZD1lO2JyZWFrfWE9ZS5zaWJsaW5nO2Uuc2libGluZz1jO2M9ZTtlPWF9emkoYiwhMCxjLG51bGwsZixiLmxhc3RFZmZlY3QpO2JyZWFrO2Nhc2UgXCJ0b2dldGhlclwiOnppKGIsITEsbnVsbCxudWxsLHZvaWQgMCxiLmxhc3RFZmZlY3QpO2JyZWFrO2RlZmF1bHQ6Yi5tZW1vaXplZFN0YXRlPW51bGx9cmV0dXJuIGIuY2hpbGR9XG5mdW5jdGlvbiBoaShhLGIsYyl7bnVsbCE9PWEmJihiLmRlcGVuZGVuY2llcz1hLmRlcGVuZGVuY2llcyk7RGd8PWIubGFuZXM7aWYoMCE9PShjJmIuY2hpbGRMYW5lcykpe2lmKG51bGwhPT1hJiZiLmNoaWxkIT09YS5jaGlsZCl0aHJvdyBFcnJvcih5KDE1MykpO2lmKG51bGwhPT1iLmNoaWxkKXthPWIuY2hpbGQ7Yz1UZyhhLGEucGVuZGluZ1Byb3BzKTtiLmNoaWxkPWM7Zm9yKGMucmV0dXJuPWI7bnVsbCE9PWEuc2libGluZzspYT1hLnNpYmxpbmcsYz1jLnNpYmxpbmc9VGcoYSxhLnBlbmRpbmdQcm9wcyksYy5yZXR1cm49YjtjLnNpYmxpbmc9bnVsbH1yZXR1cm4gYi5jaGlsZH1yZXR1cm4gbnVsbH12YXIgQmksQ2ksRGksRWk7XG5CaT1mdW5jdGlvbihhLGIpe2Zvcih2YXIgYz1iLmNoaWxkO251bGwhPT1jOyl7aWYoNT09PWMudGFnfHw2PT09Yy50YWcpYS5hcHBlbmRDaGlsZChjLnN0YXRlTm9kZSk7ZWxzZSBpZig0IT09Yy50YWcmJm51bGwhPT1jLmNoaWxkKXtjLmNoaWxkLnJldHVybj1jO2M9Yy5jaGlsZDtjb250aW51ZX1pZihjPT09YilicmVhaztmb3IoO251bGw9PT1jLnNpYmxpbmc7KXtpZihudWxsPT09Yy5yZXR1cm58fGMucmV0dXJuPT09YilyZXR1cm47Yz1jLnJldHVybn1jLnNpYmxpbmcucmV0dXJuPWMucmV0dXJuO2M9Yy5zaWJsaW5nfX07Q2k9ZnVuY3Rpb24oKXt9O1xuRGk9ZnVuY3Rpb24oYSxiLGMsZCl7dmFyIGU9YS5tZW1vaXplZFByb3BzO2lmKGUhPT1kKXthPWIuc3RhdGVOb2RlO2RoKGFoLmN1cnJlbnQpO3ZhciBmPW51bGw7c3dpdGNoKGMpe2Nhc2UgXCJpbnB1dFwiOmU9WWEoYSxlKTtkPVlhKGEsZCk7Zj1bXTticmVhaztjYXNlIFwib3B0aW9uXCI6ZT1lYihhLGUpO2Q9ZWIoYSxkKTtmPVtdO2JyZWFrO2Nhc2UgXCJzZWxlY3RcIjplPW0oe30sZSx7dmFsdWU6dm9pZCAwfSk7ZD1tKHt9LGQse3ZhbHVlOnZvaWQgMH0pO2Y9W107YnJlYWs7Y2FzZSBcInRleHRhcmVhXCI6ZT1nYihhLGUpO2Q9Z2IoYSxkKTtmPVtdO2JyZWFrO2RlZmF1bHQ6XCJmdW5jdGlvblwiIT09dHlwZW9mIGUub25DbGljayYmXCJmdW5jdGlvblwiPT09dHlwZW9mIGQub25DbGljayYmKGEub25jbGljaz1qZil9dmIoYyxkKTt2YXIgZztjPW51bGw7Zm9yKGwgaW4gZSlpZighZC5oYXNPd25Qcm9wZXJ0eShsKSYmZS5oYXNPd25Qcm9wZXJ0eShsKSYmbnVsbCE9ZVtsXSlpZihcInN0eWxlXCI9PT1cbmwpe3ZhciBoPWVbbF07Zm9yKGcgaW4gaCloLmhhc093blByb3BlcnR5KGcpJiYoY3x8KGM9e30pLGNbZ109XCJcIil9ZWxzZVwiZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUxcIiE9PWwmJlwiY2hpbGRyZW5cIiE9PWwmJlwic3VwcHJlc3NDb250ZW50RWRpdGFibGVXYXJuaW5nXCIhPT1sJiZcInN1cHByZXNzSHlkcmF0aW9uV2FybmluZ1wiIT09bCYmXCJhdXRvRm9jdXNcIiE9PWwmJihjYS5oYXNPd25Qcm9wZXJ0eShsKT9mfHwoZj1bXSk6KGY9Znx8W10pLnB1c2gobCxudWxsKSk7Zm9yKGwgaW4gZCl7dmFyIGs9ZFtsXTtoPW51bGwhPWU/ZVtsXTp2b2lkIDA7aWYoZC5oYXNPd25Qcm9wZXJ0eShsKSYmayE9PWgmJihudWxsIT1rfHxudWxsIT1oKSlpZihcInN0eWxlXCI9PT1sKWlmKGgpe2ZvcihnIGluIGgpIWguaGFzT3duUHJvcGVydHkoZyl8fGsmJmsuaGFzT3duUHJvcGVydHkoZyl8fChjfHwoYz17fSksY1tnXT1cIlwiKTtmb3IoZyBpbiBrKWsuaGFzT3duUHJvcGVydHkoZykmJmhbZ10hPT1rW2ddJiYoY3x8XG4oYz17fSksY1tnXT1rW2ddKX1lbHNlIGN8fChmfHwoZj1bXSksZi5wdXNoKGwsYykpLGM9aztlbHNlXCJkYW5nZXJvdXNseVNldElubmVySFRNTFwiPT09bD8oaz1rP2suX19odG1sOnZvaWQgMCxoPWg/aC5fX2h0bWw6dm9pZCAwLG51bGwhPWsmJmghPT1rJiYoZj1mfHxbXSkucHVzaChsLGspKTpcImNoaWxkcmVuXCI9PT1sP1wic3RyaW5nXCIhPT10eXBlb2YgayYmXCJudW1iZXJcIiE9PXR5cGVvZiBrfHwoZj1mfHxbXSkucHVzaChsLFwiXCIrayk6XCJzdXBwcmVzc0NvbnRlbnRFZGl0YWJsZVdhcm5pbmdcIiE9PWwmJlwic3VwcHJlc3NIeWRyYXRpb25XYXJuaW5nXCIhPT1sJiYoY2EuaGFzT3duUHJvcGVydHkobCk/KG51bGwhPWsmJlwib25TY3JvbGxcIj09PWwmJkcoXCJzY3JvbGxcIixhKSxmfHxoPT09a3x8KGY9W10pKTpcIm9iamVjdFwiPT09dHlwZW9mIGsmJm51bGwhPT1rJiZrLiQkdHlwZW9mPT09R2E/ay50b1N0cmluZygpOihmPWZ8fFtdKS5wdXNoKGwsaykpfWMmJihmPWZ8fFtdKS5wdXNoKFwic3R5bGVcIixcbmMpO3ZhciBsPWY7aWYoYi51cGRhdGVRdWV1ZT1sKWIuZmxhZ3N8PTR9fTtFaT1mdW5jdGlvbihhLGIsYyxkKXtjIT09ZCYmKGIuZmxhZ3N8PTQpfTtmdW5jdGlvbiBGaShhLGIpe2lmKCFsaClzd2l0Y2goYS50YWlsTW9kZSl7Y2FzZSBcImhpZGRlblwiOmI9YS50YWlsO2Zvcih2YXIgYz1udWxsO251bGwhPT1iOyludWxsIT09Yi5hbHRlcm5hdGUmJihjPWIpLGI9Yi5zaWJsaW5nO251bGw9PT1jP2EudGFpbD1udWxsOmMuc2libGluZz1udWxsO2JyZWFrO2Nhc2UgXCJjb2xsYXBzZWRcIjpjPWEudGFpbDtmb3IodmFyIGQ9bnVsbDtudWxsIT09YzspbnVsbCE9PWMuYWx0ZXJuYXRlJiYoZD1jKSxjPWMuc2libGluZztudWxsPT09ZD9ifHxudWxsPT09YS50YWlsP2EudGFpbD1udWxsOmEudGFpbC5zaWJsaW5nPW51bGw6ZC5zaWJsaW5nPW51bGx9fVxuZnVuY3Rpb24gR2koYSxiLGMpe3ZhciBkPWIucGVuZGluZ1Byb3BzO3N3aXRjaChiLnRhZyl7Y2FzZSAyOmNhc2UgMTY6Y2FzZSAxNTpjYXNlIDA6Y2FzZSAxMTpjYXNlIDc6Y2FzZSA4OmNhc2UgMTI6Y2FzZSA5OmNhc2UgMTQ6cmV0dXJuIG51bGw7Y2FzZSAxOnJldHVybiBGZihiLnR5cGUpJiZHZigpLG51bGw7Y2FzZSAzOmZoKCk7SChOKTtIKE0pO3VoKCk7ZD1iLnN0YXRlTm9kZTtkLnBlbmRpbmdDb250ZXh0JiYoZC5jb250ZXh0PWQucGVuZGluZ0NvbnRleHQsZC5wZW5kaW5nQ29udGV4dD1udWxsKTtpZihudWxsPT09YXx8bnVsbD09PWEuY2hpbGQpcmgoYik/Yi5mbGFnc3w9NDpkLmh5ZHJhdGV8fChiLmZsYWdzfD0yNTYpO0NpKGIpO3JldHVybiBudWxsO2Nhc2UgNTpoaChiKTt2YXIgZT1kaChjaC5jdXJyZW50KTtjPWIudHlwZTtpZihudWxsIT09YSYmbnVsbCE9Yi5zdGF0ZU5vZGUpRGkoYSxiLGMsZCxlKSxhLnJlZiE9PWIucmVmJiYoYi5mbGFnc3w9MTI4KTtlbHNle2lmKCFkKXtpZihudWxsPT09XG5iLnN0YXRlTm9kZSl0aHJvdyBFcnJvcih5KDE2NikpO3JldHVybiBudWxsfWE9ZGgoYWguY3VycmVudCk7aWYocmgoYikpe2Q9Yi5zdGF0ZU5vZGU7Yz1iLnR5cGU7dmFyIGY9Yi5tZW1vaXplZFByb3BzO2Rbd2ZdPWI7ZFt4Zl09Zjtzd2l0Y2goYyl7Y2FzZSBcImRpYWxvZ1wiOkcoXCJjYW5jZWxcIixkKTtHKFwiY2xvc2VcIixkKTticmVhaztjYXNlIFwiaWZyYW1lXCI6Y2FzZSBcIm9iamVjdFwiOmNhc2UgXCJlbWJlZFwiOkcoXCJsb2FkXCIsZCk7YnJlYWs7Y2FzZSBcInZpZGVvXCI6Y2FzZSBcImF1ZGlvXCI6Zm9yKGE9MDthPFhlLmxlbmd0aDthKyspRyhYZVthXSxkKTticmVhaztjYXNlIFwic291cmNlXCI6RyhcImVycm9yXCIsZCk7YnJlYWs7Y2FzZSBcImltZ1wiOmNhc2UgXCJpbWFnZVwiOmNhc2UgXCJsaW5rXCI6RyhcImVycm9yXCIsZCk7RyhcImxvYWRcIixkKTticmVhaztjYXNlIFwiZGV0YWlsc1wiOkcoXCJ0b2dnbGVcIixkKTticmVhaztjYXNlIFwiaW5wdXRcIjpaYShkLGYpO0coXCJpbnZhbGlkXCIsZCk7YnJlYWs7Y2FzZSBcInNlbGVjdFwiOmQuX3dyYXBwZXJTdGF0ZT1cbnt3YXNNdWx0aXBsZTohIWYubXVsdGlwbGV9O0coXCJpbnZhbGlkXCIsZCk7YnJlYWs7Y2FzZSBcInRleHRhcmVhXCI6aGIoZCxmKSxHKFwiaW52YWxpZFwiLGQpfXZiKGMsZik7YT1udWxsO2Zvcih2YXIgZyBpbiBmKWYuaGFzT3duUHJvcGVydHkoZykmJihlPWZbZ10sXCJjaGlsZHJlblwiPT09Zz9cInN0cmluZ1wiPT09dHlwZW9mIGU/ZC50ZXh0Q29udGVudCE9PWUmJihhPVtcImNoaWxkcmVuXCIsZV0pOlwibnVtYmVyXCI9PT10eXBlb2YgZSYmZC50ZXh0Q29udGVudCE9PVwiXCIrZSYmKGE9W1wiY2hpbGRyZW5cIixcIlwiK2VdKTpjYS5oYXNPd25Qcm9wZXJ0eShnKSYmbnVsbCE9ZSYmXCJvblNjcm9sbFwiPT09ZyYmRyhcInNjcm9sbFwiLGQpKTtzd2l0Y2goYyl7Y2FzZSBcImlucHV0XCI6VmEoZCk7Y2IoZCxmLCEwKTticmVhaztjYXNlIFwidGV4dGFyZWFcIjpWYShkKTtqYihkKTticmVhaztjYXNlIFwic2VsZWN0XCI6Y2FzZSBcIm9wdGlvblwiOmJyZWFrO2RlZmF1bHQ6XCJmdW5jdGlvblwiPT09dHlwZW9mIGYub25DbGljayYmKGQub25jbGljaz1cbmpmKX1kPWE7Yi51cGRhdGVRdWV1ZT1kO251bGwhPT1kJiYoYi5mbGFnc3w9NCl9ZWxzZXtnPTk9PT1lLm5vZGVUeXBlP2U6ZS5vd25lckRvY3VtZW50O2E9PT1rYi5odG1sJiYoYT1sYihjKSk7YT09PWtiLmh0bWw/XCJzY3JpcHRcIj09PWM/KGE9Zy5jcmVhdGVFbGVtZW50KFwiZGl2XCIpLGEuaW5uZXJIVE1MPVwiPHNjcmlwdD5cXHgzYy9zY3JpcHQ+XCIsYT1hLnJlbW92ZUNoaWxkKGEuZmlyc3RDaGlsZCkpOlwic3RyaW5nXCI9PT10eXBlb2YgZC5pcz9hPWcuY3JlYXRlRWxlbWVudChjLHtpczpkLmlzfSk6KGE9Zy5jcmVhdGVFbGVtZW50KGMpLFwic2VsZWN0XCI9PT1jJiYoZz1hLGQubXVsdGlwbGU/Zy5tdWx0aXBsZT0hMDpkLnNpemUmJihnLnNpemU9ZC5zaXplKSkpOmE9Zy5jcmVhdGVFbGVtZW50TlMoYSxjKTthW3dmXT1iO2FbeGZdPWQ7QmkoYSxiLCExLCExKTtiLnN0YXRlTm9kZT1hO2c9d2IoYyxkKTtzd2l0Y2goYyl7Y2FzZSBcImRpYWxvZ1wiOkcoXCJjYW5jZWxcIixhKTtHKFwiY2xvc2VcIixhKTtcbmU9ZDticmVhaztjYXNlIFwiaWZyYW1lXCI6Y2FzZSBcIm9iamVjdFwiOmNhc2UgXCJlbWJlZFwiOkcoXCJsb2FkXCIsYSk7ZT1kO2JyZWFrO2Nhc2UgXCJ2aWRlb1wiOmNhc2UgXCJhdWRpb1wiOmZvcihlPTA7ZTxYZS5sZW5ndGg7ZSsrKUcoWGVbZV0sYSk7ZT1kO2JyZWFrO2Nhc2UgXCJzb3VyY2VcIjpHKFwiZXJyb3JcIixhKTtlPWQ7YnJlYWs7Y2FzZSBcImltZ1wiOmNhc2UgXCJpbWFnZVwiOmNhc2UgXCJsaW5rXCI6RyhcImVycm9yXCIsYSk7RyhcImxvYWRcIixhKTtlPWQ7YnJlYWs7Y2FzZSBcImRldGFpbHNcIjpHKFwidG9nZ2xlXCIsYSk7ZT1kO2JyZWFrO2Nhc2UgXCJpbnB1dFwiOlphKGEsZCk7ZT1ZYShhLGQpO0coXCJpbnZhbGlkXCIsYSk7YnJlYWs7Y2FzZSBcIm9wdGlvblwiOmU9ZWIoYSxkKTticmVhaztjYXNlIFwic2VsZWN0XCI6YS5fd3JhcHBlclN0YXRlPXt3YXNNdWx0aXBsZTohIWQubXVsdGlwbGV9O2U9bSh7fSxkLHt2YWx1ZTp2b2lkIDB9KTtHKFwiaW52YWxpZFwiLGEpO2JyZWFrO2Nhc2UgXCJ0ZXh0YXJlYVwiOmhiKGEsZCk7ZT1cbmdiKGEsZCk7RyhcImludmFsaWRcIixhKTticmVhaztkZWZhdWx0OmU9ZH12YihjLGUpO3ZhciBoPWU7Zm9yKGYgaW4gaClpZihoLmhhc093blByb3BlcnR5KGYpKXt2YXIgaz1oW2ZdO1wic3R5bGVcIj09PWY/dGIoYSxrKTpcImRhbmdlcm91c2x5U2V0SW5uZXJIVE1MXCI9PT1mPyhrPWs/ay5fX2h0bWw6dm9pZCAwLG51bGwhPWsmJm9iKGEsaykpOlwiY2hpbGRyZW5cIj09PWY/XCJzdHJpbmdcIj09PXR5cGVvZiBrPyhcInRleHRhcmVhXCIhPT1jfHxcIlwiIT09aykmJnBiKGEsayk6XCJudW1iZXJcIj09PXR5cGVvZiBrJiZwYihhLFwiXCIrayk6XCJzdXBwcmVzc0NvbnRlbnRFZGl0YWJsZVdhcm5pbmdcIiE9PWYmJlwic3VwcHJlc3NIeWRyYXRpb25XYXJuaW5nXCIhPT1mJiZcImF1dG9Gb2N1c1wiIT09ZiYmKGNhLmhhc093blByb3BlcnR5KGYpP251bGwhPWsmJlwib25TY3JvbGxcIj09PWYmJkcoXCJzY3JvbGxcIixhKTpudWxsIT1rJiZxYShhLGYsayxnKSl9c3dpdGNoKGMpe2Nhc2UgXCJpbnB1dFwiOlZhKGEpO2NiKGEsZCwhMSk7XG5icmVhaztjYXNlIFwidGV4dGFyZWFcIjpWYShhKTtqYihhKTticmVhaztjYXNlIFwib3B0aW9uXCI6bnVsbCE9ZC52YWx1ZSYmYS5zZXRBdHRyaWJ1dGUoXCJ2YWx1ZVwiLFwiXCIrU2EoZC52YWx1ZSkpO2JyZWFrO2Nhc2UgXCJzZWxlY3RcIjphLm11bHRpcGxlPSEhZC5tdWx0aXBsZTtmPWQudmFsdWU7bnVsbCE9Zj9mYihhLCEhZC5tdWx0aXBsZSxmLCExKTpudWxsIT1kLmRlZmF1bHRWYWx1ZSYmZmIoYSwhIWQubXVsdGlwbGUsZC5kZWZhdWx0VmFsdWUsITApO2JyZWFrO2RlZmF1bHQ6XCJmdW5jdGlvblwiPT09dHlwZW9mIGUub25DbGljayYmKGEub25jbGljaz1qZil9bWYoYyxkKSYmKGIuZmxhZ3N8PTQpfW51bGwhPT1iLnJlZiYmKGIuZmxhZ3N8PTEyOCl9cmV0dXJuIG51bGw7Y2FzZSA2OmlmKGEmJm51bGwhPWIuc3RhdGVOb2RlKUVpKGEsYixhLm1lbW9pemVkUHJvcHMsZCk7ZWxzZXtpZihcInN0cmluZ1wiIT09dHlwZW9mIGQmJm51bGw9PT1iLnN0YXRlTm9kZSl0aHJvdyBFcnJvcih5KDE2NikpO1xuYz1kaChjaC5jdXJyZW50KTtkaChhaC5jdXJyZW50KTtyaChiKT8oZD1iLnN0YXRlTm9kZSxjPWIubWVtb2l6ZWRQcm9wcyxkW3dmXT1iLGQubm9kZVZhbHVlIT09YyYmKGIuZmxhZ3N8PTQpKTooZD0oOT09PWMubm9kZVR5cGU/YzpjLm93bmVyRG9jdW1lbnQpLmNyZWF0ZVRleHROb2RlKGQpLGRbd2ZdPWIsYi5zdGF0ZU5vZGU9ZCl9cmV0dXJuIG51bGw7Y2FzZSAxMzpIKFApO2Q9Yi5tZW1vaXplZFN0YXRlO2lmKDAhPT0oYi5mbGFncyY2NCkpcmV0dXJuIGIubGFuZXM9YyxiO2Q9bnVsbCE9PWQ7Yz0hMTtudWxsPT09YT92b2lkIDAhPT1iLm1lbW9pemVkUHJvcHMuZmFsbGJhY2smJnJoKGIpOmM9bnVsbCE9PWEubWVtb2l6ZWRTdGF0ZTtpZihkJiYhYyYmMCE9PShiLm1vZGUmMikpaWYobnVsbD09PWEmJiEwIT09Yi5tZW1vaXplZFByb3BzLnVuc3RhYmxlX2F2b2lkVGhpc0ZhbGxiYWNrfHwwIT09KFAuY3VycmVudCYxKSkwPT09ViYmKFY9Myk7ZWxzZXtpZigwPT09Vnx8Mz09PVYpVj1cbjQ7bnVsbD09PVV8fDA9PT0oRGcmMTM0MjE3NzI3KSYmMD09PShIaSYxMzQyMTc3MjcpfHxJaShVLFcpfWlmKGR8fGMpYi5mbGFnc3w9NDtyZXR1cm4gbnVsbDtjYXNlIDQ6cmV0dXJuIGZoKCksQ2koYiksbnVsbD09PWEmJmNmKGIuc3RhdGVOb2RlLmNvbnRhaW5lckluZm8pLG51bGw7Y2FzZSAxMDpyZXR1cm4gcmcoYiksbnVsbDtjYXNlIDE3OnJldHVybiBGZihiLnR5cGUpJiZHZigpLG51bGw7Y2FzZSAxOTpIKFApO2Q9Yi5tZW1vaXplZFN0YXRlO2lmKG51bGw9PT1kKXJldHVybiBudWxsO2Y9MCE9PShiLmZsYWdzJjY0KTtnPWQucmVuZGVyaW5nO2lmKG51bGw9PT1nKWlmKGYpRmkoZCwhMSk7ZWxzZXtpZigwIT09Vnx8bnVsbCE9PWEmJjAhPT0oYS5mbGFncyY2NCkpZm9yKGE9Yi5jaGlsZDtudWxsIT09YTspe2c9aWgoYSk7aWYobnVsbCE9PWcpe2IuZmxhZ3N8PTY0O0ZpKGQsITEpO2Y9Zy51cGRhdGVRdWV1ZTtudWxsIT09ZiYmKGIudXBkYXRlUXVldWU9ZixiLmZsYWdzfD00KTtcbm51bGw9PT1kLmxhc3RFZmZlY3QmJihiLmZpcnN0RWZmZWN0PW51bGwpO2IubGFzdEVmZmVjdD1kLmxhc3RFZmZlY3Q7ZD1jO2ZvcihjPWIuY2hpbGQ7bnVsbCE9PWM7KWY9YyxhPWQsZi5mbGFncyY9MixmLm5leHRFZmZlY3Q9bnVsbCxmLmZpcnN0RWZmZWN0PW51bGwsZi5sYXN0RWZmZWN0PW51bGwsZz1mLmFsdGVybmF0ZSxudWxsPT09Zz8oZi5jaGlsZExhbmVzPTAsZi5sYW5lcz1hLGYuY2hpbGQ9bnVsbCxmLm1lbW9pemVkUHJvcHM9bnVsbCxmLm1lbW9pemVkU3RhdGU9bnVsbCxmLnVwZGF0ZVF1ZXVlPW51bGwsZi5kZXBlbmRlbmNpZXM9bnVsbCxmLnN0YXRlTm9kZT1udWxsKTooZi5jaGlsZExhbmVzPWcuY2hpbGRMYW5lcyxmLmxhbmVzPWcubGFuZXMsZi5jaGlsZD1nLmNoaWxkLGYubWVtb2l6ZWRQcm9wcz1nLm1lbW9pemVkUHJvcHMsZi5tZW1vaXplZFN0YXRlPWcubWVtb2l6ZWRTdGF0ZSxmLnVwZGF0ZVF1ZXVlPWcudXBkYXRlUXVldWUsZi50eXBlPWcudHlwZSxhPWcuZGVwZW5kZW5jaWVzLFxuZi5kZXBlbmRlbmNpZXM9bnVsbD09PWE/bnVsbDp7bGFuZXM6YS5sYW5lcyxmaXJzdENvbnRleHQ6YS5maXJzdENvbnRleHR9KSxjPWMuc2libGluZztJKFAsUC5jdXJyZW50JjF8Mik7cmV0dXJuIGIuY2hpbGR9YT1hLnNpYmxpbmd9bnVsbCE9PWQudGFpbCYmTygpPkppJiYoYi5mbGFnc3w9NjQsZj0hMCxGaShkLCExKSxiLmxhbmVzPTMzNTU0NDMyKX1lbHNle2lmKCFmKWlmKGE9aWgoZyksbnVsbCE9PWEpe2lmKGIuZmxhZ3N8PTY0LGY9ITAsYz1hLnVwZGF0ZVF1ZXVlLG51bGwhPT1jJiYoYi51cGRhdGVRdWV1ZT1jLGIuZmxhZ3N8PTQpLEZpKGQsITApLG51bGw9PT1kLnRhaWwmJlwiaGlkZGVuXCI9PT1kLnRhaWxNb2RlJiYhZy5hbHRlcm5hdGUmJiFsaClyZXR1cm4gYj1iLmxhc3RFZmZlY3Q9ZC5sYXN0RWZmZWN0LG51bGwhPT1iJiYoYi5uZXh0RWZmZWN0PW51bGwpLG51bGx9ZWxzZSAyKk8oKS1kLnJlbmRlcmluZ1N0YXJ0VGltZT5KaSYmMTA3Mzc0MTgyNCE9PWMmJihiLmZsYWdzfD1cbjY0LGY9ITAsRmkoZCwhMSksYi5sYW5lcz0zMzU1NDQzMik7ZC5pc0JhY2t3YXJkcz8oZy5zaWJsaW5nPWIuY2hpbGQsYi5jaGlsZD1nKTooYz1kLmxhc3QsbnVsbCE9PWM/Yy5zaWJsaW5nPWc6Yi5jaGlsZD1nLGQubGFzdD1nKX1yZXR1cm4gbnVsbCE9PWQudGFpbD8oYz1kLnRhaWwsZC5yZW5kZXJpbmc9YyxkLnRhaWw9Yy5zaWJsaW5nLGQubGFzdEVmZmVjdD1iLmxhc3RFZmZlY3QsZC5yZW5kZXJpbmdTdGFydFRpbWU9TygpLGMuc2libGluZz1udWxsLGI9UC5jdXJyZW50LEkoUCxmP2ImMXwyOmImMSksYyk6bnVsbDtjYXNlIDIzOmNhc2UgMjQ6cmV0dXJuIEtpKCksbnVsbCE9PWEmJm51bGwhPT1hLm1lbW9pemVkU3RhdGUhPT0obnVsbCE9PWIubWVtb2l6ZWRTdGF0ZSkmJlwidW5zdGFibGUtZGVmZXItd2l0aG91dC1oaWRpbmdcIiE9PWQubW9kZSYmKGIuZmxhZ3N8PTQpLG51bGx9dGhyb3cgRXJyb3IoeSgxNTYsYi50YWcpKTt9XG5mdW5jdGlvbiBMaShhKXtzd2l0Y2goYS50YWcpe2Nhc2UgMTpGZihhLnR5cGUpJiZHZigpO3ZhciBiPWEuZmxhZ3M7cmV0dXJuIGImNDA5Nj8oYS5mbGFncz1iJi00MDk3fDY0LGEpOm51bGw7Y2FzZSAzOmZoKCk7SChOKTtIKE0pO3VoKCk7Yj1hLmZsYWdzO2lmKDAhPT0oYiY2NCkpdGhyb3cgRXJyb3IoeSgyODUpKTthLmZsYWdzPWImLTQwOTd8NjQ7cmV0dXJuIGE7Y2FzZSA1OnJldHVybiBoaChhKSxudWxsO2Nhc2UgMTM6cmV0dXJuIEgoUCksYj1hLmZsYWdzLGImNDA5Nj8oYS5mbGFncz1iJi00MDk3fDY0LGEpOm51bGw7Y2FzZSAxOTpyZXR1cm4gSChQKSxudWxsO2Nhc2UgNDpyZXR1cm4gZmgoKSxudWxsO2Nhc2UgMTA6cmV0dXJuIHJnKGEpLG51bGw7Y2FzZSAyMzpjYXNlIDI0OnJldHVybiBLaSgpLG51bGw7ZGVmYXVsdDpyZXR1cm4gbnVsbH19XG5mdW5jdGlvbiBNaShhLGIpe3RyeXt2YXIgYz1cIlwiLGQ9YjtkbyBjKz1RYShkKSxkPWQucmV0dXJuO3doaWxlKGQpO3ZhciBlPWN9Y2F0Y2goZil7ZT1cIlxcbkVycm9yIGdlbmVyYXRpbmcgc3RhY2s6IFwiK2YubWVzc2FnZStcIlxcblwiK2Yuc3RhY2t9cmV0dXJue3ZhbHVlOmEsc291cmNlOmIsc3RhY2s6ZX19ZnVuY3Rpb24gTmkoYSxiKXt0cnl7Y29uc29sZS5lcnJvcihiLnZhbHVlKX1jYXRjaChjKXtzZXRUaW1lb3V0KGZ1bmN0aW9uKCl7dGhyb3cgYzt9KX19dmFyIE9pPVwiZnVuY3Rpb25cIj09PXR5cGVvZiBXZWFrTWFwP1dlYWtNYXA6TWFwO2Z1bmN0aW9uIFBpKGEsYixjKXtjPXpnKC0xLGMpO2MudGFnPTM7Yy5wYXlsb2FkPXtlbGVtZW50Om51bGx9O3ZhciBkPWIudmFsdWU7Yy5jYWxsYmFjaz1mdW5jdGlvbigpe1FpfHwoUWk9ITAsUmk9ZCk7TmkoYSxiKX07cmV0dXJuIGN9XG5mdW5jdGlvbiBTaShhLGIsYyl7Yz16ZygtMSxjKTtjLnRhZz0zO3ZhciBkPWEudHlwZS5nZXREZXJpdmVkU3RhdGVGcm9tRXJyb3I7aWYoXCJmdW5jdGlvblwiPT09dHlwZW9mIGQpe3ZhciBlPWIudmFsdWU7Yy5wYXlsb2FkPWZ1bmN0aW9uKCl7TmkoYSxiKTtyZXR1cm4gZChlKX19dmFyIGY9YS5zdGF0ZU5vZGU7bnVsbCE9PWYmJlwiZnVuY3Rpb25cIj09PXR5cGVvZiBmLmNvbXBvbmVudERpZENhdGNoJiYoYy5jYWxsYmFjaz1mdW5jdGlvbigpe1wiZnVuY3Rpb25cIiE9PXR5cGVvZiBkJiYobnVsbD09PVRpP1RpPW5ldyBTZXQoW3RoaXNdKTpUaS5hZGQodGhpcyksTmkoYSxiKSk7dmFyIGM9Yi5zdGFjazt0aGlzLmNvbXBvbmVudERpZENhdGNoKGIudmFsdWUse2NvbXBvbmVudFN0YWNrOm51bGwhPT1jP2M6XCJcIn0pfSk7cmV0dXJuIGN9dmFyIFVpPVwiZnVuY3Rpb25cIj09PXR5cGVvZiBXZWFrU2V0P1dlYWtTZXQ6U2V0O1xuZnVuY3Rpb24gVmkoYSl7dmFyIGI9YS5yZWY7aWYobnVsbCE9PWIpaWYoXCJmdW5jdGlvblwiPT09dHlwZW9mIGIpdHJ5e2IobnVsbCl9Y2F0Y2goYyl7V2koYSxjKX1lbHNlIGIuY3VycmVudD1udWxsfWZ1bmN0aW9uIFhpKGEsYil7c3dpdGNoKGIudGFnKXtjYXNlIDA6Y2FzZSAxMTpjYXNlIDE1OmNhc2UgMjI6cmV0dXJuO2Nhc2UgMTppZihiLmZsYWdzJjI1NiYmbnVsbCE9PWEpe3ZhciBjPWEubWVtb2l6ZWRQcm9wcyxkPWEubWVtb2l6ZWRTdGF0ZTthPWIuc3RhdGVOb2RlO2I9YS5nZXRTbmFwc2hvdEJlZm9yZVVwZGF0ZShiLmVsZW1lbnRUeXBlPT09Yi50eXBlP2M6bGcoYi50eXBlLGMpLGQpO2EuX19yZWFjdEludGVybmFsU25hcHNob3RCZWZvcmVVcGRhdGU9Yn1yZXR1cm47Y2FzZSAzOmIuZmxhZ3MmMjU2JiZxZihiLnN0YXRlTm9kZS5jb250YWluZXJJbmZvKTtyZXR1cm47Y2FzZSA1OmNhc2UgNjpjYXNlIDQ6Y2FzZSAxNzpyZXR1cm59dGhyb3cgRXJyb3IoeSgxNjMpKTt9XG5mdW5jdGlvbiBZaShhLGIsYyl7c3dpdGNoKGMudGFnKXtjYXNlIDA6Y2FzZSAxMTpjYXNlIDE1OmNhc2UgMjI6Yj1jLnVwZGF0ZVF1ZXVlO2I9bnVsbCE9PWI/Yi5sYXN0RWZmZWN0Om51bGw7aWYobnVsbCE9PWIpe2E9Yj1iLm5leHQ7ZG97aWYoMz09PShhLnRhZyYzKSl7dmFyIGQ9YS5jcmVhdGU7YS5kZXN0cm95PWQoKX1hPWEubmV4dH13aGlsZShhIT09Yil9Yj1jLnVwZGF0ZVF1ZXVlO2I9bnVsbCE9PWI/Yi5sYXN0RWZmZWN0Om51bGw7aWYobnVsbCE9PWIpe2E9Yj1iLm5leHQ7ZG97dmFyIGU9YTtkPWUubmV4dDtlPWUudGFnOzAhPT0oZSY0KSYmMCE9PShlJjEpJiYoWmkoYyxhKSwkaShjLGEpKTthPWR9d2hpbGUoYSE9PWIpfXJldHVybjtjYXNlIDE6YT1jLnN0YXRlTm9kZTtjLmZsYWdzJjQmJihudWxsPT09Yj9hLmNvbXBvbmVudERpZE1vdW50KCk6KGQ9Yy5lbGVtZW50VHlwZT09PWMudHlwZT9iLm1lbW9pemVkUHJvcHM6bGcoYy50eXBlLGIubWVtb2l6ZWRQcm9wcyksYS5jb21wb25lbnREaWRVcGRhdGUoZCxcbmIubWVtb2l6ZWRTdGF0ZSxhLl9fcmVhY3RJbnRlcm5hbFNuYXBzaG90QmVmb3JlVXBkYXRlKSkpO2I9Yy51cGRhdGVRdWV1ZTtudWxsIT09YiYmRWcoYyxiLGEpO3JldHVybjtjYXNlIDM6Yj1jLnVwZGF0ZVF1ZXVlO2lmKG51bGwhPT1iKXthPW51bGw7aWYobnVsbCE9PWMuY2hpbGQpc3dpdGNoKGMuY2hpbGQudGFnKXtjYXNlIDU6YT1jLmNoaWxkLnN0YXRlTm9kZTticmVhaztjYXNlIDE6YT1jLmNoaWxkLnN0YXRlTm9kZX1FZyhjLGIsYSl9cmV0dXJuO2Nhc2UgNTphPWMuc3RhdGVOb2RlO251bGw9PT1iJiZjLmZsYWdzJjQmJm1mKGMudHlwZSxjLm1lbW9pemVkUHJvcHMpJiZhLmZvY3VzKCk7cmV0dXJuO2Nhc2UgNjpyZXR1cm47Y2FzZSA0OnJldHVybjtjYXNlIDEyOnJldHVybjtjYXNlIDEzOm51bGw9PT1jLm1lbW9pemVkU3RhdGUmJihjPWMuYWx0ZXJuYXRlLG51bGwhPT1jJiYoYz1jLm1lbW9pemVkU3RhdGUsbnVsbCE9PWMmJihjPWMuZGVoeWRyYXRlZCxudWxsIT09YyYmQ2MoYykpKSk7XG5yZXR1cm47Y2FzZSAxOTpjYXNlIDE3OmNhc2UgMjA6Y2FzZSAyMTpjYXNlIDIzOmNhc2UgMjQ6cmV0dXJufXRocm93IEVycm9yKHkoMTYzKSk7fVxuZnVuY3Rpb24gYWooYSxiKXtmb3IodmFyIGM9YTs7KXtpZig1PT09Yy50YWcpe3ZhciBkPWMuc3RhdGVOb2RlO2lmKGIpZD1kLnN0eWxlLFwiZnVuY3Rpb25cIj09PXR5cGVvZiBkLnNldFByb3BlcnR5P2Quc2V0UHJvcGVydHkoXCJkaXNwbGF5XCIsXCJub25lXCIsXCJpbXBvcnRhbnRcIik6ZC5kaXNwbGF5PVwibm9uZVwiO2Vsc2V7ZD1jLnN0YXRlTm9kZTt2YXIgZT1jLm1lbW9pemVkUHJvcHMuc3R5bGU7ZT12b2lkIDAhPT1lJiZudWxsIT09ZSYmZS5oYXNPd25Qcm9wZXJ0eShcImRpc3BsYXlcIik/ZS5kaXNwbGF5Om51bGw7ZC5zdHlsZS5kaXNwbGF5PXNiKFwiZGlzcGxheVwiLGUpfX1lbHNlIGlmKDY9PT1jLnRhZyljLnN0YXRlTm9kZS5ub2RlVmFsdWU9Yj9cIlwiOmMubWVtb2l6ZWRQcm9wcztlbHNlIGlmKCgyMyE9PWMudGFnJiYyNCE9PWMudGFnfHxudWxsPT09Yy5tZW1vaXplZFN0YXRlfHxjPT09YSkmJm51bGwhPT1jLmNoaWxkKXtjLmNoaWxkLnJldHVybj1jO2M9Yy5jaGlsZDtjb250aW51ZX1pZihjPT09XG5hKWJyZWFrO2Zvcig7bnVsbD09PWMuc2libGluZzspe2lmKG51bGw9PT1jLnJldHVybnx8Yy5yZXR1cm49PT1hKXJldHVybjtjPWMucmV0dXJufWMuc2libGluZy5yZXR1cm49Yy5yZXR1cm47Yz1jLnNpYmxpbmd9fVxuZnVuY3Rpb24gYmooYSxiKXtpZihNZiYmXCJmdW5jdGlvblwiPT09dHlwZW9mIE1mLm9uQ29tbWl0RmliZXJVbm1vdW50KXRyeXtNZi5vbkNvbW1pdEZpYmVyVW5tb3VudChMZixiKX1jYXRjaChmKXt9c3dpdGNoKGIudGFnKXtjYXNlIDA6Y2FzZSAxMTpjYXNlIDE0OmNhc2UgMTU6Y2FzZSAyMjphPWIudXBkYXRlUXVldWU7aWYobnVsbCE9PWEmJihhPWEubGFzdEVmZmVjdCxudWxsIT09YSkpe3ZhciBjPWE9YS5uZXh0O2Rve3ZhciBkPWMsZT1kLmRlc3Ryb3k7ZD1kLnRhZztpZih2b2lkIDAhPT1lKWlmKDAhPT0oZCY0KSlaaShiLGMpO2Vsc2V7ZD1iO3RyeXtlKCl9Y2F0Y2goZil7V2koZCxmKX19Yz1jLm5leHR9d2hpbGUoYyE9PWEpfWJyZWFrO2Nhc2UgMTpWaShiKTthPWIuc3RhdGVOb2RlO2lmKFwiZnVuY3Rpb25cIj09PXR5cGVvZiBhLmNvbXBvbmVudFdpbGxVbm1vdW50KXRyeXthLnByb3BzPWIubWVtb2l6ZWRQcm9wcyxhLnN0YXRlPWIubWVtb2l6ZWRTdGF0ZSxhLmNvbXBvbmVudFdpbGxVbm1vdW50KCl9Y2F0Y2goZil7V2koYixcbmYpfWJyZWFrO2Nhc2UgNTpWaShiKTticmVhaztjYXNlIDQ6Y2ooYSxiKX19ZnVuY3Rpb24gZGooYSl7YS5hbHRlcm5hdGU9bnVsbDthLmNoaWxkPW51bGw7YS5kZXBlbmRlbmNpZXM9bnVsbDthLmZpcnN0RWZmZWN0PW51bGw7YS5sYXN0RWZmZWN0PW51bGw7YS5tZW1vaXplZFByb3BzPW51bGw7YS5tZW1vaXplZFN0YXRlPW51bGw7YS5wZW5kaW5nUHJvcHM9bnVsbDthLnJldHVybj1udWxsO2EudXBkYXRlUXVldWU9bnVsbH1mdW5jdGlvbiBlaihhKXtyZXR1cm4gNT09PWEudGFnfHwzPT09YS50YWd8fDQ9PT1hLnRhZ31cbmZ1bmN0aW9uIGZqKGEpe2E6e2Zvcih2YXIgYj1hLnJldHVybjtudWxsIT09Yjspe2lmKGVqKGIpKWJyZWFrIGE7Yj1iLnJldHVybn10aHJvdyBFcnJvcih5KDE2MCkpO312YXIgYz1iO2I9Yy5zdGF0ZU5vZGU7c3dpdGNoKGMudGFnKXtjYXNlIDU6dmFyIGQ9ITE7YnJlYWs7Y2FzZSAzOmI9Yi5jb250YWluZXJJbmZvO2Q9ITA7YnJlYWs7Y2FzZSA0OmI9Yi5jb250YWluZXJJbmZvO2Q9ITA7YnJlYWs7ZGVmYXVsdDp0aHJvdyBFcnJvcih5KDE2MSkpO31jLmZsYWdzJjE2JiYocGIoYixcIlwiKSxjLmZsYWdzJj0tMTcpO2E6Yjpmb3IoYz1hOzspe2Zvcig7bnVsbD09PWMuc2libGluZzspe2lmKG51bGw9PT1jLnJldHVybnx8ZWooYy5yZXR1cm4pKXtjPW51bGw7YnJlYWsgYX1jPWMucmV0dXJufWMuc2libGluZy5yZXR1cm49Yy5yZXR1cm47Zm9yKGM9Yy5zaWJsaW5nOzUhPT1jLnRhZyYmNiE9PWMudGFnJiYxOCE9PWMudGFnOyl7aWYoYy5mbGFncyYyKWNvbnRpbnVlIGI7aWYobnVsbD09PVxuYy5jaGlsZHx8ND09PWMudGFnKWNvbnRpbnVlIGI7ZWxzZSBjLmNoaWxkLnJldHVybj1jLGM9Yy5jaGlsZH1pZighKGMuZmxhZ3MmMikpe2M9Yy5zdGF0ZU5vZGU7YnJlYWsgYX19ZD9naihhLGMsYik6aGooYSxjLGIpfVxuZnVuY3Rpb24gZ2ooYSxiLGMpe3ZhciBkPWEudGFnLGU9NT09PWR8fDY9PT1kO2lmKGUpYT1lP2Euc3RhdGVOb2RlOmEuc3RhdGVOb2RlLmluc3RhbmNlLGI/OD09PWMubm9kZVR5cGU/Yy5wYXJlbnROb2RlLmluc2VydEJlZm9yZShhLGIpOmMuaW5zZXJ0QmVmb3JlKGEsYik6KDg9PT1jLm5vZGVUeXBlPyhiPWMucGFyZW50Tm9kZSxiLmluc2VydEJlZm9yZShhLGMpKTooYj1jLGIuYXBwZW5kQ2hpbGQoYSkpLGM9Yy5fcmVhY3RSb290Q29udGFpbmVyLG51bGwhPT1jJiZ2b2lkIDAhPT1jfHxudWxsIT09Yi5vbmNsaWNrfHwoYi5vbmNsaWNrPWpmKSk7ZWxzZSBpZig0IT09ZCYmKGE9YS5jaGlsZCxudWxsIT09YSkpZm9yKGdqKGEsYixjKSxhPWEuc2libGluZztudWxsIT09YTspZ2ooYSxiLGMpLGE9YS5zaWJsaW5nfVxuZnVuY3Rpb24gaGooYSxiLGMpe3ZhciBkPWEudGFnLGU9NT09PWR8fDY9PT1kO2lmKGUpYT1lP2Euc3RhdGVOb2RlOmEuc3RhdGVOb2RlLmluc3RhbmNlLGI/Yy5pbnNlcnRCZWZvcmUoYSxiKTpjLmFwcGVuZENoaWxkKGEpO2Vsc2UgaWYoNCE9PWQmJihhPWEuY2hpbGQsbnVsbCE9PWEpKWZvcihoaihhLGIsYyksYT1hLnNpYmxpbmc7bnVsbCE9PWE7KWhqKGEsYixjKSxhPWEuc2libGluZ31cbmZ1bmN0aW9uIGNqKGEsYil7Zm9yKHZhciBjPWIsZD0hMSxlLGY7Oyl7aWYoIWQpe2Q9Yy5yZXR1cm47YTpmb3IoOzspe2lmKG51bGw9PT1kKXRocm93IEVycm9yKHkoMTYwKSk7ZT1kLnN0YXRlTm9kZTtzd2l0Y2goZC50YWcpe2Nhc2UgNTpmPSExO2JyZWFrIGE7Y2FzZSAzOmU9ZS5jb250YWluZXJJbmZvO2Y9ITA7YnJlYWsgYTtjYXNlIDQ6ZT1lLmNvbnRhaW5lckluZm87Zj0hMDticmVhayBhfWQ9ZC5yZXR1cm59ZD0hMH1pZig1PT09Yy50YWd8fDY9PT1jLnRhZyl7YTpmb3IodmFyIGc9YSxoPWMsaz1oOzspaWYoYmooZyxrKSxudWxsIT09ay5jaGlsZCYmNCE9PWsudGFnKWsuY2hpbGQucmV0dXJuPWssaz1rLmNoaWxkO2Vsc2V7aWYoaz09PWgpYnJlYWsgYTtmb3IoO251bGw9PT1rLnNpYmxpbmc7KXtpZihudWxsPT09ay5yZXR1cm58fGsucmV0dXJuPT09aClicmVhayBhO2s9ay5yZXR1cm59ay5zaWJsaW5nLnJldHVybj1rLnJldHVybjtrPWsuc2libGluZ31mPyhnPWUsaD1jLnN0YXRlTm9kZSxcbjg9PT1nLm5vZGVUeXBlP2cucGFyZW50Tm9kZS5yZW1vdmVDaGlsZChoKTpnLnJlbW92ZUNoaWxkKGgpKTplLnJlbW92ZUNoaWxkKGMuc3RhdGVOb2RlKX1lbHNlIGlmKDQ9PT1jLnRhZyl7aWYobnVsbCE9PWMuY2hpbGQpe2U9Yy5zdGF0ZU5vZGUuY29udGFpbmVySW5mbztmPSEwO2MuY2hpbGQucmV0dXJuPWM7Yz1jLmNoaWxkO2NvbnRpbnVlfX1lbHNlIGlmKGJqKGEsYyksbnVsbCE9PWMuY2hpbGQpe2MuY2hpbGQucmV0dXJuPWM7Yz1jLmNoaWxkO2NvbnRpbnVlfWlmKGM9PT1iKWJyZWFrO2Zvcig7bnVsbD09PWMuc2libGluZzspe2lmKG51bGw9PT1jLnJldHVybnx8Yy5yZXR1cm49PT1iKXJldHVybjtjPWMucmV0dXJuOzQ9PT1jLnRhZyYmKGQ9ITEpfWMuc2libGluZy5yZXR1cm49Yy5yZXR1cm47Yz1jLnNpYmxpbmd9fVxuZnVuY3Rpb24gaWooYSxiKXtzd2l0Y2goYi50YWcpe2Nhc2UgMDpjYXNlIDExOmNhc2UgMTQ6Y2FzZSAxNTpjYXNlIDIyOnZhciBjPWIudXBkYXRlUXVldWU7Yz1udWxsIT09Yz9jLmxhc3RFZmZlY3Q6bnVsbDtpZihudWxsIT09Yyl7dmFyIGQ9Yz1jLm5leHQ7ZG8gMz09PShkLnRhZyYzKSYmKGE9ZC5kZXN0cm95LGQuZGVzdHJveT12b2lkIDAsdm9pZCAwIT09YSYmYSgpKSxkPWQubmV4dDt3aGlsZShkIT09Yyl9cmV0dXJuO2Nhc2UgMTpyZXR1cm47Y2FzZSA1OmM9Yi5zdGF0ZU5vZGU7aWYobnVsbCE9Yyl7ZD1iLm1lbW9pemVkUHJvcHM7dmFyIGU9bnVsbCE9PWE/YS5tZW1vaXplZFByb3BzOmQ7YT1iLnR5cGU7dmFyIGY9Yi51cGRhdGVRdWV1ZTtiLnVwZGF0ZVF1ZXVlPW51bGw7aWYobnVsbCE9PWYpe2NbeGZdPWQ7XCJpbnB1dFwiPT09YSYmXCJyYWRpb1wiPT09ZC50eXBlJiZudWxsIT1kLm5hbWUmJiRhKGMsZCk7d2IoYSxlKTtiPXdiKGEsZCk7Zm9yKGU9MDtlPGYubGVuZ3RoO2UrPVxuMil7dmFyIGc9ZltlXSxoPWZbZSsxXTtcInN0eWxlXCI9PT1nP3RiKGMsaCk6XCJkYW5nZXJvdXNseVNldElubmVySFRNTFwiPT09Zz9vYihjLGgpOlwiY2hpbGRyZW5cIj09PWc/cGIoYyxoKTpxYShjLGcsaCxiKX1zd2l0Y2goYSl7Y2FzZSBcImlucHV0XCI6YWIoYyxkKTticmVhaztjYXNlIFwidGV4dGFyZWFcIjppYihjLGQpO2JyZWFrO2Nhc2UgXCJzZWxlY3RcIjphPWMuX3dyYXBwZXJTdGF0ZS53YXNNdWx0aXBsZSxjLl93cmFwcGVyU3RhdGUud2FzTXVsdGlwbGU9ISFkLm11bHRpcGxlLGY9ZC52YWx1ZSxudWxsIT1mP2ZiKGMsISFkLm11bHRpcGxlLGYsITEpOmEhPT0hIWQubXVsdGlwbGUmJihudWxsIT1kLmRlZmF1bHRWYWx1ZT9mYihjLCEhZC5tdWx0aXBsZSxkLmRlZmF1bHRWYWx1ZSwhMCk6ZmIoYywhIWQubXVsdGlwbGUsZC5tdWx0aXBsZT9bXTpcIlwiLCExKSl9fX1yZXR1cm47Y2FzZSA2OmlmKG51bGw9PT1iLnN0YXRlTm9kZSl0aHJvdyBFcnJvcih5KDE2MikpO2Iuc3RhdGVOb2RlLm5vZGVWYWx1ZT1cbmIubWVtb2l6ZWRQcm9wcztyZXR1cm47Y2FzZSAzOmM9Yi5zdGF0ZU5vZGU7Yy5oeWRyYXRlJiYoYy5oeWRyYXRlPSExLENjKGMuY29udGFpbmVySW5mbykpO3JldHVybjtjYXNlIDEyOnJldHVybjtjYXNlIDEzOm51bGwhPT1iLm1lbW9pemVkU3RhdGUmJihqaj1PKCksYWooYi5jaGlsZCwhMCkpO2tqKGIpO3JldHVybjtjYXNlIDE5OmtqKGIpO3JldHVybjtjYXNlIDE3OnJldHVybjtjYXNlIDIzOmNhc2UgMjQ6YWooYixudWxsIT09Yi5tZW1vaXplZFN0YXRlKTtyZXR1cm59dGhyb3cgRXJyb3IoeSgxNjMpKTt9ZnVuY3Rpb24ga2ooYSl7dmFyIGI9YS51cGRhdGVRdWV1ZTtpZihudWxsIT09Yil7YS51cGRhdGVRdWV1ZT1udWxsO3ZhciBjPWEuc3RhdGVOb2RlO251bGw9PT1jJiYoYz1hLnN0YXRlTm9kZT1uZXcgVWkpO2IuZm9yRWFjaChmdW5jdGlvbihiKXt2YXIgZD1sai5iaW5kKG51bGwsYSxiKTtjLmhhcyhiKXx8KGMuYWRkKGIpLGIudGhlbihkLGQpKX0pfX1cbmZ1bmN0aW9uIG1qKGEsYil7cmV0dXJuIG51bGwhPT1hJiYoYT1hLm1lbW9pemVkU3RhdGUsbnVsbD09PWF8fG51bGwhPT1hLmRlaHlkcmF0ZWQpPyhiPWIubWVtb2l6ZWRTdGF0ZSxudWxsIT09YiYmbnVsbD09PWIuZGVoeWRyYXRlZCk6ITF9dmFyIG5qPU1hdGguY2VpbCxvaj1yYS5SZWFjdEN1cnJlbnREaXNwYXRjaGVyLHBqPXJhLlJlYWN0Q3VycmVudE93bmVyLFg9MCxVPW51bGwsWT1udWxsLFc9MCxxaj0wLHJqPUJmKDApLFY9MCxzaj1udWxsLHRqPTAsRGc9MCxIaT0wLHVqPTAsdmo9bnVsbCxqaj0wLEppPUluZmluaXR5O2Z1bmN0aW9uIHdqKCl7Smk9TygpKzUwMH12YXIgWj1udWxsLFFpPSExLFJpPW51bGwsVGk9bnVsbCx4aj0hMSx5aj1udWxsLHpqPTkwLEFqPVtdLEJqPVtdLENqPW51bGwsRGo9MCxFaj1udWxsLEZqPS0xLEdqPTAsSGo9MCxJaj1udWxsLEpqPSExO2Z1bmN0aW9uIEhnKCl7cmV0dXJuIDAhPT0oWCY0OCk/TygpOi0xIT09Rmo/Rmo6Rmo9TygpfVxuZnVuY3Rpb24gSWcoYSl7YT1hLm1vZGU7aWYoMD09PShhJjIpKXJldHVybiAxO2lmKDA9PT0oYSY0KSlyZXR1cm4gOTk9PT1lZygpPzE6MjswPT09R2omJihHaj10aik7aWYoMCE9PWtnLnRyYW5zaXRpb24pezAhPT1IaiYmKEhqPW51bGwhPT12aj92ai5wZW5kaW5nTGFuZXM6MCk7YT1Hajt2YXIgYj00MTg2MTEyJn5IajtiJj0tYjswPT09YiYmKGE9NDE4NjExMiZ+YSxiPWEmLWEsMD09PWImJihiPTgxOTIpKTtyZXR1cm4gYn1hPWVnKCk7MCE9PShYJjQpJiY5OD09PWE/YT1YYygxMixHaik6KGE9U2MoYSksYT1YYyhhLEdqKSk7cmV0dXJuIGF9XG5mdW5jdGlvbiBKZyhhLGIsYyl7aWYoNTA8RGopdGhyb3cgRGo9MCxFaj1udWxsLEVycm9yKHkoMTg1KSk7YT1LaihhLGIpO2lmKG51bGw9PT1hKXJldHVybiBudWxsOyRjKGEsYixjKTthPT09VSYmKEhpfD1iLDQ9PT1WJiZJaShhLFcpKTt2YXIgZD1lZygpOzE9PT1iPzAhPT0oWCY4KSYmMD09PShYJjQ4KT9MaihhKTooTWooYSxjKSwwPT09WCYmKHdqKCksaWcoKSkpOigwPT09KFgmNCl8fDk4IT09ZCYmOTkhPT1kfHwobnVsbD09PUNqP0NqPW5ldyBTZXQoW2FdKTpDai5hZGQoYSkpLE1qKGEsYykpO3ZqPWF9ZnVuY3Rpb24gS2ooYSxiKXthLmxhbmVzfD1iO3ZhciBjPWEuYWx0ZXJuYXRlO251bGwhPT1jJiYoYy5sYW5lc3w9Yik7Yz1hO2ZvcihhPWEucmV0dXJuO251bGwhPT1hOylhLmNoaWxkTGFuZXN8PWIsYz1hLmFsdGVybmF0ZSxudWxsIT09YyYmKGMuY2hpbGRMYW5lc3w9YiksYz1hLGE9YS5yZXR1cm47cmV0dXJuIDM9PT1jLnRhZz9jLnN0YXRlTm9kZTpudWxsfVxuZnVuY3Rpb24gTWooYSxiKXtmb3IodmFyIGM9YS5jYWxsYmFja05vZGUsZD1hLnN1c3BlbmRlZExhbmVzLGU9YS5waW5nZWRMYW5lcyxmPWEuZXhwaXJhdGlvblRpbWVzLGc9YS5wZW5kaW5nTGFuZXM7MDxnOyl7dmFyIGg9MzEtVmMoZyksaz0xPDxoLGw9ZltoXTtpZigtMT09PWwpe2lmKDA9PT0oayZkKXx8MCE9PShrJmUpKXtsPWI7UmMoayk7dmFyIG49RjtmW2hdPTEwPD1uP2wrMjUwOjY8PW4/bCs1RTM6LTF9fWVsc2UgbDw9YiYmKGEuZXhwaXJlZExhbmVzfD1rKTtnJj1+a31kPVVjKGEsYT09PVU/VzowKTtiPUY7aWYoMD09PWQpbnVsbCE9PWMmJihjIT09WmYmJlBmKGMpLGEuY2FsbGJhY2tOb2RlPW51bGwsYS5jYWxsYmFja1ByaW9yaXR5PTApO2Vsc2V7aWYobnVsbCE9PWMpe2lmKGEuY2FsbGJhY2tQcmlvcml0eT09PWIpcmV0dXJuO2MhPT1aZiYmUGYoYyl9MTU9PT1iPyhjPUxqLmJpbmQobnVsbCxhKSxudWxsPT09YWc/KGFnPVtjXSxiZz1PZihVZixqZykpOmFnLnB1c2goYyksXG5jPVpmKToxND09PWI/Yz1oZyg5OSxMai5iaW5kKG51bGwsYSkpOihjPVRjKGIpLGM9aGcoYyxOai5iaW5kKG51bGwsYSkpKTthLmNhbGxiYWNrUHJpb3JpdHk9YjthLmNhbGxiYWNrTm9kZT1jfX1cbmZ1bmN0aW9uIE5qKGEpe0ZqPS0xO0hqPUdqPTA7aWYoMCE9PShYJjQ4KSl0aHJvdyBFcnJvcih5KDMyNykpO3ZhciBiPWEuY2FsbGJhY2tOb2RlO2lmKE9qKCkmJmEuY2FsbGJhY2tOb2RlIT09YilyZXR1cm4gbnVsbDt2YXIgYz1VYyhhLGE9PT1VP1c6MCk7aWYoMD09PWMpcmV0dXJuIG51bGw7dmFyIGQ9Yzt2YXIgZT1YO1h8PTE2O3ZhciBmPVBqKCk7aWYoVSE9PWF8fFchPT1kKXdqKCksUWooYSxkKTtkbyB0cnl7UmooKTticmVha31jYXRjaChoKXtTaihhLGgpfXdoaWxlKDEpO3FnKCk7b2ouY3VycmVudD1mO1g9ZTtudWxsIT09WT9kPTA6KFU9bnVsbCxXPTAsZD1WKTtpZigwIT09KHRqJkhpKSlRaihhLDApO2Vsc2UgaWYoMCE9PWQpezI9PT1kJiYoWHw9NjQsYS5oeWRyYXRlJiYoYS5oeWRyYXRlPSExLHFmKGEuY29udGFpbmVySW5mbykpLGM9V2MoYSksMCE9PWMmJihkPVRqKGEsYykpKTtpZigxPT09ZCl0aHJvdyBiPXNqLFFqKGEsMCksSWkoYSxjKSxNaihhLE8oKSksYjthLmZpbmlzaGVkV29yaz1cbmEuY3VycmVudC5hbHRlcm5hdGU7YS5maW5pc2hlZExhbmVzPWM7c3dpdGNoKGQpe2Nhc2UgMDpjYXNlIDE6dGhyb3cgRXJyb3IoeSgzNDUpKTtjYXNlIDI6VWooYSk7YnJlYWs7Y2FzZSAzOklpKGEsYyk7aWYoKGMmNjI5MTQ1NjApPT09YyYmKGQ9amorNTAwLU8oKSwxMDxkKSl7aWYoMCE9PVVjKGEsMCkpYnJlYWs7ZT1hLnN1c3BlbmRlZExhbmVzO2lmKChlJmMpIT09Yyl7SGcoKTthLnBpbmdlZExhbmVzfD1hLnN1c3BlbmRlZExhbmVzJmU7YnJlYWt9YS50aW1lb3V0SGFuZGxlPW9mKFVqLmJpbmQobnVsbCxhKSxkKTticmVha31VaihhKTticmVhaztjYXNlIDQ6SWkoYSxjKTtpZigoYyY0MTg2MTEyKT09PWMpYnJlYWs7ZD1hLmV2ZW50VGltZXM7Zm9yKGU9LTE7MDxjOyl7dmFyIGc9MzEtVmMoYyk7Zj0xPDxnO2c9ZFtnXTtnPmUmJihlPWcpO2MmPX5mfWM9ZTtjPU8oKS1jO2M9KDEyMD5jPzEyMDo0ODA+Yz80ODA6MTA4MD5jPzEwODA6MTkyMD5jPzE5MjA6M0UzPmM/M0UzOjQzMjA+XG5jPzQzMjA6MTk2MCpuaihjLzE5NjApKS1jO2lmKDEwPGMpe2EudGltZW91dEhhbmRsZT1vZihVai5iaW5kKG51bGwsYSksYyk7YnJlYWt9VWooYSk7YnJlYWs7Y2FzZSA1OlVqKGEpO2JyZWFrO2RlZmF1bHQ6dGhyb3cgRXJyb3IoeSgzMjkpKTt9fU1qKGEsTygpKTtyZXR1cm4gYS5jYWxsYmFja05vZGU9PT1iP05qLmJpbmQobnVsbCxhKTpudWxsfWZ1bmN0aW9uIElpKGEsYil7YiY9fnVqO2ImPX5IaTthLnN1c3BlbmRlZExhbmVzfD1iO2EucGluZ2VkTGFuZXMmPX5iO2ZvcihhPWEuZXhwaXJhdGlvblRpbWVzOzA8Yjspe3ZhciBjPTMxLVZjKGIpLGQ9MTw8YzthW2NdPS0xO2ImPX5kfX1cbmZ1bmN0aW9uIExqKGEpe2lmKDAhPT0oWCY0OCkpdGhyb3cgRXJyb3IoeSgzMjcpKTtPaigpO2lmKGE9PT1VJiYwIT09KGEuZXhwaXJlZExhbmVzJlcpKXt2YXIgYj1XO3ZhciBjPVRqKGEsYik7MCE9PSh0aiZIaSkmJihiPVVjKGEsYiksYz1UaihhLGIpKX1lbHNlIGI9VWMoYSwwKSxjPVRqKGEsYik7MCE9PWEudGFnJiYyPT09YyYmKFh8PTY0LGEuaHlkcmF0ZSYmKGEuaHlkcmF0ZT0hMSxxZihhLmNvbnRhaW5lckluZm8pKSxiPVdjKGEpLDAhPT1iJiYoYz1UaihhLGIpKSk7aWYoMT09PWMpdGhyb3cgYz1zaixRaihhLDApLElpKGEsYiksTWooYSxPKCkpLGM7YS5maW5pc2hlZFdvcms9YS5jdXJyZW50LmFsdGVybmF0ZTthLmZpbmlzaGVkTGFuZXM9YjtVaihhKTtNaihhLE8oKSk7cmV0dXJuIG51bGx9XG5mdW5jdGlvbiBWaigpe2lmKG51bGwhPT1Dail7dmFyIGE9Q2o7Q2o9bnVsbDthLmZvckVhY2goZnVuY3Rpb24oYSl7YS5leHBpcmVkTGFuZXN8PTI0JmEucGVuZGluZ0xhbmVzO01qKGEsTygpKX0pfWlnKCl9ZnVuY3Rpb24gV2ooYSxiKXt2YXIgYz1YO1h8PTE7dHJ5e3JldHVybiBhKGIpfWZpbmFsbHl7WD1jLDA9PT1YJiYod2ooKSxpZygpKX19ZnVuY3Rpb24gWGooYSxiKXt2YXIgYz1YO1gmPS0yO1h8PTg7dHJ5e3JldHVybiBhKGIpfWZpbmFsbHl7WD1jLDA9PT1YJiYod2ooKSxpZygpKX19ZnVuY3Rpb24gbmkoYSxiKXtJKHJqLHFqKTtxanw9Yjt0anw9Yn1mdW5jdGlvbiBLaSgpe3FqPXJqLmN1cnJlbnQ7SChyail9XG5mdW5jdGlvbiBRaihhLGIpe2EuZmluaXNoZWRXb3JrPW51bGw7YS5maW5pc2hlZExhbmVzPTA7dmFyIGM9YS50aW1lb3V0SGFuZGxlOy0xIT09YyYmKGEudGltZW91dEhhbmRsZT0tMSxwZihjKSk7aWYobnVsbCE9PVkpZm9yKGM9WS5yZXR1cm47bnVsbCE9PWM7KXt2YXIgZD1jO3N3aXRjaChkLnRhZyl7Y2FzZSAxOmQ9ZC50eXBlLmNoaWxkQ29udGV4dFR5cGVzO251bGwhPT1kJiZ2b2lkIDAhPT1kJiZHZigpO2JyZWFrO2Nhc2UgMzpmaCgpO0goTik7SChNKTt1aCgpO2JyZWFrO2Nhc2UgNTpoaChkKTticmVhaztjYXNlIDQ6ZmgoKTticmVhaztjYXNlIDEzOkgoUCk7YnJlYWs7Y2FzZSAxOTpIKFApO2JyZWFrO2Nhc2UgMTA6cmcoZCk7YnJlYWs7Y2FzZSAyMzpjYXNlIDI0OktpKCl9Yz1jLnJldHVybn1VPWE7WT1UZyhhLmN1cnJlbnQsbnVsbCk7Vz1xaj10aj1iO1Y9MDtzaj1udWxsO3VqPUhpPURnPTB9XG5mdW5jdGlvbiBTaihhLGIpe2Rve3ZhciBjPVk7dHJ5e3FnKCk7dmguY3VycmVudD1HaDtpZih5aCl7Zm9yKHZhciBkPVIubWVtb2l6ZWRTdGF0ZTtudWxsIT09ZDspe3ZhciBlPWQucXVldWU7bnVsbCE9PWUmJihlLnBlbmRpbmc9bnVsbCk7ZD1kLm5leHR9eWg9ITF9eGg9MDtUPVM9Uj1udWxsO3poPSExO3BqLmN1cnJlbnQ9bnVsbDtpZihudWxsPT09Y3x8bnVsbD09PWMucmV0dXJuKXtWPTE7c2o9YjtZPW51bGw7YnJlYWt9YTp7dmFyIGY9YSxnPWMucmV0dXJuLGg9YyxrPWI7Yj1XO2guZmxhZ3N8PTIwNDg7aC5maXJzdEVmZmVjdD1oLmxhc3RFZmZlY3Q9bnVsbDtpZihudWxsIT09ayYmXCJvYmplY3RcIj09PXR5cGVvZiBrJiZcImZ1bmN0aW9uXCI9PT10eXBlb2Ygay50aGVuKXt2YXIgbD1rO2lmKDA9PT0oaC5tb2RlJjIpKXt2YXIgbj1oLmFsdGVybmF0ZTtuPyhoLnVwZGF0ZVF1ZXVlPW4udXBkYXRlUXVldWUsaC5tZW1vaXplZFN0YXRlPW4ubWVtb2l6ZWRTdGF0ZSxoLmxhbmVzPW4ubGFuZXMpOlxuKGgudXBkYXRlUXVldWU9bnVsbCxoLm1lbW9pemVkU3RhdGU9bnVsbCl9dmFyIEE9MCE9PShQLmN1cnJlbnQmMSkscD1nO2Rve3ZhciBDO2lmKEM9MTM9PT1wLnRhZyl7dmFyIHg9cC5tZW1vaXplZFN0YXRlO2lmKG51bGwhPT14KUM9bnVsbCE9PXguZGVoeWRyYXRlZD8hMDohMTtlbHNle3ZhciB3PXAubWVtb2l6ZWRQcm9wcztDPXZvaWQgMD09PXcuZmFsbGJhY2s/ITE6ITAhPT13LnVuc3RhYmxlX2F2b2lkVGhpc0ZhbGxiYWNrPyEwOkE/ITE6ITB9fWlmKEMpe3ZhciB6PXAudXBkYXRlUXVldWU7aWYobnVsbD09PXope3ZhciB1PW5ldyBTZXQ7dS5hZGQobCk7cC51cGRhdGVRdWV1ZT11fWVsc2Ugei5hZGQobCk7aWYoMD09PShwLm1vZGUmMikpe3AuZmxhZ3N8PTY0O2guZmxhZ3N8PTE2Mzg0O2guZmxhZ3MmPS0yOTgxO2lmKDE9PT1oLnRhZylpZihudWxsPT09aC5hbHRlcm5hdGUpaC50YWc9MTc7ZWxzZXt2YXIgdD16ZygtMSwxKTt0LnRhZz0yO0FnKGgsdCl9aC5sYW5lc3w9MTticmVhayBhfWs9XG52b2lkIDA7aD1iO3ZhciBxPWYucGluZ0NhY2hlO251bGw9PT1xPyhxPWYucGluZ0NhY2hlPW5ldyBPaSxrPW5ldyBTZXQscS5zZXQobCxrKSk6KGs9cS5nZXQobCksdm9pZCAwPT09ayYmKGs9bmV3IFNldCxxLnNldChsLGspKSk7aWYoIWsuaGFzKGgpKXtrLmFkZChoKTt2YXIgdj1Zai5iaW5kKG51bGwsZixsLGgpO2wudGhlbih2LHYpfXAuZmxhZ3N8PTQwOTY7cC5sYW5lcz1iO2JyZWFrIGF9cD1wLnJldHVybn13aGlsZShudWxsIT09cCk7az1FcnJvcigoUmEoaC50eXBlKXx8XCJBIFJlYWN0IGNvbXBvbmVudFwiKStcIiBzdXNwZW5kZWQgd2hpbGUgcmVuZGVyaW5nLCBidXQgbm8gZmFsbGJhY2sgVUkgd2FzIHNwZWNpZmllZC5cXG5cXG5BZGQgYSA8U3VzcGVuc2UgZmFsbGJhY2s9Li4uPiBjb21wb25lbnQgaGlnaGVyIGluIHRoZSB0cmVlIHRvIHByb3ZpZGUgYSBsb2FkaW5nIGluZGljYXRvciBvciBwbGFjZWhvbGRlciB0byBkaXNwbGF5LlwiKX01IT09ViYmKFY9Mik7az1NaShrLGgpO3A9XG5nO2Rve3N3aXRjaChwLnRhZyl7Y2FzZSAzOmY9aztwLmZsYWdzfD00MDk2O2ImPS1iO3AubGFuZXN8PWI7dmFyIEo9UGkocCxmLGIpO0JnKHAsSik7YnJlYWsgYTtjYXNlIDE6Zj1rO3ZhciBLPXAudHlwZSxRPXAuc3RhdGVOb2RlO2lmKDA9PT0ocC5mbGFncyY2NCkmJihcImZ1bmN0aW9uXCI9PT10eXBlb2YgSy5nZXREZXJpdmVkU3RhdGVGcm9tRXJyb3J8fG51bGwhPT1RJiZcImZ1bmN0aW9uXCI9PT10eXBlb2YgUS5jb21wb25lbnREaWRDYXRjaCYmKG51bGw9PT1UaXx8IVRpLmhhcyhRKSkpKXtwLmZsYWdzfD00MDk2O2ImPS1iO3AubGFuZXN8PWI7dmFyIEw9U2kocCxmLGIpO0JnKHAsTCk7YnJlYWsgYX19cD1wLnJldHVybn13aGlsZShudWxsIT09cCl9WmooYyl9Y2F0Y2godmEpe2I9dmE7WT09PWMmJm51bGwhPT1jJiYoWT1jPWMucmV0dXJuKTtjb250aW51ZX1icmVha313aGlsZSgxKX1cbmZ1bmN0aW9uIFBqKCl7dmFyIGE9b2ouY3VycmVudDtvai5jdXJyZW50PUdoO3JldHVybiBudWxsPT09YT9HaDphfWZ1bmN0aW9uIFRqKGEsYil7dmFyIGM9WDtYfD0xNjt2YXIgZD1QaigpO1U9PT1hJiZXPT09Ynx8UWooYSxiKTtkbyB0cnl7YWsoKTticmVha31jYXRjaChlKXtTaihhLGUpfXdoaWxlKDEpO3FnKCk7WD1jO29qLmN1cnJlbnQ9ZDtpZihudWxsIT09WSl0aHJvdyBFcnJvcih5KDI2MSkpO1U9bnVsbDtXPTA7cmV0dXJuIFZ9ZnVuY3Rpb24gYWsoKXtmb3IoO251bGwhPT1ZOyliayhZKX1mdW5jdGlvbiBSaigpe2Zvcig7bnVsbCE9PVkmJiFRZigpOyliayhZKX1mdW5jdGlvbiBiayhhKXt2YXIgYj1jayhhLmFsdGVybmF0ZSxhLHFqKTthLm1lbW9pemVkUHJvcHM9YS5wZW5kaW5nUHJvcHM7bnVsbD09PWI/WmooYSk6WT1iO3BqLmN1cnJlbnQ9bnVsbH1cbmZ1bmN0aW9uIFpqKGEpe3ZhciBiPWE7ZG97dmFyIGM9Yi5hbHRlcm5hdGU7YT1iLnJldHVybjtpZigwPT09KGIuZmxhZ3MmMjA0OCkpe2M9R2koYyxiLHFqKTtpZihudWxsIT09Yyl7WT1jO3JldHVybn1jPWI7aWYoMjQhPT1jLnRhZyYmMjMhPT1jLnRhZ3x8bnVsbD09PWMubWVtb2l6ZWRTdGF0ZXx8MCE9PShxaiYxMDczNzQxODI0KXx8MD09PShjLm1vZGUmNCkpe2Zvcih2YXIgZD0wLGU9Yy5jaGlsZDtudWxsIT09ZTspZHw9ZS5sYW5lc3xlLmNoaWxkTGFuZXMsZT1lLnNpYmxpbmc7Yy5jaGlsZExhbmVzPWR9bnVsbCE9PWEmJjA9PT0oYS5mbGFncyYyMDQ4KSYmKG51bGw9PT1hLmZpcnN0RWZmZWN0JiYoYS5maXJzdEVmZmVjdD1iLmZpcnN0RWZmZWN0KSxudWxsIT09Yi5sYXN0RWZmZWN0JiYobnVsbCE9PWEubGFzdEVmZmVjdCYmKGEubGFzdEVmZmVjdC5uZXh0RWZmZWN0PWIuZmlyc3RFZmZlY3QpLGEubGFzdEVmZmVjdD1iLmxhc3RFZmZlY3QpLDE8Yi5mbGFncyYmKG51bGwhPT1cbmEubGFzdEVmZmVjdD9hLmxhc3RFZmZlY3QubmV4dEVmZmVjdD1iOmEuZmlyc3RFZmZlY3Q9YixhLmxhc3RFZmZlY3Q9YikpfWVsc2V7Yz1MaShiKTtpZihudWxsIT09Yyl7Yy5mbGFncyY9MjA0NztZPWM7cmV0dXJufW51bGwhPT1hJiYoYS5maXJzdEVmZmVjdD1hLmxhc3RFZmZlY3Q9bnVsbCxhLmZsYWdzfD0yMDQ4KX1iPWIuc2libGluZztpZihudWxsIT09Yil7WT1iO3JldHVybn1ZPWI9YX13aGlsZShudWxsIT09Yik7MD09PVYmJihWPTUpfWZ1bmN0aW9uIFVqKGEpe3ZhciBiPWVnKCk7Z2coOTksZGsuYmluZChudWxsLGEsYikpO3JldHVybiBudWxsfVxuZnVuY3Rpb24gZGsoYSxiKXtkbyBPaigpO3doaWxlKG51bGwhPT15aik7aWYoMCE9PShYJjQ4KSl0aHJvdyBFcnJvcih5KDMyNykpO3ZhciBjPWEuZmluaXNoZWRXb3JrO2lmKG51bGw9PT1jKXJldHVybiBudWxsO2EuZmluaXNoZWRXb3JrPW51bGw7YS5maW5pc2hlZExhbmVzPTA7aWYoYz09PWEuY3VycmVudCl0aHJvdyBFcnJvcih5KDE3NykpO2EuY2FsbGJhY2tOb2RlPW51bGw7dmFyIGQ9Yy5sYW5lc3xjLmNoaWxkTGFuZXMsZT1kLGY9YS5wZW5kaW5nTGFuZXMmfmU7YS5wZW5kaW5nTGFuZXM9ZTthLnN1c3BlbmRlZExhbmVzPTA7YS5waW5nZWRMYW5lcz0wO2EuZXhwaXJlZExhbmVzJj1lO2EubXV0YWJsZVJlYWRMYW5lcyY9ZTthLmVudGFuZ2xlZExhbmVzJj1lO2U9YS5lbnRhbmdsZW1lbnRzO2Zvcih2YXIgZz1hLmV2ZW50VGltZXMsaD1hLmV4cGlyYXRpb25UaW1lczswPGY7KXt2YXIgaz0zMS1WYyhmKSxsPTE8PGs7ZVtrXT0wO2dba109LTE7aFtrXT0tMTtmJj1+bH1udWxsIT09XG5DaiYmMD09PShkJjI0KSYmQ2ouaGFzKGEpJiZDai5kZWxldGUoYSk7YT09PVUmJihZPVU9bnVsbCxXPTApOzE8Yy5mbGFncz9udWxsIT09Yy5sYXN0RWZmZWN0PyhjLmxhc3RFZmZlY3QubmV4dEVmZmVjdD1jLGQ9Yy5maXJzdEVmZmVjdCk6ZD1jOmQ9Yy5maXJzdEVmZmVjdDtpZihudWxsIT09ZCl7ZT1YO1h8PTMyO3BqLmN1cnJlbnQ9bnVsbDtrZj1mZDtnPU5lKCk7aWYoT2UoZykpe2lmKFwic2VsZWN0aW9uU3RhcnRcImluIGcpaD17c3RhcnQ6Zy5zZWxlY3Rpb25TdGFydCxlbmQ6Zy5zZWxlY3Rpb25FbmR9O2Vsc2UgYTppZihoPShoPWcub3duZXJEb2N1bWVudCkmJmguZGVmYXVsdFZpZXd8fHdpbmRvdywobD1oLmdldFNlbGVjdGlvbiYmaC5nZXRTZWxlY3Rpb24oKSkmJjAhPT1sLnJhbmdlQ291bnQpe2g9bC5hbmNob3JOb2RlO2Y9bC5hbmNob3JPZmZzZXQ7az1sLmZvY3VzTm9kZTtsPWwuZm9jdXNPZmZzZXQ7dHJ5e2gubm9kZVR5cGUsay5ub2RlVHlwZX1jYXRjaCh2YSl7aD1udWxsO1xuYnJlYWsgYX12YXIgbj0wLEE9LTEscD0tMSxDPTAseD0wLHc9Zyx6PW51bGw7Yjpmb3IoOzspe2Zvcih2YXIgdTs7KXt3IT09aHx8MCE9PWYmJjMhPT13Lm5vZGVUeXBlfHwoQT1uK2YpO3chPT1rfHwwIT09bCYmMyE9PXcubm9kZVR5cGV8fChwPW4rbCk7Mz09PXcubm9kZVR5cGUmJihuKz13Lm5vZGVWYWx1ZS5sZW5ndGgpO2lmKG51bGw9PT0odT13LmZpcnN0Q2hpbGQpKWJyZWFrO3o9dzt3PXV9Zm9yKDs7KXtpZih3PT09ZylicmVhayBiO3o9PT1oJiYrK0M9PT1mJiYoQT1uKTt6PT09ayYmKyt4PT09bCYmKHA9bik7aWYobnVsbCE9PSh1PXcubmV4dFNpYmxpbmcpKWJyZWFrO3c9ejt6PXcucGFyZW50Tm9kZX13PXV9aD0tMT09PUF8fC0xPT09cD9udWxsOntzdGFydDpBLGVuZDpwfX1lbHNlIGg9bnVsbDtoPWh8fHtzdGFydDowLGVuZDowfX1lbHNlIGg9bnVsbDtsZj17Zm9jdXNlZEVsZW06ZyxzZWxlY3Rpb25SYW5nZTpofTtmZD0hMTtJaj1udWxsO0pqPSExO1o9ZDtkbyB0cnl7ZWsoKX1jYXRjaCh2YSl7aWYobnVsbD09PVxuWil0aHJvdyBFcnJvcih5KDMzMCkpO1dpKFosdmEpO1o9Wi5uZXh0RWZmZWN0fXdoaWxlKG51bGwhPT1aKTtJaj1udWxsO1o9ZDtkbyB0cnl7Zm9yKGc9YTtudWxsIT09Wjspe3ZhciB0PVouZmxhZ3M7dCYxNiYmcGIoWi5zdGF0ZU5vZGUsXCJcIik7aWYodCYxMjgpe3ZhciBxPVouYWx0ZXJuYXRlO2lmKG51bGwhPT1xKXt2YXIgdj1xLnJlZjtudWxsIT09diYmKFwiZnVuY3Rpb25cIj09PXR5cGVvZiB2P3YobnVsbCk6di5jdXJyZW50PW51bGwpfX1zd2l0Y2godCYxMDM4KXtjYXNlIDI6ZmooWik7Wi5mbGFncyY9LTM7YnJlYWs7Y2FzZSA2OmZqKFopO1ouZmxhZ3MmPS0zO2lqKFouYWx0ZXJuYXRlLFopO2JyZWFrO2Nhc2UgMTAyNDpaLmZsYWdzJj0tMTAyNTticmVhaztjYXNlIDEwMjg6Wi5mbGFncyY9LTEwMjU7aWooWi5hbHRlcm5hdGUsWik7YnJlYWs7Y2FzZSA0OmlqKFouYWx0ZXJuYXRlLFopO2JyZWFrO2Nhc2UgODpoPVo7Y2ooZyxoKTt2YXIgSj1oLmFsdGVybmF0ZTtkaihoKTtudWxsIT09XG5KJiZkaihKKX1aPVoubmV4dEVmZmVjdH19Y2F0Y2godmEpe2lmKG51bGw9PT1aKXRocm93IEVycm9yKHkoMzMwKSk7V2koWix2YSk7Wj1aLm5leHRFZmZlY3R9d2hpbGUobnVsbCE9PVopO3Y9bGY7cT1OZSgpO3Q9di5mb2N1c2VkRWxlbTtnPXYuc2VsZWN0aW9uUmFuZ2U7aWYocSE9PXQmJnQmJnQub3duZXJEb2N1bWVudCYmTWUodC5vd25lckRvY3VtZW50LmRvY3VtZW50RWxlbWVudCx0KSl7bnVsbCE9PWcmJk9lKHQpJiYocT1nLnN0YXJ0LHY9Zy5lbmQsdm9pZCAwPT09diYmKHY9cSksXCJzZWxlY3Rpb25TdGFydFwiaW4gdD8odC5zZWxlY3Rpb25TdGFydD1xLHQuc2VsZWN0aW9uRW5kPU1hdGgubWluKHYsdC52YWx1ZS5sZW5ndGgpKToodj0ocT10Lm93bmVyRG9jdW1lbnR8fGRvY3VtZW50KSYmcS5kZWZhdWx0Vmlld3x8d2luZG93LHYuZ2V0U2VsZWN0aW9uJiYodj12LmdldFNlbGVjdGlvbigpLGg9dC50ZXh0Q29udGVudC5sZW5ndGgsSj1NYXRoLm1pbihnLnN0YXJ0LGgpLGc9dm9pZCAwPT09XG5nLmVuZD9KOk1hdGgubWluKGcuZW5kLGgpLCF2LmV4dGVuZCYmSj5nJiYoaD1nLGc9SixKPWgpLGg9TGUodCxKKSxmPUxlKHQsZyksaCYmZiYmKDEhPT12LnJhbmdlQ291bnR8fHYuYW5jaG9yTm9kZSE9PWgubm9kZXx8di5hbmNob3JPZmZzZXQhPT1oLm9mZnNldHx8di5mb2N1c05vZGUhPT1mLm5vZGV8fHYuZm9jdXNPZmZzZXQhPT1mLm9mZnNldCkmJihxPXEuY3JlYXRlUmFuZ2UoKSxxLnNldFN0YXJ0KGgubm9kZSxoLm9mZnNldCksdi5yZW1vdmVBbGxSYW5nZXMoKSxKPmc/KHYuYWRkUmFuZ2UocSksdi5leHRlbmQoZi5ub2RlLGYub2Zmc2V0KSk6KHEuc2V0RW5kKGYubm9kZSxmLm9mZnNldCksdi5hZGRSYW5nZShxKSkpKSkpO3E9W107Zm9yKHY9dDt2PXYucGFyZW50Tm9kZTspMT09PXYubm9kZVR5cGUmJnEucHVzaCh7ZWxlbWVudDp2LGxlZnQ6di5zY3JvbGxMZWZ0LHRvcDp2LnNjcm9sbFRvcH0pO1wiZnVuY3Rpb25cIj09PXR5cGVvZiB0LmZvY3VzJiZ0LmZvY3VzKCk7Zm9yKHQ9XG4wO3Q8cS5sZW5ndGg7dCsrKXY9cVt0XSx2LmVsZW1lbnQuc2Nyb2xsTGVmdD12LmxlZnQsdi5lbGVtZW50LnNjcm9sbFRvcD12LnRvcH1mZD0hIWtmO2xmPWtmPW51bGw7YS5jdXJyZW50PWM7Wj1kO2RvIHRyeXtmb3IodD1hO251bGwhPT1aOyl7dmFyIEs9Wi5mbGFncztLJjM2JiZZaSh0LFouYWx0ZXJuYXRlLFopO2lmKEsmMTI4KXtxPXZvaWQgMDt2YXIgUT1aLnJlZjtpZihudWxsIT09USl7dmFyIEw9Wi5zdGF0ZU5vZGU7c3dpdGNoKFoudGFnKXtjYXNlIDU6cT1MO2JyZWFrO2RlZmF1bHQ6cT1MfVwiZnVuY3Rpb25cIj09PXR5cGVvZiBRP1EocSk6US5jdXJyZW50PXF9fVo9Wi5uZXh0RWZmZWN0fX1jYXRjaCh2YSl7aWYobnVsbD09PVopdGhyb3cgRXJyb3IoeSgzMzApKTtXaShaLHZhKTtaPVoubmV4dEVmZmVjdH13aGlsZShudWxsIT09Wik7Wj1udWxsOyRmKCk7WD1lfWVsc2UgYS5jdXJyZW50PWM7aWYoeGopeGo9ITEseWo9YSx6aj1iO2Vsc2UgZm9yKFo9ZDtudWxsIT09WjspYj1cbloubmV4dEVmZmVjdCxaLm5leHRFZmZlY3Q9bnVsbCxaLmZsYWdzJjgmJihLPVosSy5zaWJsaW5nPW51bGwsSy5zdGF0ZU5vZGU9bnVsbCksWj1iO2Q9YS5wZW5kaW5nTGFuZXM7MD09PWQmJihUaT1udWxsKTsxPT09ZD9hPT09RWo/RGorKzooRGo9MCxFaj1hKTpEaj0wO2M9Yy5zdGF0ZU5vZGU7aWYoTWYmJlwiZnVuY3Rpb25cIj09PXR5cGVvZiBNZi5vbkNvbW1pdEZpYmVyUm9vdCl0cnl7TWYub25Db21taXRGaWJlclJvb3QoTGYsYyx2b2lkIDAsNjQ9PT0oYy5jdXJyZW50LmZsYWdzJjY0KSl9Y2F0Y2godmEpe31NaihhLE8oKSk7aWYoUWkpdGhyb3cgUWk9ITEsYT1SaSxSaT1udWxsLGE7aWYoMCE9PShYJjgpKXJldHVybiBudWxsO2lnKCk7cmV0dXJuIG51bGx9XG5mdW5jdGlvbiBlaygpe2Zvcig7bnVsbCE9PVo7KXt2YXIgYT1aLmFsdGVybmF0ZTtKanx8bnVsbD09PUlqfHwoMCE9PShaLmZsYWdzJjgpP2RjKFosSWopJiYoSmo9ITApOjEzPT09Wi50YWcmJm1qKGEsWikmJmRjKFosSWopJiYoSmo9ITApKTt2YXIgYj1aLmZsYWdzOzAhPT0oYiYyNTYpJiZYaShhLFopOzA9PT0oYiY1MTIpfHx4anx8KHhqPSEwLGhnKDk3LGZ1bmN0aW9uKCl7T2ooKTtyZXR1cm4gbnVsbH0pKTtaPVoubmV4dEVmZmVjdH19ZnVuY3Rpb24gT2ooKXtpZig5MCE9PXpqKXt2YXIgYT05Nzx6aj85Nzp6ajt6aj05MDtyZXR1cm4gZ2coYSxmayl9cmV0dXJuITF9ZnVuY3Rpb24gJGkoYSxiKXtBai5wdXNoKGIsYSk7eGp8fCh4aj0hMCxoZyg5NyxmdW5jdGlvbigpe09qKCk7cmV0dXJuIG51bGx9KSl9ZnVuY3Rpb24gWmkoYSxiKXtCai5wdXNoKGIsYSk7eGp8fCh4aj0hMCxoZyg5NyxmdW5jdGlvbigpe09qKCk7cmV0dXJuIG51bGx9KSl9XG5mdW5jdGlvbiBmaygpe2lmKG51bGw9PT15ailyZXR1cm4hMTt2YXIgYT15ajt5aj1udWxsO2lmKDAhPT0oWCY0OCkpdGhyb3cgRXJyb3IoeSgzMzEpKTt2YXIgYj1YO1h8PTMyO3ZhciBjPUJqO0JqPVtdO2Zvcih2YXIgZD0wO2Q8Yy5sZW5ndGg7ZCs9Mil7dmFyIGU9Y1tkXSxmPWNbZCsxXSxnPWUuZGVzdHJveTtlLmRlc3Ryb3k9dm9pZCAwO2lmKFwiZnVuY3Rpb25cIj09PXR5cGVvZiBnKXRyeXtnKCl9Y2F0Y2goayl7aWYobnVsbD09PWYpdGhyb3cgRXJyb3IoeSgzMzApKTtXaShmLGspfX1jPUFqO0FqPVtdO2ZvcihkPTA7ZDxjLmxlbmd0aDtkKz0yKXtlPWNbZF07Zj1jW2QrMV07dHJ5e3ZhciBoPWUuY3JlYXRlO2UuZGVzdHJveT1oKCl9Y2F0Y2goayl7aWYobnVsbD09PWYpdGhyb3cgRXJyb3IoeSgzMzApKTtXaShmLGspfX1mb3IoaD1hLmN1cnJlbnQuZmlyc3RFZmZlY3Q7bnVsbCE9PWg7KWE9aC5uZXh0RWZmZWN0LGgubmV4dEVmZmVjdD1udWxsLGguZmxhZ3MmOCYmKGguc2libGluZz1cbm51bGwsaC5zdGF0ZU5vZGU9bnVsbCksaD1hO1g9YjtpZygpO3JldHVybiEwfWZ1bmN0aW9uIGdrKGEsYixjKXtiPU1pKGMsYik7Yj1QaShhLGIsMSk7QWcoYSxiKTtiPUhnKCk7YT1LaihhLDEpO251bGwhPT1hJiYoJGMoYSwxLGIpLE1qKGEsYikpfVxuZnVuY3Rpb24gV2koYSxiKXtpZigzPT09YS50YWcpZ2soYSxhLGIpO2Vsc2UgZm9yKHZhciBjPWEucmV0dXJuO251bGwhPT1jOyl7aWYoMz09PWMudGFnKXtnayhjLGEsYik7YnJlYWt9ZWxzZSBpZigxPT09Yy50YWcpe3ZhciBkPWMuc3RhdGVOb2RlO2lmKFwiZnVuY3Rpb25cIj09PXR5cGVvZiBjLnR5cGUuZ2V0RGVyaXZlZFN0YXRlRnJvbUVycm9yfHxcImZ1bmN0aW9uXCI9PT10eXBlb2YgZC5jb21wb25lbnREaWRDYXRjaCYmKG51bGw9PT1UaXx8IVRpLmhhcyhkKSkpe2E9TWkoYixhKTt2YXIgZT1TaShjLGEsMSk7QWcoYyxlKTtlPUhnKCk7Yz1LaihjLDEpO2lmKG51bGwhPT1jKSRjKGMsMSxlKSxNaihjLGUpO2Vsc2UgaWYoXCJmdW5jdGlvblwiPT09dHlwZW9mIGQuY29tcG9uZW50RGlkQ2F0Y2gmJihudWxsPT09VGl8fCFUaS5oYXMoZCkpKXRyeXtkLmNvbXBvbmVudERpZENhdGNoKGIsYSl9Y2F0Y2goZil7fWJyZWFrfX1jPWMucmV0dXJufX1cbmZ1bmN0aW9uIFlqKGEsYixjKXt2YXIgZD1hLnBpbmdDYWNoZTtudWxsIT09ZCYmZC5kZWxldGUoYik7Yj1IZygpO2EucGluZ2VkTGFuZXN8PWEuc3VzcGVuZGVkTGFuZXMmYztVPT09YSYmKFcmYyk9PT1jJiYoND09PVZ8fDM9PT1WJiYoVyY2MjkxNDU2MCk9PT1XJiY1MDA+TygpLWpqP1FqKGEsMCk6dWp8PWMpO01qKGEsYil9ZnVuY3Rpb24gbGooYSxiKXt2YXIgYz1hLnN0YXRlTm9kZTtudWxsIT09YyYmYy5kZWxldGUoYik7Yj0wOzA9PT1iJiYoYj1hLm1vZGUsMD09PShiJjIpP2I9MTowPT09KGImNCk/Yj05OT09PWVnKCk/MToyOigwPT09R2omJihHaj10aiksYj1ZYyg2MjkxNDU2MCZ+R2opLDA9PT1iJiYoYj00MTk0MzA0KSkpO2M9SGcoKTthPUtqKGEsYik7bnVsbCE9PWEmJigkYyhhLGIsYyksTWooYSxjKSl9dmFyIGNrO1xuY2s9ZnVuY3Rpb24oYSxiLGMpe3ZhciBkPWIubGFuZXM7aWYobnVsbCE9PWEpaWYoYS5tZW1vaXplZFByb3BzIT09Yi5wZW5kaW5nUHJvcHN8fE4uY3VycmVudCl1Zz0hMDtlbHNlIGlmKDAhPT0oYyZkKSl1Zz0wIT09KGEuZmxhZ3MmMTYzODQpPyEwOiExO2Vsc2V7dWc9ITE7c3dpdGNoKGIudGFnKXtjYXNlIDM6cmkoYik7c2goKTticmVhaztjYXNlIDU6Z2goYik7YnJlYWs7Y2FzZSAxOkZmKGIudHlwZSkmJkpmKGIpO2JyZWFrO2Nhc2UgNDplaChiLGIuc3RhdGVOb2RlLmNvbnRhaW5lckluZm8pO2JyZWFrO2Nhc2UgMTA6ZD1iLm1lbW9pemVkUHJvcHMudmFsdWU7dmFyIGU9Yi50eXBlLl9jb250ZXh0O0kobWcsZS5fY3VycmVudFZhbHVlKTtlLl9jdXJyZW50VmFsdWU9ZDticmVhaztjYXNlIDEzOmlmKG51bGwhPT1iLm1lbW9pemVkU3RhdGUpe2lmKDAhPT0oYyZiLmNoaWxkLmNoaWxkTGFuZXMpKXJldHVybiB0aShhLGIsYyk7SShQLFAuY3VycmVudCYxKTtiPWhpKGEsYixjKTtyZXR1cm4gbnVsbCE9PVxuYj9iLnNpYmxpbmc6bnVsbH1JKFAsUC5jdXJyZW50JjEpO2JyZWFrO2Nhc2UgMTk6ZD0wIT09KGMmYi5jaGlsZExhbmVzKTtpZigwIT09KGEuZmxhZ3MmNjQpKXtpZihkKXJldHVybiBBaShhLGIsYyk7Yi5mbGFnc3w9NjR9ZT1iLm1lbW9pemVkU3RhdGU7bnVsbCE9PWUmJihlLnJlbmRlcmluZz1udWxsLGUudGFpbD1udWxsLGUubGFzdEVmZmVjdD1udWxsKTtJKFAsUC5jdXJyZW50KTtpZihkKWJyZWFrO2Vsc2UgcmV0dXJuIG51bGw7Y2FzZSAyMzpjYXNlIDI0OnJldHVybiBiLmxhbmVzPTAsbWkoYSxiLGMpfXJldHVybiBoaShhLGIsYyl9ZWxzZSB1Zz0hMTtiLmxhbmVzPTA7c3dpdGNoKGIudGFnKXtjYXNlIDI6ZD1iLnR5cGU7bnVsbCE9PWEmJihhLmFsdGVybmF0ZT1udWxsLGIuYWx0ZXJuYXRlPW51bGwsYi5mbGFnc3w9Mik7YT1iLnBlbmRpbmdQcm9wcztlPUVmKGIsTS5jdXJyZW50KTt0ZyhiLGMpO2U9Q2gobnVsbCxiLGQsYSxlLGMpO2IuZmxhZ3N8PTE7aWYoXCJvYmplY3RcIj09PVxudHlwZW9mIGUmJm51bGwhPT1lJiZcImZ1bmN0aW9uXCI9PT10eXBlb2YgZS5yZW5kZXImJnZvaWQgMD09PWUuJCR0eXBlb2Ype2IudGFnPTE7Yi5tZW1vaXplZFN0YXRlPW51bGw7Yi51cGRhdGVRdWV1ZT1udWxsO2lmKEZmKGQpKXt2YXIgZj0hMDtKZihiKX1lbHNlIGY9ITE7Yi5tZW1vaXplZFN0YXRlPW51bGwhPT1lLnN0YXRlJiZ2b2lkIDAhPT1lLnN0YXRlP2Uuc3RhdGU6bnVsbDt4ZyhiKTt2YXIgZz1kLmdldERlcml2ZWRTdGF0ZUZyb21Qcm9wcztcImZ1bmN0aW9uXCI9PT10eXBlb2YgZyYmR2coYixkLGcsYSk7ZS51cGRhdGVyPUtnO2Iuc3RhdGVOb2RlPWU7ZS5fcmVhY3RJbnRlcm5hbHM9YjtPZyhiLGQsYSxjKTtiPXFpKG51bGwsYixkLCEwLGYsYyl9ZWxzZSBiLnRhZz0wLGZpKG51bGwsYixlLGMpLGI9Yi5jaGlsZDtyZXR1cm4gYjtjYXNlIDE2OmU9Yi5lbGVtZW50VHlwZTthOntudWxsIT09YSYmKGEuYWx0ZXJuYXRlPW51bGwsYi5hbHRlcm5hdGU9bnVsbCxiLmZsYWdzfD0yKTtcbmE9Yi5wZW5kaW5nUHJvcHM7Zj1lLl9pbml0O2U9ZihlLl9wYXlsb2FkKTtiLnR5cGU9ZTtmPWIudGFnPWhrKGUpO2E9bGcoZSxhKTtzd2l0Y2goZil7Y2FzZSAwOmI9bGkobnVsbCxiLGUsYSxjKTticmVhayBhO2Nhc2UgMTpiPXBpKG51bGwsYixlLGEsYyk7YnJlYWsgYTtjYXNlIDExOmI9Z2kobnVsbCxiLGUsYSxjKTticmVhayBhO2Nhc2UgMTQ6Yj1paShudWxsLGIsZSxsZyhlLnR5cGUsYSksZCxjKTticmVhayBhfXRocm93IEVycm9yKHkoMzA2LGUsXCJcIikpO31yZXR1cm4gYjtjYXNlIDA6cmV0dXJuIGQ9Yi50eXBlLGU9Yi5wZW5kaW5nUHJvcHMsZT1iLmVsZW1lbnRUeXBlPT09ZD9lOmxnKGQsZSksbGkoYSxiLGQsZSxjKTtjYXNlIDE6cmV0dXJuIGQ9Yi50eXBlLGU9Yi5wZW5kaW5nUHJvcHMsZT1iLmVsZW1lbnRUeXBlPT09ZD9lOmxnKGQsZSkscGkoYSxiLGQsZSxjKTtjYXNlIDM6cmkoYik7ZD1iLnVwZGF0ZVF1ZXVlO2lmKG51bGw9PT1hfHxudWxsPT09ZCl0aHJvdyBFcnJvcih5KDI4MikpO1xuZD1iLnBlbmRpbmdQcm9wcztlPWIubWVtb2l6ZWRTdGF0ZTtlPW51bGwhPT1lP2UuZWxlbWVudDpudWxsO3lnKGEsYik7Q2coYixkLG51bGwsYyk7ZD1iLm1lbW9pemVkU3RhdGUuZWxlbWVudDtpZihkPT09ZSlzaCgpLGI9aGkoYSxiLGMpO2Vsc2V7ZT1iLnN0YXRlTm9kZTtpZihmPWUuaHlkcmF0ZSlraD1yZihiLnN0YXRlTm9kZS5jb250YWluZXJJbmZvLmZpcnN0Q2hpbGQpLGpoPWIsZj1saD0hMDtpZihmKXthPWUubXV0YWJsZVNvdXJjZUVhZ2VySHlkcmF0aW9uRGF0YTtpZihudWxsIT1hKWZvcihlPTA7ZTxhLmxlbmd0aDtlKz0yKWY9YVtlXSxmLl93b3JrSW5Qcm9ncmVzc1ZlcnNpb25QcmltYXJ5PWFbZSsxXSx0aC5wdXNoKGYpO2M9WmcoYixudWxsLGQsYyk7Zm9yKGIuY2hpbGQ9YztjOyljLmZsYWdzPWMuZmxhZ3MmLTN8MTAyNCxjPWMuc2libGluZ31lbHNlIGZpKGEsYixkLGMpLHNoKCk7Yj1iLmNoaWxkfXJldHVybiBiO2Nhc2UgNTpyZXR1cm4gZ2goYiksbnVsbD09PWEmJlxucGgoYiksZD1iLnR5cGUsZT1iLnBlbmRpbmdQcm9wcyxmPW51bGwhPT1hP2EubWVtb2l6ZWRQcm9wczpudWxsLGc9ZS5jaGlsZHJlbixuZihkLGUpP2c9bnVsbDpudWxsIT09ZiYmbmYoZCxmKSYmKGIuZmxhZ3N8PTE2KSxvaShhLGIpLGZpKGEsYixnLGMpLGIuY2hpbGQ7Y2FzZSA2OnJldHVybiBudWxsPT09YSYmcGgoYiksbnVsbDtjYXNlIDEzOnJldHVybiB0aShhLGIsYyk7Y2FzZSA0OnJldHVybiBlaChiLGIuc3RhdGVOb2RlLmNvbnRhaW5lckluZm8pLGQ9Yi5wZW5kaW5nUHJvcHMsbnVsbD09PWE/Yi5jaGlsZD1ZZyhiLG51bGwsZCxjKTpmaShhLGIsZCxjKSxiLmNoaWxkO2Nhc2UgMTE6cmV0dXJuIGQ9Yi50eXBlLGU9Yi5wZW5kaW5nUHJvcHMsZT1iLmVsZW1lbnRUeXBlPT09ZD9lOmxnKGQsZSksZ2koYSxiLGQsZSxjKTtjYXNlIDc6cmV0dXJuIGZpKGEsYixiLnBlbmRpbmdQcm9wcyxjKSxiLmNoaWxkO2Nhc2UgODpyZXR1cm4gZmkoYSxiLGIucGVuZGluZ1Byb3BzLmNoaWxkcmVuLFxuYyksYi5jaGlsZDtjYXNlIDEyOnJldHVybiBmaShhLGIsYi5wZW5kaW5nUHJvcHMuY2hpbGRyZW4sYyksYi5jaGlsZDtjYXNlIDEwOmE6e2Q9Yi50eXBlLl9jb250ZXh0O2U9Yi5wZW5kaW5nUHJvcHM7Zz1iLm1lbW9pemVkUHJvcHM7Zj1lLnZhbHVlO3ZhciBoPWIudHlwZS5fY29udGV4dDtJKG1nLGguX2N1cnJlbnRWYWx1ZSk7aC5fY3VycmVudFZhbHVlPWY7aWYobnVsbCE9PWcpaWYoaD1nLnZhbHVlLGY9SGUoaCxmKT8wOihcImZ1bmN0aW9uXCI9PT10eXBlb2YgZC5fY2FsY3VsYXRlQ2hhbmdlZEJpdHM/ZC5fY2FsY3VsYXRlQ2hhbmdlZEJpdHMoaCxmKToxMDczNzQxODIzKXwwLDA9PT1mKXtpZihnLmNoaWxkcmVuPT09ZS5jaGlsZHJlbiYmIU4uY3VycmVudCl7Yj1oaShhLGIsYyk7YnJlYWsgYX19ZWxzZSBmb3IoaD1iLmNoaWxkLG51bGwhPT1oJiYoaC5yZXR1cm49Yik7bnVsbCE9PWg7KXt2YXIgaz1oLmRlcGVuZGVuY2llcztpZihudWxsIT09ayl7Zz1oLmNoaWxkO2Zvcih2YXIgbD1cbmsuZmlyc3RDb250ZXh0O251bGwhPT1sOyl7aWYobC5jb250ZXh0PT09ZCYmMCE9PShsLm9ic2VydmVkQml0cyZmKSl7MT09PWgudGFnJiYobD16ZygtMSxjJi1jKSxsLnRhZz0yLEFnKGgsbCkpO2gubGFuZXN8PWM7bD1oLmFsdGVybmF0ZTtudWxsIT09bCYmKGwubGFuZXN8PWMpO3NnKGgucmV0dXJuLGMpO2subGFuZXN8PWM7YnJlYWt9bD1sLm5leHR9fWVsc2UgZz0xMD09PWgudGFnP2gudHlwZT09PWIudHlwZT9udWxsOmguY2hpbGQ6aC5jaGlsZDtpZihudWxsIT09ZylnLnJldHVybj1oO2Vsc2UgZm9yKGc9aDtudWxsIT09Zzspe2lmKGc9PT1iKXtnPW51bGw7YnJlYWt9aD1nLnNpYmxpbmc7aWYobnVsbCE9PWgpe2gucmV0dXJuPWcucmV0dXJuO2c9aDticmVha31nPWcucmV0dXJufWg9Z31maShhLGIsZS5jaGlsZHJlbixjKTtiPWIuY2hpbGR9cmV0dXJuIGI7Y2FzZSA5OnJldHVybiBlPWIudHlwZSxmPWIucGVuZGluZ1Byb3BzLGQ9Zi5jaGlsZHJlbix0ZyhiLGMpLGU9dmcoZSxcbmYudW5zdGFibGVfb2JzZXJ2ZWRCaXRzKSxkPWQoZSksYi5mbGFnc3w9MSxmaShhLGIsZCxjKSxiLmNoaWxkO2Nhc2UgMTQ6cmV0dXJuIGU9Yi50eXBlLGY9bGcoZSxiLnBlbmRpbmdQcm9wcyksZj1sZyhlLnR5cGUsZiksaWkoYSxiLGUsZixkLGMpO2Nhc2UgMTU6cmV0dXJuIGtpKGEsYixiLnR5cGUsYi5wZW5kaW5nUHJvcHMsZCxjKTtjYXNlIDE3OnJldHVybiBkPWIudHlwZSxlPWIucGVuZGluZ1Byb3BzLGU9Yi5lbGVtZW50VHlwZT09PWQ/ZTpsZyhkLGUpLG51bGwhPT1hJiYoYS5hbHRlcm5hdGU9bnVsbCxiLmFsdGVybmF0ZT1udWxsLGIuZmxhZ3N8PTIpLGIudGFnPTEsRmYoZCk/KGE9ITAsSmYoYikpOmE9ITEsdGcoYixjKSxNZyhiLGQsZSksT2coYixkLGUsYykscWkobnVsbCxiLGQsITAsYSxjKTtjYXNlIDE5OnJldHVybiBBaShhLGIsYyk7Y2FzZSAyMzpyZXR1cm4gbWkoYSxiLGMpO2Nhc2UgMjQ6cmV0dXJuIG1pKGEsYixjKX10aHJvdyBFcnJvcih5KDE1NixiLnRhZykpO1xufTtmdW5jdGlvbiBpayhhLGIsYyxkKXt0aGlzLnRhZz1hO3RoaXMua2V5PWM7dGhpcy5zaWJsaW5nPXRoaXMuY2hpbGQ9dGhpcy5yZXR1cm49dGhpcy5zdGF0ZU5vZGU9dGhpcy50eXBlPXRoaXMuZWxlbWVudFR5cGU9bnVsbDt0aGlzLmluZGV4PTA7dGhpcy5yZWY9bnVsbDt0aGlzLnBlbmRpbmdQcm9wcz1iO3RoaXMuZGVwZW5kZW5jaWVzPXRoaXMubWVtb2l6ZWRTdGF0ZT10aGlzLnVwZGF0ZVF1ZXVlPXRoaXMubWVtb2l6ZWRQcm9wcz1udWxsO3RoaXMubW9kZT1kO3RoaXMuZmxhZ3M9MDt0aGlzLmxhc3RFZmZlY3Q9dGhpcy5maXJzdEVmZmVjdD10aGlzLm5leHRFZmZlY3Q9bnVsbDt0aGlzLmNoaWxkTGFuZXM9dGhpcy5sYW5lcz0wO3RoaXMuYWx0ZXJuYXRlPW51bGx9ZnVuY3Rpb24gbmgoYSxiLGMsZCl7cmV0dXJuIG5ldyBpayhhLGIsYyxkKX1mdW5jdGlvbiBqaShhKXthPWEucHJvdG90eXBlO3JldHVybiEoIWF8fCFhLmlzUmVhY3RDb21wb25lbnQpfVxuZnVuY3Rpb24gaGsoYSl7aWYoXCJmdW5jdGlvblwiPT09dHlwZW9mIGEpcmV0dXJuIGppKGEpPzE6MDtpZih2b2lkIDAhPT1hJiZudWxsIT09YSl7YT1hLiQkdHlwZW9mO2lmKGE9PT1BYSlyZXR1cm4gMTE7aWYoYT09PURhKXJldHVybiAxNH1yZXR1cm4gMn1cbmZ1bmN0aW9uIFRnKGEsYil7dmFyIGM9YS5hbHRlcm5hdGU7bnVsbD09PWM/KGM9bmgoYS50YWcsYixhLmtleSxhLm1vZGUpLGMuZWxlbWVudFR5cGU9YS5lbGVtZW50VHlwZSxjLnR5cGU9YS50eXBlLGMuc3RhdGVOb2RlPWEuc3RhdGVOb2RlLGMuYWx0ZXJuYXRlPWEsYS5hbHRlcm5hdGU9Yyk6KGMucGVuZGluZ1Byb3BzPWIsYy50eXBlPWEudHlwZSxjLmZsYWdzPTAsYy5uZXh0RWZmZWN0PW51bGwsYy5maXJzdEVmZmVjdD1udWxsLGMubGFzdEVmZmVjdD1udWxsKTtjLmNoaWxkTGFuZXM9YS5jaGlsZExhbmVzO2MubGFuZXM9YS5sYW5lcztjLmNoaWxkPWEuY2hpbGQ7Yy5tZW1vaXplZFByb3BzPWEubWVtb2l6ZWRQcm9wcztjLm1lbW9pemVkU3RhdGU9YS5tZW1vaXplZFN0YXRlO2MudXBkYXRlUXVldWU9YS51cGRhdGVRdWV1ZTtiPWEuZGVwZW5kZW5jaWVzO2MuZGVwZW5kZW5jaWVzPW51bGw9PT1iP251bGw6e2xhbmVzOmIubGFuZXMsZmlyc3RDb250ZXh0OmIuZmlyc3RDb250ZXh0fTtcbmMuc2libGluZz1hLnNpYmxpbmc7Yy5pbmRleD1hLmluZGV4O2MucmVmPWEucmVmO3JldHVybiBjfVxuZnVuY3Rpb24gVmcoYSxiLGMsZCxlLGYpe3ZhciBnPTI7ZD1hO2lmKFwiZnVuY3Rpb25cIj09PXR5cGVvZiBhKWppKGEpJiYoZz0xKTtlbHNlIGlmKFwic3RyaW5nXCI9PT10eXBlb2YgYSlnPTU7ZWxzZSBhOnN3aXRjaChhKXtjYXNlIHVhOnJldHVybiBYZyhjLmNoaWxkcmVuLGUsZixiKTtjYXNlIEhhOmc9ODtlfD0xNjticmVhaztjYXNlIHdhOmc9ODtlfD0xO2JyZWFrO2Nhc2UgeGE6cmV0dXJuIGE9bmgoMTIsYyxiLGV8OCksYS5lbGVtZW50VHlwZT14YSxhLnR5cGU9eGEsYS5sYW5lcz1mLGE7Y2FzZSBCYTpyZXR1cm4gYT1uaCgxMyxjLGIsZSksYS50eXBlPUJhLGEuZWxlbWVudFR5cGU9QmEsYS5sYW5lcz1mLGE7Y2FzZSBDYTpyZXR1cm4gYT1uaCgxOSxjLGIsZSksYS5lbGVtZW50VHlwZT1DYSxhLmxhbmVzPWYsYTtjYXNlIElhOnJldHVybiB2aShjLGUsZixiKTtjYXNlIEphOnJldHVybiBhPW5oKDI0LGMsYixlKSxhLmVsZW1lbnRUeXBlPUphLGEubGFuZXM9ZixhO2RlZmF1bHQ6aWYoXCJvYmplY3RcIj09PVxudHlwZW9mIGEmJm51bGwhPT1hKXN3aXRjaChhLiQkdHlwZW9mKXtjYXNlIHlhOmc9MTA7YnJlYWsgYTtjYXNlIHphOmc9OTticmVhayBhO2Nhc2UgQWE6Zz0xMTticmVhayBhO2Nhc2UgRGE6Zz0xNDticmVhayBhO2Nhc2UgRWE6Zz0xNjtkPW51bGw7YnJlYWsgYTtjYXNlIEZhOmc9MjI7YnJlYWsgYX10aHJvdyBFcnJvcih5KDEzMCxudWxsPT1hP2E6dHlwZW9mIGEsXCJcIikpO31iPW5oKGcsYyxiLGUpO2IuZWxlbWVudFR5cGU9YTtiLnR5cGU9ZDtiLmxhbmVzPWY7cmV0dXJuIGJ9ZnVuY3Rpb24gWGcoYSxiLGMsZCl7YT1uaCg3LGEsZCxiKTthLmxhbmVzPWM7cmV0dXJuIGF9ZnVuY3Rpb24gdmkoYSxiLGMsZCl7YT1uaCgyMyxhLGQsYik7YS5lbGVtZW50VHlwZT1JYTthLmxhbmVzPWM7cmV0dXJuIGF9ZnVuY3Rpb24gVWcoYSxiLGMpe2E9bmgoNixhLG51bGwsYik7YS5sYW5lcz1jO3JldHVybiBhfVxuZnVuY3Rpb24gV2coYSxiLGMpe2I9bmgoNCxudWxsIT09YS5jaGlsZHJlbj9hLmNoaWxkcmVuOltdLGEua2V5LGIpO2IubGFuZXM9YztiLnN0YXRlTm9kZT17Y29udGFpbmVySW5mbzphLmNvbnRhaW5lckluZm8scGVuZGluZ0NoaWxkcmVuOm51bGwsaW1wbGVtZW50YXRpb246YS5pbXBsZW1lbnRhdGlvbn07cmV0dXJuIGJ9XG5mdW5jdGlvbiBqayhhLGIsYyl7dGhpcy50YWc9Yjt0aGlzLmNvbnRhaW5lckluZm89YTt0aGlzLmZpbmlzaGVkV29yaz10aGlzLnBpbmdDYWNoZT10aGlzLmN1cnJlbnQ9dGhpcy5wZW5kaW5nQ2hpbGRyZW49bnVsbDt0aGlzLnRpbWVvdXRIYW5kbGU9LTE7dGhpcy5wZW5kaW5nQ29udGV4dD10aGlzLmNvbnRleHQ9bnVsbDt0aGlzLmh5ZHJhdGU9Yzt0aGlzLmNhbGxiYWNrTm9kZT1udWxsO3RoaXMuY2FsbGJhY2tQcmlvcml0eT0wO3RoaXMuZXZlbnRUaW1lcz1aYygwKTt0aGlzLmV4cGlyYXRpb25UaW1lcz1aYygtMSk7dGhpcy5lbnRhbmdsZWRMYW5lcz10aGlzLmZpbmlzaGVkTGFuZXM9dGhpcy5tdXRhYmxlUmVhZExhbmVzPXRoaXMuZXhwaXJlZExhbmVzPXRoaXMucGluZ2VkTGFuZXM9dGhpcy5zdXNwZW5kZWRMYW5lcz10aGlzLnBlbmRpbmdMYW5lcz0wO3RoaXMuZW50YW5nbGVtZW50cz1aYygwKTt0aGlzLm11dGFibGVTb3VyY2VFYWdlckh5ZHJhdGlvbkRhdGE9bnVsbH1cbmZ1bmN0aW9uIGtrKGEsYixjKXt2YXIgZD0zPGFyZ3VtZW50cy5sZW5ndGgmJnZvaWQgMCE9PWFyZ3VtZW50c1szXT9hcmd1bWVudHNbM106bnVsbDtyZXR1cm57JCR0eXBlb2Y6dGEsa2V5Om51bGw9PWQ/bnVsbDpcIlwiK2QsY2hpbGRyZW46YSxjb250YWluZXJJbmZvOmIsaW1wbGVtZW50YXRpb246Y319XG5mdW5jdGlvbiBsayhhLGIsYyxkKXt2YXIgZT1iLmN1cnJlbnQsZj1IZygpLGc9SWcoZSk7YTppZihjKXtjPWMuX3JlYWN0SW50ZXJuYWxzO2I6e2lmKFpiKGMpIT09Y3x8MSE9PWMudGFnKXRocm93IEVycm9yKHkoMTcwKSk7dmFyIGg9Yztkb3tzd2l0Y2goaC50YWcpe2Nhc2UgMzpoPWguc3RhdGVOb2RlLmNvbnRleHQ7YnJlYWsgYjtjYXNlIDE6aWYoRmYoaC50eXBlKSl7aD1oLnN0YXRlTm9kZS5fX3JlYWN0SW50ZXJuYWxNZW1vaXplZE1lcmdlZENoaWxkQ29udGV4dDticmVhayBifX1oPWgucmV0dXJufXdoaWxlKG51bGwhPT1oKTt0aHJvdyBFcnJvcih5KDE3MSkpO31pZigxPT09Yy50YWcpe3ZhciBrPWMudHlwZTtpZihGZihrKSl7Yz1JZihjLGssaCk7YnJlYWsgYX19Yz1ofWVsc2UgYz1DZjtudWxsPT09Yi5jb250ZXh0P2IuY29udGV4dD1jOmIucGVuZGluZ0NvbnRleHQ9YztiPXpnKGYsZyk7Yi5wYXlsb2FkPXtlbGVtZW50OmF9O2Q9dm9pZCAwPT09ZD9udWxsOmQ7bnVsbCE9PVxuZCYmKGIuY2FsbGJhY2s9ZCk7QWcoZSxiKTtKZyhlLGcsZik7cmV0dXJuIGd9ZnVuY3Rpb24gbWsoYSl7YT1hLmN1cnJlbnQ7aWYoIWEuY2hpbGQpcmV0dXJuIG51bGw7c3dpdGNoKGEuY2hpbGQudGFnKXtjYXNlIDU6cmV0dXJuIGEuY2hpbGQuc3RhdGVOb2RlO2RlZmF1bHQ6cmV0dXJuIGEuY2hpbGQuc3RhdGVOb2RlfX1mdW5jdGlvbiBuayhhLGIpe2E9YS5tZW1vaXplZFN0YXRlO2lmKG51bGwhPT1hJiZudWxsIT09YS5kZWh5ZHJhdGVkKXt2YXIgYz1hLnJldHJ5TGFuZTthLnJldHJ5TGFuZT0wIT09YyYmYzxiP2M6Yn19ZnVuY3Rpb24gb2soYSxiKXtuayhhLGIpOyhhPWEuYWx0ZXJuYXRlKSYmbmsoYSxiKX1mdW5jdGlvbiBwaygpe3JldHVybiBudWxsfVxuZnVuY3Rpb24gcWsoYSxiLGMpe3ZhciBkPW51bGwhPWMmJm51bGwhPWMuaHlkcmF0aW9uT3B0aW9ucyYmYy5oeWRyYXRpb25PcHRpb25zLm11dGFibGVTb3VyY2VzfHxudWxsO2M9bmV3IGprKGEsYixudWxsIT1jJiYhMD09PWMuaHlkcmF0ZSk7Yj1uaCgzLG51bGwsbnVsbCwyPT09Yj83OjE9PT1iPzM6MCk7Yy5jdXJyZW50PWI7Yi5zdGF0ZU5vZGU9Yzt4ZyhiKTthW2ZmXT1jLmN1cnJlbnQ7Y2YoOD09PWEubm9kZVR5cGU/YS5wYXJlbnROb2RlOmEpO2lmKGQpZm9yKGE9MDthPGQubGVuZ3RoO2ErKyl7Yj1kW2FdO3ZhciBlPWIuX2dldFZlcnNpb247ZT1lKGIuX3NvdXJjZSk7bnVsbD09Yy5tdXRhYmxlU291cmNlRWFnZXJIeWRyYXRpb25EYXRhP2MubXV0YWJsZVNvdXJjZUVhZ2VySHlkcmF0aW9uRGF0YT1bYixlXTpjLm11dGFibGVTb3VyY2VFYWdlckh5ZHJhdGlvbkRhdGEucHVzaChiLGUpfXRoaXMuX2ludGVybmFsUm9vdD1jfVxucWsucHJvdG90eXBlLnJlbmRlcj1mdW5jdGlvbihhKXtsayhhLHRoaXMuX2ludGVybmFsUm9vdCxudWxsLG51bGwpfTtxay5wcm90b3R5cGUudW5tb3VudD1mdW5jdGlvbigpe3ZhciBhPXRoaXMuX2ludGVybmFsUm9vdCxiPWEuY29udGFpbmVySW5mbztsayhudWxsLGEsbnVsbCxmdW5jdGlvbigpe2JbZmZdPW51bGx9KX07ZnVuY3Rpb24gcmsoYSl7cmV0dXJuISghYXx8MSE9PWEubm9kZVR5cGUmJjkhPT1hLm5vZGVUeXBlJiYxMSE9PWEubm9kZVR5cGUmJig4IT09YS5ub2RlVHlwZXx8XCIgcmVhY3QtbW91bnQtcG9pbnQtdW5zdGFibGUgXCIhPT1hLm5vZGVWYWx1ZSkpfVxuZnVuY3Rpb24gc2soYSxiKXtifHwoYj1hPzk9PT1hLm5vZGVUeXBlP2EuZG9jdW1lbnRFbGVtZW50OmEuZmlyc3RDaGlsZDpudWxsLGI9ISghYnx8MSE9PWIubm9kZVR5cGV8fCFiLmhhc0F0dHJpYnV0ZShcImRhdGEtcmVhY3Ryb290XCIpKSk7aWYoIWIpZm9yKHZhciBjO2M9YS5sYXN0Q2hpbGQ7KWEucmVtb3ZlQ2hpbGQoYyk7cmV0dXJuIG5ldyBxayhhLDAsYj97aHlkcmF0ZTohMH06dm9pZCAwKX1cbmZ1bmN0aW9uIHRrKGEsYixjLGQsZSl7dmFyIGY9Yy5fcmVhY3RSb290Q29udGFpbmVyO2lmKGYpe3ZhciBnPWYuX2ludGVybmFsUm9vdDtpZihcImZ1bmN0aW9uXCI9PT10eXBlb2YgZSl7dmFyIGg9ZTtlPWZ1bmN0aW9uKCl7dmFyIGE9bWsoZyk7aC5jYWxsKGEpfX1sayhiLGcsYSxlKX1lbHNle2Y9Yy5fcmVhY3RSb290Q29udGFpbmVyPXNrKGMsZCk7Zz1mLl9pbnRlcm5hbFJvb3Q7aWYoXCJmdW5jdGlvblwiPT09dHlwZW9mIGUpe3ZhciBrPWU7ZT1mdW5jdGlvbigpe3ZhciBhPW1rKGcpO2suY2FsbChhKX19WGooZnVuY3Rpb24oKXtsayhiLGcsYSxlKX0pfXJldHVybiBtayhnKX1lYz1mdW5jdGlvbihhKXtpZigxMz09PWEudGFnKXt2YXIgYj1IZygpO0pnKGEsNCxiKTtvayhhLDQpfX07ZmM9ZnVuY3Rpb24oYSl7aWYoMTM9PT1hLnRhZyl7dmFyIGI9SGcoKTtKZyhhLDY3MTA4ODY0LGIpO29rKGEsNjcxMDg4NjQpfX07XG5nYz1mdW5jdGlvbihhKXtpZigxMz09PWEudGFnKXt2YXIgYj1IZygpLGM9SWcoYSk7SmcoYSxjLGIpO29rKGEsYyl9fTtoYz1mdW5jdGlvbihhLGIpe3JldHVybiBiKCl9O1xueWI9ZnVuY3Rpb24oYSxiLGMpe3N3aXRjaChiKXtjYXNlIFwiaW5wdXRcIjphYihhLGMpO2I9Yy5uYW1lO2lmKFwicmFkaW9cIj09PWMudHlwZSYmbnVsbCE9Yil7Zm9yKGM9YTtjLnBhcmVudE5vZGU7KWM9Yy5wYXJlbnROb2RlO2M9Yy5xdWVyeVNlbGVjdG9yQWxsKFwiaW5wdXRbbmFtZT1cIitKU09OLnN0cmluZ2lmeShcIlwiK2IpKyddW3R5cGU9XCJyYWRpb1wiXScpO2ZvcihiPTA7YjxjLmxlbmd0aDtiKyspe3ZhciBkPWNbYl07aWYoZCE9PWEmJmQuZm9ybT09PWEuZm9ybSl7dmFyIGU9RGIoZCk7aWYoIWUpdGhyb3cgRXJyb3IoeSg5MCkpO1dhKGQpO2FiKGQsZSl9fX1icmVhaztjYXNlIFwidGV4dGFyZWFcIjppYihhLGMpO2JyZWFrO2Nhc2UgXCJzZWxlY3RcIjpiPWMudmFsdWUsbnVsbCE9YiYmZmIoYSwhIWMubXVsdGlwbGUsYiwhMSl9fTtHYj1XajtcbkhiPWZ1bmN0aW9uKGEsYixjLGQsZSl7dmFyIGY9WDtYfD00O3RyeXtyZXR1cm4gZ2coOTgsYS5iaW5kKG51bGwsYixjLGQsZSkpfWZpbmFsbHl7WD1mLDA9PT1YJiYod2ooKSxpZygpKX19O0liPWZ1bmN0aW9uKCl7MD09PShYJjQ5KSYmKFZqKCksT2ooKSl9O0piPWZ1bmN0aW9uKGEsYil7dmFyIGM9WDtYfD0yO3RyeXtyZXR1cm4gYShiKX1maW5hbGx5e1g9YywwPT09WCYmKHdqKCksaWcoKSl9fTtmdW5jdGlvbiB1ayhhLGIpe3ZhciBjPTI8YXJndW1lbnRzLmxlbmd0aCYmdm9pZCAwIT09YXJndW1lbnRzWzJdP2FyZ3VtZW50c1syXTpudWxsO2lmKCFyayhiKSl0aHJvdyBFcnJvcih5KDIwMCkpO3JldHVybiBrayhhLGIsbnVsbCxjKX12YXIgdms9e0V2ZW50czpbQ2IsdWUsRGIsRWIsRmIsT2ose2N1cnJlbnQ6ITF9XX0sd2s9e2ZpbmRGaWJlckJ5SG9zdEluc3RhbmNlOndjLGJ1bmRsZVR5cGU6MCx2ZXJzaW9uOlwiMTcuMC4yXCIscmVuZGVyZXJQYWNrYWdlTmFtZTpcInJlYWN0LWRvbVwifTtcbnZhciB4az17YnVuZGxlVHlwZTp3ay5idW5kbGVUeXBlLHZlcnNpb246d2sudmVyc2lvbixyZW5kZXJlclBhY2thZ2VOYW1lOndrLnJlbmRlcmVyUGFja2FnZU5hbWUscmVuZGVyZXJDb25maWc6d2sucmVuZGVyZXJDb25maWcsb3ZlcnJpZGVIb29rU3RhdGU6bnVsbCxvdmVycmlkZUhvb2tTdGF0ZURlbGV0ZVBhdGg6bnVsbCxvdmVycmlkZUhvb2tTdGF0ZVJlbmFtZVBhdGg6bnVsbCxvdmVycmlkZVByb3BzOm51bGwsb3ZlcnJpZGVQcm9wc0RlbGV0ZVBhdGg6bnVsbCxvdmVycmlkZVByb3BzUmVuYW1lUGF0aDpudWxsLHNldFN1c3BlbnNlSGFuZGxlcjpudWxsLHNjaGVkdWxlVXBkYXRlOm51bGwsY3VycmVudERpc3BhdGNoZXJSZWY6cmEuUmVhY3RDdXJyZW50RGlzcGF0Y2hlcixmaW5kSG9zdEluc3RhbmNlQnlGaWJlcjpmdW5jdGlvbihhKXthPWNjKGEpO3JldHVybiBudWxsPT09YT9udWxsOmEuc3RhdGVOb2RlfSxmaW5kRmliZXJCeUhvc3RJbnN0YW5jZTp3ay5maW5kRmliZXJCeUhvc3RJbnN0YW5jZXx8XG5wayxmaW5kSG9zdEluc3RhbmNlc0ZvclJlZnJlc2g6bnVsbCxzY2hlZHVsZVJlZnJlc2g6bnVsbCxzY2hlZHVsZVJvb3Q6bnVsbCxzZXRSZWZyZXNoSGFuZGxlcjpudWxsLGdldEN1cnJlbnRGaWJlcjpudWxsfTtpZihcInVuZGVmaW5lZFwiIT09dHlwZW9mIF9fUkVBQ1RfREVWVE9PTFNfR0xPQkFMX0hPT0tfXyl7dmFyIHlrPV9fUkVBQ1RfREVWVE9PTFNfR0xPQkFMX0hPT0tfXztpZigheWsuaXNEaXNhYmxlZCYmeWsuc3VwcG9ydHNGaWJlcil0cnl7TGY9eWsuaW5qZWN0KHhrKSxNZj15a31jYXRjaChhKXt9fWV4cG9ydHMuX19TRUNSRVRfSU5URVJOQUxTX0RPX05PVF9VU0VfT1JfWU9VX1dJTExfQkVfRklSRUQ9dms7ZXhwb3J0cy5jcmVhdGVQb3J0YWw9dWs7XG5leHBvcnRzLmZpbmRET01Ob2RlPWZ1bmN0aW9uKGEpe2lmKG51bGw9PWEpcmV0dXJuIG51bGw7aWYoMT09PWEubm9kZVR5cGUpcmV0dXJuIGE7dmFyIGI9YS5fcmVhY3RJbnRlcm5hbHM7aWYodm9pZCAwPT09Yil7aWYoXCJmdW5jdGlvblwiPT09dHlwZW9mIGEucmVuZGVyKXRocm93IEVycm9yKHkoMTg4KSk7dGhyb3cgRXJyb3IoeSgyNjgsT2JqZWN0LmtleXMoYSkpKTt9YT1jYyhiKTthPW51bGw9PT1hP251bGw6YS5zdGF0ZU5vZGU7cmV0dXJuIGF9O2V4cG9ydHMuZmx1c2hTeW5jPWZ1bmN0aW9uKGEsYil7dmFyIGM9WDtpZigwIT09KGMmNDgpKXJldHVybiBhKGIpO1h8PTE7dHJ5e2lmKGEpcmV0dXJuIGdnKDk5LGEuYmluZChudWxsLGIpKX1maW5hbGx5e1g9YyxpZygpfX07ZXhwb3J0cy5oeWRyYXRlPWZ1bmN0aW9uKGEsYixjKXtpZighcmsoYikpdGhyb3cgRXJyb3IoeSgyMDApKTtyZXR1cm4gdGsobnVsbCxhLGIsITAsYyl9O1xuZXhwb3J0cy5yZW5kZXI9ZnVuY3Rpb24oYSxiLGMpe2lmKCFyayhiKSl0aHJvdyBFcnJvcih5KDIwMCkpO3JldHVybiB0ayhudWxsLGEsYiwhMSxjKX07ZXhwb3J0cy51bm1vdW50Q29tcG9uZW50QXROb2RlPWZ1bmN0aW9uKGEpe2lmKCFyayhhKSl0aHJvdyBFcnJvcih5KDQwKSk7cmV0dXJuIGEuX3JlYWN0Um9vdENvbnRhaW5lcj8oWGooZnVuY3Rpb24oKXt0ayhudWxsLG51bGwsYSwhMSxmdW5jdGlvbigpe2EuX3JlYWN0Um9vdENvbnRhaW5lcj1udWxsO2FbZmZdPW51bGx9KX0pLCEwKTohMX07ZXhwb3J0cy51bnN0YWJsZV9iYXRjaGVkVXBkYXRlcz1XajtleHBvcnRzLnVuc3RhYmxlX2NyZWF0ZVBvcnRhbD1mdW5jdGlvbihhLGIpe3JldHVybiB1ayhhLGIsMjxhcmd1bWVudHMubGVuZ3RoJiZ2b2lkIDAhPT1hcmd1bWVudHNbMl0/YXJndW1lbnRzWzJdOm51bGwpfTtcbmV4cG9ydHMudW5zdGFibGVfcmVuZGVyU3VidHJlZUludG9Db250YWluZXI9ZnVuY3Rpb24oYSxiLGMsZCl7aWYoIXJrKGMpKXRocm93IEVycm9yKHkoMjAwKSk7aWYobnVsbD09YXx8dm9pZCAwPT09YS5fcmVhY3RJbnRlcm5hbHMpdGhyb3cgRXJyb3IoeSgzOCkpO3JldHVybiB0ayhhLGIsYywhMSxkKX07ZXhwb3J0cy52ZXJzaW9uPVwiMTcuMC4yXCI7XG4iLCIndXNlIHN0cmljdCc7XG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gJ3Byb2R1Y3Rpb24nKSB7XG4gIG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9janMvc2NoZWR1bGVyLnByb2R1Y3Rpb24ubWluLmpzJyk7XG59IGVsc2Uge1xuICBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vY2pzL3NjaGVkdWxlci5kZXZlbG9wbWVudC5qcycpO1xufVxuIiwiLyoqIEBsaWNlbnNlIFJlYWN0IHYwLjIwLjJcbiAqIHNjaGVkdWxlci5wcm9kdWN0aW9uLm1pbi5qc1xuICpcbiAqIENvcHlyaWdodCAoYykgRmFjZWJvb2ssIEluYy4gYW5kIGl0cyBhZmZpbGlhdGVzLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICovXG4ndXNlIHN0cmljdCc7dmFyIGYsZyxoLGs7aWYoXCJvYmplY3RcIj09PXR5cGVvZiBwZXJmb3JtYW5jZSYmXCJmdW5jdGlvblwiPT09dHlwZW9mIHBlcmZvcm1hbmNlLm5vdyl7dmFyIGw9cGVyZm9ybWFuY2U7ZXhwb3J0cy51bnN0YWJsZV9ub3c9ZnVuY3Rpb24oKXtyZXR1cm4gbC5ub3coKX19ZWxzZXt2YXIgcD1EYXRlLHE9cC5ub3coKTtleHBvcnRzLnVuc3RhYmxlX25vdz1mdW5jdGlvbigpe3JldHVybiBwLm5vdygpLXF9fVxuaWYoXCJ1bmRlZmluZWRcIj09PXR5cGVvZiB3aW5kb3d8fFwiZnVuY3Rpb25cIiE9PXR5cGVvZiBNZXNzYWdlQ2hhbm5lbCl7dmFyIHQ9bnVsbCx1PW51bGwsdz1mdW5jdGlvbigpe2lmKG51bGwhPT10KXRyeXt2YXIgYT1leHBvcnRzLnVuc3RhYmxlX25vdygpO3QoITAsYSk7dD1udWxsfWNhdGNoKGIpe3Rocm93IHNldFRpbWVvdXQodywwKSxiO319O2Y9ZnVuY3Rpb24oYSl7bnVsbCE9PXQ/c2V0VGltZW91dChmLDAsYSk6KHQ9YSxzZXRUaW1lb3V0KHcsMCkpfTtnPWZ1bmN0aW9uKGEsYil7dT1zZXRUaW1lb3V0KGEsYil9O2g9ZnVuY3Rpb24oKXtjbGVhclRpbWVvdXQodSl9O2V4cG9ydHMudW5zdGFibGVfc2hvdWxkWWllbGQ9ZnVuY3Rpb24oKXtyZXR1cm4hMX07az1leHBvcnRzLnVuc3RhYmxlX2ZvcmNlRnJhbWVSYXRlPWZ1bmN0aW9uKCl7fX1lbHNle3ZhciB4PXdpbmRvdy5zZXRUaW1lb3V0LHk9d2luZG93LmNsZWFyVGltZW91dDtpZihcInVuZGVmaW5lZFwiIT09dHlwZW9mIGNvbnNvbGUpe3ZhciB6PVxud2luZG93LmNhbmNlbEFuaW1hdGlvbkZyYW1lO1wiZnVuY3Rpb25cIiE9PXR5cGVvZiB3aW5kb3cucmVxdWVzdEFuaW1hdGlvbkZyYW1lJiZjb25zb2xlLmVycm9yKFwiVGhpcyBicm93c2VyIGRvZXNuJ3Qgc3VwcG9ydCByZXF1ZXN0QW5pbWF0aW9uRnJhbWUuIE1ha2Ugc3VyZSB0aGF0IHlvdSBsb2FkIGEgcG9seWZpbGwgaW4gb2xkZXIgYnJvd3NlcnMuIGh0dHBzOi8vcmVhY3Rqcy5vcmcvbGluay9yZWFjdC1wb2x5ZmlsbHNcIik7XCJmdW5jdGlvblwiIT09dHlwZW9mIHomJmNvbnNvbGUuZXJyb3IoXCJUaGlzIGJyb3dzZXIgZG9lc24ndCBzdXBwb3J0IGNhbmNlbEFuaW1hdGlvbkZyYW1lLiBNYWtlIHN1cmUgdGhhdCB5b3UgbG9hZCBhIHBvbHlmaWxsIGluIG9sZGVyIGJyb3dzZXJzLiBodHRwczovL3JlYWN0anMub3JnL2xpbmsvcmVhY3QtcG9seWZpbGxzXCIpfXZhciBBPSExLEI9bnVsbCxDPS0xLEQ9NSxFPTA7ZXhwb3J0cy51bnN0YWJsZV9zaG91bGRZaWVsZD1mdW5jdGlvbigpe3JldHVybiBleHBvcnRzLnVuc3RhYmxlX25vdygpPj1cbkV9O2s9ZnVuY3Rpb24oKXt9O2V4cG9ydHMudW5zdGFibGVfZm9yY2VGcmFtZVJhdGU9ZnVuY3Rpb24oYSl7MD5hfHwxMjU8YT9jb25zb2xlLmVycm9yKFwiZm9yY2VGcmFtZVJhdGUgdGFrZXMgYSBwb3NpdGl2ZSBpbnQgYmV0d2VlbiAwIGFuZCAxMjUsIGZvcmNpbmcgZnJhbWUgcmF0ZXMgaGlnaGVyIHRoYW4gMTI1IGZwcyBpcyBub3Qgc3VwcG9ydGVkXCIpOkQ9MDxhP01hdGguZmxvb3IoMUUzL2EpOjV9O3ZhciBGPW5ldyBNZXNzYWdlQ2hhbm5lbCxHPUYucG9ydDI7Ri5wb3J0MS5vbm1lc3NhZ2U9ZnVuY3Rpb24oKXtpZihudWxsIT09Qil7dmFyIGE9ZXhwb3J0cy51bnN0YWJsZV9ub3coKTtFPWErRDt0cnl7QighMCxhKT9HLnBvc3RNZXNzYWdlKG51bGwpOihBPSExLEI9bnVsbCl9Y2F0Y2goYil7dGhyb3cgRy5wb3N0TWVzc2FnZShudWxsKSxiO319ZWxzZSBBPSExfTtmPWZ1bmN0aW9uKGEpe0I9YTtBfHwoQT0hMCxHLnBvc3RNZXNzYWdlKG51bGwpKX07Zz1mdW5jdGlvbihhLGIpe0M9XG54KGZ1bmN0aW9uKCl7YShleHBvcnRzLnVuc3RhYmxlX25vdygpKX0sYil9O2g9ZnVuY3Rpb24oKXt5KEMpO0M9LTF9fWZ1bmN0aW9uIEgoYSxiKXt2YXIgYz1hLmxlbmd0aDthLnB1c2goYik7YTpmb3IoOzspe3ZhciBkPWMtMT4+PjEsZT1hW2RdO2lmKHZvaWQgMCE9PWUmJjA8SShlLGIpKWFbZF09YixhW2NdPWUsYz1kO2Vsc2UgYnJlYWsgYX19ZnVuY3Rpb24gSihhKXthPWFbMF07cmV0dXJuIHZvaWQgMD09PWE/bnVsbDphfVxuZnVuY3Rpb24gSyhhKXt2YXIgYj1hWzBdO2lmKHZvaWQgMCE9PWIpe3ZhciBjPWEucG9wKCk7aWYoYyE9PWIpe2FbMF09YzthOmZvcih2YXIgZD0wLGU9YS5sZW5ndGg7ZDxlOyl7dmFyIG09MiooZCsxKS0xLG49YVttXSx2PW0rMSxyPWFbdl07aWYodm9pZCAwIT09biYmMD5JKG4sYykpdm9pZCAwIT09ciYmMD5JKHIsbik/KGFbZF09cixhW3ZdPWMsZD12KTooYVtkXT1uLGFbbV09YyxkPW0pO2Vsc2UgaWYodm9pZCAwIT09ciYmMD5JKHIsYykpYVtkXT1yLGFbdl09YyxkPXY7ZWxzZSBicmVhayBhfX1yZXR1cm4gYn1yZXR1cm4gbnVsbH1mdW5jdGlvbiBJKGEsYil7dmFyIGM9YS5zb3J0SW5kZXgtYi5zb3J0SW5kZXg7cmV0dXJuIDAhPT1jP2M6YS5pZC1iLmlkfXZhciBMPVtdLE09W10sTj0xLE89bnVsbCxQPTMsUT0hMSxSPSExLFM9ITE7XG5mdW5jdGlvbiBUKGEpe2Zvcih2YXIgYj1KKE0pO251bGwhPT1iOyl7aWYobnVsbD09PWIuY2FsbGJhY2spSyhNKTtlbHNlIGlmKGIuc3RhcnRUaW1lPD1hKUsoTSksYi5zb3J0SW5kZXg9Yi5leHBpcmF0aW9uVGltZSxIKEwsYik7ZWxzZSBicmVhaztiPUooTSl9fWZ1bmN0aW9uIFUoYSl7Uz0hMTtUKGEpO2lmKCFSKWlmKG51bGwhPT1KKEwpKVI9ITAsZihWKTtlbHNle3ZhciBiPUooTSk7bnVsbCE9PWImJmcoVSxiLnN0YXJ0VGltZS1hKX19XG5mdW5jdGlvbiBWKGEsYil7Uj0hMTtTJiYoUz0hMSxoKCkpO1E9ITA7dmFyIGM9UDt0cnl7VChiKTtmb3IoTz1KKEwpO251bGwhPT1PJiYoIShPLmV4cGlyYXRpb25UaW1lPmIpfHxhJiYhZXhwb3J0cy51bnN0YWJsZV9zaG91bGRZaWVsZCgpKTspe3ZhciBkPU8uY2FsbGJhY2s7aWYoXCJmdW5jdGlvblwiPT09dHlwZW9mIGQpe08uY2FsbGJhY2s9bnVsbDtQPU8ucHJpb3JpdHlMZXZlbDt2YXIgZT1kKE8uZXhwaXJhdGlvblRpbWU8PWIpO2I9ZXhwb3J0cy51bnN0YWJsZV9ub3coKTtcImZ1bmN0aW9uXCI9PT10eXBlb2YgZT9PLmNhbGxiYWNrPWU6Tz09PUooTCkmJksoTCk7VChiKX1lbHNlIEsoTCk7Tz1KKEwpfWlmKG51bGwhPT1PKXZhciBtPSEwO2Vsc2V7dmFyIG49SihNKTtudWxsIT09biYmZyhVLG4uc3RhcnRUaW1lLWIpO209ITF9cmV0dXJuIG19ZmluYWxseXtPPW51bGwsUD1jLFE9ITF9fXZhciBXPWs7ZXhwb3J0cy51bnN0YWJsZV9JZGxlUHJpb3JpdHk9NTtcbmV4cG9ydHMudW5zdGFibGVfSW1tZWRpYXRlUHJpb3JpdHk9MTtleHBvcnRzLnVuc3RhYmxlX0xvd1ByaW9yaXR5PTQ7ZXhwb3J0cy51bnN0YWJsZV9Ob3JtYWxQcmlvcml0eT0zO2V4cG9ydHMudW5zdGFibGVfUHJvZmlsaW5nPW51bGw7ZXhwb3J0cy51bnN0YWJsZV9Vc2VyQmxvY2tpbmdQcmlvcml0eT0yO2V4cG9ydHMudW5zdGFibGVfY2FuY2VsQ2FsbGJhY2s9ZnVuY3Rpb24oYSl7YS5jYWxsYmFjaz1udWxsfTtleHBvcnRzLnVuc3RhYmxlX2NvbnRpbnVlRXhlY3V0aW9uPWZ1bmN0aW9uKCl7Unx8UXx8KFI9ITAsZihWKSl9O2V4cG9ydHMudW5zdGFibGVfZ2V0Q3VycmVudFByaW9yaXR5TGV2ZWw9ZnVuY3Rpb24oKXtyZXR1cm4gUH07ZXhwb3J0cy51bnN0YWJsZV9nZXRGaXJzdENhbGxiYWNrTm9kZT1mdW5jdGlvbigpe3JldHVybiBKKEwpfTtcbmV4cG9ydHMudW5zdGFibGVfbmV4dD1mdW5jdGlvbihhKXtzd2l0Y2goUCl7Y2FzZSAxOmNhc2UgMjpjYXNlIDM6dmFyIGI9MzticmVhaztkZWZhdWx0OmI9UH12YXIgYz1QO1A9Yjt0cnl7cmV0dXJuIGEoKX1maW5hbGx5e1A9Y319O2V4cG9ydHMudW5zdGFibGVfcGF1c2VFeGVjdXRpb249ZnVuY3Rpb24oKXt9O2V4cG9ydHMudW5zdGFibGVfcmVxdWVzdFBhaW50PVc7ZXhwb3J0cy51bnN0YWJsZV9ydW5XaXRoUHJpb3JpdHk9ZnVuY3Rpb24oYSxiKXtzd2l0Y2goYSl7Y2FzZSAxOmNhc2UgMjpjYXNlIDM6Y2FzZSA0OmNhc2UgNTpicmVhaztkZWZhdWx0OmE9M312YXIgYz1QO1A9YTt0cnl7cmV0dXJuIGIoKX1maW5hbGx5e1A9Y319O1xuZXhwb3J0cy51bnN0YWJsZV9zY2hlZHVsZUNhbGxiYWNrPWZ1bmN0aW9uKGEsYixjKXt2YXIgZD1leHBvcnRzLnVuc3RhYmxlX25vdygpO1wib2JqZWN0XCI9PT10eXBlb2YgYyYmbnVsbCE9PWM/KGM9Yy5kZWxheSxjPVwibnVtYmVyXCI9PT10eXBlb2YgYyYmMDxjP2QrYzpkKTpjPWQ7c3dpdGNoKGEpe2Nhc2UgMTp2YXIgZT0tMTticmVhaztjYXNlIDI6ZT0yNTA7YnJlYWs7Y2FzZSA1OmU9MTA3Mzc0MTgyMzticmVhaztjYXNlIDQ6ZT0xRTQ7YnJlYWs7ZGVmYXVsdDplPTVFM31lPWMrZTthPXtpZDpOKyssY2FsbGJhY2s6Yixwcmlvcml0eUxldmVsOmEsc3RhcnRUaW1lOmMsZXhwaXJhdGlvblRpbWU6ZSxzb3J0SW5kZXg6LTF9O2M+ZD8oYS5zb3J0SW5kZXg9YyxIKE0sYSksbnVsbD09PUooTCkmJmE9PT1KKE0pJiYoUz9oKCk6Uz0hMCxnKFUsYy1kKSkpOihhLnNvcnRJbmRleD1lLEgoTCxhKSxSfHxRfHwoUj0hMCxmKFYpKSk7cmV0dXJuIGF9O1xuZXhwb3J0cy51bnN0YWJsZV93cmFwQ2FsbGJhY2s9ZnVuY3Rpb24oYSl7dmFyIGI9UDtyZXR1cm4gZnVuY3Rpb24oKXt2YXIgYz1QO1A9Yjt0cnl7cmV0dXJuIGEuYXBwbHkodGhpcyxhcmd1bWVudHMpfWZpbmFsbHl7UD1jfX19O1xuIiwiaW1wb3J0IFJlYWN0IGZyb20gXCJyZWFjdFwiO1xuaW1wb3J0IEhlYWRlciBmcm9tIFwiLi4vY29tcG9uZW50cy9oZWFkZXIuanN4XCI7XG5pbXBvcnQgRm9vdGVyIGZyb20gXCIuLi9jb21wb25lbnRzL2Zvb3Rlci5qc3hcIjtcbmltcG9ydCBJbmRleCBmcm9tIFwiLi4vcGFnZXMvaW5kZXguanN4XCI7XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIEJhc2UgZXh0ZW5kcyBSZWFjdC5Db21wb25lbnQge1xuICAgIHJlbmRlcigpIHtcbiAgICAgICAgY29uc3QgYmFja2dyb3VuZCA9IHsgXCJiYWNrZ3JvdW5kSW1hZ2VcIjogJ3VybCguL2ltZy9tYXJrdXMtc3Bpc2tlLTE0ODAzMC5qcGcpJyB9O1xuICAgICAgICByZXR1cm4oXG4gICAgICAgICAgICA8ZGl2PlxuICAgICAgICAgICAgICAgIDxkaXY+XG4gICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJ3cmFwcGVyXCI+XG4gICAgICAgICAgICAgICAgICAgICAgICA8SGVhZGVyIC8+XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgaWQ9XCJob21lXCIgY2xhc3M9XCJwYWdlLWhlYWRlciBoZWFkZXItZmlsdGVyIGNsZWFyLWZpbHRlclwiIGRhdGEtcGFyYWxsYXg9XCJkaXNhYmxlZFwiIHN0eWxlPXtiYWNrZ3JvdW5kfT5cbiAgICAgICAgICAgICAgICAgICAgXHRcdDxkaXYgY2xhc3M9XCJjb250YWluZXJcIj5cbiAgICAgICAgICAgICAgICAgICAgXHRcdFx0PGRpdiBjbGFzcz1cInJvd1wiPlxuICAgICAgICAgICAgICAgICAgICBcdFx0XHRcdDxkaXYgY2xhc3M9XCJjb2wtbWQtOCBjb2wtbWQtb2Zmc2V0LTJcIj5cbiAgICAgICAgICAgICAgICAgICAgXHRcdFx0XHRcdDxkaXYgY2xhc3M9XCJicmFuZFwiPlxuICAgICAgICAgICAgICAgICAgICBcdFx0XHRcdFx0XHQ8aDE+aW88ZGl2IGNsYXNzPVwicHJvLWJhZGdlXCI+SHViPC9kaXY+PC9oMT5cbiAgICAgICAgICAgICAgICAgICAgXHRcdFx0XHRcdFx0PGgzIGNsYXNzPVwidGl0bGVcIj5XZWxjb21lIHRvIG15IHByb2plY3RzIGh1YiwgY2hlY2sgb3V0IHNvbWUgb2YgbXkgcHJvamVjdHMgJmFtcDsgY29udHJpYnV0aW9uczwvaDM+XG4gICAgICAgICAgICAgICAgICAgIFx0XHRcdFx0XHQ8L2Rpdj5cbiAgICAgICAgICAgICAgICAgICAgXHRcdFx0XHQ8L2Rpdj5cbiAgICAgICAgICAgICAgICAgICAgXHRcdFx0PC9kaXY+XG4gICAgICAgICAgICAgICAgICAgIFx0XHQ8L2Rpdj5cbiAgICAgICAgICAgICAgICAgICAgXHQ8L2Rpdj5cblxuICAgICAgICAgICAgICAgICAgICAgICAgPEluZGV4IC8+XG4gICAgICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgICAgICAgICA8Rm9vdGVyIC8+XG4gICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgKTtcbiAgICB9XG59XG4iLCJpbXBvcnQgUmVhY3QgZnJvbSBcInJlYWN0XCI7XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIEhlYWRlciBleHRlbmRzIFJlYWN0LkNvbXBvbmVudCB7XG4gICAgcmVuZGVyKCkge1xuXG4gICAgICAgIHJldHVybiAoXG4gICAgICAgICAgICA8bmF2IGNsYXNzPVwibmF2YmFyIG5hdmJhci1kZWZhdWx0IG5hdmJhci10cmFuc3BhcmVudCBuYXZiYXItZml4ZWQtdG9wIG5hdmJhci1jb2xvci1vbi1zY3JvbGxcIj5cbiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwiY29udGFpbmVyXCI+XG4gICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJuYXZiYXItaGVhZGVyXCI+XG4gICAgICAgICAgICAgICAgICAgICAgICA8YnV0dG9uIHR5cGU9XCJidXR0b25cIiBjbGFzcz1cIm5hdmJhci10b2dnbGVcIiBkYXRhLXRvZ2dsZT1cImNvbGxhcHNlXCIgZGF0YS10YXJnZXQ9XCIjbmF2aWdhdGlvbi1tYWluXCI+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9XCJzci1vbmx5XCI+VG9nZ2xlIG5hdmlnYXRpb248L3NwYW4+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9XCJpY29uLWJhclwiPjwvc3Bhbj5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz1cImljb24tYmFyXCI+PC9zcGFuPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPVwiaWNvbi1iYXJcIj48L3NwYW4+XG4gICAgICAgICAgICAgICAgICAgICAgICA8L2J1dHRvbj5cbiAgICAgICAgICAgICAgICAgICAgICAgIDxhIGNsYXNzPVwibmF2YmFyLWJyYW5kXCI+d2F4OTExPC9hPlxuICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cblxuICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwiY29sbGFwc2UgbmF2YmFyLWNvbGxhcHNlXCIgaWQ9XCJuYXZpZ2F0aW9uLW1haW5cIj5cbiAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz1cIm5hdiBuYXZiYXItbmF2XCI+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzTmFtZT1cImFjdGl2ZVwiPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBkYXRhLXNjcm9sbCBocmVmPVwiI2hvbWVcIj5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpIGNsYXNzPVwiZmEgZmEtaG9tZVwiIC8+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBIb21lXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvYT5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2xpPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgZGF0YS1zY3JvbGwgaHJlZj1cIiNhcHBsaWNhdGlvbnNcIj5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpIGNsYXNzPVwiZmEgZmEtYW5kcm9pZFwiIC8+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBBcHBsaWNhdGlvbnNcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9hPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBkYXRhLXNjcm9sbCBocmVmPVwiI3NjcmVlbnNob3RzXCI+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aSBjbGFzcz1cImZhIGZhLXR2XCIgLz5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFNjcmVlbnNob3RzXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvYT5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2xpPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgZGF0YS1zY3JvbGwgaHJlZj1cIiNhYm91dFwiPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGkgY2xhc3M9XCJmYSBmYS1xdWVzdGlvbi1jaXJjbGUtb1wiIC8+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBBYm91dFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2E+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9saT5cbiAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+XG4gICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9XCJuYXYgbmF2YmFyLW5hdiBuYXZiYXItcmlnaHRcIj5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9XCJodHRwczovL2dpdGh1Yi5jb20vd2F4OTExXCIgY2xhc3M9XCJidG4gYnRuLXNpbXBsZSBidG4td2hpdGUgYnRuLWp1c3QtaWNvblwiPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGkgY2xhc3M9XCJmYSBmYS1naXRodWJcIj48L2k+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvYT5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2xpPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj1cImh0dHBzOi8vemEubGlua2VkaW4uY29tL2luL21heHdlbGwtbWFwYWtvLTMyODY2YjViXCIgY2xhc3M9XCJidG4gYnRuLXNpbXBsZSBidG4td2hpdGUgYnRuLWp1c3QtaWNvblwiPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGkgY2xhc3M9XCJmYSBmYS1saW5rZWRpblwiPjwvaT5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9hPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPVwiaHR0cHM6Ly93d3cucXVvcmEuY29tL3Byb2ZpbGUvTWF4d2VsbC1NYXBha29cIiBjbGFzcz1cImJ0biBidG4tc2ltcGxlIGJ0bi13aGl0ZSBidG4tanVzdC1pY29uXCI+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aSBjbGFzcz1cImZhIGZhLXF1b3JhXCI+PC9pPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2E+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9saT5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9XCJodHRwOi8vc3RhY2tvdmVyZmxvdy5jb20vdXNlcnMvMTcyNTM0Ny93YXg5MTFcIiBjbGFzcz1cImJ0biBidG4tc2ltcGxlIGJ0bi13aGl0ZSBidG4tanVzdC1pY29uXCI+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aSBjbGFzcz1cImZhIGZhLXN0YWNrLW92ZXJmbG93XCI+PC9pPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2E+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9saT5cbiAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+XG4gICAgICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgPC9uYXY+XG4gICAgICAgICk7XG4gICAgfVxufVxuIiwiaW1wb3J0IFJlYWN0IGZyb20gXCJyZWFjdFwiO1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBGb290ZXIgZXh0ZW5kcyBSZWFjdC5Db21wb25lbnQge1xuICAgIHJlbmRlcigpIHtcblxuICAgICAgICByZXR1cm4gKFxuICAgICAgICAgICAgPGZvb3RlciBjbGFzcz1cImZvb3RlclwiPlxuICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJjb250YWluZXJcIj5cbiAgICAgICAgICAgICAgICAgICAgPGEgY2xhc3M9XCJjb3B5cmlnaHQgcHVsbC1sZWZ0XCIgaHJlZj1cImh0dHBzOi8vcmVhY3Rqcy5vcmcvXCI+TWFkZSBXaXRoIFJlYWN0PC9hPlxuICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwiY29weXJpZ2h0IHB1bGwtcmlnaHRcIj5cbiAgICAgICAgICAgICAgICAgICAgICAgIFBob3RvIGJ5IDxhIGhyZWY9XCJodHRwczovL3Vuc3BsYXNoLmNvbS9AbWFya3Vzc3Bpc2tlXCI+TWFya3VzPC9hPiBvbiBVbnNwbGFzaFxuICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgIDwvZm9vdGVyPlxuICAgICAgICApO1xuICAgIH1cbn1cbiIsImltcG9ydCBSZWFjdCBmcm9tIFwicmVhY3RcIjtcbmltcG9ydCBBcHBsaWNhdGlvbnMgZnJvbSBcIi4uL3NlY3Rpb25zL2FwcGxpY2F0aW9ucy5qc3hcIjtcbmltcG9ydCBGZWF0dXJlZCBmcm9tIFwiLi4vc2VjdGlvbnMvZmVhdHVyZWQuanN4XCI7XG5pbXBvcnQgU2NyZWVuc2hvdHMgZnJvbSBcIi4uL3NlY3Rpb25zL3NjcmVlbnNob3RzLmpzeFwiO1xuaW1wb3J0IEFib3V0IGZyb20gXCIuLi9zZWN0aW9ucy9hYm91dC5qc3hcIjtcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgSW5kZXggZXh0ZW5kcyBSZWFjdC5Db21wb25lbnQge1xuXG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgIHN1cGVyKCk7XG4gICAgfVxuXG4gICAgcmVuZGVyKCkge1xuICAgICAgICByZXR1cm4oXG4gICAgICAgIDxkaXYgY2xhc3M9XCJtYWluIG1haW4tcmFpc2VkXCI+XG4gICAgICAgICAgICA8ZGl2IGNsYXNzPVwic2VjdGlvbiBzZWN0aW9uLWJhc2ljXCI+XG5cbiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwiY29udGFpbmVyLWZsdWlkXCIgaWQ9XCJhcHBsaWNhdGlvbnNcIj5cbiAgICAgICAgICAgICAgICAgICAgPEFwcGxpY2F0aW9ucyAvPlxuXG4gICAgICAgICAgICAgICAgICAgIDxiciAvPjxiciAvPlxuICAgICAgICAgICAgICAgICAgICA8RmVhdHVyZWQgLz5cbiAgICAgICAgICAgICAgICA8L2Rpdj5cblxuICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJjb250YWluZXItZmx1aWRcIiBpZD1cInNjcmVlbnNob3RzXCI+XG4gICAgICAgICAgICAgICAgICAgIDxTY3JlZW5zaG90cyAvPlxuICAgICAgICAgICAgICAgIDwvZGl2PlxuXG4gICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cImNvbnRhaW5lci1mbHVpZFwiIGlkPVwiYWJvdXRcIj5cbiAgICAgICAgICAgICAgICAgICAgPEFib3V0IC8+XG4gICAgICAgICAgICAgICAgPC9kaXY+XG5cbiAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICA8L2Rpdj5cbiAgICAgICAgKTtcbiAgICB9XG59XG4iLCJpbXBvcnQgUmVhY3QgZnJvbSBcInJlYWN0XCI7XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIEFwcGxpY2F0aW9ucyBleHRlbmRzIFJlYWN0LkNvbXBvbmVudCB7XG5cbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgc3VwZXIoKTtcbiAgICB9XG5cbiAgICByZW5kZXIoKSB7XG4gICAgICAgIHJldHVybihcbiAgICAgICAgPGRpdiBjbGFzcz1cImNvbnRhaW5lclwiPlxuICAgICAgICAgICAgPGRpdiBjbGFzcz1cInJvd1wiPlxuICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJjb2wtbWQtOCBjb2wtbWQtb2Zmc2V0LTIgdGV4dC1jZW50ZXJcIj5cbiAgICBcdFx0XHRcdDxoMiBjbGFzcz1cInRpdGxlXCI+QXBwbGljYXRpb25zPC9oMj5cbiAgICBcdFx0XHRcdDxoNSBjbGFzcz1cImRlc2NyaXB0aW9uXCI+Q2hlY2sgb3V0IHNvbWUgb2YgbXkgcHJvamVjdHMgYmVsb3c8L2g1PlxuICAgIFx0XHRcdDwvZGl2PlxuICAgICAgICAgICAgPC9kaXY+XG5cbiAgICAgICAgICAgIDxiciAvPjxiciAvPlxuXG4gICAgICAgICAgICA8ZGl2IGNsYXNzPVwicm93IHRleHQtY2VudGVyXCI+XG4gICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cImNvbC1tZC02IGNvbC1zbS02XCI+XG4gICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPVwiZmEtc3RhY2sgZmEtbGcgZmEtNXhcIj5cbiAgICAgICAgICAgICAgICAgIDxpIGNsYXNzPVwiZmEgZmEtY2lyY2xlLXRoaW4gZmEtc3RhY2stMnhcIj48L2k+XG4gICAgICAgICAgICAgICAgICA8aSBjbGFzcz1cImZhIGZhLWFuZHJvaWQgZmEtc3RhY2stMXhcIj48L2k+XG4gICAgICAgICAgICAgICAgPC9zcGFuPlxuICAgICAgICAgICAgICAgICAgICA8aDI+TFAgU29sdmVyPC9oMj5cbiAgICAgICAgICAgICAgICAgICAgPHA+QW5kcm9pZCBhcHBsaWNhdGlvbiB0byBzb2x2ZSBnZW5lcmFsIGxpbmVhciBwcm9ncmFtbWluZyAoTFApIG1vZGVscy4gTGluZWFyIFByb2dyYW1taW5nIGlzIGEgbWF0aGVtYXRpY2FsIG1vZGVsbGluZyB0ZWNobmlxdWUgdXNlZnVsIGZvciBhbGxvY2F0aW9uIG9mIGxpbWl0ZWQgcmVzb3VyY2VzIHN1Y2ggYXMgbWF0ZXJpYWwsIG1hY2hpbmVzIGV0YyB0byBzZXZlcmFsIGNvbXBldGluZyBhY3Rpdml0aWVzIHN1Y2ggYXMgcHJvamVjdHMsIHNlcnZpY2VzIGV0Yy48L3A+XG4gICAgICAgICAgICAgICAgPC9kaXY+XG5cbiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwiY29sLW1kLTYgY29sLXNtLTZcIj5cbiAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9XCJmYS1zdGFjayBmYS1sZyBmYS01eFwiPlxuICAgICAgICAgICAgICAgICAgPGkgY2xhc3M9XCJmYSBmYS1jaXJjbGUtdGhpbiBmYS1zdGFjay0yeFwiPjwvaT5cbiAgICAgICAgICAgICAgICAgIDxpIGNsYXNzPVwiZmEgZmEtYW5kcm9pZCBmYS1zdGFjay0xeFwiPjwvaT5cbiAgICAgICAgICAgICAgICA8L3NwYW4+XG4gICAgICAgICAgICAgICAgICAgIDxoMj5BZWdpcyBOYXY8L2gyPlxuICAgICAgICAgICAgICAgICAgICA8cD5JbmRvb3IgTmF2aWdhdGlvbiBQcm9qZWN0IHRoYXQgd2FzIGNvbXBsZXRlZCBieSBhIHRlYW0gb2YgdW5pdmVyc2l0eSBzdHVkZW50cywgbXlzZWxmIGluY2x1ZGVkLlxuICAgICAgICAgICAgICAgICAgICBUaGlzIGlzIHdpbGwgbm90IGJlIGF2YWlsYWJsZSBpbiB0aGUgcGxheSBzdG9yZSB1bmZvcnR1bmF0ZWx5IGJ1dCBpdCdzIGRlZmluaXRlbHkgd29ydGggY2hlY2tpbmcgb3V0IGluIG15IGdpaHViIGxpbmsgdGhhdCB3aWxsIGJlIHByb3ZpZGVkIGxhdGVyIGluIHRoZSBwYWdlLjwvcD5cbiAgICAgICAgICAgICAgICA8L2Rpdj5cblxuICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJjb2wtbWQtNiBjb2wtc20tNlwiPlxuICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz1cImZhLXN0YWNrIGZhLWxnIGZhLTV4XCI+XG4gICAgICAgICAgICAgICAgICA8aSBjbGFzcz1cImZhIGZhLWNpcmNsZS10aGluIGZhLXN0YWNrLTJ4XCI+PC9pPlxuICAgICAgICAgICAgICAgICAgPGkgY2xhc3M9XCJmYSBmYS1hbmRyb2lkIGZhLXN0YWNrLTF4XCI+PC9pPlxuICAgICAgICAgICAgICAgIDwvc3Bhbj5cbiAgICAgICAgICAgICAgICAgICAgPGgyPkFuaVRyZW5kPC9oMj5cbiAgICAgICAgICAgICAgICAgICAgPHA+VHJhY2sgYWxsIHlvdXIgZmF2b3JpdGUgYW5pbWUgJmFtcDsgbWFuZ2Egd2l0aCBBbmlUcmVuZCEgQW5pVHJlbmQgaXMgYSBmcmVlIGFuaW1lIG9yIG1hbmdhIGxvb2t1cCwgdHJhY2tpbmcgYW5kIHJlZmVyZW5jZSBhcHBsaWNhdGlvbiE8L3A+XG4gICAgICAgICAgICAgICAgPC9kaXY+XG5cbiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwiY29sLW1kLTYgY29sLXNtLTZcIj5cbiAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9XCJmYS1zdGFjayBmYS1sZyBmYS01eFwiPlxuICAgICAgICAgICAgICAgICAgPGkgY2xhc3M9XCJmYSBmYS1jaXJjbGUtdGhpbiBmYS1zdGFjay0yeFwiPjwvaT5cbiAgICAgICAgICAgICAgICAgIDxpIGNsYXNzPVwiZmEgZmEtd2luZG93cyBmYS1zdGFjay0xeFwiPjwvaT5cbiAgICAgICAgICAgICAgICA8L3NwYW4+XG4gICAgICAgICAgICAgICAgICAgIDxoMj5Bc3NldCBHZW5lcmF0b3I8L2gyPlxuICAgICAgICAgICAgICAgICAgICA8cD5Jbml0aWFsbHkgY3JlYXRlZCB0byBnZW5lcmF0ZSBhc3NldHMgZm9yIGVjbGlwc2UgYW5kcm9pZCBkZXZlbG9wbWVudCBmb3IgdmFyaW91cyBzY3JlZW4gZHBpIHNpemVzLCBhbmQgbm93IGRlcHJlY2F0ZWQuPC9wPlxuICAgICAgICAgICAgICAgIDwvZGl2PlxuXG4gICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cImNvbC1tZC02IGNvbC1zbS02XCI+XG4gICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPVwiZmEtc3RhY2sgZmEtbGcgZmEtNXhcIj5cbiAgICAgICAgICAgICAgICAgIDxpIGNsYXNzPVwiZmEgZmEtY2lyY2xlLXRoaW4gZmEtc3RhY2stMnhcIj48L2k+XG4gICAgICAgICAgICAgICAgICA8aSBjbGFzcz1cImZhIGZhLWFuZHJvaWQgZmEtc3RhY2stMXhcIj48L2k+XG4gICAgICAgICAgICAgICAgPC9zcGFuPlxuICAgICAgICAgICAgICAgICAgICA8aDI+TWFuZ2EgU2xheWVyPC9oMj5cbiAgICAgICAgICAgICAgICAgICAgPHA+QSBtYW5nYSByZWFkaW5nIGFwcGxpY2F0aW9uIHRoYXQgSSBtYWRlIGZvciBhIGNsaWVudCB0YXJnZXRpbmcgdGhlIGFyYWJpYyBtYXJrZXQgdGhhdCBmZWF0dXJlcyBzb21lIGF3ZXNvbWUgbWF0ZXJpYWwgZGVzaWduIGZlYXR1cmVzLjwvcD5cbiAgICAgICAgICAgICAgICA8L2Rpdj5cblxuICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJjb2wtbWQtNiBjb2wtc20tNlwiPlxuICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz1cImZhLXN0YWNrIGZhLWxnIGZhLTV4XCI+XG4gICAgICAgICAgICAgICAgICA8aSBjbGFzcz1cImZhIGZhLWNpcmNsZS10aGluIGZhLXN0YWNrLTJ4XCI+PC9pPlxuICAgICAgICAgICAgICAgICAgPGkgY2xhc3M9XCJmYSBmYS1hbmRyb2lkIGZhLXN0YWNrLTF4XCI+PC9pPlxuICAgICAgICAgICAgICAgIDwvc3Bhbj5cbiAgICAgICAgICAgICAgICAgICAgPGgyPk11bHRpY29kZSBRUiBTY2FubmVyPC9oMj5cbiAgICAgICAgICAgICAgICAgICAgPHA+VGhpcyBwcm9qZWN0IGlzIGJhc2VkIG9uIHRoZSA8YSBocmVmPVwiaHR0cHM6Ly9naXRodWIuY29tL2dvb2dsZXNhbXBsZXMvYW5kcm9pZC12aXNpb25cIj5Hb29nbGUgVmlzaW9uIEJhcmNvZGUgQVBJPC9hPi4gVGhlIEJhcmNvZGUgU2Nhbm5lciBBUEkgZGV0ZWN0cyBiYXJjb2RlcyBpbiByZWFsIHRpbWUgaW4gYW55IG9yaWVudGF0aW9uLiBZb3UgY2FuIGFsc28gZGV0ZWN0IGFuZCBwYXJzZSBzZXZlcmFsIGJhcmNvZGVzIGluIGRpZmZlcmVudCBmb3JtYXRzIGF0IHRoZSBzYW1lIHRpbWUuPC9wPlxuICAgICAgICAgICAgICAgIDwvZGl2PlxuXG4gICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cImNvbC1tZC02IGNvbC1zbS02XCI+XG4gICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPVwiZmEtc3RhY2sgZmEtbGcgZmEtNXhcIj5cbiAgICAgICAgICAgICAgICAgIDxpIGNsYXNzPVwiZmEgZmEtY2lyY2xlLXRoaW4gZmEtc3RhY2stMnhcIj48L2k+XG4gICAgICAgICAgICAgICAgICA8aSBjbGFzcz1cImZhIGZhLWNocm9tZSBmYS1zdGFjay0xeFwiPjwvaT5cbiAgICAgICAgICAgICAgICA8L3NwYW4+XG4gICAgICAgICAgICAgICAgICAgIDxoMj40NXRoIE1lZGlhPC9oMj5cbiAgICAgICAgICAgICAgICAgICAgPHA+TGlua2luZyBQZW9wbGUgJmFtcDsgQnJhbmRzLCBhIGNvbXBhbnkgbGFuZGluZyBwYWdlPC9wPlxuICAgICAgICAgICAgICAgIDwvZGl2PlxuXG4gICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cImNvbC1tZC02IGNvbC1zbS02XCI+XG4gICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPVwiZmEtc3RhY2sgZmEtbGcgZmEtNXhcIj5cbiAgICAgICAgICAgICAgICAgIDxpIGNsYXNzPVwiZmEgZmEtY2lyY2xlLXRoaW4gZmEtc3RhY2stMnhcIj48L2k+XG4gICAgICAgICAgICAgICAgICA8aSBjbGFzcz1cImZhIGZhLWNocm9tZSBmYS1zdGFjay0xeFwiPjwvaT5cbiAgICAgICAgICAgICAgICA8L3NwYW4+XG4gICAgICAgICAgICAgICAgICAgIDxoMj5CZXJyeSBFbGVnYW5jZTwvaDI+XG4gICAgICAgICAgICAgICAgICAgIDxwPkVjb21tZXJjZSBzb2x1dGlvbiBwb3dlcmVkIGJ5IHNob3BpZnk8L3A+XG4gICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgPC9kaXY+XG4gICAgICAgICk7XG4gICAgfVxufVxuIiwiaW1wb3J0IFJlYWN0IGZyb20gXCJyZWFjdFwiO1xuaW1wb3J0IFN0b3JlIGZyb20gXCIuLi9zdG9yZXMvc3RvcmUuanN4XCI7XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIEZlYXR1cmVkIGV4dGVuZHMgUmVhY3QuQ29tcG9uZW50IHtcblxuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICBzdXBlcigpO1xuICAgICAgICB0aGlzLnN0YXRlID0ge1xuICAgICAgICAgICAgZmVhdHVyZWRBcHBzOiBTdG9yZS5nZXRBbGxGZWF0dXJlZEFwcGxpY2F0aW9ucygpXG4gICAgICAgIH1cbiAgICB9XG5cbiAgICByZW5kZXIoKXtcbiAgICAgICAgcmV0dXJuKFxuICAgICAgICAgICAgPGRpdiBjbGFzcz1cImNvbnRhaW5lclwiPlxuICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJyb3dcIj5cbiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cImNvbC1tZC04IGNvbC1tZC1vZmZzZXQtMiB0ZXh0LWNlbnRlclwiPlxuICAgICAgICAgICAgICAgICAgICAgICAgPGgyIGNsYXNzPVwidGl0bGVcIj5GZWF0dXJlZDwvaDI+XG4gICAgICAgICAgICAgICAgICAgICAgICA8aDUgY2xhc3M9XCJkZXNjcmlwdGlvblwiPlNvbWUgb2YgbXkgZmVhdHVyZWQgYXBwbGljYXRpb25zPC9oNT5cbiAgICAgICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICAgICAgPC9kaXY+XG5cbiAgICAgICAgICAgICAgICB7dGhpcy5zdGF0ZS5mZWF0dXJlZEFwcHN9XG4gICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgKTtcbiAgICB9XG59XG4iLCJpbXBvcnQgUmVhY3QgZnJvbSBcInJlYWN0XCI7XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIEZlYXR1cmUgZXh0ZW5kcyBSZWFjdC5Db21wb25lbnQge1xuXG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgIHN1cGVyKCk7XG4gICAgICAgIC8vcmVzZXJ2ZWQgZm9yIGV4dHJhIGluaXRpYWxpemF0aW9uXG4gICAgfVxuXG4gICAgcmVuZGVyKCkge1xuICAgICAgICBjb25zdCB7ZGF0YX0gPSB0aGlzLnByb3BzO1xuICAgICAgICByZXR1cm4gKFxuICAgICAgICAgICAgPGRpdiBjbGFzcz1cImNvbC1tZC02IGNvbC1zbS02XCI+XG4gICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9XCJmYS1zdGFjayBmYS1sZyBmYS01eFwiPlxuICAgICAgICAgICAgICA8aSBjbGFzcz1cImZhIGZhLWNpcmNsZS10aGluIGZhLXN0YWNrLTJ4XCI+PC9pPlxuICAgICAgICAgICAgICA8aSBjbGFzcz1cImZhIGZhLWFuZHJvaWQgZmEtc3RhY2stMXhcIj48L2k+XG4gICAgICAgICAgICA8L3NwYW4+XG4gICAgICAgICAgICAgICAgPGgyPntkYXRhLnRpdGxlfTwvaDI+XG4gICAgICAgICAgICAgICAgPHA+e2RhdGEuZGVzY3JpcHRpb259PC9wPlxuICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICk7XG4gICAgfVxuXG59XG4iLCJpbXBvcnQgUmVhY3QgZnJvbSBcInJlYWN0XCI7XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIEZlYXR1cmUgZXh0ZW5kcyBSZWFjdC5Db21wb25lbnQge1xuXG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgIHN1cGVyKCk7XG4gICAgICAgIC8vcmVzZXJ2ZWQgZm9yIGV4dHJhIGluaXRpYWxpemF0aW9uXG4gICAgfVxuXG4gICAgcmVuZGVyKCkge1xuICAgICAgICBjb25zdCB7ZGF0YX0gPSB0aGlzLnByb3BzO1xuICAgICAgICByZXR1cm4gKFxuICAgICAgICAgICAgPGRpdiBjbGFzcz1cImZlYXR1cmVzLTNcIj5cbiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwicm93XCI+XG4gICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJjb2wtbWQtNlwiPlxuICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cInBob25lLWNvbnRhaW5lclwiPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbWcgc3JjPXtkYXRhLmltYWdlfSAvPlxuICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwiY29sLW1kLTZcIj5cblxuICAgICAgICAgICAgICAgICAgICAgICAgPGJyLz48YnIvPlxuXG4gICAgICAgICAgICAgICAgICAgICAgICA8aDIgY2xhc3M9XCJ0aXRsZVwiPntkYXRhLnRpdGxlfTwvaDI+XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJpbmZvIGluZm8taG9yaXpvbnRhbFwiPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJpY29uIGljb24taW5mb1wiPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aSBjbGFzcz1cIm1hdGVyaWFsLWljb25zXCI+e2RhdGEuaWNvbn08L2k+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cImRlc2NyaXB0aW9uXCI+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxoNCBjbGFzcz1cImluZm8tdGl0bGVcIj57ZGF0YS5pbmZvVGl0bGV9PC9oND5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHA+e2RhdGEuZGV0YWlsc308L3A+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJpbmZvIGluZm8taG9yaXpvbnRhbFwiPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJpY29uIGljb24tZGVmYXVsdFwiPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aSBjbGFzcz1cIm1hdGVyaWFsLWljb25zXCI+bGluazwvaT5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwiZGVzY3JpcHRpb25cIj5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGg0IGNsYXNzPVwiaW5mby10aXRsZVwiPkdldCB7ZGF0YS5pbmZvVGl0bGV9IE5vdzwvaDQ+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxwPkNsaWNrIDxhIGhyZWY9e2RhdGEudXJsfT5oZXJlPC9hPiB0byB2aWV3IG9yIGRvd25sb2FkIHRoaXMgYXBwbGljYXRpb248L3A+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgKTtcbiAgICB9XG59XG4iLCJpbXBvcnQgUmVhY3QgZnJvbSBcInJlYWN0XCI7XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFNjcmVlbnNob3QgZXh0ZW5kcyBSZWFjdC5Db21wb25lbnQge1xuXG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgIHN1cGVyKCk7XG4gICAgICAgIC8vcmVzZXJ2ZWQgZm9yIGV4dHJhIGluaXRpYWxpemF0aW9uXG4gICAgfVxuXG4gICAgcmVuZGVyKCkge1xuICAgICAgICBjb25zdCBjdXN0b20gPSB7IFwid2lkdGhcIjogXCIxMDAlXCIgfTtcbiAgICAgICAgY29uc3Qge2RhdGF9ID0gdGhpcy5wcm9wcztcbiAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJwb3J0Zm9saW8taXRlbSBjb2wteHMtMTIgY29sLXNtLTYgY29sLW1kLTRcIj5cblx0XHRcdFx0PGRpdiBjbGFzcz1cInBvcnRmb2xpby1iZ1wiPlxuXHRcdFx0XHRcdDxkaXYgY2xhc3M9XCJwb3J0Zm9saW9cIj5cblx0XHRcdFx0XHRcdDxkaXYgY2xhc3M9XCJ0dC1vdmVybGF5XCI+PC9kaXY+XG5cdFx0XHRcdFx0XHQ8ZGl2IGNsYXNzPVwibGlua3NcIj5cblx0XHRcdFx0XHRcdFx0PGEgY2xhc3M9XCJpbWFnZS1saW5rXCIgaHJlZj17ZGF0YS5pbWFnZX0+PGkgY2xhc3M9XCJmYSBmYS1zZWFyY2gtcGx1c1wiPjwvaT48L2E+XG5cdFx0XHRcdFx0XHRcdDxhIGhyZWY9e2RhdGEudXJsfT48aSBjbGFzcz1cImZhIGZhLWxpbmtcIj48L2k+PC9hPlxuXHRcdFx0XHRcdFx0PC9kaXY+XG5cblx0XHRcdFx0XHRcdDxpbWcgc3JjPXtkYXRhLmltYWdlfSBhbHQ9e2RhdGEudGl0bGV9IHN0eWxlPXtjdXN0b219Lz5cblx0XHRcdFx0XHRcdDxkaXYgY2xhc3M9XCJwb3J0Zm9saW8taW5mb1wiPlxuXHRcdFx0XHRcdFx0XHQ8aDM+e2RhdGEudGl0bGV9PC9oMz5cblx0XHRcdFx0XHRcdDwvZGl2PlxuXHRcdFx0XHRcdDwvZGl2PlxuXHRcdFx0XHQ8L2Rpdj5cblx0XHRcdDwvZGl2PlxuICAgICAgICApO1xuICAgIH1cblxufVxuIiwiLyoqXG4gKiBAbGljZW5zZVxuICogTG9kYXNoIDxodHRwczovL2xvZGFzaC5jb20vPlxuICogQ29weXJpZ2h0IE9wZW5KUyBGb3VuZGF0aW9uIGFuZCBvdGhlciBjb250cmlidXRvcnMgPGh0dHBzOi8vb3BlbmpzZi5vcmcvPlxuICogUmVsZWFzZWQgdW5kZXIgTUlUIGxpY2Vuc2UgPGh0dHBzOi8vbG9kYXNoLmNvbS9saWNlbnNlPlxuICogQmFzZWQgb24gVW5kZXJzY29yZS5qcyAxLjguMyA8aHR0cDovL3VuZGVyc2NvcmVqcy5vcmcvTElDRU5TRT5cbiAqIENvcHlyaWdodCBKZXJlbXkgQXNoa2VuYXMsIERvY3VtZW50Q2xvdWQgYW5kIEludmVzdGlnYXRpdmUgUmVwb3J0ZXJzICYgRWRpdG9yc1xuICovXG47KGZ1bmN0aW9uKCkge1xuXG4gIC8qKiBVc2VkIGFzIGEgc2FmZSByZWZlcmVuY2UgZm9yIGB1bmRlZmluZWRgIGluIHByZS1FUzUgZW52aXJvbm1lbnRzLiAqL1xuICB2YXIgdW5kZWZpbmVkO1xuXG4gIC8qKiBVc2VkIGFzIHRoZSBzZW1hbnRpYyB2ZXJzaW9uIG51bWJlci4gKi9cbiAgdmFyIFZFUlNJT04gPSAnNC4xNy4yMSc7XG5cbiAgLyoqIFVzZWQgYXMgdGhlIHNpemUgdG8gZW5hYmxlIGxhcmdlIGFycmF5IG9wdGltaXphdGlvbnMuICovXG4gIHZhciBMQVJHRV9BUlJBWV9TSVpFID0gMjAwO1xuXG4gIC8qKiBFcnJvciBtZXNzYWdlIGNvbnN0YW50cy4gKi9cbiAgdmFyIENPUkVfRVJST1JfVEVYVCA9ICdVbnN1cHBvcnRlZCBjb3JlLWpzIHVzZS4gVHJ5IGh0dHBzOi8vbnBtcy5pby9zZWFyY2g/cT1wb255ZmlsbC4nLFxuICAgICAgRlVOQ19FUlJPUl9URVhUID0gJ0V4cGVjdGVkIGEgZnVuY3Rpb24nLFxuICAgICAgSU5WQUxJRF9URU1QTF9WQVJfRVJST1JfVEVYVCA9ICdJbnZhbGlkIGB2YXJpYWJsZWAgb3B0aW9uIHBhc3NlZCBpbnRvIGBfLnRlbXBsYXRlYCc7XG5cbiAgLyoqIFVzZWQgdG8gc3RhbmQtaW4gZm9yIGB1bmRlZmluZWRgIGhhc2ggdmFsdWVzLiAqL1xuICB2YXIgSEFTSF9VTkRFRklORUQgPSAnX19sb2Rhc2hfaGFzaF91bmRlZmluZWRfXyc7XG5cbiAgLyoqIFVzZWQgYXMgdGhlIG1heGltdW0gbWVtb2l6ZSBjYWNoZSBzaXplLiAqL1xuICB2YXIgTUFYX01FTU9JWkVfU0laRSA9IDUwMDtcblxuICAvKiogVXNlZCBhcyB0aGUgaW50ZXJuYWwgYXJndW1lbnQgcGxhY2Vob2xkZXIuICovXG4gIHZhciBQTEFDRUhPTERFUiA9ICdfX2xvZGFzaF9wbGFjZWhvbGRlcl9fJztcblxuICAvKiogVXNlZCB0byBjb21wb3NlIGJpdG1hc2tzIGZvciBjbG9uaW5nLiAqL1xuICB2YXIgQ0xPTkVfREVFUF9GTEFHID0gMSxcbiAgICAgIENMT05FX0ZMQVRfRkxBRyA9IDIsXG4gICAgICBDTE9ORV9TWU1CT0xTX0ZMQUcgPSA0O1xuXG4gIC8qKiBVc2VkIHRvIGNvbXBvc2UgYml0bWFza3MgZm9yIHZhbHVlIGNvbXBhcmlzb25zLiAqL1xuICB2YXIgQ09NUEFSRV9QQVJUSUFMX0ZMQUcgPSAxLFxuICAgICAgQ09NUEFSRV9VTk9SREVSRURfRkxBRyA9IDI7XG5cbiAgLyoqIFVzZWQgdG8gY29tcG9zZSBiaXRtYXNrcyBmb3IgZnVuY3Rpb24gbWV0YWRhdGEuICovXG4gIHZhciBXUkFQX0JJTkRfRkxBRyA9IDEsXG4gICAgICBXUkFQX0JJTkRfS0VZX0ZMQUcgPSAyLFxuICAgICAgV1JBUF9DVVJSWV9CT1VORF9GTEFHID0gNCxcbiAgICAgIFdSQVBfQ1VSUllfRkxBRyA9IDgsXG4gICAgICBXUkFQX0NVUlJZX1JJR0hUX0ZMQUcgPSAxNixcbiAgICAgIFdSQVBfUEFSVElBTF9GTEFHID0gMzIsXG4gICAgICBXUkFQX1BBUlRJQUxfUklHSFRfRkxBRyA9IDY0LFxuICAgICAgV1JBUF9BUllfRkxBRyA9IDEyOCxcbiAgICAgIFdSQVBfUkVBUkdfRkxBRyA9IDI1NixcbiAgICAgIFdSQVBfRkxJUF9GTEFHID0gNTEyO1xuXG4gIC8qKiBVc2VkIGFzIGRlZmF1bHQgb3B0aW9ucyBmb3IgYF8udHJ1bmNhdGVgLiAqL1xuICB2YXIgREVGQVVMVF9UUlVOQ19MRU5HVEggPSAzMCxcbiAgICAgIERFRkFVTFRfVFJVTkNfT01JU1NJT04gPSAnLi4uJztcblxuICAvKiogVXNlZCB0byBkZXRlY3QgaG90IGZ1bmN0aW9ucyBieSBudW1iZXIgb2YgY2FsbHMgd2l0aGluIGEgc3BhbiBvZiBtaWxsaXNlY29uZHMuICovXG4gIHZhciBIT1RfQ09VTlQgPSA4MDAsXG4gICAgICBIT1RfU1BBTiA9IDE2O1xuXG4gIC8qKiBVc2VkIHRvIGluZGljYXRlIHRoZSB0eXBlIG9mIGxhenkgaXRlcmF0ZWVzLiAqL1xuICB2YXIgTEFaWV9GSUxURVJfRkxBRyA9IDEsXG4gICAgICBMQVpZX01BUF9GTEFHID0gMixcbiAgICAgIExBWllfV0hJTEVfRkxBRyA9IDM7XG5cbiAgLyoqIFVzZWQgYXMgcmVmZXJlbmNlcyBmb3IgdmFyaW91cyBgTnVtYmVyYCBjb25zdGFudHMuICovXG4gIHZhciBJTkZJTklUWSA9IDEgLyAwLFxuICAgICAgTUFYX1NBRkVfSU5URUdFUiA9IDkwMDcxOTkyNTQ3NDA5OTEsXG4gICAgICBNQVhfSU5URUdFUiA9IDEuNzk3NjkzMTM0ODYyMzE1N2UrMzA4LFxuICAgICAgTkFOID0gMCAvIDA7XG5cbiAgLyoqIFVzZWQgYXMgcmVmZXJlbmNlcyBmb3IgdGhlIG1heGltdW0gbGVuZ3RoIGFuZCBpbmRleCBvZiBhbiBhcnJheS4gKi9cbiAgdmFyIE1BWF9BUlJBWV9MRU5HVEggPSA0Mjk0OTY3Mjk1LFxuICAgICAgTUFYX0FSUkFZX0lOREVYID0gTUFYX0FSUkFZX0xFTkdUSCAtIDEsXG4gICAgICBIQUxGX01BWF9BUlJBWV9MRU5HVEggPSBNQVhfQVJSQVlfTEVOR1RIID4+PiAxO1xuXG4gIC8qKiBVc2VkIHRvIGFzc29jaWF0ZSB3cmFwIG1ldGhvZHMgd2l0aCB0aGVpciBiaXQgZmxhZ3MuICovXG4gIHZhciB3cmFwRmxhZ3MgPSBbXG4gICAgWydhcnknLCBXUkFQX0FSWV9GTEFHXSxcbiAgICBbJ2JpbmQnLCBXUkFQX0JJTkRfRkxBR10sXG4gICAgWydiaW5kS2V5JywgV1JBUF9CSU5EX0tFWV9GTEFHXSxcbiAgICBbJ2N1cnJ5JywgV1JBUF9DVVJSWV9GTEFHXSxcbiAgICBbJ2N1cnJ5UmlnaHQnLCBXUkFQX0NVUlJZX1JJR0hUX0ZMQUddLFxuICAgIFsnZmxpcCcsIFdSQVBfRkxJUF9GTEFHXSxcbiAgICBbJ3BhcnRpYWwnLCBXUkFQX1BBUlRJQUxfRkxBR10sXG4gICAgWydwYXJ0aWFsUmlnaHQnLCBXUkFQX1BBUlRJQUxfUklHSFRfRkxBR10sXG4gICAgWydyZWFyZycsIFdSQVBfUkVBUkdfRkxBR11cbiAgXTtcblxuICAvKiogYE9iamVjdCN0b1N0cmluZ2AgcmVzdWx0IHJlZmVyZW5jZXMuICovXG4gIHZhciBhcmdzVGFnID0gJ1tvYmplY3QgQXJndW1lbnRzXScsXG4gICAgICBhcnJheVRhZyA9ICdbb2JqZWN0IEFycmF5XScsXG4gICAgICBhc3luY1RhZyA9ICdbb2JqZWN0IEFzeW5jRnVuY3Rpb25dJyxcbiAgICAgIGJvb2xUYWcgPSAnW29iamVjdCBCb29sZWFuXScsXG4gICAgICBkYXRlVGFnID0gJ1tvYmplY3QgRGF0ZV0nLFxuICAgICAgZG9tRXhjVGFnID0gJ1tvYmplY3QgRE9NRXhjZXB0aW9uXScsXG4gICAgICBlcnJvclRhZyA9ICdbb2JqZWN0IEVycm9yXScsXG4gICAgICBmdW5jVGFnID0gJ1tvYmplY3QgRnVuY3Rpb25dJyxcbiAgICAgIGdlblRhZyA9ICdbb2JqZWN0IEdlbmVyYXRvckZ1bmN0aW9uXScsXG4gICAgICBtYXBUYWcgPSAnW29iamVjdCBNYXBdJyxcbiAgICAgIG51bWJlclRhZyA9ICdbb2JqZWN0IE51bWJlcl0nLFxuICAgICAgbnVsbFRhZyA9ICdbb2JqZWN0IE51bGxdJyxcbiAgICAgIG9iamVjdFRhZyA9ICdbb2JqZWN0IE9iamVjdF0nLFxuICAgICAgcHJvbWlzZVRhZyA9ICdbb2JqZWN0IFByb21pc2VdJyxcbiAgICAgIHByb3h5VGFnID0gJ1tvYmplY3QgUHJveHldJyxcbiAgICAgIHJlZ2V4cFRhZyA9ICdbb2JqZWN0IFJlZ0V4cF0nLFxuICAgICAgc2V0VGFnID0gJ1tvYmplY3QgU2V0XScsXG4gICAgICBzdHJpbmdUYWcgPSAnW29iamVjdCBTdHJpbmddJyxcbiAgICAgIHN5bWJvbFRhZyA9ICdbb2JqZWN0IFN5bWJvbF0nLFxuICAgICAgdW5kZWZpbmVkVGFnID0gJ1tvYmplY3QgVW5kZWZpbmVkXScsXG4gICAgICB3ZWFrTWFwVGFnID0gJ1tvYmplY3QgV2Vha01hcF0nLFxuICAgICAgd2Vha1NldFRhZyA9ICdbb2JqZWN0IFdlYWtTZXRdJztcblxuICB2YXIgYXJyYXlCdWZmZXJUYWcgPSAnW29iamVjdCBBcnJheUJ1ZmZlcl0nLFxuICAgICAgZGF0YVZpZXdUYWcgPSAnW29iamVjdCBEYXRhVmlld10nLFxuICAgICAgZmxvYXQzMlRhZyA9ICdbb2JqZWN0IEZsb2F0MzJBcnJheV0nLFxuICAgICAgZmxvYXQ2NFRhZyA9ICdbb2JqZWN0IEZsb2F0NjRBcnJheV0nLFxuICAgICAgaW50OFRhZyA9ICdbb2JqZWN0IEludDhBcnJheV0nLFxuICAgICAgaW50MTZUYWcgPSAnW29iamVjdCBJbnQxNkFycmF5XScsXG4gICAgICBpbnQzMlRhZyA9ICdbb2JqZWN0IEludDMyQXJyYXldJyxcbiAgICAgIHVpbnQ4VGFnID0gJ1tvYmplY3QgVWludDhBcnJheV0nLFxuICAgICAgdWludDhDbGFtcGVkVGFnID0gJ1tvYmplY3QgVWludDhDbGFtcGVkQXJyYXldJyxcbiAgICAgIHVpbnQxNlRhZyA9ICdbb2JqZWN0IFVpbnQxNkFycmF5XScsXG4gICAgICB1aW50MzJUYWcgPSAnW29iamVjdCBVaW50MzJBcnJheV0nO1xuXG4gIC8qKiBVc2VkIHRvIG1hdGNoIGVtcHR5IHN0cmluZyBsaXRlcmFscyBpbiBjb21waWxlZCB0ZW1wbGF0ZSBzb3VyY2UuICovXG4gIHZhciByZUVtcHR5U3RyaW5nTGVhZGluZyA9IC9cXGJfX3AgXFwrPSAnJzsvZyxcbiAgICAgIHJlRW1wdHlTdHJpbmdNaWRkbGUgPSAvXFxiKF9fcCBcXCs9KSAnJyBcXCsvZyxcbiAgICAgIHJlRW1wdHlTdHJpbmdUcmFpbGluZyA9IC8oX19lXFwoLio/XFwpfFxcYl9fdFxcKSkgXFwrXFxuJyc7L2c7XG5cbiAgLyoqIFVzZWQgdG8gbWF0Y2ggSFRNTCBlbnRpdGllcyBhbmQgSFRNTCBjaGFyYWN0ZXJzLiAqL1xuICB2YXIgcmVFc2NhcGVkSHRtbCA9IC8mKD86YW1wfGx0fGd0fHF1b3R8IzM5KTsvZyxcbiAgICAgIHJlVW5lc2NhcGVkSHRtbCA9IC9bJjw+XCInXS9nLFxuICAgICAgcmVIYXNFc2NhcGVkSHRtbCA9IFJlZ0V4cChyZUVzY2FwZWRIdG1sLnNvdXJjZSksXG4gICAgICByZUhhc1VuZXNjYXBlZEh0bWwgPSBSZWdFeHAocmVVbmVzY2FwZWRIdG1sLnNvdXJjZSk7XG5cbiAgLyoqIFVzZWQgdG8gbWF0Y2ggdGVtcGxhdGUgZGVsaW1pdGVycy4gKi9cbiAgdmFyIHJlRXNjYXBlID0gLzwlLShbXFxzXFxTXSs/KSU+L2csXG4gICAgICByZUV2YWx1YXRlID0gLzwlKFtcXHNcXFNdKz8pJT4vZyxcbiAgICAgIHJlSW50ZXJwb2xhdGUgPSAvPCU9KFtcXHNcXFNdKz8pJT4vZztcblxuICAvKiogVXNlZCB0byBtYXRjaCBwcm9wZXJ0eSBuYW1lcyB3aXRoaW4gcHJvcGVydHkgcGF0aHMuICovXG4gIHZhciByZUlzRGVlcFByb3AgPSAvXFwufFxcWyg/OlteW1xcXV0qfChbXCInXSkoPzooPyFcXDEpW15cXFxcXXxcXFxcLikqP1xcMSlcXF0vLFxuICAgICAgcmVJc1BsYWluUHJvcCA9IC9eXFx3KiQvLFxuICAgICAgcmVQcm9wTmFtZSA9IC9bXi5bXFxdXSt8XFxbKD86KC0/XFxkKyg/OlxcLlxcZCspPyl8KFtcIiddKSgoPzooPyFcXDIpW15cXFxcXXxcXFxcLikqPylcXDIpXFxdfCg/PSg/OlxcLnxcXFtcXF0pKD86XFwufFxcW1xcXXwkKSkvZztcblxuICAvKipcbiAgICogVXNlZCB0byBtYXRjaCBgUmVnRXhwYFxuICAgKiBbc3ludGF4IGNoYXJhY3RlcnNdKGh0dHA6Ly9lY21hLWludGVybmF0aW9uYWwub3JnL2VjbWEtMjYyLzcuMC8jc2VjLXBhdHRlcm5zKS5cbiAgICovXG4gIHZhciByZVJlZ0V4cENoYXIgPSAvW1xcXFxeJC4qKz8oKVtcXF17fXxdL2csXG4gICAgICByZUhhc1JlZ0V4cENoYXIgPSBSZWdFeHAocmVSZWdFeHBDaGFyLnNvdXJjZSk7XG5cbiAgLyoqIFVzZWQgdG8gbWF0Y2ggbGVhZGluZyB3aGl0ZXNwYWNlLiAqL1xuICB2YXIgcmVUcmltU3RhcnQgPSAvXlxccysvO1xuXG4gIC8qKiBVc2VkIHRvIG1hdGNoIGEgc2luZ2xlIHdoaXRlc3BhY2UgY2hhcmFjdGVyLiAqL1xuICB2YXIgcmVXaGl0ZXNwYWNlID0gL1xccy87XG5cbiAgLyoqIFVzZWQgdG8gbWF0Y2ggd3JhcCBkZXRhaWwgY29tbWVudHMuICovXG4gIHZhciByZVdyYXBDb21tZW50ID0gL1xceyg/OlxcblxcL1xcKiBcXFt3cmFwcGVkIHdpdGggLitcXF0gXFwqXFwvKT9cXG4/LyxcbiAgICAgIHJlV3JhcERldGFpbHMgPSAvXFx7XFxuXFwvXFwqIFxcW3dyYXBwZWQgd2l0aCAoLispXFxdIFxcKi8sXG4gICAgICByZVNwbGl0RGV0YWlscyA9IC8sPyAmIC87XG5cbiAgLyoqIFVzZWQgdG8gbWF0Y2ggd29yZHMgY29tcG9zZWQgb2YgYWxwaGFudW1lcmljIGNoYXJhY3RlcnMuICovXG4gIHZhciByZUFzY2lpV29yZCA9IC9bXlxceDAwLVxceDJmXFx4M2EtXFx4NDBcXHg1Yi1cXHg2MFxceDdiLVxceDdmXSsvZztcblxuICAvKipcbiAgICogVXNlZCB0byB2YWxpZGF0ZSB0aGUgYHZhbGlkYXRlYCBvcHRpb24gaW4gYF8udGVtcGxhdGVgIHZhcmlhYmxlLlxuICAgKlxuICAgKiBGb3JiaWRzIGNoYXJhY3RlcnMgd2hpY2ggY291bGQgcG90ZW50aWFsbHkgY2hhbmdlIHRoZSBtZWFuaW5nIG9mIHRoZSBmdW5jdGlvbiBhcmd1bWVudCBkZWZpbml0aW9uOlxuICAgKiAtIFwiKCksXCIgKG1vZGlmaWNhdGlvbiBvZiBmdW5jdGlvbiBwYXJhbWV0ZXJzKVxuICAgKiAtIFwiPVwiIChkZWZhdWx0IHZhbHVlKVxuICAgKiAtIFwiW117fVwiIChkZXN0cnVjdHVyaW5nIG9mIGZ1bmN0aW9uIHBhcmFtZXRlcnMpXG4gICAqIC0gXCIvXCIgKGJlZ2lubmluZyBvZiBhIGNvbW1lbnQpXG4gICAqIC0gd2hpdGVzcGFjZVxuICAgKi9cbiAgdmFyIHJlRm9yYmlkZGVuSWRlbnRpZmllckNoYXJzID0gL1soKT0se31cXFtcXF1cXC9cXHNdLztcblxuICAvKiogVXNlZCB0byBtYXRjaCBiYWNrc2xhc2hlcyBpbiBwcm9wZXJ0eSBwYXRocy4gKi9cbiAgdmFyIHJlRXNjYXBlQ2hhciA9IC9cXFxcKFxcXFwpPy9nO1xuXG4gIC8qKlxuICAgKiBVc2VkIHRvIG1hdGNoXG4gICAqIFtFUyB0ZW1wbGF0ZSBkZWxpbWl0ZXJzXShodHRwOi8vZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi83LjAvI3NlYy10ZW1wbGF0ZS1saXRlcmFsLWxleGljYWwtY29tcG9uZW50cykuXG4gICAqL1xuICB2YXIgcmVFc1RlbXBsYXRlID0gL1xcJFxceyhbXlxcXFx9XSooPzpcXFxcLlteXFxcXH1dKikqKVxcfS9nO1xuXG4gIC8qKiBVc2VkIHRvIG1hdGNoIGBSZWdFeHBgIGZsYWdzIGZyb20gdGhlaXIgY29lcmNlZCBzdHJpbmcgdmFsdWVzLiAqL1xuICB2YXIgcmVGbGFncyA9IC9cXHcqJC87XG5cbiAgLyoqIFVzZWQgdG8gZGV0ZWN0IGJhZCBzaWduZWQgaGV4YWRlY2ltYWwgc3RyaW5nIHZhbHVlcy4gKi9cbiAgdmFyIHJlSXNCYWRIZXggPSAvXlstK10weFswLTlhLWZdKyQvaTtcblxuICAvKiogVXNlZCB0byBkZXRlY3QgYmluYXJ5IHN0cmluZyB2YWx1ZXMuICovXG4gIHZhciByZUlzQmluYXJ5ID0gL14wYlswMV0rJC9pO1xuXG4gIC8qKiBVc2VkIHRvIGRldGVjdCBob3N0IGNvbnN0cnVjdG9ycyAoU2FmYXJpKS4gKi9cbiAgdmFyIHJlSXNIb3N0Q3RvciA9IC9eXFxbb2JqZWN0IC4rP0NvbnN0cnVjdG9yXFxdJC87XG5cbiAgLyoqIFVzZWQgdG8gZGV0ZWN0IG9jdGFsIHN0cmluZyB2YWx1ZXMuICovXG4gIHZhciByZUlzT2N0YWwgPSAvXjBvWzAtN10rJC9pO1xuXG4gIC8qKiBVc2VkIHRvIGRldGVjdCB1bnNpZ25lZCBpbnRlZ2VyIHZhbHVlcy4gKi9cbiAgdmFyIHJlSXNVaW50ID0gL14oPzowfFsxLTldXFxkKikkLztcblxuICAvKiogVXNlZCB0byBtYXRjaCBMYXRpbiBVbmljb2RlIGxldHRlcnMgKGV4Y2x1ZGluZyBtYXRoZW1hdGljYWwgb3BlcmF0b3JzKS4gKi9cbiAgdmFyIHJlTGF0aW4gPSAvW1xceGMwLVxceGQ2XFx4ZDgtXFx4ZjZcXHhmOC1cXHhmZlxcdTAxMDAtXFx1MDE3Zl0vZztcblxuICAvKiogVXNlZCB0byBlbnN1cmUgY2FwdHVyaW5nIG9yZGVyIG9mIHRlbXBsYXRlIGRlbGltaXRlcnMuICovXG4gIHZhciByZU5vTWF0Y2ggPSAvKCReKS87XG5cbiAgLyoqIFVzZWQgdG8gbWF0Y2ggdW5lc2NhcGVkIGNoYXJhY3RlcnMgaW4gY29tcGlsZWQgc3RyaW5nIGxpdGVyYWxzLiAqL1xuICB2YXIgcmVVbmVzY2FwZWRTdHJpbmcgPSAvWydcXG5cXHJcXHUyMDI4XFx1MjAyOVxcXFxdL2c7XG5cbiAgLyoqIFVzZWQgdG8gY29tcG9zZSB1bmljb2RlIGNoYXJhY3RlciBjbGFzc2VzLiAqL1xuICB2YXIgcnNBc3RyYWxSYW5nZSA9ICdcXFxcdWQ4MDAtXFxcXHVkZmZmJyxcbiAgICAgIHJzQ29tYm9NYXJrc1JhbmdlID0gJ1xcXFx1MDMwMC1cXFxcdTAzNmYnLFxuICAgICAgcmVDb21ib0hhbGZNYXJrc1JhbmdlID0gJ1xcXFx1ZmUyMC1cXFxcdWZlMmYnLFxuICAgICAgcnNDb21ib1N5bWJvbHNSYW5nZSA9ICdcXFxcdTIwZDAtXFxcXHUyMGZmJyxcbiAgICAgIHJzQ29tYm9SYW5nZSA9IHJzQ29tYm9NYXJrc1JhbmdlICsgcmVDb21ib0hhbGZNYXJrc1JhbmdlICsgcnNDb21ib1N5bWJvbHNSYW5nZSxcbiAgICAgIHJzRGluZ2JhdFJhbmdlID0gJ1xcXFx1MjcwMC1cXFxcdTI3YmYnLFxuICAgICAgcnNMb3dlclJhbmdlID0gJ2EtelxcXFx4ZGYtXFxcXHhmNlxcXFx4ZjgtXFxcXHhmZicsXG4gICAgICByc01hdGhPcFJhbmdlID0gJ1xcXFx4YWNcXFxceGIxXFxcXHhkN1xcXFx4ZjcnLFxuICAgICAgcnNOb25DaGFyUmFuZ2UgPSAnXFxcXHgwMC1cXFxceDJmXFxcXHgzYS1cXFxceDQwXFxcXHg1Yi1cXFxceDYwXFxcXHg3Yi1cXFxceGJmJyxcbiAgICAgIHJzUHVuY3R1YXRpb25SYW5nZSA9ICdcXFxcdTIwMDAtXFxcXHUyMDZmJyxcbiAgICAgIHJzU3BhY2VSYW5nZSA9ICcgXFxcXHRcXFxceDBiXFxcXGZcXFxceGEwXFxcXHVmZWZmXFxcXG5cXFxcclxcXFx1MjAyOFxcXFx1MjAyOVxcXFx1MTY4MFxcXFx1MTgwZVxcXFx1MjAwMFxcXFx1MjAwMVxcXFx1MjAwMlxcXFx1MjAwM1xcXFx1MjAwNFxcXFx1MjAwNVxcXFx1MjAwNlxcXFx1MjAwN1xcXFx1MjAwOFxcXFx1MjAwOVxcXFx1MjAwYVxcXFx1MjAyZlxcXFx1MjA1ZlxcXFx1MzAwMCcsXG4gICAgICByc1VwcGVyUmFuZ2UgPSAnQS1aXFxcXHhjMC1cXFxceGQ2XFxcXHhkOC1cXFxceGRlJyxcbiAgICAgIHJzVmFyUmFuZ2UgPSAnXFxcXHVmZTBlXFxcXHVmZTBmJyxcbiAgICAgIHJzQnJlYWtSYW5nZSA9IHJzTWF0aE9wUmFuZ2UgKyByc05vbkNoYXJSYW5nZSArIHJzUHVuY3R1YXRpb25SYW5nZSArIHJzU3BhY2VSYW5nZTtcblxuICAvKiogVXNlZCB0byBjb21wb3NlIHVuaWNvZGUgY2FwdHVyZSBncm91cHMuICovXG4gIHZhciByc0Fwb3MgPSBcIlsnXFx1MjAxOV1cIixcbiAgICAgIHJzQXN0cmFsID0gJ1snICsgcnNBc3RyYWxSYW5nZSArICddJyxcbiAgICAgIHJzQnJlYWsgPSAnWycgKyByc0JyZWFrUmFuZ2UgKyAnXScsXG4gICAgICByc0NvbWJvID0gJ1snICsgcnNDb21ib1JhbmdlICsgJ10nLFxuICAgICAgcnNEaWdpdHMgPSAnXFxcXGQrJyxcbiAgICAgIHJzRGluZ2JhdCA9ICdbJyArIHJzRGluZ2JhdFJhbmdlICsgJ10nLFxuICAgICAgcnNMb3dlciA9ICdbJyArIHJzTG93ZXJSYW5nZSArICddJyxcbiAgICAgIHJzTWlzYyA9ICdbXicgKyByc0FzdHJhbFJhbmdlICsgcnNCcmVha1JhbmdlICsgcnNEaWdpdHMgKyByc0RpbmdiYXRSYW5nZSArIHJzTG93ZXJSYW5nZSArIHJzVXBwZXJSYW5nZSArICddJyxcbiAgICAgIHJzRml0eiA9ICdcXFxcdWQ4M2NbXFxcXHVkZmZiLVxcXFx1ZGZmZl0nLFxuICAgICAgcnNNb2RpZmllciA9ICcoPzonICsgcnNDb21ibyArICd8JyArIHJzRml0eiArICcpJyxcbiAgICAgIHJzTm9uQXN0cmFsID0gJ1teJyArIHJzQXN0cmFsUmFuZ2UgKyAnXScsXG4gICAgICByc1JlZ2lvbmFsID0gJyg/OlxcXFx1ZDgzY1tcXFxcdWRkZTYtXFxcXHVkZGZmXSl7Mn0nLFxuICAgICAgcnNTdXJyUGFpciA9ICdbXFxcXHVkODAwLVxcXFx1ZGJmZl1bXFxcXHVkYzAwLVxcXFx1ZGZmZl0nLFxuICAgICAgcnNVcHBlciA9ICdbJyArIHJzVXBwZXJSYW5nZSArICddJyxcbiAgICAgIHJzWldKID0gJ1xcXFx1MjAwZCc7XG5cbiAgLyoqIFVzZWQgdG8gY29tcG9zZSB1bmljb2RlIHJlZ2V4ZXMuICovXG4gIHZhciByc01pc2NMb3dlciA9ICcoPzonICsgcnNMb3dlciArICd8JyArIHJzTWlzYyArICcpJyxcbiAgICAgIHJzTWlzY1VwcGVyID0gJyg/OicgKyByc1VwcGVyICsgJ3wnICsgcnNNaXNjICsgJyknLFxuICAgICAgcnNPcHRDb250ckxvd2VyID0gJyg/OicgKyByc0Fwb3MgKyAnKD86ZHxsbHxtfHJlfHN8dHx2ZSkpPycsXG4gICAgICByc09wdENvbnRyVXBwZXIgPSAnKD86JyArIHJzQXBvcyArICcoPzpEfExMfE18UkV8U3xUfFZFKSk/JyxcbiAgICAgIHJlT3B0TW9kID0gcnNNb2RpZmllciArICc/JyxcbiAgICAgIHJzT3B0VmFyID0gJ1snICsgcnNWYXJSYW5nZSArICddPycsXG4gICAgICByc09wdEpvaW4gPSAnKD86JyArIHJzWldKICsgJyg/OicgKyBbcnNOb25Bc3RyYWwsIHJzUmVnaW9uYWwsIHJzU3VyclBhaXJdLmpvaW4oJ3wnKSArICcpJyArIHJzT3B0VmFyICsgcmVPcHRNb2QgKyAnKSonLFxuICAgICAgcnNPcmRMb3dlciA9ICdcXFxcZCooPzoxc3R8Mm5kfDNyZHwoPyFbMTIzXSlcXFxcZHRoKSg/PVxcXFxifFtBLVpfXSknLFxuICAgICAgcnNPcmRVcHBlciA9ICdcXFxcZCooPzoxU1R8Mk5EfDNSRHwoPyFbMTIzXSlcXFxcZFRIKSg/PVxcXFxifFthLXpfXSknLFxuICAgICAgcnNTZXEgPSByc09wdFZhciArIHJlT3B0TW9kICsgcnNPcHRKb2luLFxuICAgICAgcnNFbW9qaSA9ICcoPzonICsgW3JzRGluZ2JhdCwgcnNSZWdpb25hbCwgcnNTdXJyUGFpcl0uam9pbignfCcpICsgJyknICsgcnNTZXEsXG4gICAgICByc1N5bWJvbCA9ICcoPzonICsgW3JzTm9uQXN0cmFsICsgcnNDb21ibyArICc/JywgcnNDb21ibywgcnNSZWdpb25hbCwgcnNTdXJyUGFpciwgcnNBc3RyYWxdLmpvaW4oJ3wnKSArICcpJztcblxuICAvKiogVXNlZCB0byBtYXRjaCBhcG9zdHJvcGhlcy4gKi9cbiAgdmFyIHJlQXBvcyA9IFJlZ0V4cChyc0Fwb3MsICdnJyk7XG5cbiAgLyoqXG4gICAqIFVzZWQgdG8gbWF0Y2ggW2NvbWJpbmluZyBkaWFjcml0aWNhbCBtYXJrc10oaHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvQ29tYmluaW5nX0RpYWNyaXRpY2FsX01hcmtzKSBhbmRcbiAgICogW2NvbWJpbmluZyBkaWFjcml0aWNhbCBtYXJrcyBmb3Igc3ltYm9sc10oaHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvQ29tYmluaW5nX0RpYWNyaXRpY2FsX01hcmtzX2Zvcl9TeW1ib2xzKS5cbiAgICovXG4gIHZhciByZUNvbWJvTWFyayA9IFJlZ0V4cChyc0NvbWJvLCAnZycpO1xuXG4gIC8qKiBVc2VkIHRvIG1hdGNoIFtzdHJpbmcgc3ltYm9sc10oaHR0cHM6Ly9tYXRoaWFzYnluZW5zLmJlL25vdGVzL2phdmFzY3JpcHQtdW5pY29kZSkuICovXG4gIHZhciByZVVuaWNvZGUgPSBSZWdFeHAocnNGaXR6ICsgJyg/PScgKyByc0ZpdHogKyAnKXwnICsgcnNTeW1ib2wgKyByc1NlcSwgJ2cnKTtcblxuICAvKiogVXNlZCB0byBtYXRjaCBjb21wbGV4IG9yIGNvbXBvdW5kIHdvcmRzLiAqL1xuICB2YXIgcmVVbmljb2RlV29yZCA9IFJlZ0V4cChbXG4gICAgcnNVcHBlciArICc/JyArIHJzTG93ZXIgKyAnKycgKyByc09wdENvbnRyTG93ZXIgKyAnKD89JyArIFtyc0JyZWFrLCByc1VwcGVyLCAnJCddLmpvaW4oJ3wnKSArICcpJyxcbiAgICByc01pc2NVcHBlciArICcrJyArIHJzT3B0Q29udHJVcHBlciArICcoPz0nICsgW3JzQnJlYWssIHJzVXBwZXIgKyByc01pc2NMb3dlciwgJyQnXS5qb2luKCd8JykgKyAnKScsXG4gICAgcnNVcHBlciArICc/JyArIHJzTWlzY0xvd2VyICsgJysnICsgcnNPcHRDb250ckxvd2VyLFxuICAgIHJzVXBwZXIgKyAnKycgKyByc09wdENvbnRyVXBwZXIsXG4gICAgcnNPcmRVcHBlcixcbiAgICByc09yZExvd2VyLFxuICAgIHJzRGlnaXRzLFxuICAgIHJzRW1vamlcbiAgXS5qb2luKCd8JyksICdnJyk7XG5cbiAgLyoqIFVzZWQgdG8gZGV0ZWN0IHN0cmluZ3Mgd2l0aCBbemVyby13aWR0aCBqb2luZXJzIG9yIGNvZGUgcG9pbnRzIGZyb20gdGhlIGFzdHJhbCBwbGFuZXNdKGh0dHA6Ly9lZXYuZWUvYmxvZy8yMDE1LzA5LzEyL2RhcmstY29ybmVycy1vZi11bmljb2RlLykuICovXG4gIHZhciByZUhhc1VuaWNvZGUgPSBSZWdFeHAoJ1snICsgcnNaV0ogKyByc0FzdHJhbFJhbmdlICArIHJzQ29tYm9SYW5nZSArIHJzVmFyUmFuZ2UgKyAnXScpO1xuXG4gIC8qKiBVc2VkIHRvIGRldGVjdCBzdHJpbmdzIHRoYXQgbmVlZCBhIG1vcmUgcm9idXN0IHJlZ2V4cCB0byBtYXRjaCB3b3Jkcy4gKi9cbiAgdmFyIHJlSGFzVW5pY29kZVdvcmQgPSAvW2Etel1bQS1aXXxbQS1aXXsyfVthLXpdfFswLTldW2EtekEtWl18W2EtekEtWl1bMC05XXxbXmEtekEtWjAtOSBdLztcblxuICAvKiogVXNlZCB0byBhc3NpZ24gZGVmYXVsdCBgY29udGV4dGAgb2JqZWN0IHByb3BlcnRpZXMuICovXG4gIHZhciBjb250ZXh0UHJvcHMgPSBbXG4gICAgJ0FycmF5JywgJ0J1ZmZlcicsICdEYXRhVmlldycsICdEYXRlJywgJ0Vycm9yJywgJ0Zsb2F0MzJBcnJheScsICdGbG9hdDY0QXJyYXknLFxuICAgICdGdW5jdGlvbicsICdJbnQ4QXJyYXknLCAnSW50MTZBcnJheScsICdJbnQzMkFycmF5JywgJ01hcCcsICdNYXRoJywgJ09iamVjdCcsXG4gICAgJ1Byb21pc2UnLCAnUmVnRXhwJywgJ1NldCcsICdTdHJpbmcnLCAnU3ltYm9sJywgJ1R5cGVFcnJvcicsICdVaW50OEFycmF5JyxcbiAgICAnVWludDhDbGFtcGVkQXJyYXknLCAnVWludDE2QXJyYXknLCAnVWludDMyQXJyYXknLCAnV2Vha01hcCcsXG4gICAgJ18nLCAnY2xlYXJUaW1lb3V0JywgJ2lzRmluaXRlJywgJ3BhcnNlSW50JywgJ3NldFRpbWVvdXQnXG4gIF07XG5cbiAgLyoqIFVzZWQgdG8gbWFrZSB0ZW1wbGF0ZSBzb3VyY2VVUkxzIGVhc2llciB0byBpZGVudGlmeS4gKi9cbiAgdmFyIHRlbXBsYXRlQ291bnRlciA9IC0xO1xuXG4gIC8qKiBVc2VkIHRvIGlkZW50aWZ5IGB0b1N0cmluZ1RhZ2AgdmFsdWVzIG9mIHR5cGVkIGFycmF5cy4gKi9cbiAgdmFyIHR5cGVkQXJyYXlUYWdzID0ge307XG4gIHR5cGVkQXJyYXlUYWdzW2Zsb2F0MzJUYWddID0gdHlwZWRBcnJheVRhZ3NbZmxvYXQ2NFRhZ10gPVxuICB0eXBlZEFycmF5VGFnc1tpbnQ4VGFnXSA9IHR5cGVkQXJyYXlUYWdzW2ludDE2VGFnXSA9XG4gIHR5cGVkQXJyYXlUYWdzW2ludDMyVGFnXSA9IHR5cGVkQXJyYXlUYWdzW3VpbnQ4VGFnXSA9XG4gIHR5cGVkQXJyYXlUYWdzW3VpbnQ4Q2xhbXBlZFRhZ10gPSB0eXBlZEFycmF5VGFnc1t1aW50MTZUYWddID1cbiAgdHlwZWRBcnJheVRhZ3NbdWludDMyVGFnXSA9IHRydWU7XG4gIHR5cGVkQXJyYXlUYWdzW2FyZ3NUYWddID0gdHlwZWRBcnJheVRhZ3NbYXJyYXlUYWddID1cbiAgdHlwZWRBcnJheVRhZ3NbYXJyYXlCdWZmZXJUYWddID0gdHlwZWRBcnJheVRhZ3NbYm9vbFRhZ10gPVxuICB0eXBlZEFycmF5VGFnc1tkYXRhVmlld1RhZ10gPSB0eXBlZEFycmF5VGFnc1tkYXRlVGFnXSA9XG4gIHR5cGVkQXJyYXlUYWdzW2Vycm9yVGFnXSA9IHR5cGVkQXJyYXlUYWdzW2Z1bmNUYWddID1cbiAgdHlwZWRBcnJheVRhZ3NbbWFwVGFnXSA9IHR5cGVkQXJyYXlUYWdzW251bWJlclRhZ10gPVxuICB0eXBlZEFycmF5VGFnc1tvYmplY3RUYWddID0gdHlwZWRBcnJheVRhZ3NbcmVnZXhwVGFnXSA9XG4gIHR5cGVkQXJyYXlUYWdzW3NldFRhZ10gPSB0eXBlZEFycmF5VGFnc1tzdHJpbmdUYWddID1cbiAgdHlwZWRBcnJheVRhZ3Nbd2Vha01hcFRhZ10gPSBmYWxzZTtcblxuICAvKiogVXNlZCB0byBpZGVudGlmeSBgdG9TdHJpbmdUYWdgIHZhbHVlcyBzdXBwb3J0ZWQgYnkgYF8uY2xvbmVgLiAqL1xuICB2YXIgY2xvbmVhYmxlVGFncyA9IHt9O1xuICBjbG9uZWFibGVUYWdzW2FyZ3NUYWddID0gY2xvbmVhYmxlVGFnc1thcnJheVRhZ10gPVxuICBjbG9uZWFibGVUYWdzW2FycmF5QnVmZmVyVGFnXSA9IGNsb25lYWJsZVRhZ3NbZGF0YVZpZXdUYWddID1cbiAgY2xvbmVhYmxlVGFnc1tib29sVGFnXSA9IGNsb25lYWJsZVRhZ3NbZGF0ZVRhZ10gPVxuICBjbG9uZWFibGVUYWdzW2Zsb2F0MzJUYWddID0gY2xvbmVhYmxlVGFnc1tmbG9hdDY0VGFnXSA9XG4gIGNsb25lYWJsZVRhZ3NbaW50OFRhZ10gPSBjbG9uZWFibGVUYWdzW2ludDE2VGFnXSA9XG4gIGNsb25lYWJsZVRhZ3NbaW50MzJUYWddID0gY2xvbmVhYmxlVGFnc1ttYXBUYWddID1cbiAgY2xvbmVhYmxlVGFnc1tudW1iZXJUYWddID0gY2xvbmVhYmxlVGFnc1tvYmplY3RUYWddID1cbiAgY2xvbmVhYmxlVGFnc1tyZWdleHBUYWddID0gY2xvbmVhYmxlVGFnc1tzZXRUYWddID1cbiAgY2xvbmVhYmxlVGFnc1tzdHJpbmdUYWddID0gY2xvbmVhYmxlVGFnc1tzeW1ib2xUYWddID1cbiAgY2xvbmVhYmxlVGFnc1t1aW50OFRhZ10gPSBjbG9uZWFibGVUYWdzW3VpbnQ4Q2xhbXBlZFRhZ10gPVxuICBjbG9uZWFibGVUYWdzW3VpbnQxNlRhZ10gPSBjbG9uZWFibGVUYWdzW3VpbnQzMlRhZ10gPSB0cnVlO1xuICBjbG9uZWFibGVUYWdzW2Vycm9yVGFnXSA9IGNsb25lYWJsZVRhZ3NbZnVuY1RhZ10gPVxuICBjbG9uZWFibGVUYWdzW3dlYWtNYXBUYWddID0gZmFsc2U7XG5cbiAgLyoqIFVzZWQgdG8gbWFwIExhdGluIFVuaWNvZGUgbGV0dGVycyB0byBiYXNpYyBMYXRpbiBsZXR0ZXJzLiAqL1xuICB2YXIgZGVidXJyZWRMZXR0ZXJzID0ge1xuICAgIC8vIExhdGluLTEgU3VwcGxlbWVudCBibG9jay5cbiAgICAnXFx4YzAnOiAnQScsICAnXFx4YzEnOiAnQScsICdcXHhjMic6ICdBJywgJ1xceGMzJzogJ0EnLCAnXFx4YzQnOiAnQScsICdcXHhjNSc6ICdBJyxcbiAgICAnXFx4ZTAnOiAnYScsICAnXFx4ZTEnOiAnYScsICdcXHhlMic6ICdhJywgJ1xceGUzJzogJ2EnLCAnXFx4ZTQnOiAnYScsICdcXHhlNSc6ICdhJyxcbiAgICAnXFx4YzcnOiAnQycsICAnXFx4ZTcnOiAnYycsXG4gICAgJ1xceGQwJzogJ0QnLCAgJ1xceGYwJzogJ2QnLFxuICAgICdcXHhjOCc6ICdFJywgICdcXHhjOSc6ICdFJywgJ1xceGNhJzogJ0UnLCAnXFx4Y2InOiAnRScsXG4gICAgJ1xceGU4JzogJ2UnLCAgJ1xceGU5JzogJ2UnLCAnXFx4ZWEnOiAnZScsICdcXHhlYic6ICdlJyxcbiAgICAnXFx4Y2MnOiAnSScsICAnXFx4Y2QnOiAnSScsICdcXHhjZSc6ICdJJywgJ1xceGNmJzogJ0knLFxuICAgICdcXHhlYyc6ICdpJywgICdcXHhlZCc6ICdpJywgJ1xceGVlJzogJ2knLCAnXFx4ZWYnOiAnaScsXG4gICAgJ1xceGQxJzogJ04nLCAgJ1xceGYxJzogJ24nLFxuICAgICdcXHhkMic6ICdPJywgICdcXHhkMyc6ICdPJywgJ1xceGQ0JzogJ08nLCAnXFx4ZDUnOiAnTycsICdcXHhkNic6ICdPJywgJ1xceGQ4JzogJ08nLFxuICAgICdcXHhmMic6ICdvJywgICdcXHhmMyc6ICdvJywgJ1xceGY0JzogJ28nLCAnXFx4ZjUnOiAnbycsICdcXHhmNic6ICdvJywgJ1xceGY4JzogJ28nLFxuICAgICdcXHhkOSc6ICdVJywgICdcXHhkYSc6ICdVJywgJ1xceGRiJzogJ1UnLCAnXFx4ZGMnOiAnVScsXG4gICAgJ1xceGY5JzogJ3UnLCAgJ1xceGZhJzogJ3UnLCAnXFx4ZmInOiAndScsICdcXHhmYyc6ICd1JyxcbiAgICAnXFx4ZGQnOiAnWScsICAnXFx4ZmQnOiAneScsICdcXHhmZic6ICd5JyxcbiAgICAnXFx4YzYnOiAnQWUnLCAnXFx4ZTYnOiAnYWUnLFxuICAgICdcXHhkZSc6ICdUaCcsICdcXHhmZSc6ICd0aCcsXG4gICAgJ1xceGRmJzogJ3NzJyxcbiAgICAvLyBMYXRpbiBFeHRlbmRlZC1BIGJsb2NrLlxuICAgICdcXHUwMTAwJzogJ0EnLCAgJ1xcdTAxMDInOiAnQScsICdcXHUwMTA0JzogJ0EnLFxuICAgICdcXHUwMTAxJzogJ2EnLCAgJ1xcdTAxMDMnOiAnYScsICdcXHUwMTA1JzogJ2EnLFxuICAgICdcXHUwMTA2JzogJ0MnLCAgJ1xcdTAxMDgnOiAnQycsICdcXHUwMTBhJzogJ0MnLCAnXFx1MDEwYyc6ICdDJyxcbiAgICAnXFx1MDEwNyc6ICdjJywgICdcXHUwMTA5JzogJ2MnLCAnXFx1MDEwYic6ICdjJywgJ1xcdTAxMGQnOiAnYycsXG4gICAgJ1xcdTAxMGUnOiAnRCcsICAnXFx1MDExMCc6ICdEJywgJ1xcdTAxMGYnOiAnZCcsICdcXHUwMTExJzogJ2QnLFxuICAgICdcXHUwMTEyJzogJ0UnLCAgJ1xcdTAxMTQnOiAnRScsICdcXHUwMTE2JzogJ0UnLCAnXFx1MDExOCc6ICdFJywgJ1xcdTAxMWEnOiAnRScsXG4gICAgJ1xcdTAxMTMnOiAnZScsICAnXFx1MDExNSc6ICdlJywgJ1xcdTAxMTcnOiAnZScsICdcXHUwMTE5JzogJ2UnLCAnXFx1MDExYic6ICdlJyxcbiAgICAnXFx1MDExYyc6ICdHJywgICdcXHUwMTFlJzogJ0cnLCAnXFx1MDEyMCc6ICdHJywgJ1xcdTAxMjInOiAnRycsXG4gICAgJ1xcdTAxMWQnOiAnZycsICAnXFx1MDExZic6ICdnJywgJ1xcdTAxMjEnOiAnZycsICdcXHUwMTIzJzogJ2cnLFxuICAgICdcXHUwMTI0JzogJ0gnLCAgJ1xcdTAxMjYnOiAnSCcsICdcXHUwMTI1JzogJ2gnLCAnXFx1MDEyNyc6ICdoJyxcbiAgICAnXFx1MDEyOCc6ICdJJywgICdcXHUwMTJhJzogJ0knLCAnXFx1MDEyYyc6ICdJJywgJ1xcdTAxMmUnOiAnSScsICdcXHUwMTMwJzogJ0knLFxuICAgICdcXHUwMTI5JzogJ2knLCAgJ1xcdTAxMmInOiAnaScsICdcXHUwMTJkJzogJ2knLCAnXFx1MDEyZic6ICdpJywgJ1xcdTAxMzEnOiAnaScsXG4gICAgJ1xcdTAxMzQnOiAnSicsICAnXFx1MDEzNSc6ICdqJyxcbiAgICAnXFx1MDEzNic6ICdLJywgICdcXHUwMTM3JzogJ2snLCAnXFx1MDEzOCc6ICdrJyxcbiAgICAnXFx1MDEzOSc6ICdMJywgICdcXHUwMTNiJzogJ0wnLCAnXFx1MDEzZCc6ICdMJywgJ1xcdTAxM2YnOiAnTCcsICdcXHUwMTQxJzogJ0wnLFxuICAgICdcXHUwMTNhJzogJ2wnLCAgJ1xcdTAxM2MnOiAnbCcsICdcXHUwMTNlJzogJ2wnLCAnXFx1MDE0MCc6ICdsJywgJ1xcdTAxNDInOiAnbCcsXG4gICAgJ1xcdTAxNDMnOiAnTicsICAnXFx1MDE0NSc6ICdOJywgJ1xcdTAxNDcnOiAnTicsICdcXHUwMTRhJzogJ04nLFxuICAgICdcXHUwMTQ0JzogJ24nLCAgJ1xcdTAxNDYnOiAnbicsICdcXHUwMTQ4JzogJ24nLCAnXFx1MDE0Yic6ICduJyxcbiAgICAnXFx1MDE0Yyc6ICdPJywgICdcXHUwMTRlJzogJ08nLCAnXFx1MDE1MCc6ICdPJyxcbiAgICAnXFx1MDE0ZCc6ICdvJywgICdcXHUwMTRmJzogJ28nLCAnXFx1MDE1MSc6ICdvJyxcbiAgICAnXFx1MDE1NCc6ICdSJywgICdcXHUwMTU2JzogJ1InLCAnXFx1MDE1OCc6ICdSJyxcbiAgICAnXFx1MDE1NSc6ICdyJywgICdcXHUwMTU3JzogJ3InLCAnXFx1MDE1OSc6ICdyJyxcbiAgICAnXFx1MDE1YSc6ICdTJywgICdcXHUwMTVjJzogJ1MnLCAnXFx1MDE1ZSc6ICdTJywgJ1xcdTAxNjAnOiAnUycsXG4gICAgJ1xcdTAxNWInOiAncycsICAnXFx1MDE1ZCc6ICdzJywgJ1xcdTAxNWYnOiAncycsICdcXHUwMTYxJzogJ3MnLFxuICAgICdcXHUwMTYyJzogJ1QnLCAgJ1xcdTAxNjQnOiAnVCcsICdcXHUwMTY2JzogJ1QnLFxuICAgICdcXHUwMTYzJzogJ3QnLCAgJ1xcdTAxNjUnOiAndCcsICdcXHUwMTY3JzogJ3QnLFxuICAgICdcXHUwMTY4JzogJ1UnLCAgJ1xcdTAxNmEnOiAnVScsICdcXHUwMTZjJzogJ1UnLCAnXFx1MDE2ZSc6ICdVJywgJ1xcdTAxNzAnOiAnVScsICdcXHUwMTcyJzogJ1UnLFxuICAgICdcXHUwMTY5JzogJ3UnLCAgJ1xcdTAxNmInOiAndScsICdcXHUwMTZkJzogJ3UnLCAnXFx1MDE2Zic6ICd1JywgJ1xcdTAxNzEnOiAndScsICdcXHUwMTczJzogJ3UnLFxuICAgICdcXHUwMTc0JzogJ1cnLCAgJ1xcdTAxNzUnOiAndycsXG4gICAgJ1xcdTAxNzYnOiAnWScsICAnXFx1MDE3Nyc6ICd5JywgJ1xcdTAxNzgnOiAnWScsXG4gICAgJ1xcdTAxNzknOiAnWicsICAnXFx1MDE3Yic6ICdaJywgJ1xcdTAxN2QnOiAnWicsXG4gICAgJ1xcdTAxN2EnOiAneicsICAnXFx1MDE3Yyc6ICd6JywgJ1xcdTAxN2UnOiAneicsXG4gICAgJ1xcdTAxMzInOiAnSUonLCAnXFx1MDEzMyc6ICdpaicsXG4gICAgJ1xcdTAxNTInOiAnT2UnLCAnXFx1MDE1Myc6ICdvZScsXG4gICAgJ1xcdTAxNDknOiBcIiduXCIsICdcXHUwMTdmJzogJ3MnXG4gIH07XG5cbiAgLyoqIFVzZWQgdG8gbWFwIGNoYXJhY3RlcnMgdG8gSFRNTCBlbnRpdGllcy4gKi9cbiAgdmFyIGh0bWxFc2NhcGVzID0ge1xuICAgICcmJzogJyZhbXA7JyxcbiAgICAnPCc6ICcmbHQ7JyxcbiAgICAnPic6ICcmZ3Q7JyxcbiAgICAnXCInOiAnJnF1b3Q7JyxcbiAgICBcIidcIjogJyYjMzk7J1xuICB9O1xuXG4gIC8qKiBVc2VkIHRvIG1hcCBIVE1MIGVudGl0aWVzIHRvIGNoYXJhY3RlcnMuICovXG4gIHZhciBodG1sVW5lc2NhcGVzID0ge1xuICAgICcmYW1wOyc6ICcmJyxcbiAgICAnJmx0Oyc6ICc8JyxcbiAgICAnJmd0Oyc6ICc+JyxcbiAgICAnJnF1b3Q7JzogJ1wiJyxcbiAgICAnJiMzOTsnOiBcIidcIlxuICB9O1xuXG4gIC8qKiBVc2VkIHRvIGVzY2FwZSBjaGFyYWN0ZXJzIGZvciBpbmNsdXNpb24gaW4gY29tcGlsZWQgc3RyaW5nIGxpdGVyYWxzLiAqL1xuICB2YXIgc3RyaW5nRXNjYXBlcyA9IHtcbiAgICAnXFxcXCc6ICdcXFxcJyxcbiAgICBcIidcIjogXCInXCIsXG4gICAgJ1xcbic6ICduJyxcbiAgICAnXFxyJzogJ3InLFxuICAgICdcXHUyMDI4JzogJ3UyMDI4JyxcbiAgICAnXFx1MjAyOSc6ICd1MjAyOSdcbiAgfTtcblxuICAvKiogQnVpbHQtaW4gbWV0aG9kIHJlZmVyZW5jZXMgd2l0aG91dCBhIGRlcGVuZGVuY3kgb24gYHJvb3RgLiAqL1xuICB2YXIgZnJlZVBhcnNlRmxvYXQgPSBwYXJzZUZsb2F0LFxuICAgICAgZnJlZVBhcnNlSW50ID0gcGFyc2VJbnQ7XG5cbiAgLyoqIERldGVjdCBmcmVlIHZhcmlhYmxlIGBnbG9iYWxgIGZyb20gTm9kZS5qcy4gKi9cbiAgdmFyIGZyZWVHbG9iYWwgPSB0eXBlb2YgZ2xvYmFsID09ICdvYmplY3QnICYmIGdsb2JhbCAmJiBnbG9iYWwuT2JqZWN0ID09PSBPYmplY3QgJiYgZ2xvYmFsO1xuXG4gIC8qKiBEZXRlY3QgZnJlZSB2YXJpYWJsZSBgc2VsZmAuICovXG4gIHZhciBmcmVlU2VsZiA9IHR5cGVvZiBzZWxmID09ICdvYmplY3QnICYmIHNlbGYgJiYgc2VsZi5PYmplY3QgPT09IE9iamVjdCAmJiBzZWxmO1xuXG4gIC8qKiBVc2VkIGFzIGEgcmVmZXJlbmNlIHRvIHRoZSBnbG9iYWwgb2JqZWN0LiAqL1xuICB2YXIgcm9vdCA9IGZyZWVHbG9iYWwgfHwgZnJlZVNlbGYgfHwgRnVuY3Rpb24oJ3JldHVybiB0aGlzJykoKTtcblxuICAvKiogRGV0ZWN0IGZyZWUgdmFyaWFibGUgYGV4cG9ydHNgLiAqL1xuICB2YXIgZnJlZUV4cG9ydHMgPSB0eXBlb2YgZXhwb3J0cyA9PSAnb2JqZWN0JyAmJiBleHBvcnRzICYmICFleHBvcnRzLm5vZGVUeXBlICYmIGV4cG9ydHM7XG5cbiAgLyoqIERldGVjdCBmcmVlIHZhcmlhYmxlIGBtb2R1bGVgLiAqL1xuICB2YXIgZnJlZU1vZHVsZSA9IGZyZWVFeHBvcnRzICYmIHR5cGVvZiBtb2R1bGUgPT0gJ29iamVjdCcgJiYgbW9kdWxlICYmICFtb2R1bGUubm9kZVR5cGUgJiYgbW9kdWxlO1xuXG4gIC8qKiBEZXRlY3QgdGhlIHBvcHVsYXIgQ29tbW9uSlMgZXh0ZW5zaW9uIGBtb2R1bGUuZXhwb3J0c2AuICovXG4gIHZhciBtb2R1bGVFeHBvcnRzID0gZnJlZU1vZHVsZSAmJiBmcmVlTW9kdWxlLmV4cG9ydHMgPT09IGZyZWVFeHBvcnRzO1xuXG4gIC8qKiBEZXRlY3QgZnJlZSB2YXJpYWJsZSBgcHJvY2Vzc2AgZnJvbSBOb2RlLmpzLiAqL1xuICB2YXIgZnJlZVByb2Nlc3MgPSBtb2R1bGVFeHBvcnRzICYmIGZyZWVHbG9iYWwucHJvY2VzcztcblxuICAvKiogVXNlZCB0byBhY2Nlc3MgZmFzdGVyIE5vZGUuanMgaGVscGVycy4gKi9cbiAgdmFyIG5vZGVVdGlsID0gKGZ1bmN0aW9uKCkge1xuICAgIHRyeSB7XG4gICAgICAvLyBVc2UgYHV0aWwudHlwZXNgIGZvciBOb2RlLmpzIDEwKy5cbiAgICAgIHZhciB0eXBlcyA9IGZyZWVNb2R1bGUgJiYgZnJlZU1vZHVsZS5yZXF1aXJlICYmIGZyZWVNb2R1bGUucmVxdWlyZSgndXRpbCcpLnR5cGVzO1xuXG4gICAgICBpZiAodHlwZXMpIHtcbiAgICAgICAgcmV0dXJuIHR5cGVzO1xuICAgICAgfVxuXG4gICAgICAvLyBMZWdhY3kgYHByb2Nlc3MuYmluZGluZygndXRpbCcpYCBmb3IgTm9kZS5qcyA8IDEwLlxuICAgICAgcmV0dXJuIGZyZWVQcm9jZXNzICYmIGZyZWVQcm9jZXNzLmJpbmRpbmcgJiYgZnJlZVByb2Nlc3MuYmluZGluZygndXRpbCcpO1xuICAgIH0gY2F0Y2ggKGUpIHt9XG4gIH0oKSk7XG5cbiAgLyogTm9kZS5qcyBoZWxwZXIgcmVmZXJlbmNlcy4gKi9cbiAgdmFyIG5vZGVJc0FycmF5QnVmZmVyID0gbm9kZVV0aWwgJiYgbm9kZVV0aWwuaXNBcnJheUJ1ZmZlcixcbiAgICAgIG5vZGVJc0RhdGUgPSBub2RlVXRpbCAmJiBub2RlVXRpbC5pc0RhdGUsXG4gICAgICBub2RlSXNNYXAgPSBub2RlVXRpbCAmJiBub2RlVXRpbC5pc01hcCxcbiAgICAgIG5vZGVJc1JlZ0V4cCA9IG5vZGVVdGlsICYmIG5vZGVVdGlsLmlzUmVnRXhwLFxuICAgICAgbm9kZUlzU2V0ID0gbm9kZVV0aWwgJiYgbm9kZVV0aWwuaXNTZXQsXG4gICAgICBub2RlSXNUeXBlZEFycmF5ID0gbm9kZVV0aWwgJiYgbm9kZVV0aWwuaXNUeXBlZEFycmF5O1xuXG4gIC8qLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qL1xuXG4gIC8qKlxuICAgKiBBIGZhc3RlciBhbHRlcm5hdGl2ZSB0byBgRnVuY3Rpb24jYXBwbHlgLCB0aGlzIGZ1bmN0aW9uIGludm9rZXMgYGZ1bmNgXG4gICAqIHdpdGggdGhlIGB0aGlzYCBiaW5kaW5nIG9mIGB0aGlzQXJnYCBhbmQgdGhlIGFyZ3VtZW50cyBvZiBgYXJnc2AuXG4gICAqXG4gICAqIEBwcml2YXRlXG4gICAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIGludm9rZS5cbiAgICogQHBhcmFtIHsqfSB0aGlzQXJnIFRoZSBgdGhpc2AgYmluZGluZyBvZiBgZnVuY2AuXG4gICAqIEBwYXJhbSB7QXJyYXl9IGFyZ3MgVGhlIGFyZ3VtZW50cyB0byBpbnZva2UgYGZ1bmNgIHdpdGguXG4gICAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSByZXN1bHQgb2YgYGZ1bmNgLlxuICAgKi9cbiAgZnVuY3Rpb24gYXBwbHkoZnVuYywgdGhpc0FyZywgYXJncykge1xuICAgIHN3aXRjaCAoYXJncy5sZW5ndGgpIHtcbiAgICAgIGNhc2UgMDogcmV0dXJuIGZ1bmMuY2FsbCh0aGlzQXJnKTtcbiAgICAgIGNhc2UgMTogcmV0dXJuIGZ1bmMuY2FsbCh0aGlzQXJnLCBhcmdzWzBdKTtcbiAgICAgIGNhc2UgMjogcmV0dXJuIGZ1bmMuY2FsbCh0aGlzQXJnLCBhcmdzWzBdLCBhcmdzWzFdKTtcbiAgICAgIGNhc2UgMzogcmV0dXJuIGZ1bmMuY2FsbCh0aGlzQXJnLCBhcmdzWzBdLCBhcmdzWzFdLCBhcmdzWzJdKTtcbiAgICB9XG4gICAgcmV0dXJuIGZ1bmMuYXBwbHkodGhpc0FyZywgYXJncyk7XG4gIH1cblxuICAvKipcbiAgICogQSBzcGVjaWFsaXplZCB2ZXJzaW9uIG9mIGBiYXNlQWdncmVnYXRvcmAgZm9yIGFycmF5cy5cbiAgICpcbiAgICogQHByaXZhdGVcbiAgICogQHBhcmFtIHtBcnJheX0gW2FycmF5XSBUaGUgYXJyYXkgdG8gaXRlcmF0ZSBvdmVyLlxuICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBzZXR0ZXIgVGhlIGZ1bmN0aW9uIHRvIHNldCBgYWNjdW11bGF0b3JgIHZhbHVlcy5cbiAgICogQHBhcmFtIHtGdW5jdGlvbn0gaXRlcmF0ZWUgVGhlIGl0ZXJhdGVlIHRvIHRyYW5zZm9ybSBrZXlzLlxuICAgKiBAcGFyYW0ge09iamVjdH0gYWNjdW11bGF0b3IgVGhlIGluaXRpYWwgYWdncmVnYXRlZCBvYmplY3QuXG4gICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyBgYWNjdW11bGF0b3JgLlxuICAgKi9cbiAgZnVuY3Rpb24gYXJyYXlBZ2dyZWdhdG9yKGFycmF5LCBzZXR0ZXIsIGl0ZXJhdGVlLCBhY2N1bXVsYXRvcikge1xuICAgIHZhciBpbmRleCA9IC0xLFxuICAgICAgICBsZW5ndGggPSBhcnJheSA9PSBudWxsID8gMCA6IGFycmF5Lmxlbmd0aDtcblxuICAgIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgICB2YXIgdmFsdWUgPSBhcnJheVtpbmRleF07XG4gICAgICBzZXR0ZXIoYWNjdW11bGF0b3IsIHZhbHVlLCBpdGVyYXRlZSh2YWx1ZSksIGFycmF5KTtcbiAgICB9XG4gICAgcmV0dXJuIGFjY3VtdWxhdG9yO1xuICB9XG5cbiAgLyoqXG4gICAqIEEgc3BlY2lhbGl6ZWQgdmVyc2lvbiBvZiBgXy5mb3JFYWNoYCBmb3IgYXJyYXlzIHdpdGhvdXQgc3VwcG9ydCBmb3JcbiAgICogaXRlcmF0ZWUgc2hvcnRoYW5kcy5cbiAgICpcbiAgICogQHByaXZhdGVcbiAgICogQHBhcmFtIHtBcnJheX0gW2FycmF5XSBUaGUgYXJyYXkgdG8gaXRlcmF0ZSBvdmVyLlxuICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBpdGVyYXRlZSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgYGFycmF5YC5cbiAgICovXG4gIGZ1bmN0aW9uIGFycmF5RWFjaChhcnJheSwgaXRlcmF0ZWUpIHtcbiAgICB2YXIgaW5kZXggPSAtMSxcbiAgICAgICAgbGVuZ3RoID0gYXJyYXkgPT0gbnVsbCA/IDAgOiBhcnJheS5sZW5ndGg7XG5cbiAgICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgICAgaWYgKGl0ZXJhdGVlKGFycmF5W2luZGV4XSwgaW5kZXgsIGFycmF5KSA9PT0gZmFsc2UpIHtcbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBhcnJheTtcbiAgfVxuXG4gIC8qKlxuICAgKiBBIHNwZWNpYWxpemVkIHZlcnNpb24gb2YgYF8uZm9yRWFjaFJpZ2h0YCBmb3IgYXJyYXlzIHdpdGhvdXQgc3VwcG9ydCBmb3JcbiAgICogaXRlcmF0ZWUgc2hvcnRoYW5kcy5cbiAgICpcbiAgICogQHByaXZhdGVcbiAgICogQHBhcmFtIHtBcnJheX0gW2FycmF5XSBUaGUgYXJyYXkgdG8gaXRlcmF0ZSBvdmVyLlxuICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBpdGVyYXRlZSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgYGFycmF5YC5cbiAgICovXG4gIGZ1bmN0aW9uIGFycmF5RWFjaFJpZ2h0KGFycmF5LCBpdGVyYXRlZSkge1xuICAgIHZhciBsZW5ndGggPSBhcnJheSA9PSBudWxsID8gMCA6IGFycmF5Lmxlbmd0aDtcblxuICAgIHdoaWxlIChsZW5ndGgtLSkge1xuICAgICAgaWYgKGl0ZXJhdGVlKGFycmF5W2xlbmd0aF0sIGxlbmd0aCwgYXJyYXkpID09PSBmYWxzZSkge1xuICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIGFycmF5O1xuICB9XG5cbiAgLyoqXG4gICAqIEEgc3BlY2lhbGl6ZWQgdmVyc2lvbiBvZiBgXy5ldmVyeWAgZm9yIGFycmF5cyB3aXRob3V0IHN1cHBvcnQgZm9yXG4gICAqIGl0ZXJhdGVlIHNob3J0aGFuZHMuXG4gICAqXG4gICAqIEBwcml2YXRlXG4gICAqIEBwYXJhbSB7QXJyYXl9IFthcnJheV0gVGhlIGFycmF5IHRvIGl0ZXJhdGUgb3Zlci5cbiAgICogQHBhcmFtIHtGdW5jdGlvbn0gcHJlZGljYXRlIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBhbGwgZWxlbWVudHMgcGFzcyB0aGUgcHJlZGljYXRlIGNoZWNrLFxuICAgKiAgZWxzZSBgZmFsc2VgLlxuICAgKi9cbiAgZnVuY3Rpb24gYXJyYXlFdmVyeShhcnJheSwgcHJlZGljYXRlKSB7XG4gICAgdmFyIGluZGV4ID0gLTEsXG4gICAgICAgIGxlbmd0aCA9IGFycmF5ID09IG51bGwgPyAwIDogYXJyYXkubGVuZ3RoO1xuXG4gICAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICAgIGlmICghcHJlZGljYXRlKGFycmF5W2luZGV4XSwgaW5kZXgsIGFycmF5KSkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiB0cnVlO1xuICB9XG5cbiAgLyoqXG4gICAqIEEgc3BlY2lhbGl6ZWQgdmVyc2lvbiBvZiBgXy5maWx0ZXJgIGZvciBhcnJheXMgd2l0aG91dCBzdXBwb3J0IGZvclxuICAgKiBpdGVyYXRlZSBzaG9ydGhhbmRzLlxuICAgKlxuICAgKiBAcHJpdmF0ZVxuICAgKiBAcGFyYW0ge0FycmF5fSBbYXJyYXldIFRoZSBhcnJheSB0byBpdGVyYXRlIG92ZXIuXG4gICAqIEBwYXJhbSB7RnVuY3Rpb259IHByZWRpY2F0ZSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIG5ldyBmaWx0ZXJlZCBhcnJheS5cbiAgICovXG4gIGZ1bmN0aW9uIGFycmF5RmlsdGVyKGFycmF5LCBwcmVkaWNhdGUpIHtcbiAgICB2YXIgaW5kZXggPSAtMSxcbiAgICAgICAgbGVuZ3RoID0gYXJyYXkgPT0gbnVsbCA/IDAgOiBhcnJheS5sZW5ndGgsXG4gICAgICAgIHJlc0luZGV4ID0gMCxcbiAgICAgICAgcmVzdWx0ID0gW107XG5cbiAgICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgICAgdmFyIHZhbHVlID0gYXJyYXlbaW5kZXhdO1xuICAgICAgaWYgKHByZWRpY2F0ZSh2YWx1ZSwgaW5kZXgsIGFycmF5KSkge1xuICAgICAgICByZXN1bHRbcmVzSW5kZXgrK10gPSB2YWx1ZTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfVxuXG4gIC8qKlxuICAgKiBBIHNwZWNpYWxpemVkIHZlcnNpb24gb2YgYF8uaW5jbHVkZXNgIGZvciBhcnJheXMgd2l0aG91dCBzdXBwb3J0IGZvclxuICAgKiBzcGVjaWZ5aW5nIGFuIGluZGV4IHRvIHNlYXJjaCBmcm9tLlxuICAgKlxuICAgKiBAcHJpdmF0ZVxuICAgKiBAcGFyYW0ge0FycmF5fSBbYXJyYXldIFRoZSBhcnJheSB0byBpbnNwZWN0LlxuICAgKiBAcGFyYW0geyp9IHRhcmdldCBUaGUgdmFsdWUgdG8gc2VhcmNoIGZvci5cbiAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB0YXJnZXRgIGlzIGZvdW5kLCBlbHNlIGBmYWxzZWAuXG4gICAqL1xuICBmdW5jdGlvbiBhcnJheUluY2x1ZGVzKGFycmF5LCB2YWx1ZSkge1xuICAgIHZhciBsZW5ndGggPSBhcnJheSA9PSBudWxsID8gMCA6IGFycmF5Lmxlbmd0aDtcbiAgICByZXR1cm4gISFsZW5ndGggJiYgYmFzZUluZGV4T2YoYXJyYXksIHZhbHVlLCAwKSA+IC0xO1xuICB9XG5cbiAgLyoqXG4gICAqIFRoaXMgZnVuY3Rpb24gaXMgbGlrZSBgYXJyYXlJbmNsdWRlc2AgZXhjZXB0IHRoYXQgaXQgYWNjZXB0cyBhIGNvbXBhcmF0b3IuXG4gICAqXG4gICAqIEBwcml2YXRlXG4gICAqIEBwYXJhbSB7QXJyYXl9IFthcnJheV0gVGhlIGFycmF5IHRvIGluc3BlY3QuXG4gICAqIEBwYXJhbSB7Kn0gdGFyZ2V0IFRoZSB2YWx1ZSB0byBzZWFyY2ggZm9yLlxuICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBjb21wYXJhdG9yIFRoZSBjb21wYXJhdG9yIGludm9rZWQgcGVyIGVsZW1lbnQuXG4gICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdGFyZ2V0YCBpcyBmb3VuZCwgZWxzZSBgZmFsc2VgLlxuICAgKi9cbiAgZnVuY3Rpb24gYXJyYXlJbmNsdWRlc1dpdGgoYXJyYXksIHZhbHVlLCBjb21wYXJhdG9yKSB7XG4gICAgdmFyIGluZGV4ID0gLTEsXG4gICAgICAgIGxlbmd0aCA9IGFycmF5ID09IG51bGwgPyAwIDogYXJyYXkubGVuZ3RoO1xuXG4gICAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICAgIGlmIChjb21wYXJhdG9yKHZhbHVlLCBhcnJheVtpbmRleF0pKSB7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICAvKipcbiAgICogQSBzcGVjaWFsaXplZCB2ZXJzaW9uIG9mIGBfLm1hcGAgZm9yIGFycmF5cyB3aXRob3V0IHN1cHBvcnQgZm9yIGl0ZXJhdGVlXG4gICAqIHNob3J0aGFuZHMuXG4gICAqXG4gICAqIEBwcml2YXRlXG4gICAqIEBwYXJhbSB7QXJyYXl9IFthcnJheV0gVGhlIGFycmF5IHRvIGl0ZXJhdGUgb3Zlci5cbiAgICogQHBhcmFtIHtGdW5jdGlvbn0gaXRlcmF0ZWUgVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBuZXcgbWFwcGVkIGFycmF5LlxuICAgKi9cbiAgZnVuY3Rpb24gYXJyYXlNYXAoYXJyYXksIGl0ZXJhdGVlKSB7XG4gICAgdmFyIGluZGV4ID0gLTEsXG4gICAgICAgIGxlbmd0aCA9IGFycmF5ID09IG51bGwgPyAwIDogYXJyYXkubGVuZ3RoLFxuICAgICAgICByZXN1bHQgPSBBcnJheShsZW5ndGgpO1xuXG4gICAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICAgIHJlc3VsdFtpbmRleF0gPSBpdGVyYXRlZShhcnJheVtpbmRleF0sIGluZGV4LCBhcnJheSk7XG4gICAgfVxuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cblxuICAvKipcbiAgICogQXBwZW5kcyB0aGUgZWxlbWVudHMgb2YgYHZhbHVlc2AgdG8gYGFycmF5YC5cbiAgICpcbiAgICogQHByaXZhdGVcbiAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIG1vZGlmeS5cbiAgICogQHBhcmFtIHtBcnJheX0gdmFsdWVzIFRoZSB2YWx1ZXMgdG8gYXBwZW5kLlxuICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgYGFycmF5YC5cbiAgICovXG4gIGZ1bmN0aW9uIGFycmF5UHVzaChhcnJheSwgdmFsdWVzKSB7XG4gICAgdmFyIGluZGV4ID0gLTEsXG4gICAgICAgIGxlbmd0aCA9IHZhbHVlcy5sZW5ndGgsXG4gICAgICAgIG9mZnNldCA9IGFycmF5Lmxlbmd0aDtcblxuICAgIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgICBhcnJheVtvZmZzZXQgKyBpbmRleF0gPSB2YWx1ZXNbaW5kZXhdO1xuICAgIH1cbiAgICByZXR1cm4gYXJyYXk7XG4gIH1cblxuICAvKipcbiAgICogQSBzcGVjaWFsaXplZCB2ZXJzaW9uIG9mIGBfLnJlZHVjZWAgZm9yIGFycmF5cyB3aXRob3V0IHN1cHBvcnQgZm9yXG4gICAqIGl0ZXJhdGVlIHNob3J0aGFuZHMuXG4gICAqXG4gICAqIEBwcml2YXRlXG4gICAqIEBwYXJhbSB7QXJyYXl9IFthcnJheV0gVGhlIGFycmF5IHRvIGl0ZXJhdGUgb3Zlci5cbiAgICogQHBhcmFtIHtGdW5jdGlvbn0gaXRlcmF0ZWUgVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAgICogQHBhcmFtIHsqfSBbYWNjdW11bGF0b3JdIFRoZSBpbml0aWFsIHZhbHVlLlxuICAgKiBAcGFyYW0ge2Jvb2xlYW59IFtpbml0QWNjdW1dIFNwZWNpZnkgdXNpbmcgdGhlIGZpcnN0IGVsZW1lbnQgb2YgYGFycmF5YCBhc1xuICAgKiAgdGhlIGluaXRpYWwgdmFsdWUuXG4gICAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSBhY2N1bXVsYXRlZCB2YWx1ZS5cbiAgICovXG4gIGZ1bmN0aW9uIGFycmF5UmVkdWNlKGFycmF5LCBpdGVyYXRlZSwgYWNjdW11bGF0b3IsIGluaXRBY2N1bSkge1xuICAgIHZhciBpbmRleCA9IC0xLFxuICAgICAgICBsZW5ndGggPSBhcnJheSA9PSBudWxsID8gMCA6IGFycmF5Lmxlbmd0aDtcblxuICAgIGlmIChpbml0QWNjdW0gJiYgbGVuZ3RoKSB7XG4gICAgICBhY2N1bXVsYXRvciA9IGFycmF5WysraW5kZXhdO1xuICAgIH1cbiAgICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgICAgYWNjdW11bGF0b3IgPSBpdGVyYXRlZShhY2N1bXVsYXRvciwgYXJyYXlbaW5kZXhdLCBpbmRleCwgYXJyYXkpO1xuICAgIH1cbiAgICByZXR1cm4gYWNjdW11bGF0b3I7XG4gIH1cblxuICAvKipcbiAgICogQSBzcGVjaWFsaXplZCB2ZXJzaW9uIG9mIGBfLnJlZHVjZVJpZ2h0YCBmb3IgYXJyYXlzIHdpdGhvdXQgc3VwcG9ydCBmb3JcbiAgICogaXRlcmF0ZWUgc2hvcnRoYW5kcy5cbiAgICpcbiAgICogQHByaXZhdGVcbiAgICogQHBhcmFtIHtBcnJheX0gW2FycmF5XSBUaGUgYXJyYXkgdG8gaXRlcmF0ZSBvdmVyLlxuICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBpdGVyYXRlZSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICAgKiBAcGFyYW0geyp9IFthY2N1bXVsYXRvcl0gVGhlIGluaXRpYWwgdmFsdWUuXG4gICAqIEBwYXJhbSB7Ym9vbGVhbn0gW2luaXRBY2N1bV0gU3BlY2lmeSB1c2luZyB0aGUgbGFzdCBlbGVtZW50IG9mIGBhcnJheWAgYXNcbiAgICogIHRoZSBpbml0aWFsIHZhbHVlLlxuICAgKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgYWNjdW11bGF0ZWQgdmFsdWUuXG4gICAqL1xuICBmdW5jdGlvbiBhcnJheVJlZHVjZVJpZ2h0KGFycmF5LCBpdGVyYXRlZSwgYWNjdW11bGF0b3IsIGluaXRBY2N1bSkge1xuICAgIHZhciBsZW5ndGggPSBhcnJheSA9PSBudWxsID8gMCA6IGFycmF5Lmxlbmd0aDtcbiAgICBpZiAoaW5pdEFjY3VtICYmIGxlbmd0aCkge1xuICAgICAgYWNjdW11bGF0b3IgPSBhcnJheVstLWxlbmd0aF07XG4gICAgfVxuICAgIHdoaWxlIChsZW5ndGgtLSkge1xuICAgICAgYWNjdW11bGF0b3IgPSBpdGVyYXRlZShhY2N1bXVsYXRvciwgYXJyYXlbbGVuZ3RoXSwgbGVuZ3RoLCBhcnJheSk7XG4gICAgfVxuICAgIHJldHVybiBhY2N1bXVsYXRvcjtcbiAgfVxuXG4gIC8qKlxuICAgKiBBIHNwZWNpYWxpemVkIHZlcnNpb24gb2YgYF8uc29tZWAgZm9yIGFycmF5cyB3aXRob3V0IHN1cHBvcnQgZm9yIGl0ZXJhdGVlXG4gICAqIHNob3J0aGFuZHMuXG4gICAqXG4gICAqIEBwcml2YXRlXG4gICAqIEBwYXJhbSB7QXJyYXl9IFthcnJheV0gVGhlIGFycmF5IHRvIGl0ZXJhdGUgb3Zlci5cbiAgICogQHBhcmFtIHtGdW5jdGlvbn0gcHJlZGljYXRlIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBhbnkgZWxlbWVudCBwYXNzZXMgdGhlIHByZWRpY2F0ZSBjaGVjayxcbiAgICogIGVsc2UgYGZhbHNlYC5cbiAgICovXG4gIGZ1bmN0aW9uIGFycmF5U29tZShhcnJheSwgcHJlZGljYXRlKSB7XG4gICAgdmFyIGluZGV4ID0gLTEsXG4gICAgICAgIGxlbmd0aCA9IGFycmF5ID09IG51bGwgPyAwIDogYXJyYXkubGVuZ3RoO1xuXG4gICAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICAgIGlmIChwcmVkaWNhdGUoYXJyYXlbaW5kZXhdLCBpbmRleCwgYXJyYXkpKSB7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICAvKipcbiAgICogR2V0cyB0aGUgc2l6ZSBvZiBhbiBBU0NJSSBgc3RyaW5nYC5cbiAgICpcbiAgICogQHByaXZhdGVcbiAgICogQHBhcmFtIHtzdHJpbmd9IHN0cmluZyBUaGUgc3RyaW5nIGluc3BlY3QuXG4gICAqIEByZXR1cm5zIHtudW1iZXJ9IFJldHVybnMgdGhlIHN0cmluZyBzaXplLlxuICAgKi9cbiAgdmFyIGFzY2lpU2l6ZSA9IGJhc2VQcm9wZXJ0eSgnbGVuZ3RoJyk7XG5cbiAgLyoqXG4gICAqIENvbnZlcnRzIGFuIEFTQ0lJIGBzdHJpbmdgIHRvIGFuIGFycmF5LlxuICAgKlxuICAgKiBAcHJpdmF0ZVxuICAgKiBAcGFyYW0ge3N0cmluZ30gc3RyaW5nIFRoZSBzdHJpbmcgdG8gY29udmVydC5cbiAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBjb252ZXJ0ZWQgYXJyYXkuXG4gICAqL1xuICBmdW5jdGlvbiBhc2NpaVRvQXJyYXkoc3RyaW5nKSB7XG4gICAgcmV0dXJuIHN0cmluZy5zcGxpdCgnJyk7XG4gIH1cblxuICAvKipcbiAgICogU3BsaXRzIGFuIEFTQ0lJIGBzdHJpbmdgIGludG8gYW4gYXJyYXkgb2YgaXRzIHdvcmRzLlxuICAgKlxuICAgKiBAcHJpdmF0ZVxuICAgKiBAcGFyYW0ge3N0cmluZ30gVGhlIHN0cmluZyB0byBpbnNwZWN0LlxuICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIHdvcmRzIG9mIGBzdHJpbmdgLlxuICAgKi9cbiAgZnVuY3Rpb24gYXNjaWlXb3JkcyhzdHJpbmcpIHtcbiAgICByZXR1cm4gc3RyaW5nLm1hdGNoKHJlQXNjaWlXb3JkKSB8fCBbXTtcbiAgfVxuXG4gIC8qKlxuICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBtZXRob2RzIGxpa2UgYF8uZmluZEtleWAgYW5kIGBfLmZpbmRMYXN0S2V5YCxcbiAgICogd2l0aG91dCBzdXBwb3J0IGZvciBpdGVyYXRlZSBzaG9ydGhhbmRzLCB3aGljaCBpdGVyYXRlcyBvdmVyIGBjb2xsZWN0aW9uYFxuICAgKiB1c2luZyBgZWFjaEZ1bmNgLlxuICAgKlxuICAgKiBAcHJpdmF0ZVxuICAgKiBAcGFyYW0ge0FycmF5fE9iamVjdH0gY29sbGVjdGlvbiBUaGUgY29sbGVjdGlvbiB0byBpbnNwZWN0LlxuICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBwcmVkaWNhdGUgVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAgICogQHBhcmFtIHtGdW5jdGlvbn0gZWFjaEZ1bmMgVGhlIGZ1bmN0aW9uIHRvIGl0ZXJhdGUgb3ZlciBgY29sbGVjdGlvbmAuXG4gICAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSBmb3VuZCBlbGVtZW50IG9yIGl0cyBrZXksIGVsc2UgYHVuZGVmaW5lZGAuXG4gICAqL1xuICBmdW5jdGlvbiBiYXNlRmluZEtleShjb2xsZWN0aW9uLCBwcmVkaWNhdGUsIGVhY2hGdW5jKSB7XG4gICAgdmFyIHJlc3VsdDtcbiAgICBlYWNoRnVuYyhjb2xsZWN0aW9uLCBmdW5jdGlvbih2YWx1ZSwga2V5LCBjb2xsZWN0aW9uKSB7XG4gICAgICBpZiAocHJlZGljYXRlKHZhbHVlLCBrZXksIGNvbGxlY3Rpb24pKSB7XG4gICAgICAgIHJlc3VsdCA9IGtleTtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuICAgIH0pO1xuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cblxuICAvKipcbiAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uZmluZEluZGV4YCBhbmQgYF8uZmluZExhc3RJbmRleGAgd2l0aG91dFxuICAgKiBzdXBwb3J0IGZvciBpdGVyYXRlZSBzaG9ydGhhbmRzLlxuICAgKlxuICAgKiBAcHJpdmF0ZVxuICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gaW5zcGVjdC5cbiAgICogQHBhcmFtIHtGdW5jdGlvbn0gcHJlZGljYXRlIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBmcm9tSW5kZXggVGhlIGluZGV4IHRvIHNlYXJjaCBmcm9tLlxuICAgKiBAcGFyYW0ge2Jvb2xlYW59IFtmcm9tUmlnaHRdIFNwZWNpZnkgaXRlcmF0aW5nIGZyb20gcmlnaHQgdG8gbGVmdC5cbiAgICogQHJldHVybnMge251bWJlcn0gUmV0dXJucyB0aGUgaW5kZXggb2YgdGhlIG1hdGNoZWQgdmFsdWUsIGVsc2UgYC0xYC5cbiAgICovXG4gIGZ1bmN0aW9uIGJhc2VGaW5kSW5kZXgoYXJyYXksIHByZWRpY2F0ZSwgZnJvbUluZGV4LCBmcm9tUmlnaHQpIHtcbiAgICB2YXIgbGVuZ3RoID0gYXJyYXkubGVuZ3RoLFxuICAgICAgICBpbmRleCA9IGZyb21JbmRleCArIChmcm9tUmlnaHQgPyAxIDogLTEpO1xuXG4gICAgd2hpbGUgKChmcm9tUmlnaHQgPyBpbmRleC0tIDogKytpbmRleCA8IGxlbmd0aCkpIHtcbiAgICAgIGlmIChwcmVkaWNhdGUoYXJyYXlbaW5kZXhdLCBpbmRleCwgYXJyYXkpKSB7XG4gICAgICAgIHJldHVybiBpbmRleDtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIC0xO1xuICB9XG5cbiAgLyoqXG4gICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLmluZGV4T2ZgIHdpdGhvdXQgYGZyb21JbmRleGAgYm91bmRzIGNoZWNrcy5cbiAgICpcbiAgICogQHByaXZhdGVcbiAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIGluc3BlY3QuXG4gICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIHNlYXJjaCBmb3IuXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBmcm9tSW5kZXggVGhlIGluZGV4IHRvIHNlYXJjaCBmcm9tLlxuICAgKiBAcmV0dXJucyB7bnVtYmVyfSBSZXR1cm5zIHRoZSBpbmRleCBvZiB0aGUgbWF0Y2hlZCB2YWx1ZSwgZWxzZSBgLTFgLlxuICAgKi9cbiAgZnVuY3Rpb24gYmFzZUluZGV4T2YoYXJyYXksIHZhbHVlLCBmcm9tSW5kZXgpIHtcbiAgICByZXR1cm4gdmFsdWUgPT09IHZhbHVlXG4gICAgICA/IHN0cmljdEluZGV4T2YoYXJyYXksIHZhbHVlLCBmcm9tSW5kZXgpXG4gICAgICA6IGJhc2VGaW5kSW5kZXgoYXJyYXksIGJhc2VJc05hTiwgZnJvbUluZGV4KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBUaGlzIGZ1bmN0aW9uIGlzIGxpa2UgYGJhc2VJbmRleE9mYCBleGNlcHQgdGhhdCBpdCBhY2NlcHRzIGEgY29tcGFyYXRvci5cbiAgICpcbiAgICogQHByaXZhdGVcbiAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIGluc3BlY3QuXG4gICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIHNlYXJjaCBmb3IuXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBmcm9tSW5kZXggVGhlIGluZGV4IHRvIHNlYXJjaCBmcm9tLlxuICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBjb21wYXJhdG9yIFRoZSBjb21wYXJhdG9yIGludm9rZWQgcGVyIGVsZW1lbnQuXG4gICAqIEByZXR1cm5zIHtudW1iZXJ9IFJldHVybnMgdGhlIGluZGV4IG9mIHRoZSBtYXRjaGVkIHZhbHVlLCBlbHNlIGAtMWAuXG4gICAqL1xuICBmdW5jdGlvbiBiYXNlSW5kZXhPZldpdGgoYXJyYXksIHZhbHVlLCBmcm9tSW5kZXgsIGNvbXBhcmF0b3IpIHtcbiAgICB2YXIgaW5kZXggPSBmcm9tSW5kZXggLSAxLFxuICAgICAgICBsZW5ndGggPSBhcnJheS5sZW5ndGg7XG5cbiAgICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgICAgaWYgKGNvbXBhcmF0b3IoYXJyYXlbaW5kZXhdLCB2YWx1ZSkpIHtcbiAgICAgICAgcmV0dXJuIGluZGV4O1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gLTE7XG4gIH1cblxuICAvKipcbiAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uaXNOYU5gIHdpdGhvdXQgc3VwcG9ydCBmb3IgbnVtYmVyIG9iamVjdHMuXG4gICAqXG4gICAqIEBwcml2YXRlXG4gICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBgTmFOYCwgZWxzZSBgZmFsc2VgLlxuICAgKi9cbiAgZnVuY3Rpb24gYmFzZUlzTmFOKHZhbHVlKSB7XG4gICAgcmV0dXJuIHZhbHVlICE9PSB2YWx1ZTtcbiAgfVxuXG4gIC8qKlxuICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5tZWFuYCBhbmQgYF8ubWVhbkJ5YCB3aXRob3V0IHN1cHBvcnQgZm9yXG4gICAqIGl0ZXJhdGVlIHNob3J0aGFuZHMuXG4gICAqXG4gICAqIEBwcml2YXRlXG4gICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBpdGVyYXRlIG92ZXIuXG4gICAqIEBwYXJhbSB7RnVuY3Rpb259IGl0ZXJhdGVlIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gICAqIEByZXR1cm5zIHtudW1iZXJ9IFJldHVybnMgdGhlIG1lYW4uXG4gICAqL1xuICBmdW5jdGlvbiBiYXNlTWVhbihhcnJheSwgaXRlcmF0ZWUpIHtcbiAgICB2YXIgbGVuZ3RoID0gYXJyYXkgPT0gbnVsbCA/IDAgOiBhcnJheS5sZW5ndGg7XG4gICAgcmV0dXJuIGxlbmd0aCA/IChiYXNlU3VtKGFycmF5LCBpdGVyYXRlZSkgLyBsZW5ndGgpIDogTkFOO1xuICB9XG5cbiAgLyoqXG4gICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLnByb3BlcnR5YCB3aXRob3V0IHN1cHBvcnQgZm9yIGRlZXAgcGF0aHMuXG4gICAqXG4gICAqIEBwcml2YXRlXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgcHJvcGVydHkgdG8gZ2V0LlxuICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBhY2Nlc3NvciBmdW5jdGlvbi5cbiAgICovXG4gIGZ1bmN0aW9uIGJhc2VQcm9wZXJ0eShrZXkpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24ob2JqZWN0KSB7XG4gICAgICByZXR1cm4gb2JqZWN0ID09IG51bGwgPyB1bmRlZmluZWQgOiBvYmplY3Rba2V5XTtcbiAgICB9O1xuICB9XG5cbiAgLyoqXG4gICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLnByb3BlcnR5T2ZgIHdpdGhvdXQgc3VwcG9ydCBmb3IgZGVlcCBwYXRocy5cbiAgICpcbiAgICogQHByaXZhdGVcbiAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIHF1ZXJ5LlxuICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBhY2Nlc3NvciBmdW5jdGlvbi5cbiAgICovXG4gIGZ1bmN0aW9uIGJhc2VQcm9wZXJ0eU9mKG9iamVjdCkge1xuICAgIHJldHVybiBmdW5jdGlvbihrZXkpIHtcbiAgICAgIHJldHVybiBvYmplY3QgPT0gbnVsbCA/IHVuZGVmaW5lZCA6IG9iamVjdFtrZXldO1xuICAgIH07XG4gIH1cblxuICAvKipcbiAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8ucmVkdWNlYCBhbmQgYF8ucmVkdWNlUmlnaHRgLCB3aXRob3V0IHN1cHBvcnRcbiAgICogZm9yIGl0ZXJhdGVlIHNob3J0aGFuZHMsIHdoaWNoIGl0ZXJhdGVzIG92ZXIgYGNvbGxlY3Rpb25gIHVzaW5nIGBlYWNoRnVuY2AuXG4gICAqXG4gICAqIEBwcml2YXRlXG4gICAqIEBwYXJhbSB7QXJyYXl8T2JqZWN0fSBjb2xsZWN0aW9uIFRoZSBjb2xsZWN0aW9uIHRvIGl0ZXJhdGUgb3Zlci5cbiAgICogQHBhcmFtIHtGdW5jdGlvbn0gaXRlcmF0ZWUgVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAgICogQHBhcmFtIHsqfSBhY2N1bXVsYXRvciBUaGUgaW5pdGlhbCB2YWx1ZS5cbiAgICogQHBhcmFtIHtib29sZWFufSBpbml0QWNjdW0gU3BlY2lmeSB1c2luZyB0aGUgZmlyc3Qgb3IgbGFzdCBlbGVtZW50IG9mXG4gICAqICBgY29sbGVjdGlvbmAgYXMgdGhlIGluaXRpYWwgdmFsdWUuXG4gICAqIEBwYXJhbSB7RnVuY3Rpb259IGVhY2hGdW5jIFRoZSBmdW5jdGlvbiB0byBpdGVyYXRlIG92ZXIgYGNvbGxlY3Rpb25gLlxuICAgKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgYWNjdW11bGF0ZWQgdmFsdWUuXG4gICAqL1xuICBmdW5jdGlvbiBiYXNlUmVkdWNlKGNvbGxlY3Rpb24sIGl0ZXJhdGVlLCBhY2N1bXVsYXRvciwgaW5pdEFjY3VtLCBlYWNoRnVuYykge1xuICAgIGVhY2hGdW5jKGNvbGxlY3Rpb24sIGZ1bmN0aW9uKHZhbHVlLCBpbmRleCwgY29sbGVjdGlvbikge1xuICAgICAgYWNjdW11bGF0b3IgPSBpbml0QWNjdW1cbiAgICAgICAgPyAoaW5pdEFjY3VtID0gZmFsc2UsIHZhbHVlKVxuICAgICAgICA6IGl0ZXJhdGVlKGFjY3VtdWxhdG9yLCB2YWx1ZSwgaW5kZXgsIGNvbGxlY3Rpb24pO1xuICAgIH0pO1xuICAgIHJldHVybiBhY2N1bXVsYXRvcjtcbiAgfVxuXG4gIC8qKlxuICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5zb3J0QnlgIHdoaWNoIHVzZXMgYGNvbXBhcmVyYCB0byBkZWZpbmUgdGhlXG4gICAqIHNvcnQgb3JkZXIgb2YgYGFycmF5YCBhbmQgcmVwbGFjZXMgY3JpdGVyaWEgb2JqZWN0cyB3aXRoIHRoZWlyIGNvcnJlc3BvbmRpbmdcbiAgICogdmFsdWVzLlxuICAgKlxuICAgKiBAcHJpdmF0ZVxuICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gc29ydC5cbiAgICogQHBhcmFtIHtGdW5jdGlvbn0gY29tcGFyZXIgVGhlIGZ1bmN0aW9uIHRvIGRlZmluZSBzb3J0IG9yZGVyLlxuICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgYGFycmF5YC5cbiAgICovXG4gIGZ1bmN0aW9uIGJhc2VTb3J0QnkoYXJyYXksIGNvbXBhcmVyKSB7XG4gICAgdmFyIGxlbmd0aCA9IGFycmF5Lmxlbmd0aDtcblxuICAgIGFycmF5LnNvcnQoY29tcGFyZXIpO1xuICAgIHdoaWxlIChsZW5ndGgtLSkge1xuICAgICAgYXJyYXlbbGVuZ3RoXSA9IGFycmF5W2xlbmd0aF0udmFsdWU7XG4gICAgfVxuICAgIHJldHVybiBhcnJheTtcbiAgfVxuXG4gIC8qKlxuICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5zdW1gIGFuZCBgXy5zdW1CeWAgd2l0aG91dCBzdXBwb3J0IGZvclxuICAgKiBpdGVyYXRlZSBzaG9ydGhhbmRzLlxuICAgKlxuICAgKiBAcHJpdmF0ZVxuICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gaXRlcmF0ZSBvdmVyLlxuICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBpdGVyYXRlZSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICAgKiBAcmV0dXJucyB7bnVtYmVyfSBSZXR1cm5zIHRoZSBzdW0uXG4gICAqL1xuICBmdW5jdGlvbiBiYXNlU3VtKGFycmF5LCBpdGVyYXRlZSkge1xuICAgIHZhciByZXN1bHQsXG4gICAgICAgIGluZGV4ID0gLTEsXG4gICAgICAgIGxlbmd0aCA9IGFycmF5Lmxlbmd0aDtcblxuICAgIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgICB2YXIgY3VycmVudCA9IGl0ZXJhdGVlKGFycmF5W2luZGV4XSk7XG4gICAgICBpZiAoY3VycmVudCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIHJlc3VsdCA9IHJlc3VsdCA9PT0gdW5kZWZpbmVkID8gY3VycmVudCA6IChyZXN1bHQgKyBjdXJyZW50KTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfVxuXG4gIC8qKlxuICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy50aW1lc2Agd2l0aG91dCBzdXBwb3J0IGZvciBpdGVyYXRlZSBzaG9ydGhhbmRzXG4gICAqIG9yIG1heCBhcnJheSBsZW5ndGggY2hlY2tzLlxuICAgKlxuICAgKiBAcHJpdmF0ZVxuICAgKiBAcGFyYW0ge251bWJlcn0gbiBUaGUgbnVtYmVyIG9mIHRpbWVzIHRvIGludm9rZSBgaXRlcmF0ZWVgLlxuICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBpdGVyYXRlZSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIGFycmF5IG9mIHJlc3VsdHMuXG4gICAqL1xuICBmdW5jdGlvbiBiYXNlVGltZXMobiwgaXRlcmF0ZWUpIHtcbiAgICB2YXIgaW5kZXggPSAtMSxcbiAgICAgICAgcmVzdWx0ID0gQXJyYXkobik7XG5cbiAgICB3aGlsZSAoKytpbmRleCA8IG4pIHtcbiAgICAgIHJlc3VsdFtpbmRleF0gPSBpdGVyYXRlZShpbmRleCk7XG4gICAgfVxuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cblxuICAvKipcbiAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8udG9QYWlyc2AgYW5kIGBfLnRvUGFpcnNJbmAgd2hpY2ggY3JlYXRlcyBhbiBhcnJheVxuICAgKiBvZiBrZXktdmFsdWUgcGFpcnMgZm9yIGBvYmplY3RgIGNvcnJlc3BvbmRpbmcgdG8gdGhlIHByb3BlcnR5IG5hbWVzIG9mIGBwcm9wc2AuXG4gICAqXG4gICAqIEBwcml2YXRlXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBxdWVyeS5cbiAgICogQHBhcmFtIHtBcnJheX0gcHJvcHMgVGhlIHByb3BlcnR5IG5hbWVzIHRvIGdldCB2YWx1ZXMgZm9yLlxuICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIHRoZSBrZXktdmFsdWUgcGFpcnMuXG4gICAqL1xuICBmdW5jdGlvbiBiYXNlVG9QYWlycyhvYmplY3QsIHByb3BzKSB7XG4gICAgcmV0dXJuIGFycmF5TWFwKHByb3BzLCBmdW5jdGlvbihrZXkpIHtcbiAgICAgIHJldHVybiBba2V5LCBvYmplY3Rba2V5XV07XG4gICAgfSk7XG4gIH1cblxuICAvKipcbiAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8udHJpbWAuXG4gICAqXG4gICAqIEBwcml2YXRlXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBzdHJpbmcgVGhlIHN0cmluZyB0byB0cmltLlxuICAgKiBAcmV0dXJucyB7c3RyaW5nfSBSZXR1cm5zIHRoZSB0cmltbWVkIHN0cmluZy5cbiAgICovXG4gIGZ1bmN0aW9uIGJhc2VUcmltKHN0cmluZykge1xuICAgIHJldHVybiBzdHJpbmdcbiAgICAgID8gc3RyaW5nLnNsaWNlKDAsIHRyaW1tZWRFbmRJbmRleChzdHJpbmcpICsgMSkucmVwbGFjZShyZVRyaW1TdGFydCwgJycpXG4gICAgICA6IHN0cmluZztcbiAgfVxuXG4gIC8qKlxuICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy51bmFyeWAgd2l0aG91dCBzdXBwb3J0IGZvciBzdG9yaW5nIG1ldGFkYXRhLlxuICAgKlxuICAgKiBAcHJpdmF0ZVxuICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdW5jIFRoZSBmdW5jdGlvbiB0byBjYXAgYXJndW1lbnRzIGZvci5cbiAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgY2FwcGVkIGZ1bmN0aW9uLlxuICAgKi9cbiAgZnVuY3Rpb24gYmFzZVVuYXJ5KGZ1bmMpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24odmFsdWUpIHtcbiAgICAgIHJldHVybiBmdW5jKHZhbHVlKTtcbiAgICB9O1xuICB9XG5cbiAgLyoqXG4gICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLnZhbHVlc2AgYW5kIGBfLnZhbHVlc0luYCB3aGljaCBjcmVhdGVzIGFuXG4gICAqIGFycmF5IG9mIGBvYmplY3RgIHByb3BlcnR5IHZhbHVlcyBjb3JyZXNwb25kaW5nIHRvIHRoZSBwcm9wZXJ0eSBuYW1lc1xuICAgKiBvZiBgcHJvcHNgLlxuICAgKlxuICAgKiBAcHJpdmF0ZVxuICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gcXVlcnkuXG4gICAqIEBwYXJhbSB7QXJyYXl9IHByb3BzIFRoZSBwcm9wZXJ0eSBuYW1lcyB0byBnZXQgdmFsdWVzIGZvci5cbiAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyB0aGUgYXJyYXkgb2YgcHJvcGVydHkgdmFsdWVzLlxuICAgKi9cbiAgZnVuY3Rpb24gYmFzZVZhbHVlcyhvYmplY3QsIHByb3BzKSB7XG4gICAgcmV0dXJuIGFycmF5TWFwKHByb3BzLCBmdW5jdGlvbihrZXkpIHtcbiAgICAgIHJldHVybiBvYmplY3Rba2V5XTtcbiAgICB9KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBDaGVja3MgaWYgYSBgY2FjaGVgIHZhbHVlIGZvciBga2V5YCBleGlzdHMuXG4gICAqXG4gICAqIEBwcml2YXRlXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBjYWNoZSBUaGUgY2FjaGUgdG8gcXVlcnkuXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgZW50cnkgdG8gY2hlY2suXG4gICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBhbiBlbnRyeSBmb3IgYGtleWAgZXhpc3RzLCBlbHNlIGBmYWxzZWAuXG4gICAqL1xuICBmdW5jdGlvbiBjYWNoZUhhcyhjYWNoZSwga2V5KSB7XG4gICAgcmV0dXJuIGNhY2hlLmhhcyhrZXkpO1xuICB9XG5cbiAgLyoqXG4gICAqIFVzZWQgYnkgYF8udHJpbWAgYW5kIGBfLnRyaW1TdGFydGAgdG8gZ2V0IHRoZSBpbmRleCBvZiB0aGUgZmlyc3Qgc3RyaW5nIHN5bWJvbFxuICAgKiB0aGF0IGlzIG5vdCBmb3VuZCBpbiB0aGUgY2hhcmFjdGVyIHN5bWJvbHMuXG4gICAqXG4gICAqIEBwcml2YXRlXG4gICAqIEBwYXJhbSB7QXJyYXl9IHN0clN5bWJvbHMgVGhlIHN0cmluZyBzeW1ib2xzIHRvIGluc3BlY3QuXG4gICAqIEBwYXJhbSB7QXJyYXl9IGNoclN5bWJvbHMgVGhlIGNoYXJhY3RlciBzeW1ib2xzIHRvIGZpbmQuXG4gICAqIEByZXR1cm5zIHtudW1iZXJ9IFJldHVybnMgdGhlIGluZGV4IG9mIHRoZSBmaXJzdCB1bm1hdGNoZWQgc3RyaW5nIHN5bWJvbC5cbiAgICovXG4gIGZ1bmN0aW9uIGNoYXJzU3RhcnRJbmRleChzdHJTeW1ib2xzLCBjaHJTeW1ib2xzKSB7XG4gICAgdmFyIGluZGV4ID0gLTEsXG4gICAgICAgIGxlbmd0aCA9IHN0clN5bWJvbHMubGVuZ3RoO1xuXG4gICAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGggJiYgYmFzZUluZGV4T2YoY2hyU3ltYm9scywgc3RyU3ltYm9sc1tpbmRleF0sIDApID4gLTEpIHt9XG4gICAgcmV0dXJuIGluZGV4O1xuICB9XG5cbiAgLyoqXG4gICAqIFVzZWQgYnkgYF8udHJpbWAgYW5kIGBfLnRyaW1FbmRgIHRvIGdldCB0aGUgaW5kZXggb2YgdGhlIGxhc3Qgc3RyaW5nIHN5bWJvbFxuICAgKiB0aGF0IGlzIG5vdCBmb3VuZCBpbiB0aGUgY2hhcmFjdGVyIHN5bWJvbHMuXG4gICAqXG4gICAqIEBwcml2YXRlXG4gICAqIEBwYXJhbSB7QXJyYXl9IHN0clN5bWJvbHMgVGhlIHN0cmluZyBzeW1ib2xzIHRvIGluc3BlY3QuXG4gICAqIEBwYXJhbSB7QXJyYXl9IGNoclN5bWJvbHMgVGhlIGNoYXJhY3RlciBzeW1ib2xzIHRvIGZpbmQuXG4gICAqIEByZXR1cm5zIHtudW1iZXJ9IFJldHVybnMgdGhlIGluZGV4IG9mIHRoZSBsYXN0IHVubWF0Y2hlZCBzdHJpbmcgc3ltYm9sLlxuICAgKi9cbiAgZnVuY3Rpb24gY2hhcnNFbmRJbmRleChzdHJTeW1ib2xzLCBjaHJTeW1ib2xzKSB7XG4gICAgdmFyIGluZGV4ID0gc3RyU3ltYm9scy5sZW5ndGg7XG5cbiAgICB3aGlsZSAoaW5kZXgtLSAmJiBiYXNlSW5kZXhPZihjaHJTeW1ib2xzLCBzdHJTeW1ib2xzW2luZGV4XSwgMCkgPiAtMSkge31cbiAgICByZXR1cm4gaW5kZXg7XG4gIH1cblxuICAvKipcbiAgICogR2V0cyB0aGUgbnVtYmVyIG9mIGBwbGFjZWhvbGRlcmAgb2NjdXJyZW5jZXMgaW4gYGFycmF5YC5cbiAgICpcbiAgICogQHByaXZhdGVcbiAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIGluc3BlY3QuXG4gICAqIEBwYXJhbSB7Kn0gcGxhY2Vob2xkZXIgVGhlIHBsYWNlaG9sZGVyIHRvIHNlYXJjaCBmb3IuXG4gICAqIEByZXR1cm5zIHtudW1iZXJ9IFJldHVybnMgdGhlIHBsYWNlaG9sZGVyIGNvdW50LlxuICAgKi9cbiAgZnVuY3Rpb24gY291bnRIb2xkZXJzKGFycmF5LCBwbGFjZWhvbGRlcikge1xuICAgIHZhciBsZW5ndGggPSBhcnJheS5sZW5ndGgsXG4gICAgICAgIHJlc3VsdCA9IDA7XG5cbiAgICB3aGlsZSAobGVuZ3RoLS0pIHtcbiAgICAgIGlmIChhcnJheVtsZW5ndGhdID09PSBwbGFjZWhvbGRlcikge1xuICAgICAgICArK3Jlc3VsdDtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfVxuXG4gIC8qKlxuICAgKiBVc2VkIGJ5IGBfLmRlYnVycmAgdG8gY29udmVydCBMYXRpbi0xIFN1cHBsZW1lbnQgYW5kIExhdGluIEV4dGVuZGVkLUFcbiAgICogbGV0dGVycyB0byBiYXNpYyBMYXRpbiBsZXR0ZXJzLlxuICAgKlxuICAgKiBAcHJpdmF0ZVxuICAgKiBAcGFyYW0ge3N0cmluZ30gbGV0dGVyIFRoZSBtYXRjaGVkIGxldHRlciB0byBkZWJ1cnIuXG4gICAqIEByZXR1cm5zIHtzdHJpbmd9IFJldHVybnMgdGhlIGRlYnVycmVkIGxldHRlci5cbiAgICovXG4gIHZhciBkZWJ1cnJMZXR0ZXIgPSBiYXNlUHJvcGVydHlPZihkZWJ1cnJlZExldHRlcnMpO1xuXG4gIC8qKlxuICAgKiBVc2VkIGJ5IGBfLmVzY2FwZWAgdG8gY29udmVydCBjaGFyYWN0ZXJzIHRvIEhUTUwgZW50aXRpZXMuXG4gICAqXG4gICAqIEBwcml2YXRlXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBjaHIgVGhlIG1hdGNoZWQgY2hhcmFjdGVyIHRvIGVzY2FwZS5cbiAgICogQHJldHVybnMge3N0cmluZ30gUmV0dXJucyB0aGUgZXNjYXBlZCBjaGFyYWN0ZXIuXG4gICAqL1xuICB2YXIgZXNjYXBlSHRtbENoYXIgPSBiYXNlUHJvcGVydHlPZihodG1sRXNjYXBlcyk7XG5cbiAgLyoqXG4gICAqIFVzZWQgYnkgYF8udGVtcGxhdGVgIHRvIGVzY2FwZSBjaGFyYWN0ZXJzIGZvciBpbmNsdXNpb24gaW4gY29tcGlsZWQgc3RyaW5nIGxpdGVyYWxzLlxuICAgKlxuICAgKiBAcHJpdmF0ZVxuICAgKiBAcGFyYW0ge3N0cmluZ30gY2hyIFRoZSBtYXRjaGVkIGNoYXJhY3RlciB0byBlc2NhcGUuXG4gICAqIEByZXR1cm5zIHtzdHJpbmd9IFJldHVybnMgdGhlIGVzY2FwZWQgY2hhcmFjdGVyLlxuICAgKi9cbiAgZnVuY3Rpb24gZXNjYXBlU3RyaW5nQ2hhcihjaHIpIHtcbiAgICByZXR1cm4gJ1xcXFwnICsgc3RyaW5nRXNjYXBlc1tjaHJdO1xuICB9XG5cbiAgLyoqXG4gICAqIEdldHMgdGhlIHZhbHVlIGF0IGBrZXlgIG9mIGBvYmplY3RgLlxuICAgKlxuICAgKiBAcHJpdmF0ZVxuICAgKiBAcGFyYW0ge09iamVjdH0gW29iamVjdF0gVGhlIG9iamVjdCB0byBxdWVyeS5cbiAgICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSBwcm9wZXJ0eSB0byBnZXQuXG4gICAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSBwcm9wZXJ0eSB2YWx1ZS5cbiAgICovXG4gIGZ1bmN0aW9uIGdldFZhbHVlKG9iamVjdCwga2V5KSB7XG4gICAgcmV0dXJuIG9iamVjdCA9PSBudWxsID8gdW5kZWZpbmVkIDogb2JqZWN0W2tleV07XG4gIH1cblxuICAvKipcbiAgICogQ2hlY2tzIGlmIGBzdHJpbmdgIGNvbnRhaW5zIFVuaWNvZGUgc3ltYm9scy5cbiAgICpcbiAgICogQHByaXZhdGVcbiAgICogQHBhcmFtIHtzdHJpbmd9IHN0cmluZyBUaGUgc3RyaW5nIHRvIGluc3BlY3QuXG4gICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBhIHN5bWJvbCBpcyBmb3VuZCwgZWxzZSBgZmFsc2VgLlxuICAgKi9cbiAgZnVuY3Rpb24gaGFzVW5pY29kZShzdHJpbmcpIHtcbiAgICByZXR1cm4gcmVIYXNVbmljb2RlLnRlc3Qoc3RyaW5nKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBDaGVja3MgaWYgYHN0cmluZ2AgY29udGFpbnMgYSB3b3JkIGNvbXBvc2VkIG9mIFVuaWNvZGUgc3ltYm9scy5cbiAgICpcbiAgICogQHByaXZhdGVcbiAgICogQHBhcmFtIHtzdHJpbmd9IHN0cmluZyBUaGUgc3RyaW5nIHRvIGluc3BlY3QuXG4gICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBhIHdvcmQgaXMgZm91bmQsIGVsc2UgYGZhbHNlYC5cbiAgICovXG4gIGZ1bmN0aW9uIGhhc1VuaWNvZGVXb3JkKHN0cmluZykge1xuICAgIHJldHVybiByZUhhc1VuaWNvZGVXb3JkLnRlc3Qoc3RyaW5nKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBDb252ZXJ0cyBgaXRlcmF0b3JgIHRvIGFuIGFycmF5LlxuICAgKlxuICAgKiBAcHJpdmF0ZVxuICAgKiBAcGFyYW0ge09iamVjdH0gaXRlcmF0b3IgVGhlIGl0ZXJhdG9yIHRvIGNvbnZlcnQuXG4gICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgY29udmVydGVkIGFycmF5LlxuICAgKi9cbiAgZnVuY3Rpb24gaXRlcmF0b3JUb0FycmF5KGl0ZXJhdG9yKSB7XG4gICAgdmFyIGRhdGEsXG4gICAgICAgIHJlc3VsdCA9IFtdO1xuXG4gICAgd2hpbGUgKCEoZGF0YSA9IGl0ZXJhdG9yLm5leHQoKSkuZG9uZSkge1xuICAgICAgcmVzdWx0LnB1c2goZGF0YS52YWx1ZSk7XG4gICAgfVxuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cblxuICAvKipcbiAgICogQ29udmVydHMgYG1hcGAgdG8gaXRzIGtleS12YWx1ZSBwYWlycy5cbiAgICpcbiAgICogQHByaXZhdGVcbiAgICogQHBhcmFtIHtPYmplY3R9IG1hcCBUaGUgbWFwIHRvIGNvbnZlcnQuXG4gICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUga2V5LXZhbHVlIHBhaXJzLlxuICAgKi9cbiAgZnVuY3Rpb24gbWFwVG9BcnJheShtYXApIHtcbiAgICB2YXIgaW5kZXggPSAtMSxcbiAgICAgICAgcmVzdWx0ID0gQXJyYXkobWFwLnNpemUpO1xuXG4gICAgbWFwLmZvckVhY2goZnVuY3Rpb24odmFsdWUsIGtleSkge1xuICAgICAgcmVzdWx0WysraW5kZXhdID0gW2tleSwgdmFsdWVdO1xuICAgIH0pO1xuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cblxuICAvKipcbiAgICogQ3JlYXRlcyBhIHVuYXJ5IGZ1bmN0aW9uIHRoYXQgaW52b2tlcyBgZnVuY2Agd2l0aCBpdHMgYXJndW1lbnQgdHJhbnNmb3JtZWQuXG4gICAqXG4gICAqIEBwcml2YXRlXG4gICAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIHdyYXAuXG4gICAqIEBwYXJhbSB7RnVuY3Rpb259IHRyYW5zZm9ybSBUaGUgYXJndW1lbnQgdHJhbnNmb3JtLlxuICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBmdW5jdGlvbi5cbiAgICovXG4gIGZ1bmN0aW9uIG92ZXJBcmcoZnVuYywgdHJhbnNmb3JtKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uKGFyZykge1xuICAgICAgcmV0dXJuIGZ1bmModHJhbnNmb3JtKGFyZykpO1xuICAgIH07XG4gIH1cblxuICAvKipcbiAgICogUmVwbGFjZXMgYWxsIGBwbGFjZWhvbGRlcmAgZWxlbWVudHMgaW4gYGFycmF5YCB3aXRoIGFuIGludGVybmFsIHBsYWNlaG9sZGVyXG4gICAqIGFuZCByZXR1cm5zIGFuIGFycmF5IG9mIHRoZWlyIGluZGV4ZXMuXG4gICAqXG4gICAqIEBwcml2YXRlXG4gICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBtb2RpZnkuXG4gICAqIEBwYXJhbSB7Kn0gcGxhY2Vob2xkZXIgVGhlIHBsYWNlaG9sZGVyIHRvIHJlcGxhY2UuXG4gICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgbmV3IGFycmF5IG9mIHBsYWNlaG9sZGVyIGluZGV4ZXMuXG4gICAqL1xuICBmdW5jdGlvbiByZXBsYWNlSG9sZGVycyhhcnJheSwgcGxhY2Vob2xkZXIpIHtcbiAgICB2YXIgaW5kZXggPSAtMSxcbiAgICAgICAgbGVuZ3RoID0gYXJyYXkubGVuZ3RoLFxuICAgICAgICByZXNJbmRleCA9IDAsXG4gICAgICAgIHJlc3VsdCA9IFtdO1xuXG4gICAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICAgIHZhciB2YWx1ZSA9IGFycmF5W2luZGV4XTtcbiAgICAgIGlmICh2YWx1ZSA9PT0gcGxhY2Vob2xkZXIgfHwgdmFsdWUgPT09IFBMQUNFSE9MREVSKSB7XG4gICAgICAgIGFycmF5W2luZGV4XSA9IFBMQUNFSE9MREVSO1xuICAgICAgICByZXN1bHRbcmVzSW5kZXgrK10gPSBpbmRleDtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfVxuXG4gIC8qKlxuICAgKiBDb252ZXJ0cyBgc2V0YCB0byBhbiBhcnJheSBvZiBpdHMgdmFsdWVzLlxuICAgKlxuICAgKiBAcHJpdmF0ZVxuICAgKiBAcGFyYW0ge09iamVjdH0gc2V0IFRoZSBzZXQgdG8gY29udmVydC5cbiAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSB2YWx1ZXMuXG4gICAqL1xuICBmdW5jdGlvbiBzZXRUb0FycmF5KHNldCkge1xuICAgIHZhciBpbmRleCA9IC0xLFxuICAgICAgICByZXN1bHQgPSBBcnJheShzZXQuc2l6ZSk7XG5cbiAgICBzZXQuZm9yRWFjaChmdW5jdGlvbih2YWx1ZSkge1xuICAgICAgcmVzdWx0WysraW5kZXhdID0gdmFsdWU7XG4gICAgfSk7XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfVxuXG4gIC8qKlxuICAgKiBDb252ZXJ0cyBgc2V0YCB0byBpdHMgdmFsdWUtdmFsdWUgcGFpcnMuXG4gICAqXG4gICAqIEBwcml2YXRlXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBzZXQgVGhlIHNldCB0byBjb252ZXJ0LlxuICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIHZhbHVlLXZhbHVlIHBhaXJzLlxuICAgKi9cbiAgZnVuY3Rpb24gc2V0VG9QYWlycyhzZXQpIHtcbiAgICB2YXIgaW5kZXggPSAtMSxcbiAgICAgICAgcmVzdWx0ID0gQXJyYXkoc2V0LnNpemUpO1xuXG4gICAgc2V0LmZvckVhY2goZnVuY3Rpb24odmFsdWUpIHtcbiAgICAgIHJlc3VsdFsrK2luZGV4XSA9IFt2YWx1ZSwgdmFsdWVdO1xuICAgIH0pO1xuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cblxuICAvKipcbiAgICogQSBzcGVjaWFsaXplZCB2ZXJzaW9uIG9mIGBfLmluZGV4T2ZgIHdoaWNoIHBlcmZvcm1zIHN0cmljdCBlcXVhbGl0eVxuICAgKiBjb21wYXJpc29ucyBvZiB2YWx1ZXMsIGkuZS4gYD09PWAuXG4gICAqXG4gICAqIEBwcml2YXRlXG4gICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBpbnNwZWN0LlxuICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBzZWFyY2ggZm9yLlxuICAgKiBAcGFyYW0ge251bWJlcn0gZnJvbUluZGV4IFRoZSBpbmRleCB0byBzZWFyY2ggZnJvbS5cbiAgICogQHJldHVybnMge251bWJlcn0gUmV0dXJucyB0aGUgaW5kZXggb2YgdGhlIG1hdGNoZWQgdmFsdWUsIGVsc2UgYC0xYC5cbiAgICovXG4gIGZ1bmN0aW9uIHN0cmljdEluZGV4T2YoYXJyYXksIHZhbHVlLCBmcm9tSW5kZXgpIHtcbiAgICB2YXIgaW5kZXggPSBmcm9tSW5kZXggLSAxLFxuICAgICAgICBsZW5ndGggPSBhcnJheS5sZW5ndGg7XG5cbiAgICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgICAgaWYgKGFycmF5W2luZGV4XSA9PT0gdmFsdWUpIHtcbiAgICAgICAgcmV0dXJuIGluZGV4O1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gLTE7XG4gIH1cblxuICAvKipcbiAgICogQSBzcGVjaWFsaXplZCB2ZXJzaW9uIG9mIGBfLmxhc3RJbmRleE9mYCB3aGljaCBwZXJmb3JtcyBzdHJpY3QgZXF1YWxpdHlcbiAgICogY29tcGFyaXNvbnMgb2YgdmFsdWVzLCBpLmUuIGA9PT1gLlxuICAgKlxuICAgKiBAcHJpdmF0ZVxuICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gaW5zcGVjdC5cbiAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gc2VhcmNoIGZvci5cbiAgICogQHBhcmFtIHtudW1iZXJ9IGZyb21JbmRleCBUaGUgaW5kZXggdG8gc2VhcmNoIGZyb20uXG4gICAqIEByZXR1cm5zIHtudW1iZXJ9IFJldHVybnMgdGhlIGluZGV4IG9mIHRoZSBtYXRjaGVkIHZhbHVlLCBlbHNlIGAtMWAuXG4gICAqL1xuICBmdW5jdGlvbiBzdHJpY3RMYXN0SW5kZXhPZihhcnJheSwgdmFsdWUsIGZyb21JbmRleCkge1xuICAgIHZhciBpbmRleCA9IGZyb21JbmRleCArIDE7XG4gICAgd2hpbGUgKGluZGV4LS0pIHtcbiAgICAgIGlmIChhcnJheVtpbmRleF0gPT09IHZhbHVlKSB7XG4gICAgICAgIHJldHVybiBpbmRleDtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIGluZGV4O1xuICB9XG5cbiAgLyoqXG4gICAqIEdldHMgdGhlIG51bWJlciBvZiBzeW1ib2xzIGluIGBzdHJpbmdgLlxuICAgKlxuICAgKiBAcHJpdmF0ZVxuICAgKiBAcGFyYW0ge3N0cmluZ30gc3RyaW5nIFRoZSBzdHJpbmcgdG8gaW5zcGVjdC5cbiAgICogQHJldHVybnMge251bWJlcn0gUmV0dXJucyB0aGUgc3RyaW5nIHNpemUuXG4gICAqL1xuICBmdW5jdGlvbiBzdHJpbmdTaXplKHN0cmluZykge1xuICAgIHJldHVybiBoYXNVbmljb2RlKHN0cmluZylcbiAgICAgID8gdW5pY29kZVNpemUoc3RyaW5nKVxuICAgICAgOiBhc2NpaVNpemUoc3RyaW5nKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBDb252ZXJ0cyBgc3RyaW5nYCB0byBhbiBhcnJheS5cbiAgICpcbiAgICogQHByaXZhdGVcbiAgICogQHBhcmFtIHtzdHJpbmd9IHN0cmluZyBUaGUgc3RyaW5nIHRvIGNvbnZlcnQuXG4gICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgY29udmVydGVkIGFycmF5LlxuICAgKi9cbiAgZnVuY3Rpb24gc3RyaW5nVG9BcnJheShzdHJpbmcpIHtcbiAgICByZXR1cm4gaGFzVW5pY29kZShzdHJpbmcpXG4gICAgICA/IHVuaWNvZGVUb0FycmF5KHN0cmluZylcbiAgICAgIDogYXNjaWlUb0FycmF5KHN0cmluZyk7XG4gIH1cblxuICAvKipcbiAgICogVXNlZCBieSBgXy50cmltYCBhbmQgYF8udHJpbUVuZGAgdG8gZ2V0IHRoZSBpbmRleCBvZiB0aGUgbGFzdCBub24td2hpdGVzcGFjZVxuICAgKiBjaGFyYWN0ZXIgb2YgYHN0cmluZ2AuXG4gICAqXG4gICAqIEBwcml2YXRlXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBzdHJpbmcgVGhlIHN0cmluZyB0byBpbnNwZWN0LlxuICAgKiBAcmV0dXJucyB7bnVtYmVyfSBSZXR1cm5zIHRoZSBpbmRleCBvZiB0aGUgbGFzdCBub24td2hpdGVzcGFjZSBjaGFyYWN0ZXIuXG4gICAqL1xuICBmdW5jdGlvbiB0cmltbWVkRW5kSW5kZXgoc3RyaW5nKSB7XG4gICAgdmFyIGluZGV4ID0gc3RyaW5nLmxlbmd0aDtcblxuICAgIHdoaWxlIChpbmRleC0tICYmIHJlV2hpdGVzcGFjZS50ZXN0KHN0cmluZy5jaGFyQXQoaW5kZXgpKSkge31cbiAgICByZXR1cm4gaW5kZXg7XG4gIH1cblxuICAvKipcbiAgICogVXNlZCBieSBgXy51bmVzY2FwZWAgdG8gY29udmVydCBIVE1MIGVudGl0aWVzIHRvIGNoYXJhY3RlcnMuXG4gICAqXG4gICAqIEBwcml2YXRlXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBjaHIgVGhlIG1hdGNoZWQgY2hhcmFjdGVyIHRvIHVuZXNjYXBlLlxuICAgKiBAcmV0dXJucyB7c3RyaW5nfSBSZXR1cm5zIHRoZSB1bmVzY2FwZWQgY2hhcmFjdGVyLlxuICAgKi9cbiAgdmFyIHVuZXNjYXBlSHRtbENoYXIgPSBiYXNlUHJvcGVydHlPZihodG1sVW5lc2NhcGVzKTtcblxuICAvKipcbiAgICogR2V0cyB0aGUgc2l6ZSBvZiBhIFVuaWNvZGUgYHN0cmluZ2AuXG4gICAqXG4gICAqIEBwcml2YXRlXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBzdHJpbmcgVGhlIHN0cmluZyBpbnNwZWN0LlxuICAgKiBAcmV0dXJucyB7bnVtYmVyfSBSZXR1cm5zIHRoZSBzdHJpbmcgc2l6ZS5cbiAgICovXG4gIGZ1bmN0aW9uIHVuaWNvZGVTaXplKHN0cmluZykge1xuICAgIHZhciByZXN1bHQgPSByZVVuaWNvZGUubGFzdEluZGV4ID0gMDtcbiAgICB3aGlsZSAocmVVbmljb2RlLnRlc3Qoc3RyaW5nKSkge1xuICAgICAgKytyZXN1bHQ7XG4gICAgfVxuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cblxuICAvKipcbiAgICogQ29udmVydHMgYSBVbmljb2RlIGBzdHJpbmdgIHRvIGFuIGFycmF5LlxuICAgKlxuICAgKiBAcHJpdmF0ZVxuICAgKiBAcGFyYW0ge3N0cmluZ30gc3RyaW5nIFRoZSBzdHJpbmcgdG8gY29udmVydC5cbiAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBjb252ZXJ0ZWQgYXJyYXkuXG4gICAqL1xuICBmdW5jdGlvbiB1bmljb2RlVG9BcnJheShzdHJpbmcpIHtcbiAgICByZXR1cm4gc3RyaW5nLm1hdGNoKHJlVW5pY29kZSkgfHwgW107XG4gIH1cblxuICAvKipcbiAgICogU3BsaXRzIGEgVW5pY29kZSBgc3RyaW5nYCBpbnRvIGFuIGFycmF5IG9mIGl0cyB3b3Jkcy5cbiAgICpcbiAgICogQHByaXZhdGVcbiAgICogQHBhcmFtIHtzdHJpbmd9IFRoZSBzdHJpbmcgdG8gaW5zcGVjdC5cbiAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSB3b3JkcyBvZiBgc3RyaW5nYC5cbiAgICovXG4gIGZ1bmN0aW9uIHVuaWNvZGVXb3JkcyhzdHJpbmcpIHtcbiAgICByZXR1cm4gc3RyaW5nLm1hdGNoKHJlVW5pY29kZVdvcmQpIHx8IFtdO1xuICB9XG5cbiAgLyotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSovXG5cbiAgLyoqXG4gICAqIENyZWF0ZSBhIG5ldyBwcmlzdGluZSBgbG9kYXNoYCBmdW5jdGlvbiB1c2luZyB0aGUgYGNvbnRleHRgIG9iamVjdC5cbiAgICpcbiAgICogQHN0YXRpY1xuICAgKiBAbWVtYmVyT2YgX1xuICAgKiBAc2luY2UgMS4xLjBcbiAgICogQGNhdGVnb3J5IFV0aWxcbiAgICogQHBhcmFtIHtPYmplY3R9IFtjb250ZXh0PXJvb3RdIFRoZSBjb250ZXh0IG9iamVjdC5cbiAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIGEgbmV3IGBsb2Rhc2hgIGZ1bmN0aW9uLlxuICAgKiBAZXhhbXBsZVxuICAgKlxuICAgKiBfLm1peGluKHsgJ2Zvbyc6IF8uY29uc3RhbnQoJ2ZvbycpIH0pO1xuICAgKlxuICAgKiB2YXIgbG9kYXNoID0gXy5ydW5JbkNvbnRleHQoKTtcbiAgICogbG9kYXNoLm1peGluKHsgJ2Jhcic6IGxvZGFzaC5jb25zdGFudCgnYmFyJykgfSk7XG4gICAqXG4gICAqIF8uaXNGdW5jdGlvbihfLmZvbyk7XG4gICAqIC8vID0+IHRydWVcbiAgICogXy5pc0Z1bmN0aW9uKF8uYmFyKTtcbiAgICogLy8gPT4gZmFsc2VcbiAgICpcbiAgICogbG9kYXNoLmlzRnVuY3Rpb24obG9kYXNoLmZvbyk7XG4gICAqIC8vID0+IGZhbHNlXG4gICAqIGxvZGFzaC5pc0Z1bmN0aW9uKGxvZGFzaC5iYXIpO1xuICAgKiAvLyA9PiB0cnVlXG4gICAqXG4gICAqIC8vIENyZWF0ZSBhIHN1cGVkLXVwIGBkZWZlcmAgaW4gTm9kZS5qcy5cbiAgICogdmFyIGRlZmVyID0gXy5ydW5JbkNvbnRleHQoeyAnc2V0VGltZW91dCc6IHNldEltbWVkaWF0ZSB9KS5kZWZlcjtcbiAgICovXG4gIHZhciBydW5JbkNvbnRleHQgPSAoZnVuY3Rpb24gcnVuSW5Db250ZXh0KGNvbnRleHQpIHtcbiAgICBjb250ZXh0ID0gY29udGV4dCA9PSBudWxsID8gcm9vdCA6IF8uZGVmYXVsdHMocm9vdC5PYmplY3QoKSwgY29udGV4dCwgXy5waWNrKHJvb3QsIGNvbnRleHRQcm9wcykpO1xuXG4gICAgLyoqIEJ1aWx0LWluIGNvbnN0cnVjdG9yIHJlZmVyZW5jZXMuICovXG4gICAgdmFyIEFycmF5ID0gY29udGV4dC5BcnJheSxcbiAgICAgICAgRGF0ZSA9IGNvbnRleHQuRGF0ZSxcbiAgICAgICAgRXJyb3IgPSBjb250ZXh0LkVycm9yLFxuICAgICAgICBGdW5jdGlvbiA9IGNvbnRleHQuRnVuY3Rpb24sXG4gICAgICAgIE1hdGggPSBjb250ZXh0Lk1hdGgsXG4gICAgICAgIE9iamVjdCA9IGNvbnRleHQuT2JqZWN0LFxuICAgICAgICBSZWdFeHAgPSBjb250ZXh0LlJlZ0V4cCxcbiAgICAgICAgU3RyaW5nID0gY29udGV4dC5TdHJpbmcsXG4gICAgICAgIFR5cGVFcnJvciA9IGNvbnRleHQuVHlwZUVycm9yO1xuXG4gICAgLyoqIFVzZWQgZm9yIGJ1aWx0LWluIG1ldGhvZCByZWZlcmVuY2VzLiAqL1xuICAgIHZhciBhcnJheVByb3RvID0gQXJyYXkucHJvdG90eXBlLFxuICAgICAgICBmdW5jUHJvdG8gPSBGdW5jdGlvbi5wcm90b3R5cGUsXG4gICAgICAgIG9iamVjdFByb3RvID0gT2JqZWN0LnByb3RvdHlwZTtcblxuICAgIC8qKiBVc2VkIHRvIGRldGVjdCBvdmVycmVhY2hpbmcgY29yZS1qcyBzaGltcy4gKi9cbiAgICB2YXIgY29yZUpzRGF0YSA9IGNvbnRleHRbJ19fY29yZS1qc19zaGFyZWRfXyddO1xuXG4gICAgLyoqIFVzZWQgdG8gcmVzb2x2ZSB0aGUgZGVjb21waWxlZCBzb3VyY2Ugb2YgZnVuY3Rpb25zLiAqL1xuICAgIHZhciBmdW5jVG9TdHJpbmcgPSBmdW5jUHJvdG8udG9TdHJpbmc7XG5cbiAgICAvKiogVXNlZCB0byBjaGVjayBvYmplY3RzIGZvciBvd24gcHJvcGVydGllcy4gKi9cbiAgICB2YXIgaGFzT3duUHJvcGVydHkgPSBvYmplY3RQcm90by5oYXNPd25Qcm9wZXJ0eTtcblxuICAgIC8qKiBVc2VkIHRvIGdlbmVyYXRlIHVuaXF1ZSBJRHMuICovXG4gICAgdmFyIGlkQ291bnRlciA9IDA7XG5cbiAgICAvKiogVXNlZCB0byBkZXRlY3QgbWV0aG9kcyBtYXNxdWVyYWRpbmcgYXMgbmF0aXZlLiAqL1xuICAgIHZhciBtYXNrU3JjS2V5ID0gKGZ1bmN0aW9uKCkge1xuICAgICAgdmFyIHVpZCA9IC9bXi5dKyQvLmV4ZWMoY29yZUpzRGF0YSAmJiBjb3JlSnNEYXRhLmtleXMgJiYgY29yZUpzRGF0YS5rZXlzLklFX1BST1RPIHx8ICcnKTtcbiAgICAgIHJldHVybiB1aWQgPyAoJ1N5bWJvbChzcmMpXzEuJyArIHVpZCkgOiAnJztcbiAgICB9KCkpO1xuXG4gICAgLyoqXG4gICAgICogVXNlZCB0byByZXNvbHZlIHRoZVxuICAgICAqIFtgdG9TdHJpbmdUYWdgXShodHRwOi8vZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi83LjAvI3NlYy1vYmplY3QucHJvdG90eXBlLnRvc3RyaW5nKVxuICAgICAqIG9mIHZhbHVlcy5cbiAgICAgKi9cbiAgICB2YXIgbmF0aXZlT2JqZWN0VG9TdHJpbmcgPSBvYmplY3RQcm90by50b1N0cmluZztcblxuICAgIC8qKiBVc2VkIHRvIGluZmVyIHRoZSBgT2JqZWN0YCBjb25zdHJ1Y3Rvci4gKi9cbiAgICB2YXIgb2JqZWN0Q3RvclN0cmluZyA9IGZ1bmNUb1N0cmluZy5jYWxsKE9iamVjdCk7XG5cbiAgICAvKiogVXNlZCB0byByZXN0b3JlIHRoZSBvcmlnaW5hbCBgX2AgcmVmZXJlbmNlIGluIGBfLm5vQ29uZmxpY3RgLiAqL1xuICAgIHZhciBvbGREYXNoID0gcm9vdC5fO1xuXG4gICAgLyoqIFVzZWQgdG8gZGV0ZWN0IGlmIGEgbWV0aG9kIGlzIG5hdGl2ZS4gKi9cbiAgICB2YXIgcmVJc05hdGl2ZSA9IFJlZ0V4cCgnXicgK1xuICAgICAgZnVuY1RvU3RyaW5nLmNhbGwoaGFzT3duUHJvcGVydHkpLnJlcGxhY2UocmVSZWdFeHBDaGFyLCAnXFxcXCQmJylcbiAgICAgIC5yZXBsYWNlKC9oYXNPd25Qcm9wZXJ0eXwoZnVuY3Rpb24pLio/KD89XFxcXFxcKCl8IGZvciAuKz8oPz1cXFxcXFxdKS9nLCAnJDEuKj8nKSArICckJ1xuICAgICk7XG5cbiAgICAvKiogQnVpbHQtaW4gdmFsdWUgcmVmZXJlbmNlcy4gKi9cbiAgICB2YXIgQnVmZmVyID0gbW9kdWxlRXhwb3J0cyA/IGNvbnRleHQuQnVmZmVyIDogdW5kZWZpbmVkLFxuICAgICAgICBTeW1ib2wgPSBjb250ZXh0LlN5bWJvbCxcbiAgICAgICAgVWludDhBcnJheSA9IGNvbnRleHQuVWludDhBcnJheSxcbiAgICAgICAgYWxsb2NVbnNhZmUgPSBCdWZmZXIgPyBCdWZmZXIuYWxsb2NVbnNhZmUgOiB1bmRlZmluZWQsXG4gICAgICAgIGdldFByb3RvdHlwZSA9IG92ZXJBcmcoT2JqZWN0LmdldFByb3RvdHlwZU9mLCBPYmplY3QpLFxuICAgICAgICBvYmplY3RDcmVhdGUgPSBPYmplY3QuY3JlYXRlLFxuICAgICAgICBwcm9wZXJ0eUlzRW51bWVyYWJsZSA9IG9iamVjdFByb3RvLnByb3BlcnR5SXNFbnVtZXJhYmxlLFxuICAgICAgICBzcGxpY2UgPSBhcnJheVByb3RvLnNwbGljZSxcbiAgICAgICAgc3ByZWFkYWJsZVN5bWJvbCA9IFN5bWJvbCA/IFN5bWJvbC5pc0NvbmNhdFNwcmVhZGFibGUgOiB1bmRlZmluZWQsXG4gICAgICAgIHN5bUl0ZXJhdG9yID0gU3ltYm9sID8gU3ltYm9sLml0ZXJhdG9yIDogdW5kZWZpbmVkLFxuICAgICAgICBzeW1Ub1N0cmluZ1RhZyA9IFN5bWJvbCA/IFN5bWJvbC50b1N0cmluZ1RhZyA6IHVuZGVmaW5lZDtcblxuICAgIHZhciBkZWZpbmVQcm9wZXJ0eSA9IChmdW5jdGlvbigpIHtcbiAgICAgIHRyeSB7XG4gICAgICAgIHZhciBmdW5jID0gZ2V0TmF0aXZlKE9iamVjdCwgJ2RlZmluZVByb3BlcnR5Jyk7XG4gICAgICAgIGZ1bmMoe30sICcnLCB7fSk7XG4gICAgICAgIHJldHVybiBmdW5jO1xuICAgICAgfSBjYXRjaCAoZSkge31cbiAgICB9KCkpO1xuXG4gICAgLyoqIE1vY2tlZCBidWlsdC1pbnMuICovXG4gICAgdmFyIGN0eENsZWFyVGltZW91dCA9IGNvbnRleHQuY2xlYXJUaW1lb3V0ICE9PSByb290LmNsZWFyVGltZW91dCAmJiBjb250ZXh0LmNsZWFyVGltZW91dCxcbiAgICAgICAgY3R4Tm93ID0gRGF0ZSAmJiBEYXRlLm5vdyAhPT0gcm9vdC5EYXRlLm5vdyAmJiBEYXRlLm5vdyxcbiAgICAgICAgY3R4U2V0VGltZW91dCA9IGNvbnRleHQuc2V0VGltZW91dCAhPT0gcm9vdC5zZXRUaW1lb3V0ICYmIGNvbnRleHQuc2V0VGltZW91dDtcblxuICAgIC8qIEJ1aWx0LWluIG1ldGhvZCByZWZlcmVuY2VzIGZvciB0aG9zZSB3aXRoIHRoZSBzYW1lIG5hbWUgYXMgb3RoZXIgYGxvZGFzaGAgbWV0aG9kcy4gKi9cbiAgICB2YXIgbmF0aXZlQ2VpbCA9IE1hdGguY2VpbCxcbiAgICAgICAgbmF0aXZlRmxvb3IgPSBNYXRoLmZsb29yLFxuICAgICAgICBuYXRpdmVHZXRTeW1ib2xzID0gT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyxcbiAgICAgICAgbmF0aXZlSXNCdWZmZXIgPSBCdWZmZXIgPyBCdWZmZXIuaXNCdWZmZXIgOiB1bmRlZmluZWQsXG4gICAgICAgIG5hdGl2ZUlzRmluaXRlID0gY29udGV4dC5pc0Zpbml0ZSxcbiAgICAgICAgbmF0aXZlSm9pbiA9IGFycmF5UHJvdG8uam9pbixcbiAgICAgICAgbmF0aXZlS2V5cyA9IG92ZXJBcmcoT2JqZWN0LmtleXMsIE9iamVjdCksXG4gICAgICAgIG5hdGl2ZU1heCA9IE1hdGgubWF4LFxuICAgICAgICBuYXRpdmVNaW4gPSBNYXRoLm1pbixcbiAgICAgICAgbmF0aXZlTm93ID0gRGF0ZS5ub3csXG4gICAgICAgIG5hdGl2ZVBhcnNlSW50ID0gY29udGV4dC5wYXJzZUludCxcbiAgICAgICAgbmF0aXZlUmFuZG9tID0gTWF0aC5yYW5kb20sXG4gICAgICAgIG5hdGl2ZVJldmVyc2UgPSBhcnJheVByb3RvLnJldmVyc2U7XG5cbiAgICAvKiBCdWlsdC1pbiBtZXRob2QgcmVmZXJlbmNlcyB0aGF0IGFyZSB2ZXJpZmllZCB0byBiZSBuYXRpdmUuICovXG4gICAgdmFyIERhdGFWaWV3ID0gZ2V0TmF0aXZlKGNvbnRleHQsICdEYXRhVmlldycpLFxuICAgICAgICBNYXAgPSBnZXROYXRpdmUoY29udGV4dCwgJ01hcCcpLFxuICAgICAgICBQcm9taXNlID0gZ2V0TmF0aXZlKGNvbnRleHQsICdQcm9taXNlJyksXG4gICAgICAgIFNldCA9IGdldE5hdGl2ZShjb250ZXh0LCAnU2V0JyksXG4gICAgICAgIFdlYWtNYXAgPSBnZXROYXRpdmUoY29udGV4dCwgJ1dlYWtNYXAnKSxcbiAgICAgICAgbmF0aXZlQ3JlYXRlID0gZ2V0TmF0aXZlKE9iamVjdCwgJ2NyZWF0ZScpO1xuXG4gICAgLyoqIFVzZWQgdG8gc3RvcmUgZnVuY3Rpb24gbWV0YWRhdGEuICovXG4gICAgdmFyIG1ldGFNYXAgPSBXZWFrTWFwICYmIG5ldyBXZWFrTWFwO1xuXG4gICAgLyoqIFVzZWQgdG8gbG9va3VwIHVubWluaWZpZWQgZnVuY3Rpb24gbmFtZXMuICovXG4gICAgdmFyIHJlYWxOYW1lcyA9IHt9O1xuXG4gICAgLyoqIFVzZWQgdG8gZGV0ZWN0IG1hcHMsIHNldHMsIGFuZCB3ZWFrbWFwcy4gKi9cbiAgICB2YXIgZGF0YVZpZXdDdG9yU3RyaW5nID0gdG9Tb3VyY2UoRGF0YVZpZXcpLFxuICAgICAgICBtYXBDdG9yU3RyaW5nID0gdG9Tb3VyY2UoTWFwKSxcbiAgICAgICAgcHJvbWlzZUN0b3JTdHJpbmcgPSB0b1NvdXJjZShQcm9taXNlKSxcbiAgICAgICAgc2V0Q3RvclN0cmluZyA9IHRvU291cmNlKFNldCksXG4gICAgICAgIHdlYWtNYXBDdG9yU3RyaW5nID0gdG9Tb3VyY2UoV2Vha01hcCk7XG5cbiAgICAvKiogVXNlZCB0byBjb252ZXJ0IHN5bWJvbHMgdG8gcHJpbWl0aXZlcyBhbmQgc3RyaW5ncy4gKi9cbiAgICB2YXIgc3ltYm9sUHJvdG8gPSBTeW1ib2wgPyBTeW1ib2wucHJvdG90eXBlIDogdW5kZWZpbmVkLFxuICAgICAgICBzeW1ib2xWYWx1ZU9mID0gc3ltYm9sUHJvdG8gPyBzeW1ib2xQcm90by52YWx1ZU9mIDogdW5kZWZpbmVkLFxuICAgICAgICBzeW1ib2xUb1N0cmluZyA9IHN5bWJvbFByb3RvID8gc3ltYm9sUHJvdG8udG9TdHJpbmcgOiB1bmRlZmluZWQ7XG5cbiAgICAvKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSovXG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgYGxvZGFzaGAgb2JqZWN0IHdoaWNoIHdyYXBzIGB2YWx1ZWAgdG8gZW5hYmxlIGltcGxpY2l0IG1ldGhvZFxuICAgICAqIGNoYWluIHNlcXVlbmNlcy4gTWV0aG9kcyB0aGF0IG9wZXJhdGUgb24gYW5kIHJldHVybiBhcnJheXMsIGNvbGxlY3Rpb25zLFxuICAgICAqIGFuZCBmdW5jdGlvbnMgY2FuIGJlIGNoYWluZWQgdG9nZXRoZXIuIE1ldGhvZHMgdGhhdCByZXRyaWV2ZSBhIHNpbmdsZSB2YWx1ZVxuICAgICAqIG9yIG1heSByZXR1cm4gYSBwcmltaXRpdmUgdmFsdWUgd2lsbCBhdXRvbWF0aWNhbGx5IGVuZCB0aGUgY2hhaW4gc2VxdWVuY2VcbiAgICAgKiBhbmQgcmV0dXJuIHRoZSB1bndyYXBwZWQgdmFsdWUuIE90aGVyd2lzZSwgdGhlIHZhbHVlIG11c3QgYmUgdW53cmFwcGVkXG4gICAgICogd2l0aCBgXyN2YWx1ZWAuXG4gICAgICpcbiAgICAgKiBFeHBsaWNpdCBjaGFpbiBzZXF1ZW5jZXMsIHdoaWNoIG11c3QgYmUgdW53cmFwcGVkIHdpdGggYF8jdmFsdWVgLCBtYXkgYmVcbiAgICAgKiBlbmFibGVkIHVzaW5nIGBfLmNoYWluYC5cbiAgICAgKlxuICAgICAqIFRoZSBleGVjdXRpb24gb2YgY2hhaW5lZCBtZXRob2RzIGlzIGxhenksIHRoYXQgaXMsIGl0J3MgZGVmZXJyZWQgdW50aWxcbiAgICAgKiBgXyN2YWx1ZWAgaXMgaW1wbGljaXRseSBvciBleHBsaWNpdGx5IGNhbGxlZC5cbiAgICAgKlxuICAgICAqIExhenkgZXZhbHVhdGlvbiBhbGxvd3Mgc2V2ZXJhbCBtZXRob2RzIHRvIHN1cHBvcnQgc2hvcnRjdXQgZnVzaW9uLlxuICAgICAqIFNob3J0Y3V0IGZ1c2lvbiBpcyBhbiBvcHRpbWl6YXRpb24gdG8gbWVyZ2UgaXRlcmF0ZWUgY2FsbHM7IHRoaXMgYXZvaWRzXG4gICAgICogdGhlIGNyZWF0aW9uIG9mIGludGVybWVkaWF0ZSBhcnJheXMgYW5kIGNhbiBncmVhdGx5IHJlZHVjZSB0aGUgbnVtYmVyIG9mXG4gICAgICogaXRlcmF0ZWUgZXhlY3V0aW9ucy4gU2VjdGlvbnMgb2YgYSBjaGFpbiBzZXF1ZW5jZSBxdWFsaWZ5IGZvciBzaG9ydGN1dFxuICAgICAqIGZ1c2lvbiBpZiB0aGUgc2VjdGlvbiBpcyBhcHBsaWVkIHRvIGFuIGFycmF5IGFuZCBpdGVyYXRlZXMgYWNjZXB0IG9ubHlcbiAgICAgKiBvbmUgYXJndW1lbnQuIFRoZSBoZXVyaXN0aWMgZm9yIHdoZXRoZXIgYSBzZWN0aW9uIHF1YWxpZmllcyBmb3Igc2hvcnRjdXRcbiAgICAgKiBmdXNpb24gaXMgc3ViamVjdCB0byBjaGFuZ2UuXG4gICAgICpcbiAgICAgKiBDaGFpbmluZyBpcyBzdXBwb3J0ZWQgaW4gY3VzdG9tIGJ1aWxkcyBhcyBsb25nIGFzIHRoZSBgXyN2YWx1ZWAgbWV0aG9kIGlzXG4gICAgICogZGlyZWN0bHkgb3IgaW5kaXJlY3RseSBpbmNsdWRlZCBpbiB0aGUgYnVpbGQuXG4gICAgICpcbiAgICAgKiBJbiBhZGRpdGlvbiB0byBsb2Rhc2ggbWV0aG9kcywgd3JhcHBlcnMgaGF2ZSBgQXJyYXlgIGFuZCBgU3RyaW5nYCBtZXRob2RzLlxuICAgICAqXG4gICAgICogVGhlIHdyYXBwZXIgYEFycmF5YCBtZXRob2RzIGFyZTpcbiAgICAgKiBgY29uY2F0YCwgYGpvaW5gLCBgcG9wYCwgYHB1c2hgLCBgc2hpZnRgLCBgc29ydGAsIGBzcGxpY2VgLCBhbmQgYHVuc2hpZnRgXG4gICAgICpcbiAgICAgKiBUaGUgd3JhcHBlciBgU3RyaW5nYCBtZXRob2RzIGFyZTpcbiAgICAgKiBgcmVwbGFjZWAgYW5kIGBzcGxpdGBcbiAgICAgKlxuICAgICAqIFRoZSB3cmFwcGVyIG1ldGhvZHMgdGhhdCBzdXBwb3J0IHNob3J0Y3V0IGZ1c2lvbiBhcmU6XG4gICAgICogYGF0YCwgYGNvbXBhY3RgLCBgZHJvcGAsIGBkcm9wUmlnaHRgLCBgZHJvcFdoaWxlYCwgYGZpbHRlcmAsIGBmaW5kYCxcbiAgICAgKiBgZmluZExhc3RgLCBgaGVhZGAsIGBpbml0aWFsYCwgYGxhc3RgLCBgbWFwYCwgYHJlamVjdGAsIGByZXZlcnNlYCwgYHNsaWNlYCxcbiAgICAgKiBgdGFpbGAsIGB0YWtlYCwgYHRha2VSaWdodGAsIGB0YWtlUmlnaHRXaGlsZWAsIGB0YWtlV2hpbGVgLCBhbmQgYHRvQXJyYXlgXG4gICAgICpcbiAgICAgKiBUaGUgY2hhaW5hYmxlIHdyYXBwZXIgbWV0aG9kcyBhcmU6XG4gICAgICogYGFmdGVyYCwgYGFyeWAsIGBhc3NpZ25gLCBgYXNzaWduSW5gLCBgYXNzaWduSW5XaXRoYCwgYGFzc2lnbldpdGhgLCBgYXRgLFxuICAgICAqIGBiZWZvcmVgLCBgYmluZGAsIGBiaW5kQWxsYCwgYGJpbmRLZXlgLCBgY2FzdEFycmF5YCwgYGNoYWluYCwgYGNodW5rYCxcbiAgICAgKiBgY29tbWl0YCwgYGNvbXBhY3RgLCBgY29uY2F0YCwgYGNvbmZvcm1zYCwgYGNvbnN0YW50YCwgYGNvdW50QnlgLCBgY3JlYXRlYCxcbiAgICAgKiBgY3VycnlgLCBgZGVib3VuY2VgLCBgZGVmYXVsdHNgLCBgZGVmYXVsdHNEZWVwYCwgYGRlZmVyYCwgYGRlbGF5YCxcbiAgICAgKiBgZGlmZmVyZW5jZWAsIGBkaWZmZXJlbmNlQnlgLCBgZGlmZmVyZW5jZVdpdGhgLCBgZHJvcGAsIGBkcm9wUmlnaHRgLFxuICAgICAqIGBkcm9wUmlnaHRXaGlsZWAsIGBkcm9wV2hpbGVgLCBgZXh0ZW5kYCwgYGV4dGVuZFdpdGhgLCBgZmlsbGAsIGBmaWx0ZXJgLFxuICAgICAqIGBmbGF0TWFwYCwgYGZsYXRNYXBEZWVwYCwgYGZsYXRNYXBEZXB0aGAsIGBmbGF0dGVuYCwgYGZsYXR0ZW5EZWVwYCxcbiAgICAgKiBgZmxhdHRlbkRlcHRoYCwgYGZsaXBgLCBgZmxvd2AsIGBmbG93UmlnaHRgLCBgZnJvbVBhaXJzYCwgYGZ1bmN0aW9uc2AsXG4gICAgICogYGZ1bmN0aW9uc0luYCwgYGdyb3VwQnlgLCBgaW5pdGlhbGAsIGBpbnRlcnNlY3Rpb25gLCBgaW50ZXJzZWN0aW9uQnlgLFxuICAgICAqIGBpbnRlcnNlY3Rpb25XaXRoYCwgYGludmVydGAsIGBpbnZlcnRCeWAsIGBpbnZva2VNYXBgLCBgaXRlcmF0ZWVgLCBga2V5QnlgLFxuICAgICAqIGBrZXlzYCwgYGtleXNJbmAsIGBtYXBgLCBgbWFwS2V5c2AsIGBtYXBWYWx1ZXNgLCBgbWF0Y2hlc2AsIGBtYXRjaGVzUHJvcGVydHlgLFxuICAgICAqIGBtZW1vaXplYCwgYG1lcmdlYCwgYG1lcmdlV2l0aGAsIGBtZXRob2RgLCBgbWV0aG9kT2ZgLCBgbWl4aW5gLCBgbmVnYXRlYCxcbiAgICAgKiBgbnRoQXJnYCwgYG9taXRgLCBgb21pdEJ5YCwgYG9uY2VgLCBgb3JkZXJCeWAsIGBvdmVyYCwgYG92ZXJBcmdzYCxcbiAgICAgKiBgb3ZlckV2ZXJ5YCwgYG92ZXJTb21lYCwgYHBhcnRpYWxgLCBgcGFydGlhbFJpZ2h0YCwgYHBhcnRpdGlvbmAsIGBwaWNrYCxcbiAgICAgKiBgcGlja0J5YCwgYHBsYW50YCwgYHByb3BlcnR5YCwgYHByb3BlcnR5T2ZgLCBgcHVsbGAsIGBwdWxsQWxsYCwgYHB1bGxBbGxCeWAsXG4gICAgICogYHB1bGxBbGxXaXRoYCwgYHB1bGxBdGAsIGBwdXNoYCwgYHJhbmdlYCwgYHJhbmdlUmlnaHRgLCBgcmVhcmdgLCBgcmVqZWN0YCxcbiAgICAgKiBgcmVtb3ZlYCwgYHJlc3RgLCBgcmV2ZXJzZWAsIGBzYW1wbGVTaXplYCwgYHNldGAsIGBzZXRXaXRoYCwgYHNodWZmbGVgLFxuICAgICAqIGBzbGljZWAsIGBzb3J0YCwgYHNvcnRCeWAsIGBzcGxpY2VgLCBgc3ByZWFkYCwgYHRhaWxgLCBgdGFrZWAsIGB0YWtlUmlnaHRgLFxuICAgICAqIGB0YWtlUmlnaHRXaGlsZWAsIGB0YWtlV2hpbGVgLCBgdGFwYCwgYHRocm90dGxlYCwgYHRocnVgLCBgdG9BcnJheWAsXG4gICAgICogYHRvUGFpcnNgLCBgdG9QYWlyc0luYCwgYHRvUGF0aGAsIGB0b1BsYWluT2JqZWN0YCwgYHRyYW5zZm9ybWAsIGB1bmFyeWAsXG4gICAgICogYHVuaW9uYCwgYHVuaW9uQnlgLCBgdW5pb25XaXRoYCwgYHVuaXFgLCBgdW5pcUJ5YCwgYHVuaXFXaXRoYCwgYHVuc2V0YCxcbiAgICAgKiBgdW5zaGlmdGAsIGB1bnppcGAsIGB1bnppcFdpdGhgLCBgdXBkYXRlYCwgYHVwZGF0ZVdpdGhgLCBgdmFsdWVzYCxcbiAgICAgKiBgdmFsdWVzSW5gLCBgd2l0aG91dGAsIGB3cmFwYCwgYHhvcmAsIGB4b3JCeWAsIGB4b3JXaXRoYCwgYHppcGAsXG4gICAgICogYHppcE9iamVjdGAsIGB6aXBPYmplY3REZWVwYCwgYW5kIGB6aXBXaXRoYFxuICAgICAqXG4gICAgICogVGhlIHdyYXBwZXIgbWV0aG9kcyB0aGF0IGFyZSAqKm5vdCoqIGNoYWluYWJsZSBieSBkZWZhdWx0IGFyZTpcbiAgICAgKiBgYWRkYCwgYGF0dGVtcHRgLCBgY2FtZWxDYXNlYCwgYGNhcGl0YWxpemVgLCBgY2VpbGAsIGBjbGFtcGAsIGBjbG9uZWAsXG4gICAgICogYGNsb25lRGVlcGAsIGBjbG9uZURlZXBXaXRoYCwgYGNsb25lV2l0aGAsIGBjb25mb3Jtc1RvYCwgYGRlYnVycmAsXG4gICAgICogYGRlZmF1bHRUb2AsIGBkaXZpZGVgLCBgZWFjaGAsIGBlYWNoUmlnaHRgLCBgZW5kc1dpdGhgLCBgZXFgLCBgZXNjYXBlYCxcbiAgICAgKiBgZXNjYXBlUmVnRXhwYCwgYGV2ZXJ5YCwgYGZpbmRgLCBgZmluZEluZGV4YCwgYGZpbmRLZXlgLCBgZmluZExhc3RgLFxuICAgICAqIGBmaW5kTGFzdEluZGV4YCwgYGZpbmRMYXN0S2V5YCwgYGZpcnN0YCwgYGZsb29yYCwgYGZvckVhY2hgLCBgZm9yRWFjaFJpZ2h0YCxcbiAgICAgKiBgZm9ySW5gLCBgZm9ySW5SaWdodGAsIGBmb3JPd25gLCBgZm9yT3duUmlnaHRgLCBgZ2V0YCwgYGd0YCwgYGd0ZWAsIGBoYXNgLFxuICAgICAqIGBoYXNJbmAsIGBoZWFkYCwgYGlkZW50aXR5YCwgYGluY2x1ZGVzYCwgYGluZGV4T2ZgLCBgaW5SYW5nZWAsIGBpbnZva2VgLFxuICAgICAqIGBpc0FyZ3VtZW50c2AsIGBpc0FycmF5YCwgYGlzQXJyYXlCdWZmZXJgLCBgaXNBcnJheUxpa2VgLCBgaXNBcnJheUxpa2VPYmplY3RgLFxuICAgICAqIGBpc0Jvb2xlYW5gLCBgaXNCdWZmZXJgLCBgaXNEYXRlYCwgYGlzRWxlbWVudGAsIGBpc0VtcHR5YCwgYGlzRXF1YWxgLFxuICAgICAqIGBpc0VxdWFsV2l0aGAsIGBpc0Vycm9yYCwgYGlzRmluaXRlYCwgYGlzRnVuY3Rpb25gLCBgaXNJbnRlZ2VyYCwgYGlzTGVuZ3RoYCxcbiAgICAgKiBgaXNNYXBgLCBgaXNNYXRjaGAsIGBpc01hdGNoV2l0aGAsIGBpc05hTmAsIGBpc05hdGl2ZWAsIGBpc05pbGAsIGBpc051bGxgLFxuICAgICAqIGBpc051bWJlcmAsIGBpc09iamVjdGAsIGBpc09iamVjdExpa2VgLCBgaXNQbGFpbk9iamVjdGAsIGBpc1JlZ0V4cGAsXG4gICAgICogYGlzU2FmZUludGVnZXJgLCBgaXNTZXRgLCBgaXNTdHJpbmdgLCBgaXNVbmRlZmluZWRgLCBgaXNUeXBlZEFycmF5YCxcbiAgICAgKiBgaXNXZWFrTWFwYCwgYGlzV2Vha1NldGAsIGBqb2luYCwgYGtlYmFiQ2FzZWAsIGBsYXN0YCwgYGxhc3RJbmRleE9mYCxcbiAgICAgKiBgbG93ZXJDYXNlYCwgYGxvd2VyRmlyc3RgLCBgbHRgLCBgbHRlYCwgYG1heGAsIGBtYXhCeWAsIGBtZWFuYCwgYG1lYW5CeWAsXG4gICAgICogYG1pbmAsIGBtaW5CeWAsIGBtdWx0aXBseWAsIGBub0NvbmZsaWN0YCwgYG5vb3BgLCBgbm93YCwgYG50aGAsIGBwYWRgLFxuICAgICAqIGBwYWRFbmRgLCBgcGFkU3RhcnRgLCBgcGFyc2VJbnRgLCBgcG9wYCwgYHJhbmRvbWAsIGByZWR1Y2VgLCBgcmVkdWNlUmlnaHRgLFxuICAgICAqIGByZXBlYXRgLCBgcmVzdWx0YCwgYHJvdW5kYCwgYHJ1bkluQ29udGV4dGAsIGBzYW1wbGVgLCBgc2hpZnRgLCBgc2l6ZWAsXG4gICAgICogYHNuYWtlQ2FzZWAsIGBzb21lYCwgYHNvcnRlZEluZGV4YCwgYHNvcnRlZEluZGV4QnlgLCBgc29ydGVkTGFzdEluZGV4YCxcbiAgICAgKiBgc29ydGVkTGFzdEluZGV4QnlgLCBgc3RhcnRDYXNlYCwgYHN0YXJ0c1dpdGhgLCBgc3R1YkFycmF5YCwgYHN0dWJGYWxzZWAsXG4gICAgICogYHN0dWJPYmplY3RgLCBgc3R1YlN0cmluZ2AsIGBzdHViVHJ1ZWAsIGBzdWJ0cmFjdGAsIGBzdW1gLCBgc3VtQnlgLFxuICAgICAqIGB0ZW1wbGF0ZWAsIGB0aW1lc2AsIGB0b0Zpbml0ZWAsIGB0b0ludGVnZXJgLCBgdG9KU09OYCwgYHRvTGVuZ3RoYCxcbiAgICAgKiBgdG9Mb3dlcmAsIGB0b051bWJlcmAsIGB0b1NhZmVJbnRlZ2VyYCwgYHRvU3RyaW5nYCwgYHRvVXBwZXJgLCBgdHJpbWAsXG4gICAgICogYHRyaW1FbmRgLCBgdHJpbVN0YXJ0YCwgYHRydW5jYXRlYCwgYHVuZXNjYXBlYCwgYHVuaXF1ZUlkYCwgYHVwcGVyQ2FzZWAsXG4gICAgICogYHVwcGVyRmlyc3RgLCBgdmFsdWVgLCBhbmQgYHdvcmRzYFxuICAgICAqXG4gICAgICogQG5hbWUgX1xuICAgICAqIEBjb25zdHJ1Y3RvclxuICAgICAqIEBjYXRlZ29yeSBTZXFcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byB3cmFwIGluIGEgYGxvZGFzaGAgaW5zdGFuY2UuXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyB0aGUgbmV3IGBsb2Rhc2hgIHdyYXBwZXIgaW5zdGFuY2UuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIGZ1bmN0aW9uIHNxdWFyZShuKSB7XG4gICAgICogICByZXR1cm4gbiAqIG47XG4gICAgICogfVxuICAgICAqXG4gICAgICogdmFyIHdyYXBwZWQgPSBfKFsxLCAyLCAzXSk7XG4gICAgICpcbiAgICAgKiAvLyBSZXR1cm5zIGFuIHVud3JhcHBlZCB2YWx1ZS5cbiAgICAgKiB3cmFwcGVkLnJlZHVjZShfLmFkZCk7XG4gICAgICogLy8gPT4gNlxuICAgICAqXG4gICAgICogLy8gUmV0dXJucyBhIHdyYXBwZWQgdmFsdWUuXG4gICAgICogdmFyIHNxdWFyZXMgPSB3cmFwcGVkLm1hcChzcXVhcmUpO1xuICAgICAqXG4gICAgICogXy5pc0FycmF5KHNxdWFyZXMpO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICpcbiAgICAgKiBfLmlzQXJyYXkoc3F1YXJlcy52YWx1ZSgpKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICovXG4gICAgZnVuY3Rpb24gbG9kYXNoKHZhbHVlKSB7XG4gICAgICBpZiAoaXNPYmplY3RMaWtlKHZhbHVlKSAmJiAhaXNBcnJheSh2YWx1ZSkgJiYgISh2YWx1ZSBpbnN0YW5jZW9mIExhenlXcmFwcGVyKSkge1xuICAgICAgICBpZiAodmFsdWUgaW5zdGFuY2VvZiBMb2Rhc2hXcmFwcGVyKSB7XG4gICAgICAgICAgcmV0dXJuIHZhbHVlO1xuICAgICAgICB9XG4gICAgICAgIGlmIChoYXNPd25Qcm9wZXJ0eS5jYWxsKHZhbHVlLCAnX193cmFwcGVkX18nKSkge1xuICAgICAgICAgIHJldHVybiB3cmFwcGVyQ2xvbmUodmFsdWUpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gbmV3IExvZGFzaFdyYXBwZXIodmFsdWUpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLmNyZWF0ZWAgd2l0aG91dCBzdXBwb3J0IGZvciBhc3NpZ25pbmdcbiAgICAgKiBwcm9wZXJ0aWVzIHRvIHRoZSBjcmVhdGVkIG9iamVjdC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtPYmplY3R9IHByb3RvIFRoZSBvYmplY3QgdG8gaW5oZXJpdCBmcm9tLlxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgdGhlIG5ldyBvYmplY3QuXG4gICAgICovXG4gICAgdmFyIGJhc2VDcmVhdGUgPSAoZnVuY3Rpb24oKSB7XG4gICAgICBmdW5jdGlvbiBvYmplY3QoKSB7fVxuICAgICAgcmV0dXJuIGZ1bmN0aW9uKHByb3RvKSB7XG4gICAgICAgIGlmICghaXNPYmplY3QocHJvdG8pKSB7XG4gICAgICAgICAgcmV0dXJuIHt9O1xuICAgICAgICB9XG4gICAgICAgIGlmIChvYmplY3RDcmVhdGUpIHtcbiAgICAgICAgICByZXR1cm4gb2JqZWN0Q3JlYXRlKHByb3RvKTtcbiAgICAgICAgfVxuICAgICAgICBvYmplY3QucHJvdG90eXBlID0gcHJvdG87XG4gICAgICAgIHZhciByZXN1bHQgPSBuZXcgb2JqZWN0O1xuICAgICAgICBvYmplY3QucHJvdG90eXBlID0gdW5kZWZpbmVkO1xuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgICAgfTtcbiAgICB9KCkpO1xuXG4gICAgLyoqXG4gICAgICogVGhlIGZ1bmN0aW9uIHdob3NlIHByb3RvdHlwZSBjaGFpbiBzZXF1ZW5jZSB3cmFwcGVycyBpbmhlcml0IGZyb20uXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VMb2Rhc2goKSB7XG4gICAgICAvLyBObyBvcGVyYXRpb24gcGVyZm9ybWVkLlxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGNvbnN0cnVjdG9yIGZvciBjcmVhdGluZyBgbG9kYXNoYCB3cmFwcGVyIG9iamVjdHMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIHdyYXAuXG4gICAgICogQHBhcmFtIHtib29sZWFufSBbY2hhaW5BbGxdIEVuYWJsZSBleHBsaWNpdCBtZXRob2QgY2hhaW4gc2VxdWVuY2VzLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIExvZGFzaFdyYXBwZXIodmFsdWUsIGNoYWluQWxsKSB7XG4gICAgICB0aGlzLl9fd3JhcHBlZF9fID0gdmFsdWU7XG4gICAgICB0aGlzLl9fYWN0aW9uc19fID0gW107XG4gICAgICB0aGlzLl9fY2hhaW5fXyA9ICEhY2hhaW5BbGw7XG4gICAgICB0aGlzLl9faW5kZXhfXyA9IDA7XG4gICAgICB0aGlzLl9fdmFsdWVzX18gPSB1bmRlZmluZWQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQnkgZGVmYXVsdCwgdGhlIHRlbXBsYXRlIGRlbGltaXRlcnMgdXNlZCBieSBsb2Rhc2ggYXJlIGxpa2UgdGhvc2UgaW5cbiAgICAgKiBlbWJlZGRlZCBSdWJ5IChFUkIpIGFzIHdlbGwgYXMgRVMyMDE1IHRlbXBsYXRlIHN0cmluZ3MuIENoYW5nZSB0aGVcbiAgICAgKiBmb2xsb3dpbmcgdGVtcGxhdGUgc2V0dGluZ3MgdG8gdXNlIGFsdGVybmF0aXZlIGRlbGltaXRlcnMuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAdHlwZSB7T2JqZWN0fVxuICAgICAqL1xuICAgIGxvZGFzaC50ZW1wbGF0ZVNldHRpbmdzID0ge1xuXG4gICAgICAvKipcbiAgICAgICAqIFVzZWQgdG8gZGV0ZWN0IGBkYXRhYCBwcm9wZXJ0eSB2YWx1ZXMgdG8gYmUgSFRNTC1lc2NhcGVkLlxuICAgICAgICpcbiAgICAgICAqIEBtZW1iZXJPZiBfLnRlbXBsYXRlU2V0dGluZ3NcbiAgICAgICAqIEB0eXBlIHtSZWdFeHB9XG4gICAgICAgKi9cbiAgICAgICdlc2NhcGUnOiByZUVzY2FwZSxcblxuICAgICAgLyoqXG4gICAgICAgKiBVc2VkIHRvIGRldGVjdCBjb2RlIHRvIGJlIGV2YWx1YXRlZC5cbiAgICAgICAqXG4gICAgICAgKiBAbWVtYmVyT2YgXy50ZW1wbGF0ZVNldHRpbmdzXG4gICAgICAgKiBAdHlwZSB7UmVnRXhwfVxuICAgICAgICovXG4gICAgICAnZXZhbHVhdGUnOiByZUV2YWx1YXRlLFxuXG4gICAgICAvKipcbiAgICAgICAqIFVzZWQgdG8gZGV0ZWN0IGBkYXRhYCBwcm9wZXJ0eSB2YWx1ZXMgdG8gaW5qZWN0LlxuICAgICAgICpcbiAgICAgICAqIEBtZW1iZXJPZiBfLnRlbXBsYXRlU2V0dGluZ3NcbiAgICAgICAqIEB0eXBlIHtSZWdFeHB9XG4gICAgICAgKi9cbiAgICAgICdpbnRlcnBvbGF0ZSc6IHJlSW50ZXJwb2xhdGUsXG5cbiAgICAgIC8qKlxuICAgICAgICogVXNlZCB0byByZWZlcmVuY2UgdGhlIGRhdGEgb2JqZWN0IGluIHRoZSB0ZW1wbGF0ZSB0ZXh0LlxuICAgICAgICpcbiAgICAgICAqIEBtZW1iZXJPZiBfLnRlbXBsYXRlU2V0dGluZ3NcbiAgICAgICAqIEB0eXBlIHtzdHJpbmd9XG4gICAgICAgKi9cbiAgICAgICd2YXJpYWJsZSc6ICcnLFxuXG4gICAgICAvKipcbiAgICAgICAqIFVzZWQgdG8gaW1wb3J0IHZhcmlhYmxlcyBpbnRvIHRoZSBjb21waWxlZCB0ZW1wbGF0ZS5cbiAgICAgICAqXG4gICAgICAgKiBAbWVtYmVyT2YgXy50ZW1wbGF0ZVNldHRpbmdzXG4gICAgICAgKiBAdHlwZSB7T2JqZWN0fVxuICAgICAgICovXG4gICAgICAnaW1wb3J0cyc6IHtcblxuICAgICAgICAvKipcbiAgICAgICAgICogQSByZWZlcmVuY2UgdG8gdGhlIGBsb2Rhc2hgIGZ1bmN0aW9uLlxuICAgICAgICAgKlxuICAgICAgICAgKiBAbWVtYmVyT2YgXy50ZW1wbGF0ZVNldHRpbmdzLmltcG9ydHNcbiAgICAgICAgICogQHR5cGUge0Z1bmN0aW9ufVxuICAgICAgICAgKi9cbiAgICAgICAgJ18nOiBsb2Rhc2hcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgLy8gRW5zdXJlIHdyYXBwZXJzIGFyZSBpbnN0YW5jZXMgb2YgYGJhc2VMb2Rhc2hgLlxuICAgIGxvZGFzaC5wcm90b3R5cGUgPSBiYXNlTG9kYXNoLnByb3RvdHlwZTtcbiAgICBsb2Rhc2gucHJvdG90eXBlLmNvbnN0cnVjdG9yID0gbG9kYXNoO1xuXG4gICAgTG9kYXNoV3JhcHBlci5wcm90b3R5cGUgPSBiYXNlQ3JlYXRlKGJhc2VMb2Rhc2gucHJvdG90eXBlKTtcbiAgICBMb2Rhc2hXcmFwcGVyLnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IExvZGFzaFdyYXBwZXI7XG5cbiAgICAvKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSovXG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgbGF6eSB3cmFwcGVyIG9iamVjdCB3aGljaCB3cmFwcyBgdmFsdWVgIHRvIGVuYWJsZSBsYXp5IGV2YWx1YXRpb24uXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBjb25zdHJ1Y3RvclxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIHdyYXAuXG4gICAgICovXG4gICAgZnVuY3Rpb24gTGF6eVdyYXBwZXIodmFsdWUpIHtcbiAgICAgIHRoaXMuX193cmFwcGVkX18gPSB2YWx1ZTtcbiAgICAgIHRoaXMuX19hY3Rpb25zX18gPSBbXTtcbiAgICAgIHRoaXMuX19kaXJfXyA9IDE7XG4gICAgICB0aGlzLl9fZmlsdGVyZWRfXyA9IGZhbHNlO1xuICAgICAgdGhpcy5fX2l0ZXJhdGVlc19fID0gW107XG4gICAgICB0aGlzLl9fdGFrZUNvdW50X18gPSBNQVhfQVJSQVlfTEVOR1RIO1xuICAgICAgdGhpcy5fX3ZpZXdzX18gPSBbXTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgY2xvbmUgb2YgdGhlIGxhenkgd3JhcHBlciBvYmplY3QuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBuYW1lIGNsb25lXG4gICAgICogQG1lbWJlck9mIExhenlXcmFwcGVyXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyB0aGUgY2xvbmVkIGBMYXp5V3JhcHBlcmAgb2JqZWN0LlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGxhenlDbG9uZSgpIHtcbiAgICAgIHZhciByZXN1bHQgPSBuZXcgTGF6eVdyYXBwZXIodGhpcy5fX3dyYXBwZWRfXyk7XG4gICAgICByZXN1bHQuX19hY3Rpb25zX18gPSBjb3B5QXJyYXkodGhpcy5fX2FjdGlvbnNfXyk7XG4gICAgICByZXN1bHQuX19kaXJfXyA9IHRoaXMuX19kaXJfXztcbiAgICAgIHJlc3VsdC5fX2ZpbHRlcmVkX18gPSB0aGlzLl9fZmlsdGVyZWRfXztcbiAgICAgIHJlc3VsdC5fX2l0ZXJhdGVlc19fID0gY29weUFycmF5KHRoaXMuX19pdGVyYXRlZXNfXyk7XG4gICAgICByZXN1bHQuX190YWtlQ291bnRfXyA9IHRoaXMuX190YWtlQ291bnRfXztcbiAgICAgIHJlc3VsdC5fX3ZpZXdzX18gPSBjb3B5QXJyYXkodGhpcy5fX3ZpZXdzX18pO1xuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBSZXZlcnNlcyB0aGUgZGlyZWN0aW9uIG9mIGxhenkgaXRlcmF0aW9uLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAbmFtZSByZXZlcnNlXG4gICAgICogQG1lbWJlck9mIExhenlXcmFwcGVyXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyB0aGUgbmV3IHJldmVyc2VkIGBMYXp5V3JhcHBlcmAgb2JqZWN0LlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGxhenlSZXZlcnNlKCkge1xuICAgICAgaWYgKHRoaXMuX19maWx0ZXJlZF9fKSB7XG4gICAgICAgIHZhciByZXN1bHQgPSBuZXcgTGF6eVdyYXBwZXIodGhpcyk7XG4gICAgICAgIHJlc3VsdC5fX2Rpcl9fID0gLTE7XG4gICAgICAgIHJlc3VsdC5fX2ZpbHRlcmVkX18gPSB0cnVlO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmVzdWx0ID0gdGhpcy5jbG9uZSgpO1xuICAgICAgICByZXN1bHQuX19kaXJfXyAqPSAtMTtcbiAgICAgIH1cbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogRXh0cmFjdHMgdGhlIHVud3JhcHBlZCB2YWx1ZSBmcm9tIGl0cyBsYXp5IHdyYXBwZXIuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBuYW1lIHZhbHVlXG4gICAgICogQG1lbWJlck9mIExhenlXcmFwcGVyXG4gICAgICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIHVud3JhcHBlZCB2YWx1ZS5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBsYXp5VmFsdWUoKSB7XG4gICAgICB2YXIgYXJyYXkgPSB0aGlzLl9fd3JhcHBlZF9fLnZhbHVlKCksXG4gICAgICAgICAgZGlyID0gdGhpcy5fX2Rpcl9fLFxuICAgICAgICAgIGlzQXJyID0gaXNBcnJheShhcnJheSksXG4gICAgICAgICAgaXNSaWdodCA9IGRpciA8IDAsXG4gICAgICAgICAgYXJyTGVuZ3RoID0gaXNBcnIgPyBhcnJheS5sZW5ndGggOiAwLFxuICAgICAgICAgIHZpZXcgPSBnZXRWaWV3KDAsIGFyckxlbmd0aCwgdGhpcy5fX3ZpZXdzX18pLFxuICAgICAgICAgIHN0YXJ0ID0gdmlldy5zdGFydCxcbiAgICAgICAgICBlbmQgPSB2aWV3LmVuZCxcbiAgICAgICAgICBsZW5ndGggPSBlbmQgLSBzdGFydCxcbiAgICAgICAgICBpbmRleCA9IGlzUmlnaHQgPyBlbmQgOiAoc3RhcnQgLSAxKSxcbiAgICAgICAgICBpdGVyYXRlZXMgPSB0aGlzLl9faXRlcmF0ZWVzX18sXG4gICAgICAgICAgaXRlckxlbmd0aCA9IGl0ZXJhdGVlcy5sZW5ndGgsXG4gICAgICAgICAgcmVzSW5kZXggPSAwLFxuICAgICAgICAgIHRha2VDb3VudCA9IG5hdGl2ZU1pbihsZW5ndGgsIHRoaXMuX190YWtlQ291bnRfXyk7XG5cbiAgICAgIGlmICghaXNBcnIgfHwgKCFpc1JpZ2h0ICYmIGFyckxlbmd0aCA9PSBsZW5ndGggJiYgdGFrZUNvdW50ID09IGxlbmd0aCkpIHtcbiAgICAgICAgcmV0dXJuIGJhc2VXcmFwcGVyVmFsdWUoYXJyYXksIHRoaXMuX19hY3Rpb25zX18pO1xuICAgICAgfVxuICAgICAgdmFyIHJlc3VsdCA9IFtdO1xuXG4gICAgICBvdXRlcjpcbiAgICAgIHdoaWxlIChsZW5ndGgtLSAmJiByZXNJbmRleCA8IHRha2VDb3VudCkge1xuICAgICAgICBpbmRleCArPSBkaXI7XG5cbiAgICAgICAgdmFyIGl0ZXJJbmRleCA9IC0xLFxuICAgICAgICAgICAgdmFsdWUgPSBhcnJheVtpbmRleF07XG5cbiAgICAgICAgd2hpbGUgKCsraXRlckluZGV4IDwgaXRlckxlbmd0aCkge1xuICAgICAgICAgIHZhciBkYXRhID0gaXRlcmF0ZWVzW2l0ZXJJbmRleF0sXG4gICAgICAgICAgICAgIGl0ZXJhdGVlID0gZGF0YS5pdGVyYXRlZSxcbiAgICAgICAgICAgICAgdHlwZSA9IGRhdGEudHlwZSxcbiAgICAgICAgICAgICAgY29tcHV0ZWQgPSBpdGVyYXRlZSh2YWx1ZSk7XG5cbiAgICAgICAgICBpZiAodHlwZSA9PSBMQVpZX01BUF9GTEFHKSB7XG4gICAgICAgICAgICB2YWx1ZSA9IGNvbXB1dGVkO1xuICAgICAgICAgIH0gZWxzZSBpZiAoIWNvbXB1dGVkKSB7XG4gICAgICAgICAgICBpZiAodHlwZSA9PSBMQVpZX0ZJTFRFUl9GTEFHKSB7XG4gICAgICAgICAgICAgIGNvbnRpbnVlIG91dGVyO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgYnJlYWsgb3V0ZXI7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJlc3VsdFtyZXNJbmRleCsrXSA9IHZhbHVlO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG5cbiAgICAvLyBFbnN1cmUgYExhenlXcmFwcGVyYCBpcyBhbiBpbnN0YW5jZSBvZiBgYmFzZUxvZGFzaGAuXG4gICAgTGF6eVdyYXBwZXIucHJvdG90eXBlID0gYmFzZUNyZWF0ZShiYXNlTG9kYXNoLnByb3RvdHlwZSk7XG4gICAgTGF6eVdyYXBwZXIucHJvdG90eXBlLmNvbnN0cnVjdG9yID0gTGF6eVdyYXBwZXI7XG5cbiAgICAvKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSovXG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgaGFzaCBvYmplY3QuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBjb25zdHJ1Y3RvclxuICAgICAqIEBwYXJhbSB7QXJyYXl9IFtlbnRyaWVzXSBUaGUga2V5LXZhbHVlIHBhaXJzIHRvIGNhY2hlLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIEhhc2goZW50cmllcykge1xuICAgICAgdmFyIGluZGV4ID0gLTEsXG4gICAgICAgICAgbGVuZ3RoID0gZW50cmllcyA9PSBudWxsID8gMCA6IGVudHJpZXMubGVuZ3RoO1xuXG4gICAgICB0aGlzLmNsZWFyKCk7XG4gICAgICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgICAgICB2YXIgZW50cnkgPSBlbnRyaWVzW2luZGV4XTtcbiAgICAgICAgdGhpcy5zZXQoZW50cnlbMF0sIGVudHJ5WzFdKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBSZW1vdmVzIGFsbCBrZXktdmFsdWUgZW50cmllcyBmcm9tIHRoZSBoYXNoLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAbmFtZSBjbGVhclxuICAgICAqIEBtZW1iZXJPZiBIYXNoXG4gICAgICovXG4gICAgZnVuY3Rpb24gaGFzaENsZWFyKCkge1xuICAgICAgdGhpcy5fX2RhdGFfXyA9IG5hdGl2ZUNyZWF0ZSA/IG5hdGl2ZUNyZWF0ZShudWxsKSA6IHt9O1xuICAgICAgdGhpcy5zaXplID0gMDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBSZW1vdmVzIGBrZXlgIGFuZCBpdHMgdmFsdWUgZnJvbSB0aGUgaGFzaC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQG5hbWUgZGVsZXRlXG4gICAgICogQG1lbWJlck9mIEhhc2hcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gaGFzaCBUaGUgaGFzaCB0byBtb2RpZnkuXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSB2YWx1ZSB0byByZW1vdmUuXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIHRoZSBlbnRyeSB3YXMgcmVtb3ZlZCwgZWxzZSBgZmFsc2VgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGhhc2hEZWxldGUoa2V5KSB7XG4gICAgICB2YXIgcmVzdWx0ID0gdGhpcy5oYXMoa2V5KSAmJiBkZWxldGUgdGhpcy5fX2RhdGFfX1trZXldO1xuICAgICAgdGhpcy5zaXplIC09IHJlc3VsdCA/IDEgOiAwO1xuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBHZXRzIHRoZSBoYXNoIHZhbHVlIGZvciBga2V5YC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQG5hbWUgZ2V0XG4gICAgICogQG1lbWJlck9mIEhhc2hcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIHZhbHVlIHRvIGdldC5cbiAgICAgKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgZW50cnkgdmFsdWUuXG4gICAgICovXG4gICAgZnVuY3Rpb24gaGFzaEdldChrZXkpIHtcbiAgICAgIHZhciBkYXRhID0gdGhpcy5fX2RhdGFfXztcbiAgICAgIGlmIChuYXRpdmVDcmVhdGUpIHtcbiAgICAgICAgdmFyIHJlc3VsdCA9IGRhdGFba2V5XTtcbiAgICAgICAgcmV0dXJuIHJlc3VsdCA9PT0gSEFTSF9VTkRFRklORUQgPyB1bmRlZmluZWQgOiByZXN1bHQ7XG4gICAgICB9XG4gICAgICByZXR1cm4gaGFzT3duUHJvcGVydHkuY2FsbChkYXRhLCBrZXkpID8gZGF0YVtrZXldIDogdW5kZWZpbmVkO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENoZWNrcyBpZiBhIGhhc2ggdmFsdWUgZm9yIGBrZXlgIGV4aXN0cy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQG5hbWUgaGFzXG4gICAgICogQG1lbWJlck9mIEhhc2hcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIGVudHJ5IHRvIGNoZWNrLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBhbiBlbnRyeSBmb3IgYGtleWAgZXhpc3RzLCBlbHNlIGBmYWxzZWAuXG4gICAgICovXG4gICAgZnVuY3Rpb24gaGFzaEhhcyhrZXkpIHtcbiAgICAgIHZhciBkYXRhID0gdGhpcy5fX2RhdGFfXztcbiAgICAgIHJldHVybiBuYXRpdmVDcmVhdGUgPyAoZGF0YVtrZXldICE9PSB1bmRlZmluZWQpIDogaGFzT3duUHJvcGVydHkuY2FsbChkYXRhLCBrZXkpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFNldHMgdGhlIGhhc2ggYGtleWAgdG8gYHZhbHVlYC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQG5hbWUgc2V0XG4gICAgICogQG1lbWJlck9mIEhhc2hcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIHZhbHVlIHRvIHNldC5cbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBzZXQuXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyB0aGUgaGFzaCBpbnN0YW5jZS5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBoYXNoU2V0KGtleSwgdmFsdWUpIHtcbiAgICAgIHZhciBkYXRhID0gdGhpcy5fX2RhdGFfXztcbiAgICAgIHRoaXMuc2l6ZSArPSB0aGlzLmhhcyhrZXkpID8gMCA6IDE7XG4gICAgICBkYXRhW2tleV0gPSAobmF0aXZlQ3JlYXRlICYmIHZhbHVlID09PSB1bmRlZmluZWQpID8gSEFTSF9VTkRFRklORUQgOiB2YWx1ZTtcbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIC8vIEFkZCBtZXRob2RzIHRvIGBIYXNoYC5cbiAgICBIYXNoLnByb3RvdHlwZS5jbGVhciA9IGhhc2hDbGVhcjtcbiAgICBIYXNoLnByb3RvdHlwZVsnZGVsZXRlJ10gPSBoYXNoRGVsZXRlO1xuICAgIEhhc2gucHJvdG90eXBlLmdldCA9IGhhc2hHZXQ7XG4gICAgSGFzaC5wcm90b3R5cGUuaGFzID0gaGFzaEhhcztcbiAgICBIYXNoLnByb3RvdHlwZS5zZXQgPSBoYXNoU2V0O1xuXG4gICAgLyotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qL1xuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhbiBsaXN0IGNhY2hlIG9iamVjdC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQGNvbnN0cnVjdG9yXG4gICAgICogQHBhcmFtIHtBcnJheX0gW2VudHJpZXNdIFRoZSBrZXktdmFsdWUgcGFpcnMgdG8gY2FjaGUuXG4gICAgICovXG4gICAgZnVuY3Rpb24gTGlzdENhY2hlKGVudHJpZXMpIHtcbiAgICAgIHZhciBpbmRleCA9IC0xLFxuICAgICAgICAgIGxlbmd0aCA9IGVudHJpZXMgPT0gbnVsbCA/IDAgOiBlbnRyaWVzLmxlbmd0aDtcblxuICAgICAgdGhpcy5jbGVhcigpO1xuICAgICAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICAgICAgdmFyIGVudHJ5ID0gZW50cmllc1tpbmRleF07XG4gICAgICAgIHRoaXMuc2V0KGVudHJ5WzBdLCBlbnRyeVsxXSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUmVtb3ZlcyBhbGwga2V5LXZhbHVlIGVudHJpZXMgZnJvbSB0aGUgbGlzdCBjYWNoZS5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQG5hbWUgY2xlYXJcbiAgICAgKiBAbWVtYmVyT2YgTGlzdENhY2hlXG4gICAgICovXG4gICAgZnVuY3Rpb24gbGlzdENhY2hlQ2xlYXIoKSB7XG4gICAgICB0aGlzLl9fZGF0YV9fID0gW107XG4gICAgICB0aGlzLnNpemUgPSAwO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFJlbW92ZXMgYGtleWAgYW5kIGl0cyB2YWx1ZSBmcm9tIHRoZSBsaXN0IGNhY2hlLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAbmFtZSBkZWxldGVcbiAgICAgKiBAbWVtYmVyT2YgTGlzdENhY2hlXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSB2YWx1ZSB0byByZW1vdmUuXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIHRoZSBlbnRyeSB3YXMgcmVtb3ZlZCwgZWxzZSBgZmFsc2VgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGxpc3RDYWNoZURlbGV0ZShrZXkpIHtcbiAgICAgIHZhciBkYXRhID0gdGhpcy5fX2RhdGFfXyxcbiAgICAgICAgICBpbmRleCA9IGFzc29jSW5kZXhPZihkYXRhLCBrZXkpO1xuXG4gICAgICBpZiAoaW5kZXggPCAwKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cbiAgICAgIHZhciBsYXN0SW5kZXggPSBkYXRhLmxlbmd0aCAtIDE7XG4gICAgICBpZiAoaW5kZXggPT0gbGFzdEluZGV4KSB7XG4gICAgICAgIGRhdGEucG9wKCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBzcGxpY2UuY2FsbChkYXRhLCBpbmRleCwgMSk7XG4gICAgICB9XG4gICAgICAtLXRoaXMuc2l6ZTtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEdldHMgdGhlIGxpc3QgY2FjaGUgdmFsdWUgZm9yIGBrZXlgLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAbmFtZSBnZXRcbiAgICAgKiBAbWVtYmVyT2YgTGlzdENhY2hlXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSB2YWx1ZSB0byBnZXQuXG4gICAgICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIGVudHJ5IHZhbHVlLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGxpc3RDYWNoZUdldChrZXkpIHtcbiAgICAgIHZhciBkYXRhID0gdGhpcy5fX2RhdGFfXyxcbiAgICAgICAgICBpbmRleCA9IGFzc29jSW5kZXhPZihkYXRhLCBrZXkpO1xuXG4gICAgICByZXR1cm4gaW5kZXggPCAwID8gdW5kZWZpbmVkIDogZGF0YVtpbmRleF1bMV07XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ2hlY2tzIGlmIGEgbGlzdCBjYWNoZSB2YWx1ZSBmb3IgYGtleWAgZXhpc3RzLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAbmFtZSBoYXNcbiAgICAgKiBAbWVtYmVyT2YgTGlzdENhY2hlXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSBlbnRyeSB0byBjaGVjay5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYW4gZW50cnkgZm9yIGBrZXlgIGV4aXN0cywgZWxzZSBgZmFsc2VgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGxpc3RDYWNoZUhhcyhrZXkpIHtcbiAgICAgIHJldHVybiBhc3NvY0luZGV4T2YodGhpcy5fX2RhdGFfXywga2V5KSA+IC0xO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFNldHMgdGhlIGxpc3QgY2FjaGUgYGtleWAgdG8gYHZhbHVlYC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQG5hbWUgc2V0XG4gICAgICogQG1lbWJlck9mIExpc3RDYWNoZVxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgdmFsdWUgdG8gc2V0LlxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIHNldC5cbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIHRoZSBsaXN0IGNhY2hlIGluc3RhbmNlLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGxpc3RDYWNoZVNldChrZXksIHZhbHVlKSB7XG4gICAgICB2YXIgZGF0YSA9IHRoaXMuX19kYXRhX18sXG4gICAgICAgICAgaW5kZXggPSBhc3NvY0luZGV4T2YoZGF0YSwga2V5KTtcblxuICAgICAgaWYgKGluZGV4IDwgMCkge1xuICAgICAgICArK3RoaXMuc2l6ZTtcbiAgICAgICAgZGF0YS5wdXNoKFtrZXksIHZhbHVlXSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBkYXRhW2luZGV4XVsxXSA9IHZhbHVlO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgLy8gQWRkIG1ldGhvZHMgdG8gYExpc3RDYWNoZWAuXG4gICAgTGlzdENhY2hlLnByb3RvdHlwZS5jbGVhciA9IGxpc3RDYWNoZUNsZWFyO1xuICAgIExpc3RDYWNoZS5wcm90b3R5cGVbJ2RlbGV0ZSddID0gbGlzdENhY2hlRGVsZXRlO1xuICAgIExpc3RDYWNoZS5wcm90b3R5cGUuZ2V0ID0gbGlzdENhY2hlR2V0O1xuICAgIExpc3RDYWNoZS5wcm90b3R5cGUuaGFzID0gbGlzdENhY2hlSGFzO1xuICAgIExpc3RDYWNoZS5wcm90b3R5cGUuc2V0ID0gbGlzdENhY2hlU2V0O1xuXG4gICAgLyotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qL1xuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIG1hcCBjYWNoZSBvYmplY3QgdG8gc3RvcmUga2V5LXZhbHVlIHBhaXJzLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAY29uc3RydWN0b3JcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBbZW50cmllc10gVGhlIGtleS12YWx1ZSBwYWlycyB0byBjYWNoZS5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBNYXBDYWNoZShlbnRyaWVzKSB7XG4gICAgICB2YXIgaW5kZXggPSAtMSxcbiAgICAgICAgICBsZW5ndGggPSBlbnRyaWVzID09IG51bGwgPyAwIDogZW50cmllcy5sZW5ndGg7XG5cbiAgICAgIHRoaXMuY2xlYXIoKTtcbiAgICAgIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgICAgIHZhciBlbnRyeSA9IGVudHJpZXNbaW5kZXhdO1xuICAgICAgICB0aGlzLnNldChlbnRyeVswXSwgZW50cnlbMV0pO1xuICAgICAgfVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFJlbW92ZXMgYWxsIGtleS12YWx1ZSBlbnRyaWVzIGZyb20gdGhlIG1hcC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQG5hbWUgY2xlYXJcbiAgICAgKiBAbWVtYmVyT2YgTWFwQ2FjaGVcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBtYXBDYWNoZUNsZWFyKCkge1xuICAgICAgdGhpcy5zaXplID0gMDtcbiAgICAgIHRoaXMuX19kYXRhX18gPSB7XG4gICAgICAgICdoYXNoJzogbmV3IEhhc2gsXG4gICAgICAgICdtYXAnOiBuZXcgKE1hcCB8fCBMaXN0Q2FjaGUpLFxuICAgICAgICAnc3RyaW5nJzogbmV3IEhhc2hcbiAgICAgIH07XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUmVtb3ZlcyBga2V5YCBhbmQgaXRzIHZhbHVlIGZyb20gdGhlIG1hcC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQG5hbWUgZGVsZXRlXG4gICAgICogQG1lbWJlck9mIE1hcENhY2hlXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSB2YWx1ZSB0byByZW1vdmUuXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIHRoZSBlbnRyeSB3YXMgcmVtb3ZlZCwgZWxzZSBgZmFsc2VgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIG1hcENhY2hlRGVsZXRlKGtleSkge1xuICAgICAgdmFyIHJlc3VsdCA9IGdldE1hcERhdGEodGhpcywga2V5KVsnZGVsZXRlJ10oa2V5KTtcbiAgICAgIHRoaXMuc2l6ZSAtPSByZXN1bHQgPyAxIDogMDtcbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogR2V0cyB0aGUgbWFwIHZhbHVlIGZvciBga2V5YC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQG5hbWUgZ2V0XG4gICAgICogQG1lbWJlck9mIE1hcENhY2hlXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSB2YWx1ZSB0byBnZXQuXG4gICAgICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIGVudHJ5IHZhbHVlLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIG1hcENhY2hlR2V0KGtleSkge1xuICAgICAgcmV0dXJuIGdldE1hcERhdGEodGhpcywga2V5KS5nZXQoa2V5KTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDaGVja3MgaWYgYSBtYXAgdmFsdWUgZm9yIGBrZXlgIGV4aXN0cy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQG5hbWUgaGFzXG4gICAgICogQG1lbWJlck9mIE1hcENhY2hlXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSBlbnRyeSB0byBjaGVjay5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYW4gZW50cnkgZm9yIGBrZXlgIGV4aXN0cywgZWxzZSBgZmFsc2VgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIG1hcENhY2hlSGFzKGtleSkge1xuICAgICAgcmV0dXJuIGdldE1hcERhdGEodGhpcywga2V5KS5oYXMoa2V5KTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBTZXRzIHRoZSBtYXAgYGtleWAgdG8gYHZhbHVlYC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQG5hbWUgc2V0XG4gICAgICogQG1lbWJlck9mIE1hcENhY2hlXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSB2YWx1ZSB0byBzZXQuXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gc2V0LlxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgdGhlIG1hcCBjYWNoZSBpbnN0YW5jZS5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBtYXBDYWNoZVNldChrZXksIHZhbHVlKSB7XG4gICAgICB2YXIgZGF0YSA9IGdldE1hcERhdGEodGhpcywga2V5KSxcbiAgICAgICAgICBzaXplID0gZGF0YS5zaXplO1xuXG4gICAgICBkYXRhLnNldChrZXksIHZhbHVlKTtcbiAgICAgIHRoaXMuc2l6ZSArPSBkYXRhLnNpemUgPT0gc2l6ZSA/IDAgOiAxO1xuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgLy8gQWRkIG1ldGhvZHMgdG8gYE1hcENhY2hlYC5cbiAgICBNYXBDYWNoZS5wcm90b3R5cGUuY2xlYXIgPSBtYXBDYWNoZUNsZWFyO1xuICAgIE1hcENhY2hlLnByb3RvdHlwZVsnZGVsZXRlJ10gPSBtYXBDYWNoZURlbGV0ZTtcbiAgICBNYXBDYWNoZS5wcm90b3R5cGUuZ2V0ID0gbWFwQ2FjaGVHZXQ7XG4gICAgTWFwQ2FjaGUucHJvdG90eXBlLmhhcyA9IG1hcENhY2hlSGFzO1xuICAgIE1hcENhY2hlLnByb3RvdHlwZS5zZXQgPSBtYXBDYWNoZVNldDtcblxuICAgIC8qLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKi9cblxuICAgIC8qKlxuICAgICAqXG4gICAgICogQ3JlYXRlcyBhbiBhcnJheSBjYWNoZSBvYmplY3QgdG8gc3RvcmUgdW5pcXVlIHZhbHVlcy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQGNvbnN0cnVjdG9yXG4gICAgICogQHBhcmFtIHtBcnJheX0gW3ZhbHVlc10gVGhlIHZhbHVlcyB0byBjYWNoZS5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBTZXRDYWNoZSh2YWx1ZXMpIHtcbiAgICAgIHZhciBpbmRleCA9IC0xLFxuICAgICAgICAgIGxlbmd0aCA9IHZhbHVlcyA9PSBudWxsID8gMCA6IHZhbHVlcy5sZW5ndGg7XG5cbiAgICAgIHRoaXMuX19kYXRhX18gPSBuZXcgTWFwQ2FjaGU7XG4gICAgICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgICAgICB0aGlzLmFkZCh2YWx1ZXNbaW5kZXhdKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBBZGRzIGB2YWx1ZWAgdG8gdGhlIGFycmF5IGNhY2hlLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAbmFtZSBhZGRcbiAgICAgKiBAbWVtYmVyT2YgU2V0Q2FjaGVcbiAgICAgKiBAYWxpYXMgcHVzaFxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNhY2hlLlxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgdGhlIGNhY2hlIGluc3RhbmNlLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHNldENhY2hlQWRkKHZhbHVlKSB7XG4gICAgICB0aGlzLl9fZGF0YV9fLnNldCh2YWx1ZSwgSEFTSF9VTkRFRklORUQpO1xuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgaW4gdGhlIGFycmF5IGNhY2hlLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAbmFtZSBoYXNcbiAgICAgKiBAbWVtYmVyT2YgU2V0Q2FjaGVcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBzZWFyY2ggZm9yLlxuICAgICAqIEByZXR1cm5zIHtudW1iZXJ9IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgZm91bmQsIGVsc2UgYGZhbHNlYC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBzZXRDYWNoZUhhcyh2YWx1ZSkge1xuICAgICAgcmV0dXJuIHRoaXMuX19kYXRhX18uaGFzKHZhbHVlKTtcbiAgICB9XG5cbiAgICAvLyBBZGQgbWV0aG9kcyB0byBgU2V0Q2FjaGVgLlxuICAgIFNldENhY2hlLnByb3RvdHlwZS5hZGQgPSBTZXRDYWNoZS5wcm90b3R5cGUucHVzaCA9IHNldENhY2hlQWRkO1xuICAgIFNldENhY2hlLnByb3RvdHlwZS5oYXMgPSBzZXRDYWNoZUhhcztcblxuICAgIC8qLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKi9cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBzdGFjayBjYWNoZSBvYmplY3QgdG8gc3RvcmUga2V5LXZhbHVlIHBhaXJzLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAY29uc3RydWN0b3JcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBbZW50cmllc10gVGhlIGtleS12YWx1ZSBwYWlycyB0byBjYWNoZS5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBTdGFjayhlbnRyaWVzKSB7XG4gICAgICB2YXIgZGF0YSA9IHRoaXMuX19kYXRhX18gPSBuZXcgTGlzdENhY2hlKGVudHJpZXMpO1xuICAgICAgdGhpcy5zaXplID0gZGF0YS5zaXplO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFJlbW92ZXMgYWxsIGtleS12YWx1ZSBlbnRyaWVzIGZyb20gdGhlIHN0YWNrLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAbmFtZSBjbGVhclxuICAgICAqIEBtZW1iZXJPZiBTdGFja1xuICAgICAqL1xuICAgIGZ1bmN0aW9uIHN0YWNrQ2xlYXIoKSB7XG4gICAgICB0aGlzLl9fZGF0YV9fID0gbmV3IExpc3RDYWNoZTtcbiAgICAgIHRoaXMuc2l6ZSA9IDA7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUmVtb3ZlcyBga2V5YCBhbmQgaXRzIHZhbHVlIGZyb20gdGhlIHN0YWNrLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAbmFtZSBkZWxldGVcbiAgICAgKiBAbWVtYmVyT2YgU3RhY2tcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIHZhbHVlIHRvIHJlbW92ZS5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgdGhlIGVudHJ5IHdhcyByZW1vdmVkLCBlbHNlIGBmYWxzZWAuXG4gICAgICovXG4gICAgZnVuY3Rpb24gc3RhY2tEZWxldGUoa2V5KSB7XG4gICAgICB2YXIgZGF0YSA9IHRoaXMuX19kYXRhX18sXG4gICAgICAgICAgcmVzdWx0ID0gZGF0YVsnZGVsZXRlJ10oa2V5KTtcblxuICAgICAgdGhpcy5zaXplID0gZGF0YS5zaXplO1xuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBHZXRzIHRoZSBzdGFjayB2YWx1ZSBmb3IgYGtleWAuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBuYW1lIGdldFxuICAgICAqIEBtZW1iZXJPZiBTdGFja1xuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgdmFsdWUgdG8gZ2V0LlxuICAgICAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSBlbnRyeSB2YWx1ZS5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBzdGFja0dldChrZXkpIHtcbiAgICAgIHJldHVybiB0aGlzLl9fZGF0YV9fLmdldChrZXkpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENoZWNrcyBpZiBhIHN0YWNrIHZhbHVlIGZvciBga2V5YCBleGlzdHMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBuYW1lIGhhc1xuICAgICAqIEBtZW1iZXJPZiBTdGFja1xuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgZW50cnkgdG8gY2hlY2suXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGFuIGVudHJ5IGZvciBga2V5YCBleGlzdHMsIGVsc2UgYGZhbHNlYC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBzdGFja0hhcyhrZXkpIHtcbiAgICAgIHJldHVybiB0aGlzLl9fZGF0YV9fLmhhcyhrZXkpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFNldHMgdGhlIHN0YWNrIGBrZXlgIHRvIGB2YWx1ZWAuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBuYW1lIHNldFxuICAgICAqIEBtZW1iZXJPZiBTdGFja1xuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgdmFsdWUgdG8gc2V0LlxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIHNldC5cbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIHRoZSBzdGFjayBjYWNoZSBpbnN0YW5jZS5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBzdGFja1NldChrZXksIHZhbHVlKSB7XG4gICAgICB2YXIgZGF0YSA9IHRoaXMuX19kYXRhX187XG4gICAgICBpZiAoZGF0YSBpbnN0YW5jZW9mIExpc3RDYWNoZSkge1xuICAgICAgICB2YXIgcGFpcnMgPSBkYXRhLl9fZGF0YV9fO1xuICAgICAgICBpZiAoIU1hcCB8fCAocGFpcnMubGVuZ3RoIDwgTEFSR0VfQVJSQVlfU0laRSAtIDEpKSB7XG4gICAgICAgICAgcGFpcnMucHVzaChba2V5LCB2YWx1ZV0pO1xuICAgICAgICAgIHRoaXMuc2l6ZSA9ICsrZGF0YS5zaXplO1xuICAgICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgICB9XG4gICAgICAgIGRhdGEgPSB0aGlzLl9fZGF0YV9fID0gbmV3IE1hcENhY2hlKHBhaXJzKTtcbiAgICAgIH1cbiAgICAgIGRhdGEuc2V0KGtleSwgdmFsdWUpO1xuICAgICAgdGhpcy5zaXplID0gZGF0YS5zaXplO1xuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgLy8gQWRkIG1ldGhvZHMgdG8gYFN0YWNrYC5cbiAgICBTdGFjay5wcm90b3R5cGUuY2xlYXIgPSBzdGFja0NsZWFyO1xuICAgIFN0YWNrLnByb3RvdHlwZVsnZGVsZXRlJ10gPSBzdGFja0RlbGV0ZTtcbiAgICBTdGFjay5wcm90b3R5cGUuZ2V0ID0gc3RhY2tHZXQ7XG4gICAgU3RhY2sucHJvdG90eXBlLmhhcyA9IHN0YWNrSGFzO1xuICAgIFN0YWNrLnByb3RvdHlwZS5zZXQgPSBzdGFja1NldDtcblxuICAgIC8qLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKi9cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYW4gYXJyYXkgb2YgdGhlIGVudW1lcmFibGUgcHJvcGVydHkgbmFtZXMgb2YgdGhlIGFycmF5LWxpa2UgYHZhbHVlYC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gcXVlcnkuXG4gICAgICogQHBhcmFtIHtib29sZWFufSBpbmhlcml0ZWQgU3BlY2lmeSByZXR1cm5pbmcgaW5oZXJpdGVkIHByb3BlcnR5IG5hbWVzLlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgYXJyYXkgb2YgcHJvcGVydHkgbmFtZXMuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYXJyYXlMaWtlS2V5cyh2YWx1ZSwgaW5oZXJpdGVkKSB7XG4gICAgICB2YXIgaXNBcnIgPSBpc0FycmF5KHZhbHVlKSxcbiAgICAgICAgICBpc0FyZyA9ICFpc0FyciAmJiBpc0FyZ3VtZW50cyh2YWx1ZSksXG4gICAgICAgICAgaXNCdWZmID0gIWlzQXJyICYmICFpc0FyZyAmJiBpc0J1ZmZlcih2YWx1ZSksXG4gICAgICAgICAgaXNUeXBlID0gIWlzQXJyICYmICFpc0FyZyAmJiAhaXNCdWZmICYmIGlzVHlwZWRBcnJheSh2YWx1ZSksXG4gICAgICAgICAgc2tpcEluZGV4ZXMgPSBpc0FyciB8fCBpc0FyZyB8fCBpc0J1ZmYgfHwgaXNUeXBlLFxuICAgICAgICAgIHJlc3VsdCA9IHNraXBJbmRleGVzID8gYmFzZVRpbWVzKHZhbHVlLmxlbmd0aCwgU3RyaW5nKSA6IFtdLFxuICAgICAgICAgIGxlbmd0aCA9IHJlc3VsdC5sZW5ndGg7XG5cbiAgICAgIGZvciAodmFyIGtleSBpbiB2YWx1ZSkge1xuICAgICAgICBpZiAoKGluaGVyaXRlZCB8fCBoYXNPd25Qcm9wZXJ0eS5jYWxsKHZhbHVlLCBrZXkpKSAmJlxuICAgICAgICAgICAgIShza2lwSW5kZXhlcyAmJiAoXG4gICAgICAgICAgICAgICAvLyBTYWZhcmkgOSBoYXMgZW51bWVyYWJsZSBgYXJndW1lbnRzLmxlbmd0aGAgaW4gc3RyaWN0IG1vZGUuXG4gICAgICAgICAgICAgICBrZXkgPT0gJ2xlbmd0aCcgfHxcbiAgICAgICAgICAgICAgIC8vIE5vZGUuanMgMC4xMCBoYXMgZW51bWVyYWJsZSBub24taW5kZXggcHJvcGVydGllcyBvbiBidWZmZXJzLlxuICAgICAgICAgICAgICAgKGlzQnVmZiAmJiAoa2V5ID09ICdvZmZzZXQnIHx8IGtleSA9PSAncGFyZW50JykpIHx8XG4gICAgICAgICAgICAgICAvLyBQaGFudG9tSlMgMiBoYXMgZW51bWVyYWJsZSBub24taW5kZXggcHJvcGVydGllcyBvbiB0eXBlZCBhcnJheXMuXG4gICAgICAgICAgICAgICAoaXNUeXBlICYmIChrZXkgPT0gJ2J1ZmZlcicgfHwga2V5ID09ICdieXRlTGVuZ3RoJyB8fCBrZXkgPT0gJ2J5dGVPZmZzZXQnKSkgfHxcbiAgICAgICAgICAgICAgIC8vIFNraXAgaW5kZXggcHJvcGVydGllcy5cbiAgICAgICAgICAgICAgIGlzSW5kZXgoa2V5LCBsZW5ndGgpXG4gICAgICAgICAgICApKSkge1xuICAgICAgICAgIHJlc3VsdC5wdXNoKGtleSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQSBzcGVjaWFsaXplZCB2ZXJzaW9uIG9mIGBfLnNhbXBsZWAgZm9yIGFycmF5cy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIHNhbXBsZS5cbiAgICAgKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgcmFuZG9tIGVsZW1lbnQuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYXJyYXlTYW1wbGUoYXJyYXkpIHtcbiAgICAgIHZhciBsZW5ndGggPSBhcnJheS5sZW5ndGg7XG4gICAgICByZXR1cm4gbGVuZ3RoID8gYXJyYXlbYmFzZVJhbmRvbSgwLCBsZW5ndGggLSAxKV0gOiB1bmRlZmluZWQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQSBzcGVjaWFsaXplZCB2ZXJzaW9uIG9mIGBfLnNhbXBsZVNpemVgIGZvciBhcnJheXMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBzYW1wbGUuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IG4gVGhlIG51bWJlciBvZiBlbGVtZW50cyB0byBzYW1wbGUuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSByYW5kb20gZWxlbWVudHMuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYXJyYXlTYW1wbGVTaXplKGFycmF5LCBuKSB7XG4gICAgICByZXR1cm4gc2h1ZmZsZVNlbGYoY29weUFycmF5KGFycmF5KSwgYmFzZUNsYW1wKG4sIDAsIGFycmF5Lmxlbmd0aCkpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEEgc3BlY2lhbGl6ZWQgdmVyc2lvbiBvZiBgXy5zaHVmZmxlYCBmb3IgYXJyYXlzLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gc2h1ZmZsZS5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIG5ldyBzaHVmZmxlZCBhcnJheS5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBhcnJheVNodWZmbGUoYXJyYXkpIHtcbiAgICAgIHJldHVybiBzaHVmZmxlU2VsZihjb3B5QXJyYXkoYXJyYXkpKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIGZ1bmN0aW9uIGlzIGxpa2UgYGFzc2lnblZhbHVlYCBleGNlcHQgdGhhdCBpdCBkb2Vzbid0IGFzc2lnblxuICAgICAqIGB1bmRlZmluZWRgIHZhbHVlcy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIG1vZGlmeS5cbiAgICAgKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIHByb3BlcnR5IHRvIGFzc2lnbi5cbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBhc3NpZ24uXG4gICAgICovXG4gICAgZnVuY3Rpb24gYXNzaWduTWVyZ2VWYWx1ZShvYmplY3QsIGtleSwgdmFsdWUpIHtcbiAgICAgIGlmICgodmFsdWUgIT09IHVuZGVmaW5lZCAmJiAhZXEob2JqZWN0W2tleV0sIHZhbHVlKSkgfHxcbiAgICAgICAgICAodmFsdWUgPT09IHVuZGVmaW5lZCAmJiAhKGtleSBpbiBvYmplY3QpKSkge1xuICAgICAgICBiYXNlQXNzaWduVmFsdWUob2JqZWN0LCBrZXksIHZhbHVlKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBBc3NpZ25zIGB2YWx1ZWAgdG8gYGtleWAgb2YgYG9iamVjdGAgaWYgdGhlIGV4aXN0aW5nIHZhbHVlIGlzIG5vdCBlcXVpdmFsZW50XG4gICAgICogdXNpbmcgW2BTYW1lVmFsdWVaZXJvYF0oaHR0cDovL2VjbWEtaW50ZXJuYXRpb25hbC5vcmcvZWNtYS0yNjIvNy4wLyNzZWMtc2FtZXZhbHVlemVybylcbiAgICAgKiBmb3IgZXF1YWxpdHkgY29tcGFyaXNvbnMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBtb2RpZnkuXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSBwcm9wZXJ0eSB0byBhc3NpZ24uXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gYXNzaWduLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGFzc2lnblZhbHVlKG9iamVjdCwga2V5LCB2YWx1ZSkge1xuICAgICAgdmFyIG9ialZhbHVlID0gb2JqZWN0W2tleV07XG4gICAgICBpZiAoIShoYXNPd25Qcm9wZXJ0eS5jYWxsKG9iamVjdCwga2V5KSAmJiBlcShvYmpWYWx1ZSwgdmFsdWUpKSB8fFxuICAgICAgICAgICh2YWx1ZSA9PT0gdW5kZWZpbmVkICYmICEoa2V5IGluIG9iamVjdCkpKSB7XG4gICAgICAgIGJhc2VBc3NpZ25WYWx1ZShvYmplY3QsIGtleSwgdmFsdWUpO1xuICAgICAgfVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEdldHMgdGhlIGluZGV4IGF0IHdoaWNoIHRoZSBga2V5YCBpcyBmb3VuZCBpbiBgYXJyYXlgIG9mIGtleS12YWx1ZSBwYWlycy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIGluc3BlY3QuXG4gICAgICogQHBhcmFtIHsqfSBrZXkgVGhlIGtleSB0byBzZWFyY2ggZm9yLlxuICAgICAqIEByZXR1cm5zIHtudW1iZXJ9IFJldHVybnMgdGhlIGluZGV4IG9mIHRoZSBtYXRjaGVkIHZhbHVlLCBlbHNlIGAtMWAuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYXNzb2NJbmRleE9mKGFycmF5LCBrZXkpIHtcbiAgICAgIHZhciBsZW5ndGggPSBhcnJheS5sZW5ndGg7XG4gICAgICB3aGlsZSAobGVuZ3RoLS0pIHtcbiAgICAgICAgaWYgKGVxKGFycmF5W2xlbmd0aF1bMF0sIGtleSkpIHtcbiAgICAgICAgICByZXR1cm4gbGVuZ3RoO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gLTE7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQWdncmVnYXRlcyBlbGVtZW50cyBvZiBgY29sbGVjdGlvbmAgb24gYGFjY3VtdWxhdG9yYCB3aXRoIGtleXMgdHJhbnNmb3JtZWRcbiAgICAgKiBieSBgaXRlcmF0ZWVgIGFuZCB2YWx1ZXMgc2V0IGJ5IGBzZXR0ZXJgLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0FycmF5fE9iamVjdH0gY29sbGVjdGlvbiBUaGUgY29sbGVjdGlvbiB0byBpdGVyYXRlIG92ZXIuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gc2V0dGVyIFRoZSBmdW5jdGlvbiB0byBzZXQgYGFjY3VtdWxhdG9yYCB2YWx1ZXMuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gaXRlcmF0ZWUgVGhlIGl0ZXJhdGVlIHRvIHRyYW5zZm9ybSBrZXlzLlxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBhY2N1bXVsYXRvciBUaGUgaW5pdGlhbCBhZ2dyZWdhdGVkIG9iamVjdC5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgYGFjY3VtdWxhdG9yYC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlQWdncmVnYXRvcihjb2xsZWN0aW9uLCBzZXR0ZXIsIGl0ZXJhdGVlLCBhY2N1bXVsYXRvcikge1xuICAgICAgYmFzZUVhY2goY29sbGVjdGlvbiwgZnVuY3Rpb24odmFsdWUsIGtleSwgY29sbGVjdGlvbikge1xuICAgICAgICBzZXR0ZXIoYWNjdW11bGF0b3IsIHZhbHVlLCBpdGVyYXRlZSh2YWx1ZSksIGNvbGxlY3Rpb24pO1xuICAgICAgfSk7XG4gICAgICByZXR1cm4gYWNjdW11bGF0b3I7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uYXNzaWduYCB3aXRob3V0IHN1cHBvcnQgZm9yIG11bHRpcGxlIHNvdXJjZXNcbiAgICAgKiBvciBgY3VzdG9taXplcmAgZnVuY3Rpb25zLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBkZXN0aW5hdGlvbiBvYmplY3QuXG4gICAgICogQHBhcmFtIHtPYmplY3R9IHNvdXJjZSBUaGUgc291cmNlIG9iamVjdC5cbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIGBvYmplY3RgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VBc3NpZ24ob2JqZWN0LCBzb3VyY2UpIHtcbiAgICAgIHJldHVybiBvYmplY3QgJiYgY29weU9iamVjdChzb3VyY2UsIGtleXMoc291cmNlKSwgb2JqZWN0KTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5hc3NpZ25JbmAgd2l0aG91dCBzdXBwb3J0IGZvciBtdWx0aXBsZSBzb3VyY2VzXG4gICAgICogb3IgYGN1c3RvbWl6ZXJgIGZ1bmN0aW9ucy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgZGVzdGluYXRpb24gb2JqZWN0LlxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBzb3VyY2UgVGhlIHNvdXJjZSBvYmplY3QuXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyBgb2JqZWN0YC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlQXNzaWduSW4ob2JqZWN0LCBzb3VyY2UpIHtcbiAgICAgIHJldHVybiBvYmplY3QgJiYgY29weU9iamVjdChzb3VyY2UsIGtleXNJbihzb3VyY2UpLCBvYmplY3QpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBhc3NpZ25WYWx1ZWAgYW5kIGBhc3NpZ25NZXJnZVZhbHVlYCB3aXRob3V0XG4gICAgICogdmFsdWUgY2hlY2tzLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gbW9kaWZ5LlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgcHJvcGVydHkgdG8gYXNzaWduLlxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGFzc2lnbi5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlQXNzaWduVmFsdWUob2JqZWN0LCBrZXksIHZhbHVlKSB7XG4gICAgICBpZiAoa2V5ID09ICdfX3Byb3RvX18nICYmIGRlZmluZVByb3BlcnR5KSB7XG4gICAgICAgIGRlZmluZVByb3BlcnR5KG9iamVjdCwga2V5LCB7XG4gICAgICAgICAgJ2NvbmZpZ3VyYWJsZSc6IHRydWUsXG4gICAgICAgICAgJ2VudW1lcmFibGUnOiB0cnVlLFxuICAgICAgICAgICd2YWx1ZSc6IHZhbHVlLFxuICAgICAgICAgICd3cml0YWJsZSc6IHRydWVcbiAgICAgICAgfSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBvYmplY3Rba2V5XSA9IHZhbHVlO1xuICAgICAgfVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLmF0YCB3aXRob3V0IHN1cHBvcnQgZm9yIGluZGl2aWR1YWwgcGF0aHMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBpdGVyYXRlIG92ZXIuXG4gICAgICogQHBhcmFtIHtzdHJpbmdbXX0gcGF0aHMgVGhlIHByb3BlcnR5IHBhdGhzIHRvIHBpY2suXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBwaWNrZWQgZWxlbWVudHMuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZUF0KG9iamVjdCwgcGF0aHMpIHtcbiAgICAgIHZhciBpbmRleCA9IC0xLFxuICAgICAgICAgIGxlbmd0aCA9IHBhdGhzLmxlbmd0aCxcbiAgICAgICAgICByZXN1bHQgPSBBcnJheShsZW5ndGgpLFxuICAgICAgICAgIHNraXAgPSBvYmplY3QgPT0gbnVsbDtcblxuICAgICAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICAgICAgcmVzdWx0W2luZGV4XSA9IHNraXAgPyB1bmRlZmluZWQgOiBnZXQob2JqZWN0LCBwYXRoc1tpbmRleF0pO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5jbGFtcGAgd2hpY2ggZG9lc24ndCBjb2VyY2UgYXJndW1lbnRzLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge251bWJlcn0gbnVtYmVyIFRoZSBudW1iZXIgdG8gY2xhbXAuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFtsb3dlcl0gVGhlIGxvd2VyIGJvdW5kLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSB1cHBlciBUaGUgdXBwZXIgYm91bmQuXG4gICAgICogQHJldHVybnMge251bWJlcn0gUmV0dXJucyB0aGUgY2xhbXBlZCBudW1iZXIuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZUNsYW1wKG51bWJlciwgbG93ZXIsIHVwcGVyKSB7XG4gICAgICBpZiAobnVtYmVyID09PSBudW1iZXIpIHtcbiAgICAgICAgaWYgKHVwcGVyICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICBudW1iZXIgPSBudW1iZXIgPD0gdXBwZXIgPyBudW1iZXIgOiB1cHBlcjtcbiAgICAgICAgfVxuICAgICAgICBpZiAobG93ZXIgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgIG51bWJlciA9IG51bWJlciA+PSBsb3dlciA/IG51bWJlciA6IGxvd2VyO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gbnVtYmVyO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLmNsb25lYCBhbmQgYF8uY2xvbmVEZWVwYCB3aGljaCB0cmFja3NcbiAgICAgKiB0cmF2ZXJzZWQgb2JqZWN0cy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2xvbmUuXG4gICAgICogQHBhcmFtIHtib29sZWFufSBiaXRtYXNrIFRoZSBiaXRtYXNrIGZsYWdzLlxuICAgICAqICAxIC0gRGVlcCBjbG9uZVxuICAgICAqICAyIC0gRmxhdHRlbiBpbmhlcml0ZWQgcHJvcGVydGllc1xuICAgICAqICA0IC0gQ2xvbmUgc3ltYm9sc1xuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtjdXN0b21pemVyXSBUaGUgZnVuY3Rpb24gdG8gY3VzdG9taXplIGNsb25pbmcuXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IFtrZXldIFRoZSBrZXkgb2YgYHZhbHVlYC5cbiAgICAgKiBAcGFyYW0ge09iamVjdH0gW29iamVjdF0gVGhlIHBhcmVudCBvYmplY3Qgb2YgYHZhbHVlYC5cbiAgICAgKiBAcGFyYW0ge09iamVjdH0gW3N0YWNrXSBUcmFja3MgdHJhdmVyc2VkIG9iamVjdHMgYW5kIHRoZWlyIGNsb25lIGNvdW50ZXJwYXJ0cy5cbiAgICAgKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgY2xvbmVkIHZhbHVlLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VDbG9uZSh2YWx1ZSwgYml0bWFzaywgY3VzdG9taXplciwga2V5LCBvYmplY3QsIHN0YWNrKSB7XG4gICAgICB2YXIgcmVzdWx0LFxuICAgICAgICAgIGlzRGVlcCA9IGJpdG1hc2sgJiBDTE9ORV9ERUVQX0ZMQUcsXG4gICAgICAgICAgaXNGbGF0ID0gYml0bWFzayAmIENMT05FX0ZMQVRfRkxBRyxcbiAgICAgICAgICBpc0Z1bGwgPSBiaXRtYXNrICYgQ0xPTkVfU1lNQk9MU19GTEFHO1xuXG4gICAgICBpZiAoY3VzdG9taXplcikge1xuICAgICAgICByZXN1bHQgPSBvYmplY3QgPyBjdXN0b21pemVyKHZhbHVlLCBrZXksIG9iamVjdCwgc3RhY2spIDogY3VzdG9taXplcih2YWx1ZSk7XG4gICAgICB9XG4gICAgICBpZiAocmVzdWx0ICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICAgIH1cbiAgICAgIGlmICghaXNPYmplY3QodmFsdWUpKSB7XG4gICAgICAgIHJldHVybiB2YWx1ZTtcbiAgICAgIH1cbiAgICAgIHZhciBpc0FyciA9IGlzQXJyYXkodmFsdWUpO1xuICAgICAgaWYgKGlzQXJyKSB7XG4gICAgICAgIHJlc3VsdCA9IGluaXRDbG9uZUFycmF5KHZhbHVlKTtcbiAgICAgICAgaWYgKCFpc0RlZXApIHtcbiAgICAgICAgICByZXR1cm4gY29weUFycmF5KHZhbHVlLCByZXN1bHQpO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB2YXIgdGFnID0gZ2V0VGFnKHZhbHVlKSxcbiAgICAgICAgICAgIGlzRnVuYyA9IHRhZyA9PSBmdW5jVGFnIHx8IHRhZyA9PSBnZW5UYWc7XG5cbiAgICAgICAgaWYgKGlzQnVmZmVyKHZhbHVlKSkge1xuICAgICAgICAgIHJldHVybiBjbG9uZUJ1ZmZlcih2YWx1ZSwgaXNEZWVwKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAodGFnID09IG9iamVjdFRhZyB8fCB0YWcgPT0gYXJnc1RhZyB8fCAoaXNGdW5jICYmICFvYmplY3QpKSB7XG4gICAgICAgICAgcmVzdWx0ID0gKGlzRmxhdCB8fCBpc0Z1bmMpID8ge30gOiBpbml0Q2xvbmVPYmplY3QodmFsdWUpO1xuICAgICAgICAgIGlmICghaXNEZWVwKSB7XG4gICAgICAgICAgICByZXR1cm4gaXNGbGF0XG4gICAgICAgICAgICAgID8gY29weVN5bWJvbHNJbih2YWx1ZSwgYmFzZUFzc2lnbkluKHJlc3VsdCwgdmFsdWUpKVxuICAgICAgICAgICAgICA6IGNvcHlTeW1ib2xzKHZhbHVlLCBiYXNlQXNzaWduKHJlc3VsdCwgdmFsdWUpKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgaWYgKCFjbG9uZWFibGVUYWdzW3RhZ10pIHtcbiAgICAgICAgICAgIHJldHVybiBvYmplY3QgPyB2YWx1ZSA6IHt9O1xuICAgICAgICAgIH1cbiAgICAgICAgICByZXN1bHQgPSBpbml0Q2xvbmVCeVRhZyh2YWx1ZSwgdGFnLCBpc0RlZXApO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICAvLyBDaGVjayBmb3IgY2lyY3VsYXIgcmVmZXJlbmNlcyBhbmQgcmV0dXJuIGl0cyBjb3JyZXNwb25kaW5nIGNsb25lLlxuICAgICAgc3RhY2sgfHwgKHN0YWNrID0gbmV3IFN0YWNrKTtcbiAgICAgIHZhciBzdGFja2VkID0gc3RhY2suZ2V0KHZhbHVlKTtcbiAgICAgIGlmIChzdGFja2VkKSB7XG4gICAgICAgIHJldHVybiBzdGFja2VkO1xuICAgICAgfVxuICAgICAgc3RhY2suc2V0KHZhbHVlLCByZXN1bHQpO1xuXG4gICAgICBpZiAoaXNTZXQodmFsdWUpKSB7XG4gICAgICAgIHZhbHVlLmZvckVhY2goZnVuY3Rpb24oc3ViVmFsdWUpIHtcbiAgICAgICAgICByZXN1bHQuYWRkKGJhc2VDbG9uZShzdWJWYWx1ZSwgYml0bWFzaywgY3VzdG9taXplciwgc3ViVmFsdWUsIHZhbHVlLCBzdGFjaykpO1xuICAgICAgICB9KTtcbiAgICAgIH0gZWxzZSBpZiAoaXNNYXAodmFsdWUpKSB7XG4gICAgICAgIHZhbHVlLmZvckVhY2goZnVuY3Rpb24oc3ViVmFsdWUsIGtleSkge1xuICAgICAgICAgIHJlc3VsdC5zZXQoa2V5LCBiYXNlQ2xvbmUoc3ViVmFsdWUsIGJpdG1hc2ssIGN1c3RvbWl6ZXIsIGtleSwgdmFsdWUsIHN0YWNrKSk7XG4gICAgICAgIH0pO1xuICAgICAgfVxuXG4gICAgICB2YXIga2V5c0Z1bmMgPSBpc0Z1bGxcbiAgICAgICAgPyAoaXNGbGF0ID8gZ2V0QWxsS2V5c0luIDogZ2V0QWxsS2V5cylcbiAgICAgICAgOiAoaXNGbGF0ID8ga2V5c0luIDoga2V5cyk7XG5cbiAgICAgIHZhciBwcm9wcyA9IGlzQXJyID8gdW5kZWZpbmVkIDoga2V5c0Z1bmModmFsdWUpO1xuICAgICAgYXJyYXlFYWNoKHByb3BzIHx8IHZhbHVlLCBmdW5jdGlvbihzdWJWYWx1ZSwga2V5KSB7XG4gICAgICAgIGlmIChwcm9wcykge1xuICAgICAgICAgIGtleSA9IHN1YlZhbHVlO1xuICAgICAgICAgIHN1YlZhbHVlID0gdmFsdWVba2V5XTtcbiAgICAgICAgfVxuICAgICAgICAvLyBSZWN1cnNpdmVseSBwb3B1bGF0ZSBjbG9uZSAoc3VzY2VwdGlibGUgdG8gY2FsbCBzdGFjayBsaW1pdHMpLlxuICAgICAgICBhc3NpZ25WYWx1ZShyZXN1bHQsIGtleSwgYmFzZUNsb25lKHN1YlZhbHVlLCBiaXRtYXNrLCBjdXN0b21pemVyLCBrZXksIHZhbHVlLCBzdGFjaykpO1xuICAgICAgfSk7XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLmNvbmZvcm1zYCB3aGljaCBkb2Vzbid0IGNsb25lIGBzb3VyY2VgLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gc291cmNlIFRoZSBvYmplY3Qgb2YgcHJvcGVydHkgcHJlZGljYXRlcyB0byBjb25mb3JtIHRvLlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IHNwZWMgZnVuY3Rpb24uXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZUNvbmZvcm1zKHNvdXJjZSkge1xuICAgICAgdmFyIHByb3BzID0ga2V5cyhzb3VyY2UpO1xuICAgICAgcmV0dXJuIGZ1bmN0aW9uKG9iamVjdCkge1xuICAgICAgICByZXR1cm4gYmFzZUNvbmZvcm1zVG8ob2JqZWN0LCBzb3VyY2UsIHByb3BzKTtcbiAgICAgIH07XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uY29uZm9ybXNUb2Agd2hpY2ggYWNjZXB0cyBgcHJvcHNgIHRvIGNoZWNrLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gaW5zcGVjdC5cbiAgICAgKiBAcGFyYW0ge09iamVjdH0gc291cmNlIFRoZSBvYmplY3Qgb2YgcHJvcGVydHkgcHJlZGljYXRlcyB0byBjb25mb3JtIHRvLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgb2JqZWN0YCBjb25mb3JtcywgZWxzZSBgZmFsc2VgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VDb25mb3Jtc1RvKG9iamVjdCwgc291cmNlLCBwcm9wcykge1xuICAgICAgdmFyIGxlbmd0aCA9IHByb3BzLmxlbmd0aDtcbiAgICAgIGlmIChvYmplY3QgPT0gbnVsbCkge1xuICAgICAgICByZXR1cm4gIWxlbmd0aDtcbiAgICAgIH1cbiAgICAgIG9iamVjdCA9IE9iamVjdChvYmplY3QpO1xuICAgICAgd2hpbGUgKGxlbmd0aC0tKSB7XG4gICAgICAgIHZhciBrZXkgPSBwcm9wc1tsZW5ndGhdLFxuICAgICAgICAgICAgcHJlZGljYXRlID0gc291cmNlW2tleV0sXG4gICAgICAgICAgICB2YWx1ZSA9IG9iamVjdFtrZXldO1xuXG4gICAgICAgIGlmICgodmFsdWUgPT09IHVuZGVmaW5lZCAmJiAhKGtleSBpbiBvYmplY3QpKSB8fCAhcHJlZGljYXRlKHZhbHVlKSkge1xuICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uZGVsYXlgIGFuZCBgXy5kZWZlcmAgd2hpY2ggYWNjZXB0cyBgYXJnc2BcbiAgICAgKiB0byBwcm92aWRlIHRvIGBmdW5jYC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gZnVuYyBUaGUgZnVuY3Rpb24gdG8gZGVsYXkuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IHdhaXQgVGhlIG51bWJlciBvZiBtaWxsaXNlY29uZHMgdG8gZGVsYXkgaW52b2NhdGlvbi5cbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcmdzIFRoZSBhcmd1bWVudHMgdG8gcHJvdmlkZSB0byBgZnVuY2AuXG4gICAgICogQHJldHVybnMge251bWJlcnxPYmplY3R9IFJldHVybnMgdGhlIHRpbWVyIGlkIG9yIHRpbWVvdXQgb2JqZWN0LlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VEZWxheShmdW5jLCB3YWl0LCBhcmdzKSB7XG4gICAgICBpZiAodHlwZW9mIGZ1bmMgIT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKEZVTkNfRVJST1JfVEVYVCk7XG4gICAgICB9XG4gICAgICByZXR1cm4gc2V0VGltZW91dChmdW5jdGlvbigpIHsgZnVuYy5hcHBseSh1bmRlZmluZWQsIGFyZ3MpOyB9LCB3YWl0KTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBtZXRob2RzIGxpa2UgYF8uZGlmZmVyZW5jZWAgd2l0aG91dCBzdXBwb3J0XG4gICAgICogZm9yIGV4Y2x1ZGluZyBtdWx0aXBsZSBhcnJheXMgb3IgaXRlcmF0ZWUgc2hvcnRoYW5kcy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIGluc3BlY3QuXG4gICAgICogQHBhcmFtIHtBcnJheX0gdmFsdWVzIFRoZSB2YWx1ZXMgdG8gZXhjbHVkZS5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbaXRlcmF0ZWVdIFRoZSBpdGVyYXRlZSBpbnZva2VkIHBlciBlbGVtZW50LlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtjb21wYXJhdG9yXSBUaGUgY29tcGFyYXRvciBpbnZva2VkIHBlciBlbGVtZW50LlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgbmV3IGFycmF5IG9mIGZpbHRlcmVkIHZhbHVlcy5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlRGlmZmVyZW5jZShhcnJheSwgdmFsdWVzLCBpdGVyYXRlZSwgY29tcGFyYXRvcikge1xuICAgICAgdmFyIGluZGV4ID0gLTEsXG4gICAgICAgICAgaW5jbHVkZXMgPSBhcnJheUluY2x1ZGVzLFxuICAgICAgICAgIGlzQ29tbW9uID0gdHJ1ZSxcbiAgICAgICAgICBsZW5ndGggPSBhcnJheS5sZW5ndGgsXG4gICAgICAgICAgcmVzdWx0ID0gW10sXG4gICAgICAgICAgdmFsdWVzTGVuZ3RoID0gdmFsdWVzLmxlbmd0aDtcblxuICAgICAgaWYgKCFsZW5ndGgpIHtcbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICAgIH1cbiAgICAgIGlmIChpdGVyYXRlZSkge1xuICAgICAgICB2YWx1ZXMgPSBhcnJheU1hcCh2YWx1ZXMsIGJhc2VVbmFyeShpdGVyYXRlZSkpO1xuICAgICAgfVxuICAgICAgaWYgKGNvbXBhcmF0b3IpIHtcbiAgICAgICAgaW5jbHVkZXMgPSBhcnJheUluY2x1ZGVzV2l0aDtcbiAgICAgICAgaXNDb21tb24gPSBmYWxzZTtcbiAgICAgIH1cbiAgICAgIGVsc2UgaWYgKHZhbHVlcy5sZW5ndGggPj0gTEFSR0VfQVJSQVlfU0laRSkge1xuICAgICAgICBpbmNsdWRlcyA9IGNhY2hlSGFzO1xuICAgICAgICBpc0NvbW1vbiA9IGZhbHNlO1xuICAgICAgICB2YWx1ZXMgPSBuZXcgU2V0Q2FjaGUodmFsdWVzKTtcbiAgICAgIH1cbiAgICAgIG91dGVyOlxuICAgICAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICAgICAgdmFyIHZhbHVlID0gYXJyYXlbaW5kZXhdLFxuICAgICAgICAgICAgY29tcHV0ZWQgPSBpdGVyYXRlZSA9PSBudWxsID8gdmFsdWUgOiBpdGVyYXRlZSh2YWx1ZSk7XG5cbiAgICAgICAgdmFsdWUgPSAoY29tcGFyYXRvciB8fCB2YWx1ZSAhPT0gMCkgPyB2YWx1ZSA6IDA7XG4gICAgICAgIGlmIChpc0NvbW1vbiAmJiBjb21wdXRlZCA9PT0gY29tcHV0ZWQpIHtcbiAgICAgICAgICB2YXIgdmFsdWVzSW5kZXggPSB2YWx1ZXNMZW5ndGg7XG4gICAgICAgICAgd2hpbGUgKHZhbHVlc0luZGV4LS0pIHtcbiAgICAgICAgICAgIGlmICh2YWx1ZXNbdmFsdWVzSW5kZXhdID09PSBjb21wdXRlZCkge1xuICAgICAgICAgICAgICBjb250aW51ZSBvdXRlcjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgICAgcmVzdWx0LnB1c2godmFsdWUpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKCFpbmNsdWRlcyh2YWx1ZXMsIGNvbXB1dGVkLCBjb21wYXJhdG9yKSkge1xuICAgICAgICAgIHJlc3VsdC5wdXNoKHZhbHVlKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5mb3JFYWNoYCB3aXRob3V0IHN1cHBvcnQgZm9yIGl0ZXJhdGVlIHNob3J0aGFuZHMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7QXJyYXl8T2JqZWN0fSBjb2xsZWN0aW9uIFRoZSBjb2xsZWN0aW9uIHRvIGl0ZXJhdGUgb3Zlci5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBpdGVyYXRlZSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICAgICAqIEByZXR1cm5zIHtBcnJheXxPYmplY3R9IFJldHVybnMgYGNvbGxlY3Rpb25gLlxuICAgICAqL1xuICAgIHZhciBiYXNlRWFjaCA9IGNyZWF0ZUJhc2VFYWNoKGJhc2VGb3JPd24pO1xuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uZm9yRWFjaFJpZ2h0YCB3aXRob3V0IHN1cHBvcnQgZm9yIGl0ZXJhdGVlIHNob3J0aGFuZHMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7QXJyYXl8T2JqZWN0fSBjb2xsZWN0aW9uIFRoZSBjb2xsZWN0aW9uIHRvIGl0ZXJhdGUgb3Zlci5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBpdGVyYXRlZSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICAgICAqIEByZXR1cm5zIHtBcnJheXxPYmplY3R9IFJldHVybnMgYGNvbGxlY3Rpb25gLlxuICAgICAqL1xuICAgIHZhciBiYXNlRWFjaFJpZ2h0ID0gY3JlYXRlQmFzZUVhY2goYmFzZUZvck93blJpZ2h0LCB0cnVlKTtcblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLmV2ZXJ5YCB3aXRob3V0IHN1cHBvcnQgZm9yIGl0ZXJhdGVlIHNob3J0aGFuZHMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7QXJyYXl8T2JqZWN0fSBjb2xsZWN0aW9uIFRoZSBjb2xsZWN0aW9uIHRvIGl0ZXJhdGUgb3Zlci5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBwcmVkaWNhdGUgVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYWxsIGVsZW1lbnRzIHBhc3MgdGhlIHByZWRpY2F0ZSBjaGVjayxcbiAgICAgKiAgZWxzZSBgZmFsc2VgXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZUV2ZXJ5KGNvbGxlY3Rpb24sIHByZWRpY2F0ZSkge1xuICAgICAgdmFyIHJlc3VsdCA9IHRydWU7XG4gICAgICBiYXNlRWFjaChjb2xsZWN0aW9uLCBmdW5jdGlvbih2YWx1ZSwgaW5kZXgsIGNvbGxlY3Rpb24pIHtcbiAgICAgICAgcmVzdWx0ID0gISFwcmVkaWNhdGUodmFsdWUsIGluZGV4LCBjb2xsZWN0aW9uKTtcbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICAgIH0pO1xuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBtZXRob2RzIGxpa2UgYF8ubWF4YCBhbmQgYF8ubWluYCB3aGljaCBhY2NlcHRzIGFcbiAgICAgKiBgY29tcGFyYXRvcmAgdG8gZGV0ZXJtaW5lIHRoZSBleHRyZW11bSB2YWx1ZS5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIGl0ZXJhdGUgb3Zlci5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBpdGVyYXRlZSBUaGUgaXRlcmF0ZWUgaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGNvbXBhcmF0b3IgVGhlIGNvbXBhcmF0b3IgdXNlZCB0byBjb21wYXJlIHZhbHVlcy5cbiAgICAgKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgZXh0cmVtdW0gdmFsdWUuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZUV4dHJlbXVtKGFycmF5LCBpdGVyYXRlZSwgY29tcGFyYXRvcikge1xuICAgICAgdmFyIGluZGV4ID0gLTEsXG4gICAgICAgICAgbGVuZ3RoID0gYXJyYXkubGVuZ3RoO1xuXG4gICAgICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgICAgICB2YXIgdmFsdWUgPSBhcnJheVtpbmRleF0sXG4gICAgICAgICAgICBjdXJyZW50ID0gaXRlcmF0ZWUodmFsdWUpO1xuXG4gICAgICAgIGlmIChjdXJyZW50ICE9IG51bGwgJiYgKGNvbXB1dGVkID09PSB1bmRlZmluZWRcbiAgICAgICAgICAgICAgPyAoY3VycmVudCA9PT0gY3VycmVudCAmJiAhaXNTeW1ib2woY3VycmVudCkpXG4gICAgICAgICAgICAgIDogY29tcGFyYXRvcihjdXJyZW50LCBjb21wdXRlZClcbiAgICAgICAgICAgICkpIHtcbiAgICAgICAgICB2YXIgY29tcHV0ZWQgPSBjdXJyZW50LFxuICAgICAgICAgICAgICByZXN1bHQgPSB2YWx1ZTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5maWxsYCB3aXRob3V0IGFuIGl0ZXJhdGVlIGNhbGwgZ3VhcmQuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBmaWxsLlxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGZpbGwgYGFycmF5YCB3aXRoLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbc3RhcnQ9MF0gVGhlIHN0YXJ0IHBvc2l0aW9uLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbZW5kPWFycmF5Lmxlbmd0aF0gVGhlIGVuZCBwb3NpdGlvbi5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgYGFycmF5YC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlRmlsbChhcnJheSwgdmFsdWUsIHN0YXJ0LCBlbmQpIHtcbiAgICAgIHZhciBsZW5ndGggPSBhcnJheS5sZW5ndGg7XG5cbiAgICAgIHN0YXJ0ID0gdG9JbnRlZ2VyKHN0YXJ0KTtcbiAgICAgIGlmIChzdGFydCA8IDApIHtcbiAgICAgICAgc3RhcnQgPSAtc3RhcnQgPiBsZW5ndGggPyAwIDogKGxlbmd0aCArIHN0YXJ0KTtcbiAgICAgIH1cbiAgICAgIGVuZCA9IChlbmQgPT09IHVuZGVmaW5lZCB8fCBlbmQgPiBsZW5ndGgpID8gbGVuZ3RoIDogdG9JbnRlZ2VyKGVuZCk7XG4gICAgICBpZiAoZW5kIDwgMCkge1xuICAgICAgICBlbmQgKz0gbGVuZ3RoO1xuICAgICAgfVxuICAgICAgZW5kID0gc3RhcnQgPiBlbmQgPyAwIDogdG9MZW5ndGgoZW5kKTtcbiAgICAgIHdoaWxlIChzdGFydCA8IGVuZCkge1xuICAgICAgICBhcnJheVtzdGFydCsrXSA9IHZhbHVlO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGFycmF5O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLmZpbHRlcmAgd2l0aG91dCBzdXBwb3J0IGZvciBpdGVyYXRlZSBzaG9ydGhhbmRzLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0FycmF5fE9iamVjdH0gY29sbGVjdGlvbiBUaGUgY29sbGVjdGlvbiB0byBpdGVyYXRlIG92ZXIuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gcHJlZGljYXRlIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBuZXcgZmlsdGVyZWQgYXJyYXkuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZUZpbHRlcihjb2xsZWN0aW9uLCBwcmVkaWNhdGUpIHtcbiAgICAgIHZhciByZXN1bHQgPSBbXTtcbiAgICAgIGJhc2VFYWNoKGNvbGxlY3Rpb24sIGZ1bmN0aW9uKHZhbHVlLCBpbmRleCwgY29sbGVjdGlvbikge1xuICAgICAgICBpZiAocHJlZGljYXRlKHZhbHVlLCBpbmRleCwgY29sbGVjdGlvbikpIHtcbiAgICAgICAgICByZXN1bHQucHVzaCh2YWx1ZSk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5mbGF0dGVuYCB3aXRoIHN1cHBvcnQgZm9yIHJlc3RyaWN0aW5nIGZsYXR0ZW5pbmcuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBmbGF0dGVuLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBkZXB0aCBUaGUgbWF4aW11bSByZWN1cnNpb24gZGVwdGguXG4gICAgICogQHBhcmFtIHtib29sZWFufSBbcHJlZGljYXRlPWlzRmxhdHRlbmFibGVdIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gICAgICogQHBhcmFtIHtib29sZWFufSBbaXNTdHJpY3RdIFJlc3RyaWN0IHRvIHZhbHVlcyB0aGF0IHBhc3MgYHByZWRpY2F0ZWAgY2hlY2tzLlxuICAgICAqIEBwYXJhbSB7QXJyYXl9IFtyZXN1bHQ9W11dIFRoZSBpbml0aWFsIHJlc3VsdCB2YWx1ZS5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIG5ldyBmbGF0dGVuZWQgYXJyYXkuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZUZsYXR0ZW4oYXJyYXksIGRlcHRoLCBwcmVkaWNhdGUsIGlzU3RyaWN0LCByZXN1bHQpIHtcbiAgICAgIHZhciBpbmRleCA9IC0xLFxuICAgICAgICAgIGxlbmd0aCA9IGFycmF5Lmxlbmd0aDtcblxuICAgICAgcHJlZGljYXRlIHx8IChwcmVkaWNhdGUgPSBpc0ZsYXR0ZW5hYmxlKTtcbiAgICAgIHJlc3VsdCB8fCAocmVzdWx0ID0gW10pO1xuXG4gICAgICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgICAgICB2YXIgdmFsdWUgPSBhcnJheVtpbmRleF07XG4gICAgICAgIGlmIChkZXB0aCA+IDAgJiYgcHJlZGljYXRlKHZhbHVlKSkge1xuICAgICAgICAgIGlmIChkZXB0aCA+IDEpIHtcbiAgICAgICAgICAgIC8vIFJlY3Vyc2l2ZWx5IGZsYXR0ZW4gYXJyYXlzIChzdXNjZXB0aWJsZSB0byBjYWxsIHN0YWNrIGxpbWl0cykuXG4gICAgICAgICAgICBiYXNlRmxhdHRlbih2YWx1ZSwgZGVwdGggLSAxLCBwcmVkaWNhdGUsIGlzU3RyaWN0LCByZXN1bHQpO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBhcnJheVB1c2gocmVzdWx0LCB2YWx1ZSk7XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2UgaWYgKCFpc1N0cmljdCkge1xuICAgICAgICAgIHJlc3VsdFtyZXN1bHQubGVuZ3RoXSA9IHZhbHVlO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBiYXNlRm9yT3duYCB3aGljaCBpdGVyYXRlcyBvdmVyIGBvYmplY3RgXG4gICAgICogcHJvcGVydGllcyByZXR1cm5lZCBieSBga2V5c0Z1bmNgIGFuZCBpbnZva2VzIGBpdGVyYXRlZWAgZm9yIGVhY2ggcHJvcGVydHkuXG4gICAgICogSXRlcmF0ZWUgZnVuY3Rpb25zIG1heSBleGl0IGl0ZXJhdGlvbiBlYXJseSBieSBleHBsaWNpdGx5IHJldHVybmluZyBgZmFsc2VgLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gaXRlcmF0ZSBvdmVyLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGl0ZXJhdGVlIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0ga2V5c0Z1bmMgVGhlIGZ1bmN0aW9uIHRvIGdldCB0aGUga2V5cyBvZiBgb2JqZWN0YC5cbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIGBvYmplY3RgLlxuICAgICAqL1xuICAgIHZhciBiYXNlRm9yID0gY3JlYXRlQmFzZUZvcigpO1xuXG4gICAgLyoqXG4gICAgICogVGhpcyBmdW5jdGlvbiBpcyBsaWtlIGBiYXNlRm9yYCBleGNlcHQgdGhhdCBpdCBpdGVyYXRlcyBvdmVyIHByb3BlcnRpZXNcbiAgICAgKiBpbiB0aGUgb3Bwb3NpdGUgb3JkZXIuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBpdGVyYXRlIG92ZXIuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gaXRlcmF0ZWUgVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBrZXlzRnVuYyBUaGUgZnVuY3Rpb24gdG8gZ2V0IHRoZSBrZXlzIG9mIGBvYmplY3RgLlxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgYG9iamVjdGAuXG4gICAgICovXG4gICAgdmFyIGJhc2VGb3JSaWdodCA9IGNyZWF0ZUJhc2VGb3IodHJ1ZSk7XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5mb3JPd25gIHdpdGhvdXQgc3VwcG9ydCBmb3IgaXRlcmF0ZWUgc2hvcnRoYW5kcy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIGl0ZXJhdGUgb3Zlci5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBpdGVyYXRlZSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgYG9iamVjdGAuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZUZvck93bihvYmplY3QsIGl0ZXJhdGVlKSB7XG4gICAgICByZXR1cm4gb2JqZWN0ICYmIGJhc2VGb3Iob2JqZWN0LCBpdGVyYXRlZSwga2V5cyk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uZm9yT3duUmlnaHRgIHdpdGhvdXQgc3VwcG9ydCBmb3IgaXRlcmF0ZWUgc2hvcnRoYW5kcy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIGl0ZXJhdGUgb3Zlci5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBpdGVyYXRlZSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgYG9iamVjdGAuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZUZvck93blJpZ2h0KG9iamVjdCwgaXRlcmF0ZWUpIHtcbiAgICAgIHJldHVybiBvYmplY3QgJiYgYmFzZUZvclJpZ2h0KG9iamVjdCwgaXRlcmF0ZWUsIGtleXMpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLmZ1bmN0aW9uc2Agd2hpY2ggY3JlYXRlcyBhbiBhcnJheSBvZlxuICAgICAqIGBvYmplY3RgIGZ1bmN0aW9uIHByb3BlcnR5IG5hbWVzIGZpbHRlcmVkIGZyb20gYHByb3BzYC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIGluc3BlY3QuXG4gICAgICogQHBhcmFtIHtBcnJheX0gcHJvcHMgVGhlIHByb3BlcnR5IG5hbWVzIHRvIGZpbHRlci5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIGZ1bmN0aW9uIG5hbWVzLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VGdW5jdGlvbnMob2JqZWN0LCBwcm9wcykge1xuICAgICAgcmV0dXJuIGFycmF5RmlsdGVyKHByb3BzLCBmdW5jdGlvbihrZXkpIHtcbiAgICAgICAgcmV0dXJuIGlzRnVuY3Rpb24ob2JqZWN0W2tleV0pO1xuICAgICAgfSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uZ2V0YCB3aXRob3V0IHN1cHBvcnQgZm9yIGRlZmF1bHQgdmFsdWVzLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gcXVlcnkuXG4gICAgICogQHBhcmFtIHtBcnJheXxzdHJpbmd9IHBhdGggVGhlIHBhdGggb2YgdGhlIHByb3BlcnR5IHRvIGdldC5cbiAgICAgKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgcmVzb2x2ZWQgdmFsdWUuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZUdldChvYmplY3QsIHBhdGgpIHtcbiAgICAgIHBhdGggPSBjYXN0UGF0aChwYXRoLCBvYmplY3QpO1xuXG4gICAgICB2YXIgaW5kZXggPSAwLFxuICAgICAgICAgIGxlbmd0aCA9IHBhdGgubGVuZ3RoO1xuXG4gICAgICB3aGlsZSAob2JqZWN0ICE9IG51bGwgJiYgaW5kZXggPCBsZW5ndGgpIHtcbiAgICAgICAgb2JqZWN0ID0gb2JqZWN0W3RvS2V5KHBhdGhbaW5kZXgrK10pXTtcbiAgICAgIH1cbiAgICAgIHJldHVybiAoaW5kZXggJiYgaW5kZXggPT0gbGVuZ3RoKSA/IG9iamVjdCA6IHVuZGVmaW5lZDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgZ2V0QWxsS2V5c2AgYW5kIGBnZXRBbGxLZXlzSW5gIHdoaWNoIHVzZXNcbiAgICAgKiBga2V5c0Z1bmNgIGFuZCBgc3ltYm9sc0Z1bmNgIHRvIGdldCB0aGUgZW51bWVyYWJsZSBwcm9wZXJ0eSBuYW1lcyBhbmRcbiAgICAgKiBzeW1ib2xzIG9mIGBvYmplY3RgLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gcXVlcnkuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0ga2V5c0Z1bmMgVGhlIGZ1bmN0aW9uIHRvIGdldCB0aGUga2V5cyBvZiBgb2JqZWN0YC5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBzeW1ib2xzRnVuYyBUaGUgZnVuY3Rpb24gdG8gZ2V0IHRoZSBzeW1ib2xzIG9mIGBvYmplY3RgLlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgYXJyYXkgb2YgcHJvcGVydHkgbmFtZXMgYW5kIHN5bWJvbHMuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZUdldEFsbEtleXMob2JqZWN0LCBrZXlzRnVuYywgc3ltYm9sc0Z1bmMpIHtcbiAgICAgIHZhciByZXN1bHQgPSBrZXlzRnVuYyhvYmplY3QpO1xuICAgICAgcmV0dXJuIGlzQXJyYXkob2JqZWN0KSA/IHJlc3VsdCA6IGFycmF5UHVzaChyZXN1bHQsIHN5bWJvbHNGdW5jKG9iamVjdCkpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBnZXRUYWdgIHdpdGhvdXQgZmFsbGJhY2tzIGZvciBidWdneSBlbnZpcm9ubWVudHMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIHF1ZXJ5LlxuICAgICAqIEByZXR1cm5zIHtzdHJpbmd9IFJldHVybnMgdGhlIGB0b1N0cmluZ1RhZ2AuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZUdldFRhZyh2YWx1ZSkge1xuICAgICAgaWYgKHZhbHVlID09IG51bGwpIHtcbiAgICAgICAgcmV0dXJuIHZhbHVlID09PSB1bmRlZmluZWQgPyB1bmRlZmluZWRUYWcgOiBudWxsVGFnO1xuICAgICAgfVxuICAgICAgcmV0dXJuIChzeW1Ub1N0cmluZ1RhZyAmJiBzeW1Ub1N0cmluZ1RhZyBpbiBPYmplY3QodmFsdWUpKVxuICAgICAgICA/IGdldFJhd1RhZyh2YWx1ZSlcbiAgICAgICAgOiBvYmplY3RUb1N0cmluZyh2YWx1ZSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uZ3RgIHdoaWNoIGRvZXNuJ3QgY29lcmNlIGFyZ3VtZW50cy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY29tcGFyZS5cbiAgICAgKiBAcGFyYW0geyp9IG90aGVyIFRoZSBvdGhlciB2YWx1ZSB0byBjb21wYXJlLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGdyZWF0ZXIgdGhhbiBgb3RoZXJgLFxuICAgICAqICBlbHNlIGBmYWxzZWAuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZUd0KHZhbHVlLCBvdGhlcikge1xuICAgICAgcmV0dXJuIHZhbHVlID4gb3RoZXI7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uaGFzYCB3aXRob3V0IHN1cHBvcnQgZm9yIGRlZXAgcGF0aHMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBbb2JqZWN0XSBUaGUgb2JqZWN0IHRvIHF1ZXJ5LlxuICAgICAqIEBwYXJhbSB7QXJyYXl8c3RyaW5nfSBrZXkgVGhlIGtleSB0byBjaGVjay5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYGtleWAgZXhpc3RzLCBlbHNlIGBmYWxzZWAuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZUhhcyhvYmplY3QsIGtleSkge1xuICAgICAgcmV0dXJuIG9iamVjdCAhPSBudWxsICYmIGhhc093blByb3BlcnR5LmNhbGwob2JqZWN0LCBrZXkpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLmhhc0luYCB3aXRob3V0IHN1cHBvcnQgZm9yIGRlZXAgcGF0aHMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBbb2JqZWN0XSBUaGUgb2JqZWN0IHRvIHF1ZXJ5LlxuICAgICAqIEBwYXJhbSB7QXJyYXl8c3RyaW5nfSBrZXkgVGhlIGtleSB0byBjaGVjay5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYGtleWAgZXhpc3RzLCBlbHNlIGBmYWxzZWAuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZUhhc0luKG9iamVjdCwga2V5KSB7XG4gICAgICByZXR1cm4gb2JqZWN0ICE9IG51bGwgJiYga2V5IGluIE9iamVjdChvYmplY3QpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLmluUmFuZ2VgIHdoaWNoIGRvZXNuJ3QgY29lcmNlIGFyZ3VtZW50cy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IG51bWJlciBUaGUgbnVtYmVyIHRvIGNoZWNrLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBzdGFydCBUaGUgc3RhcnQgb2YgdGhlIHJhbmdlLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBlbmQgVGhlIGVuZCBvZiB0aGUgcmFuZ2UuXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGBudW1iZXJgIGlzIGluIHRoZSByYW5nZSwgZWxzZSBgZmFsc2VgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VJblJhbmdlKG51bWJlciwgc3RhcnQsIGVuZCkge1xuICAgICAgcmV0dXJuIG51bWJlciA+PSBuYXRpdmVNaW4oc3RhcnQsIGVuZCkgJiYgbnVtYmVyIDwgbmF0aXZlTWF4KHN0YXJ0LCBlbmQpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIG1ldGhvZHMgbGlrZSBgXy5pbnRlcnNlY3Rpb25gLCB3aXRob3V0IHN1cHBvcnRcbiAgICAgKiBmb3IgaXRlcmF0ZWUgc2hvcnRoYW5kcywgdGhhdCBhY2NlcHRzIGFuIGFycmF5IG9mIGFycmF5cyB0byBpbnNwZWN0LlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheXMgVGhlIGFycmF5cyB0byBpbnNwZWN0LlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtpdGVyYXRlZV0gVGhlIGl0ZXJhdGVlIGludm9rZWQgcGVyIGVsZW1lbnQuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2NvbXBhcmF0b3JdIFRoZSBjb21wYXJhdG9yIGludm9rZWQgcGVyIGVsZW1lbnQuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBuZXcgYXJyYXkgb2Ygc2hhcmVkIHZhbHVlcy5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlSW50ZXJzZWN0aW9uKGFycmF5cywgaXRlcmF0ZWUsIGNvbXBhcmF0b3IpIHtcbiAgICAgIHZhciBpbmNsdWRlcyA9IGNvbXBhcmF0b3IgPyBhcnJheUluY2x1ZGVzV2l0aCA6IGFycmF5SW5jbHVkZXMsXG4gICAgICAgICAgbGVuZ3RoID0gYXJyYXlzWzBdLmxlbmd0aCxcbiAgICAgICAgICBvdGhMZW5ndGggPSBhcnJheXMubGVuZ3RoLFxuICAgICAgICAgIG90aEluZGV4ID0gb3RoTGVuZ3RoLFxuICAgICAgICAgIGNhY2hlcyA9IEFycmF5KG90aExlbmd0aCksXG4gICAgICAgICAgbWF4TGVuZ3RoID0gSW5maW5pdHksXG4gICAgICAgICAgcmVzdWx0ID0gW107XG5cbiAgICAgIHdoaWxlIChvdGhJbmRleC0tKSB7XG4gICAgICAgIHZhciBhcnJheSA9IGFycmF5c1tvdGhJbmRleF07XG4gICAgICAgIGlmIChvdGhJbmRleCAmJiBpdGVyYXRlZSkge1xuICAgICAgICAgIGFycmF5ID0gYXJyYXlNYXAoYXJyYXksIGJhc2VVbmFyeShpdGVyYXRlZSkpO1xuICAgICAgICB9XG4gICAgICAgIG1heExlbmd0aCA9IG5hdGl2ZU1pbihhcnJheS5sZW5ndGgsIG1heExlbmd0aCk7XG4gICAgICAgIGNhY2hlc1tvdGhJbmRleF0gPSAhY29tcGFyYXRvciAmJiAoaXRlcmF0ZWUgfHwgKGxlbmd0aCA+PSAxMjAgJiYgYXJyYXkubGVuZ3RoID49IDEyMCkpXG4gICAgICAgICAgPyBuZXcgU2V0Q2FjaGUob3RoSW5kZXggJiYgYXJyYXkpXG4gICAgICAgICAgOiB1bmRlZmluZWQ7XG4gICAgICB9XG4gICAgICBhcnJheSA9IGFycmF5c1swXTtcblxuICAgICAgdmFyIGluZGV4ID0gLTEsXG4gICAgICAgICAgc2VlbiA9IGNhY2hlc1swXTtcblxuICAgICAgb3V0ZXI6XG4gICAgICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCAmJiByZXN1bHQubGVuZ3RoIDwgbWF4TGVuZ3RoKSB7XG4gICAgICAgIHZhciB2YWx1ZSA9IGFycmF5W2luZGV4XSxcbiAgICAgICAgICAgIGNvbXB1dGVkID0gaXRlcmF0ZWUgPyBpdGVyYXRlZSh2YWx1ZSkgOiB2YWx1ZTtcblxuICAgICAgICB2YWx1ZSA9IChjb21wYXJhdG9yIHx8IHZhbHVlICE9PSAwKSA/IHZhbHVlIDogMDtcbiAgICAgICAgaWYgKCEoc2VlblxuICAgICAgICAgICAgICA/IGNhY2hlSGFzKHNlZW4sIGNvbXB1dGVkKVxuICAgICAgICAgICAgICA6IGluY2x1ZGVzKHJlc3VsdCwgY29tcHV0ZWQsIGNvbXBhcmF0b3IpXG4gICAgICAgICAgICApKSB7XG4gICAgICAgICAgb3RoSW5kZXggPSBvdGhMZW5ndGg7XG4gICAgICAgICAgd2hpbGUgKC0tb3RoSW5kZXgpIHtcbiAgICAgICAgICAgIHZhciBjYWNoZSA9IGNhY2hlc1tvdGhJbmRleF07XG4gICAgICAgICAgICBpZiAoIShjYWNoZVxuICAgICAgICAgICAgICAgICAgPyBjYWNoZUhhcyhjYWNoZSwgY29tcHV0ZWQpXG4gICAgICAgICAgICAgICAgICA6IGluY2x1ZGVzKGFycmF5c1tvdGhJbmRleF0sIGNvbXB1dGVkLCBjb21wYXJhdG9yKSlcbiAgICAgICAgICAgICAgICApIHtcbiAgICAgICAgICAgICAgY29udGludWUgb3V0ZXI7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmIChzZWVuKSB7XG4gICAgICAgICAgICBzZWVuLnB1c2goY29tcHV0ZWQpO1xuICAgICAgICAgIH1cbiAgICAgICAgICByZXN1bHQucHVzaCh2YWx1ZSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uaW52ZXJ0YCBhbmQgYF8uaW52ZXJ0QnlgIHdoaWNoIGludmVydHNcbiAgICAgKiBgb2JqZWN0YCB3aXRoIHZhbHVlcyB0cmFuc2Zvcm1lZCBieSBgaXRlcmF0ZWVgIGFuZCBzZXQgYnkgYHNldHRlcmAuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBpdGVyYXRlIG92ZXIuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gc2V0dGVyIFRoZSBmdW5jdGlvbiB0byBzZXQgYGFjY3VtdWxhdG9yYCB2YWx1ZXMuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gaXRlcmF0ZWUgVGhlIGl0ZXJhdGVlIHRvIHRyYW5zZm9ybSB2YWx1ZXMuXG4gICAgICogQHBhcmFtIHtPYmplY3R9IGFjY3VtdWxhdG9yIFRoZSBpbml0aWFsIGludmVydGVkIG9iamVjdC5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgYGFjY3VtdWxhdG9yYC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlSW52ZXJ0ZXIob2JqZWN0LCBzZXR0ZXIsIGl0ZXJhdGVlLCBhY2N1bXVsYXRvcikge1xuICAgICAgYmFzZUZvck93bihvYmplY3QsIGZ1bmN0aW9uKHZhbHVlLCBrZXksIG9iamVjdCkge1xuICAgICAgICBzZXR0ZXIoYWNjdW11bGF0b3IsIGl0ZXJhdGVlKHZhbHVlKSwga2V5LCBvYmplY3QpO1xuICAgICAgfSk7XG4gICAgICByZXR1cm4gYWNjdW11bGF0b3I7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uaW52b2tlYCB3aXRob3V0IHN1cHBvcnQgZm9yIGluZGl2aWR1YWxcbiAgICAgKiBtZXRob2QgYXJndW1lbnRzLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gcXVlcnkuXG4gICAgICogQHBhcmFtIHtBcnJheXxzdHJpbmd9IHBhdGggVGhlIHBhdGggb2YgdGhlIG1ldGhvZCB0byBpbnZva2UuXG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJncyBUaGUgYXJndW1lbnRzIHRvIGludm9rZSB0aGUgbWV0aG9kIHdpdGguXG4gICAgICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIHJlc3VsdCBvZiB0aGUgaW52b2tlZCBtZXRob2QuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZUludm9rZShvYmplY3QsIHBhdGgsIGFyZ3MpIHtcbiAgICAgIHBhdGggPSBjYXN0UGF0aChwYXRoLCBvYmplY3QpO1xuICAgICAgb2JqZWN0ID0gcGFyZW50KG9iamVjdCwgcGF0aCk7XG4gICAgICB2YXIgZnVuYyA9IG9iamVjdCA9PSBudWxsID8gb2JqZWN0IDogb2JqZWN0W3RvS2V5KGxhc3QocGF0aCkpXTtcbiAgICAgIHJldHVybiBmdW5jID09IG51bGwgPyB1bmRlZmluZWQgOiBhcHBseShmdW5jLCBvYmplY3QsIGFyZ3MpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLmlzQXJndW1lbnRzYC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYW4gYGFyZ3VtZW50c2Agb2JqZWN0LFxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VJc0FyZ3VtZW50cyh2YWx1ZSkge1xuICAgICAgcmV0dXJuIGlzT2JqZWN0TGlrZSh2YWx1ZSkgJiYgYmFzZUdldFRhZyh2YWx1ZSkgPT0gYXJnc1RhZztcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5pc0FycmF5QnVmZmVyYCB3aXRob3V0IE5vZGUuanMgb3B0aW1pemF0aW9ucy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYW4gYXJyYXkgYnVmZmVyLCBlbHNlIGBmYWxzZWAuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZUlzQXJyYXlCdWZmZXIodmFsdWUpIHtcbiAgICAgIHJldHVybiBpc09iamVjdExpa2UodmFsdWUpICYmIGJhc2VHZXRUYWcodmFsdWUpID09IGFycmF5QnVmZmVyVGFnO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLmlzRGF0ZWAgd2l0aG91dCBOb2RlLmpzIG9wdGltaXphdGlvbnMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGEgZGF0ZSBvYmplY3QsIGVsc2UgYGZhbHNlYC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlSXNEYXRlKHZhbHVlKSB7XG4gICAgICByZXR1cm4gaXNPYmplY3RMaWtlKHZhbHVlKSAmJiBiYXNlR2V0VGFnKHZhbHVlKSA9PSBkYXRlVGFnO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLmlzRXF1YWxgIHdoaWNoIHN1cHBvcnRzIHBhcnRpYWwgY29tcGFyaXNvbnNcbiAgICAgKiBhbmQgdHJhY2tzIHRyYXZlcnNlZCBvYmplY3RzLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjb21wYXJlLlxuICAgICAqIEBwYXJhbSB7Kn0gb3RoZXIgVGhlIG90aGVyIHZhbHVlIHRvIGNvbXBhcmUuXG4gICAgICogQHBhcmFtIHtib29sZWFufSBiaXRtYXNrIFRoZSBiaXRtYXNrIGZsYWdzLlxuICAgICAqICAxIC0gVW5vcmRlcmVkIGNvbXBhcmlzb25cbiAgICAgKiAgMiAtIFBhcnRpYWwgY29tcGFyaXNvblxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtjdXN0b21pemVyXSBUaGUgZnVuY3Rpb24gdG8gY3VzdG9taXplIGNvbXBhcmlzb25zLlxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBbc3RhY2tdIFRyYWNrcyB0cmF2ZXJzZWQgYHZhbHVlYCBhbmQgYG90aGVyYCBvYmplY3RzLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiB0aGUgdmFsdWVzIGFyZSBlcXVpdmFsZW50LCBlbHNlIGBmYWxzZWAuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZUlzRXF1YWwodmFsdWUsIG90aGVyLCBiaXRtYXNrLCBjdXN0b21pemVyLCBzdGFjaykge1xuICAgICAgaWYgKHZhbHVlID09PSBvdGhlcikge1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgIH1cbiAgICAgIGlmICh2YWx1ZSA9PSBudWxsIHx8IG90aGVyID09IG51bGwgfHwgKCFpc09iamVjdExpa2UodmFsdWUpICYmICFpc09iamVjdExpa2Uob3RoZXIpKSkge1xuICAgICAgICByZXR1cm4gdmFsdWUgIT09IHZhbHVlICYmIG90aGVyICE9PSBvdGhlcjtcbiAgICAgIH1cbiAgICAgIHJldHVybiBiYXNlSXNFcXVhbERlZXAodmFsdWUsIG90aGVyLCBiaXRtYXNrLCBjdXN0b21pemVyLCBiYXNlSXNFcXVhbCwgc3RhY2spO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEEgc3BlY2lhbGl6ZWQgdmVyc2lvbiBvZiBgYmFzZUlzRXF1YWxgIGZvciBhcnJheXMgYW5kIG9iamVjdHMgd2hpY2ggcGVyZm9ybXNcbiAgICAgKiBkZWVwIGNvbXBhcmlzb25zIGFuZCB0cmFja3MgdHJhdmVyc2VkIG9iamVjdHMgZW5hYmxpbmcgb2JqZWN0cyB3aXRoIGNpcmN1bGFyXG4gICAgICogcmVmZXJlbmNlcyB0byBiZSBjb21wYXJlZC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIGNvbXBhcmUuXG4gICAgICogQHBhcmFtIHtPYmplY3R9IG90aGVyIFRoZSBvdGhlciBvYmplY3QgdG8gY29tcGFyZS5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gYml0bWFzayBUaGUgYml0bWFzayBmbGFncy4gU2VlIGBiYXNlSXNFcXVhbGAgZm9yIG1vcmUgZGV0YWlscy5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBjdXN0b21pemVyIFRoZSBmdW5jdGlvbiB0byBjdXN0b21pemUgY29tcGFyaXNvbnMuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gZXF1YWxGdW5jIFRoZSBmdW5jdGlvbiB0byBkZXRlcm1pbmUgZXF1aXZhbGVudHMgb2YgdmFsdWVzLlxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBbc3RhY2tdIFRyYWNrcyB0cmF2ZXJzZWQgYG9iamVjdGAgYW5kIGBvdGhlcmAgb2JqZWN0cy5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgdGhlIG9iamVjdHMgYXJlIGVxdWl2YWxlbnQsIGVsc2UgYGZhbHNlYC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlSXNFcXVhbERlZXAob2JqZWN0LCBvdGhlciwgYml0bWFzaywgY3VzdG9taXplciwgZXF1YWxGdW5jLCBzdGFjaykge1xuICAgICAgdmFyIG9iaklzQXJyID0gaXNBcnJheShvYmplY3QpLFxuICAgICAgICAgIG90aElzQXJyID0gaXNBcnJheShvdGhlciksXG4gICAgICAgICAgb2JqVGFnID0gb2JqSXNBcnIgPyBhcnJheVRhZyA6IGdldFRhZyhvYmplY3QpLFxuICAgICAgICAgIG90aFRhZyA9IG90aElzQXJyID8gYXJyYXlUYWcgOiBnZXRUYWcob3RoZXIpO1xuXG4gICAgICBvYmpUYWcgPSBvYmpUYWcgPT0gYXJnc1RhZyA/IG9iamVjdFRhZyA6IG9ialRhZztcbiAgICAgIG90aFRhZyA9IG90aFRhZyA9PSBhcmdzVGFnID8gb2JqZWN0VGFnIDogb3RoVGFnO1xuXG4gICAgICB2YXIgb2JqSXNPYmogPSBvYmpUYWcgPT0gb2JqZWN0VGFnLFxuICAgICAgICAgIG90aElzT2JqID0gb3RoVGFnID09IG9iamVjdFRhZyxcbiAgICAgICAgICBpc1NhbWVUYWcgPSBvYmpUYWcgPT0gb3RoVGFnO1xuXG4gICAgICBpZiAoaXNTYW1lVGFnICYmIGlzQnVmZmVyKG9iamVjdCkpIHtcbiAgICAgICAgaWYgKCFpc0J1ZmZlcihvdGhlcikpIHtcbiAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgICAgb2JqSXNBcnIgPSB0cnVlO1xuICAgICAgICBvYmpJc09iaiA9IGZhbHNlO1xuICAgICAgfVxuICAgICAgaWYgKGlzU2FtZVRhZyAmJiAhb2JqSXNPYmopIHtcbiAgICAgICAgc3RhY2sgfHwgKHN0YWNrID0gbmV3IFN0YWNrKTtcbiAgICAgICAgcmV0dXJuIChvYmpJc0FyciB8fCBpc1R5cGVkQXJyYXkob2JqZWN0KSlcbiAgICAgICAgICA/IGVxdWFsQXJyYXlzKG9iamVjdCwgb3RoZXIsIGJpdG1hc2ssIGN1c3RvbWl6ZXIsIGVxdWFsRnVuYywgc3RhY2spXG4gICAgICAgICAgOiBlcXVhbEJ5VGFnKG9iamVjdCwgb3RoZXIsIG9ialRhZywgYml0bWFzaywgY3VzdG9taXplciwgZXF1YWxGdW5jLCBzdGFjayk7XG4gICAgICB9XG4gICAgICBpZiAoIShiaXRtYXNrICYgQ09NUEFSRV9QQVJUSUFMX0ZMQUcpKSB7XG4gICAgICAgIHZhciBvYmpJc1dyYXBwZWQgPSBvYmpJc09iaiAmJiBoYXNPd25Qcm9wZXJ0eS5jYWxsKG9iamVjdCwgJ19fd3JhcHBlZF9fJyksXG4gICAgICAgICAgICBvdGhJc1dyYXBwZWQgPSBvdGhJc09iaiAmJiBoYXNPd25Qcm9wZXJ0eS5jYWxsKG90aGVyLCAnX193cmFwcGVkX18nKTtcblxuICAgICAgICBpZiAob2JqSXNXcmFwcGVkIHx8IG90aElzV3JhcHBlZCkge1xuICAgICAgICAgIHZhciBvYmpVbndyYXBwZWQgPSBvYmpJc1dyYXBwZWQgPyBvYmplY3QudmFsdWUoKSA6IG9iamVjdCxcbiAgICAgICAgICAgICAgb3RoVW53cmFwcGVkID0gb3RoSXNXcmFwcGVkID8gb3RoZXIudmFsdWUoKSA6IG90aGVyO1xuXG4gICAgICAgICAgc3RhY2sgfHwgKHN0YWNrID0gbmV3IFN0YWNrKTtcbiAgICAgICAgICByZXR1cm4gZXF1YWxGdW5jKG9ialVud3JhcHBlZCwgb3RoVW53cmFwcGVkLCBiaXRtYXNrLCBjdXN0b21pemVyLCBzdGFjayk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGlmICghaXNTYW1lVGFnKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cbiAgICAgIHN0YWNrIHx8IChzdGFjayA9IG5ldyBTdGFjayk7XG4gICAgICByZXR1cm4gZXF1YWxPYmplY3RzKG9iamVjdCwgb3RoZXIsIGJpdG1hc2ssIGN1c3RvbWl6ZXIsIGVxdWFsRnVuYywgc3RhY2spO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLmlzTWFwYCB3aXRob3V0IE5vZGUuanMgb3B0aW1pemF0aW9ucy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYSBtYXAsIGVsc2UgYGZhbHNlYC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlSXNNYXAodmFsdWUpIHtcbiAgICAgIHJldHVybiBpc09iamVjdExpa2UodmFsdWUpICYmIGdldFRhZyh2YWx1ZSkgPT0gbWFwVGFnO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLmlzTWF0Y2hgIHdpdGhvdXQgc3VwcG9ydCBmb3IgaXRlcmF0ZWUgc2hvcnRoYW5kcy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIGluc3BlY3QuXG4gICAgICogQHBhcmFtIHtPYmplY3R9IHNvdXJjZSBUaGUgb2JqZWN0IG9mIHByb3BlcnR5IHZhbHVlcyB0byBtYXRjaC5cbiAgICAgKiBAcGFyYW0ge0FycmF5fSBtYXRjaERhdGEgVGhlIHByb3BlcnR5IG5hbWVzLCB2YWx1ZXMsIGFuZCBjb21wYXJlIGZsYWdzIHRvIG1hdGNoLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtjdXN0b21pemVyXSBUaGUgZnVuY3Rpb24gdG8gY3VzdG9taXplIGNvbXBhcmlzb25zLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgb2JqZWN0YCBpcyBhIG1hdGNoLCBlbHNlIGBmYWxzZWAuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZUlzTWF0Y2gob2JqZWN0LCBzb3VyY2UsIG1hdGNoRGF0YSwgY3VzdG9taXplcikge1xuICAgICAgdmFyIGluZGV4ID0gbWF0Y2hEYXRhLmxlbmd0aCxcbiAgICAgICAgICBsZW5ndGggPSBpbmRleCxcbiAgICAgICAgICBub0N1c3RvbWl6ZXIgPSAhY3VzdG9taXplcjtcblxuICAgICAgaWYgKG9iamVjdCA9PSBudWxsKSB7XG4gICAgICAgIHJldHVybiAhbGVuZ3RoO1xuICAgICAgfVxuICAgICAgb2JqZWN0ID0gT2JqZWN0KG9iamVjdCk7XG4gICAgICB3aGlsZSAoaW5kZXgtLSkge1xuICAgICAgICB2YXIgZGF0YSA9IG1hdGNoRGF0YVtpbmRleF07XG4gICAgICAgIGlmICgobm9DdXN0b21pemVyICYmIGRhdGFbMl0pXG4gICAgICAgICAgICAgID8gZGF0YVsxXSAhPT0gb2JqZWN0W2RhdGFbMF1dXG4gICAgICAgICAgICAgIDogIShkYXRhWzBdIGluIG9iamVjdClcbiAgICAgICAgICAgICkge1xuICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICAgICAgZGF0YSA9IG1hdGNoRGF0YVtpbmRleF07XG4gICAgICAgIHZhciBrZXkgPSBkYXRhWzBdLFxuICAgICAgICAgICAgb2JqVmFsdWUgPSBvYmplY3Rba2V5XSxcbiAgICAgICAgICAgIHNyY1ZhbHVlID0gZGF0YVsxXTtcblxuICAgICAgICBpZiAobm9DdXN0b21pemVyICYmIGRhdGFbMl0pIHtcbiAgICAgICAgICBpZiAob2JqVmFsdWUgPT09IHVuZGVmaW5lZCAmJiAhKGtleSBpbiBvYmplY3QpKSB7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHZhciBzdGFjayA9IG5ldyBTdGFjaztcbiAgICAgICAgICBpZiAoY3VzdG9taXplcikge1xuICAgICAgICAgICAgdmFyIHJlc3VsdCA9IGN1c3RvbWl6ZXIob2JqVmFsdWUsIHNyY1ZhbHVlLCBrZXksIG9iamVjdCwgc291cmNlLCBzdGFjayk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmICghKHJlc3VsdCA9PT0gdW5kZWZpbmVkXG4gICAgICAgICAgICAgICAgPyBiYXNlSXNFcXVhbChzcmNWYWx1ZSwgb2JqVmFsdWUsIENPTVBBUkVfUEFSVElBTF9GTEFHIHwgQ09NUEFSRV9VTk9SREVSRURfRkxBRywgY3VzdG9taXplciwgc3RhY2spXG4gICAgICAgICAgICAgICAgOiByZXN1bHRcbiAgICAgICAgICAgICAgKSkge1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uaXNOYXRpdmVgIHdpdGhvdXQgYmFkIHNoaW0gY2hlY2tzLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhIG5hdGl2ZSBmdW5jdGlvbixcbiAgICAgKiAgZWxzZSBgZmFsc2VgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VJc05hdGl2ZSh2YWx1ZSkge1xuICAgICAgaWYgKCFpc09iamVjdCh2YWx1ZSkgfHwgaXNNYXNrZWQodmFsdWUpKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cbiAgICAgIHZhciBwYXR0ZXJuID0gaXNGdW5jdGlvbih2YWx1ZSkgPyByZUlzTmF0aXZlIDogcmVJc0hvc3RDdG9yO1xuICAgICAgcmV0dXJuIHBhdHRlcm4udGVzdCh0b1NvdXJjZSh2YWx1ZSkpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLmlzUmVnRXhwYCB3aXRob3V0IE5vZGUuanMgb3B0aW1pemF0aW9ucy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYSByZWdleHAsIGVsc2UgYGZhbHNlYC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlSXNSZWdFeHAodmFsdWUpIHtcbiAgICAgIHJldHVybiBpc09iamVjdExpa2UodmFsdWUpICYmIGJhc2VHZXRUYWcodmFsdWUpID09IHJlZ2V4cFRhZztcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5pc1NldGAgd2l0aG91dCBOb2RlLmpzIG9wdGltaXphdGlvbnMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGEgc2V0LCBlbHNlIGBmYWxzZWAuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZUlzU2V0KHZhbHVlKSB7XG4gICAgICByZXR1cm4gaXNPYmplY3RMaWtlKHZhbHVlKSAmJiBnZXRUYWcodmFsdWUpID09IHNldFRhZztcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5pc1R5cGVkQXJyYXlgIHdpdGhvdXQgTm9kZS5qcyBvcHRpbWl6YXRpb25zLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhIHR5cGVkIGFycmF5LCBlbHNlIGBmYWxzZWAuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZUlzVHlwZWRBcnJheSh2YWx1ZSkge1xuICAgICAgcmV0dXJuIGlzT2JqZWN0TGlrZSh2YWx1ZSkgJiZcbiAgICAgICAgaXNMZW5ndGgodmFsdWUubGVuZ3RoKSAmJiAhIXR5cGVkQXJyYXlUYWdzW2Jhc2VHZXRUYWcodmFsdWUpXTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5pdGVyYXRlZWAuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7Kn0gW3ZhbHVlPV8uaWRlbnRpdHldIFRoZSB2YWx1ZSB0byBjb252ZXJ0IHRvIGFuIGl0ZXJhdGVlLlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgaXRlcmF0ZWUuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZUl0ZXJhdGVlKHZhbHVlKSB7XG4gICAgICAvLyBEb24ndCBzdG9yZSB0aGUgYHR5cGVvZmAgcmVzdWx0IGluIGEgdmFyaWFibGUgdG8gYXZvaWQgYSBKSVQgYnVnIGluIFNhZmFyaSA5LlxuICAgICAgLy8gU2VlIGh0dHBzOi8vYnVncy53ZWJraXQub3JnL3Nob3dfYnVnLmNnaT9pZD0xNTYwMzQgZm9yIG1vcmUgZGV0YWlscy5cbiAgICAgIGlmICh0eXBlb2YgdmFsdWUgPT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICByZXR1cm4gdmFsdWU7XG4gICAgICB9XG4gICAgICBpZiAodmFsdWUgPT0gbnVsbCkge1xuICAgICAgICByZXR1cm4gaWRlbnRpdHk7XG4gICAgICB9XG4gICAgICBpZiAodHlwZW9mIHZhbHVlID09ICdvYmplY3QnKSB7XG4gICAgICAgIHJldHVybiBpc0FycmF5KHZhbHVlKVxuICAgICAgICAgID8gYmFzZU1hdGNoZXNQcm9wZXJ0eSh2YWx1ZVswXSwgdmFsdWVbMV0pXG4gICAgICAgICAgOiBiYXNlTWF0Y2hlcyh2YWx1ZSk7XG4gICAgICB9XG4gICAgICByZXR1cm4gcHJvcGVydHkodmFsdWUpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLmtleXNgIHdoaWNoIGRvZXNuJ3QgdHJlYXQgc3BhcnNlIGFycmF5cyBhcyBkZW5zZS5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIHF1ZXJ5LlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgYXJyYXkgb2YgcHJvcGVydHkgbmFtZXMuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZUtleXMob2JqZWN0KSB7XG4gICAgICBpZiAoIWlzUHJvdG90eXBlKG9iamVjdCkpIHtcbiAgICAgICAgcmV0dXJuIG5hdGl2ZUtleXMob2JqZWN0KTtcbiAgICAgIH1cbiAgICAgIHZhciByZXN1bHQgPSBbXTtcbiAgICAgIGZvciAodmFyIGtleSBpbiBPYmplY3Qob2JqZWN0KSkge1xuICAgICAgICBpZiAoaGFzT3duUHJvcGVydHkuY2FsbChvYmplY3QsIGtleSkgJiYga2V5ICE9ICdjb25zdHJ1Y3RvcicpIHtcbiAgICAgICAgICByZXN1bHQucHVzaChrZXkpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLmtleXNJbmAgd2hpY2ggZG9lc24ndCB0cmVhdCBzcGFyc2UgYXJyYXlzIGFzIGRlbnNlLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gcXVlcnkuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBhcnJheSBvZiBwcm9wZXJ0eSBuYW1lcy5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlS2V5c0luKG9iamVjdCkge1xuICAgICAgaWYgKCFpc09iamVjdChvYmplY3QpKSB7XG4gICAgICAgIHJldHVybiBuYXRpdmVLZXlzSW4ob2JqZWN0KTtcbiAgICAgIH1cbiAgICAgIHZhciBpc1Byb3RvID0gaXNQcm90b3R5cGUob2JqZWN0KSxcbiAgICAgICAgICByZXN1bHQgPSBbXTtcblxuICAgICAgZm9yICh2YXIga2V5IGluIG9iamVjdCkge1xuICAgICAgICBpZiAoIShrZXkgPT0gJ2NvbnN0cnVjdG9yJyAmJiAoaXNQcm90byB8fCAhaGFzT3duUHJvcGVydHkuY2FsbChvYmplY3QsIGtleSkpKSkge1xuICAgICAgICAgIHJlc3VsdC5wdXNoKGtleSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8ubHRgIHdoaWNoIGRvZXNuJ3QgY29lcmNlIGFyZ3VtZW50cy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY29tcGFyZS5cbiAgICAgKiBAcGFyYW0geyp9IG90aGVyIFRoZSBvdGhlciB2YWx1ZSB0byBjb21wYXJlLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGxlc3MgdGhhbiBgb3RoZXJgLFxuICAgICAqICBlbHNlIGBmYWxzZWAuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZUx0KHZhbHVlLCBvdGhlcikge1xuICAgICAgcmV0dXJuIHZhbHVlIDwgb3RoZXI7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8ubWFwYCB3aXRob3V0IHN1cHBvcnQgZm9yIGl0ZXJhdGVlIHNob3J0aGFuZHMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7QXJyYXl8T2JqZWN0fSBjb2xsZWN0aW9uIFRoZSBjb2xsZWN0aW9uIHRvIGl0ZXJhdGUgb3Zlci5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBpdGVyYXRlZSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgbmV3IG1hcHBlZCBhcnJheS5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlTWFwKGNvbGxlY3Rpb24sIGl0ZXJhdGVlKSB7XG4gICAgICB2YXIgaW5kZXggPSAtMSxcbiAgICAgICAgICByZXN1bHQgPSBpc0FycmF5TGlrZShjb2xsZWN0aW9uKSA/IEFycmF5KGNvbGxlY3Rpb24ubGVuZ3RoKSA6IFtdO1xuXG4gICAgICBiYXNlRWFjaChjb2xsZWN0aW9uLCBmdW5jdGlvbih2YWx1ZSwga2V5LCBjb2xsZWN0aW9uKSB7XG4gICAgICAgIHJlc3VsdFsrK2luZGV4XSA9IGl0ZXJhdGVlKHZhbHVlLCBrZXksIGNvbGxlY3Rpb24pO1xuICAgICAgfSk7XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLm1hdGNoZXNgIHdoaWNoIGRvZXNuJ3QgY2xvbmUgYHNvdXJjZWAuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBzb3VyY2UgVGhlIG9iamVjdCBvZiBwcm9wZXJ0eSB2YWx1ZXMgdG8gbWF0Y2guXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgc3BlYyBmdW5jdGlvbi5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlTWF0Y2hlcyhzb3VyY2UpIHtcbiAgICAgIHZhciBtYXRjaERhdGEgPSBnZXRNYXRjaERhdGEoc291cmNlKTtcbiAgICAgIGlmIChtYXRjaERhdGEubGVuZ3RoID09IDEgJiYgbWF0Y2hEYXRhWzBdWzJdKSB7XG4gICAgICAgIHJldHVybiBtYXRjaGVzU3RyaWN0Q29tcGFyYWJsZShtYXRjaERhdGFbMF1bMF0sIG1hdGNoRGF0YVswXVsxXSk7XG4gICAgICB9XG4gICAgICByZXR1cm4gZnVuY3Rpb24ob2JqZWN0KSB7XG4gICAgICAgIHJldHVybiBvYmplY3QgPT09IHNvdXJjZSB8fCBiYXNlSXNNYXRjaChvYmplY3QsIHNvdXJjZSwgbWF0Y2hEYXRhKTtcbiAgICAgIH07XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8ubWF0Y2hlc1Byb3BlcnR5YCB3aGljaCBkb2Vzbid0IGNsb25lIGBzcmNWYWx1ZWAuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBwYXRoIFRoZSBwYXRoIG9mIHRoZSBwcm9wZXJ0eSB0byBnZXQuXG4gICAgICogQHBhcmFtIHsqfSBzcmNWYWx1ZSBUaGUgdmFsdWUgdG8gbWF0Y2guXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgc3BlYyBmdW5jdGlvbi5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlTWF0Y2hlc1Byb3BlcnR5KHBhdGgsIHNyY1ZhbHVlKSB7XG4gICAgICBpZiAoaXNLZXkocGF0aCkgJiYgaXNTdHJpY3RDb21wYXJhYmxlKHNyY1ZhbHVlKSkge1xuICAgICAgICByZXR1cm4gbWF0Y2hlc1N0cmljdENvbXBhcmFibGUodG9LZXkocGF0aCksIHNyY1ZhbHVlKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBmdW5jdGlvbihvYmplY3QpIHtcbiAgICAgICAgdmFyIG9ialZhbHVlID0gZ2V0KG9iamVjdCwgcGF0aCk7XG4gICAgICAgIHJldHVybiAob2JqVmFsdWUgPT09IHVuZGVmaW5lZCAmJiBvYmpWYWx1ZSA9PT0gc3JjVmFsdWUpXG4gICAgICAgICAgPyBoYXNJbihvYmplY3QsIHBhdGgpXG4gICAgICAgICAgOiBiYXNlSXNFcXVhbChzcmNWYWx1ZSwgb2JqVmFsdWUsIENPTVBBUkVfUEFSVElBTF9GTEFHIHwgQ09NUEFSRV9VTk9SREVSRURfRkxBRyk7XG4gICAgICB9O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLm1lcmdlYCB3aXRob3V0IHN1cHBvcnQgZm9yIG11bHRpcGxlIHNvdXJjZXMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIGRlc3RpbmF0aW9uIG9iamVjdC5cbiAgICAgKiBAcGFyYW0ge09iamVjdH0gc291cmNlIFRoZSBzb3VyY2Ugb2JqZWN0LlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBzcmNJbmRleCBUaGUgaW5kZXggb2YgYHNvdXJjZWAuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2N1c3RvbWl6ZXJdIFRoZSBmdW5jdGlvbiB0byBjdXN0b21pemUgbWVyZ2VkIHZhbHVlcy5cbiAgICAgKiBAcGFyYW0ge09iamVjdH0gW3N0YWNrXSBUcmFja3MgdHJhdmVyc2VkIHNvdXJjZSB2YWx1ZXMgYW5kIHRoZWlyIG1lcmdlZFxuICAgICAqICBjb3VudGVycGFydHMuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZU1lcmdlKG9iamVjdCwgc291cmNlLCBzcmNJbmRleCwgY3VzdG9taXplciwgc3RhY2spIHtcbiAgICAgIGlmIChvYmplY3QgPT09IHNvdXJjZSkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICBiYXNlRm9yKHNvdXJjZSwgZnVuY3Rpb24oc3JjVmFsdWUsIGtleSkge1xuICAgICAgICBzdGFjayB8fCAoc3RhY2sgPSBuZXcgU3RhY2spO1xuICAgICAgICBpZiAoaXNPYmplY3Qoc3JjVmFsdWUpKSB7XG4gICAgICAgICAgYmFzZU1lcmdlRGVlcChvYmplY3QsIHNvdXJjZSwga2V5LCBzcmNJbmRleCwgYmFzZU1lcmdlLCBjdXN0b21pemVyLCBzdGFjayk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgdmFyIG5ld1ZhbHVlID0gY3VzdG9taXplclxuICAgICAgICAgICAgPyBjdXN0b21pemVyKHNhZmVHZXQob2JqZWN0LCBrZXkpLCBzcmNWYWx1ZSwgKGtleSArICcnKSwgb2JqZWN0LCBzb3VyY2UsIHN0YWNrKVxuICAgICAgICAgICAgOiB1bmRlZmluZWQ7XG5cbiAgICAgICAgICBpZiAobmV3VmFsdWUgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgbmV3VmFsdWUgPSBzcmNWYWx1ZTtcbiAgICAgICAgICB9XG4gICAgICAgICAgYXNzaWduTWVyZ2VWYWx1ZShvYmplY3QsIGtleSwgbmV3VmFsdWUpO1xuICAgICAgICB9XG4gICAgICB9LCBrZXlzSW4pO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEEgc3BlY2lhbGl6ZWQgdmVyc2lvbiBvZiBgYmFzZU1lcmdlYCBmb3IgYXJyYXlzIGFuZCBvYmplY3RzIHdoaWNoIHBlcmZvcm1zXG4gICAgICogZGVlcCBtZXJnZXMgYW5kIHRyYWNrcyB0cmF2ZXJzZWQgb2JqZWN0cyBlbmFibGluZyBvYmplY3RzIHdpdGggY2lyY3VsYXJcbiAgICAgKiByZWZlcmVuY2VzIHRvIGJlIG1lcmdlZC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgZGVzdGluYXRpb24gb2JqZWN0LlxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBzb3VyY2UgVGhlIHNvdXJjZSBvYmplY3QuXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSB2YWx1ZSB0byBtZXJnZS5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gc3JjSW5kZXggVGhlIGluZGV4IG9mIGBzb3VyY2VgLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IG1lcmdlRnVuYyBUaGUgZnVuY3Rpb24gdG8gbWVyZ2UgdmFsdWVzLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtjdXN0b21pemVyXSBUaGUgZnVuY3Rpb24gdG8gY3VzdG9taXplIGFzc2lnbmVkIHZhbHVlcy5cbiAgICAgKiBAcGFyYW0ge09iamVjdH0gW3N0YWNrXSBUcmFja3MgdHJhdmVyc2VkIHNvdXJjZSB2YWx1ZXMgYW5kIHRoZWlyIG1lcmdlZFxuICAgICAqICBjb3VudGVycGFydHMuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZU1lcmdlRGVlcChvYmplY3QsIHNvdXJjZSwga2V5LCBzcmNJbmRleCwgbWVyZ2VGdW5jLCBjdXN0b21pemVyLCBzdGFjaykge1xuICAgICAgdmFyIG9ialZhbHVlID0gc2FmZUdldChvYmplY3QsIGtleSksXG4gICAgICAgICAgc3JjVmFsdWUgPSBzYWZlR2V0KHNvdXJjZSwga2V5KSxcbiAgICAgICAgICBzdGFja2VkID0gc3RhY2suZ2V0KHNyY1ZhbHVlKTtcblxuICAgICAgaWYgKHN0YWNrZWQpIHtcbiAgICAgICAgYXNzaWduTWVyZ2VWYWx1ZShvYmplY3QsIGtleSwgc3RhY2tlZCk7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIHZhciBuZXdWYWx1ZSA9IGN1c3RvbWl6ZXJcbiAgICAgICAgPyBjdXN0b21pemVyKG9ialZhbHVlLCBzcmNWYWx1ZSwgKGtleSArICcnKSwgb2JqZWN0LCBzb3VyY2UsIHN0YWNrKVxuICAgICAgICA6IHVuZGVmaW5lZDtcblxuICAgICAgdmFyIGlzQ29tbW9uID0gbmV3VmFsdWUgPT09IHVuZGVmaW5lZDtcblxuICAgICAgaWYgKGlzQ29tbW9uKSB7XG4gICAgICAgIHZhciBpc0FyciA9IGlzQXJyYXkoc3JjVmFsdWUpLFxuICAgICAgICAgICAgaXNCdWZmID0gIWlzQXJyICYmIGlzQnVmZmVyKHNyY1ZhbHVlKSxcbiAgICAgICAgICAgIGlzVHlwZWQgPSAhaXNBcnIgJiYgIWlzQnVmZiAmJiBpc1R5cGVkQXJyYXkoc3JjVmFsdWUpO1xuXG4gICAgICAgIG5ld1ZhbHVlID0gc3JjVmFsdWU7XG4gICAgICAgIGlmIChpc0FyciB8fCBpc0J1ZmYgfHwgaXNUeXBlZCkge1xuICAgICAgICAgIGlmIChpc0FycmF5KG9ialZhbHVlKSkge1xuICAgICAgICAgICAgbmV3VmFsdWUgPSBvYmpWYWx1ZTtcbiAgICAgICAgICB9XG4gICAgICAgICAgZWxzZSBpZiAoaXNBcnJheUxpa2VPYmplY3Qob2JqVmFsdWUpKSB7XG4gICAgICAgICAgICBuZXdWYWx1ZSA9IGNvcHlBcnJheShvYmpWYWx1ZSk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGVsc2UgaWYgKGlzQnVmZikge1xuICAgICAgICAgICAgaXNDb21tb24gPSBmYWxzZTtcbiAgICAgICAgICAgIG5ld1ZhbHVlID0gY2xvbmVCdWZmZXIoc3JjVmFsdWUsIHRydWUpO1xuICAgICAgICAgIH1cbiAgICAgICAgICBlbHNlIGlmIChpc1R5cGVkKSB7XG4gICAgICAgICAgICBpc0NvbW1vbiA9IGZhbHNlO1xuICAgICAgICAgICAgbmV3VmFsdWUgPSBjbG9uZVR5cGVkQXJyYXkoc3JjVmFsdWUsIHRydWUpO1xuICAgICAgICAgIH1cbiAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIG5ld1ZhbHVlID0gW107XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKGlzUGxhaW5PYmplY3Qoc3JjVmFsdWUpIHx8IGlzQXJndW1lbnRzKHNyY1ZhbHVlKSkge1xuICAgICAgICAgIG5ld1ZhbHVlID0gb2JqVmFsdWU7XG4gICAgICAgICAgaWYgKGlzQXJndW1lbnRzKG9ialZhbHVlKSkge1xuICAgICAgICAgICAgbmV3VmFsdWUgPSB0b1BsYWluT2JqZWN0KG9ialZhbHVlKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgZWxzZSBpZiAoIWlzT2JqZWN0KG9ialZhbHVlKSB8fCBpc0Z1bmN0aW9uKG9ialZhbHVlKSkge1xuICAgICAgICAgICAgbmV3VmFsdWUgPSBpbml0Q2xvbmVPYmplY3Qoc3JjVmFsdWUpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICBpc0NvbW1vbiA9IGZhbHNlO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBpZiAoaXNDb21tb24pIHtcbiAgICAgICAgLy8gUmVjdXJzaXZlbHkgbWVyZ2Ugb2JqZWN0cyBhbmQgYXJyYXlzIChzdXNjZXB0aWJsZSB0byBjYWxsIHN0YWNrIGxpbWl0cykuXG4gICAgICAgIHN0YWNrLnNldChzcmNWYWx1ZSwgbmV3VmFsdWUpO1xuICAgICAgICBtZXJnZUZ1bmMobmV3VmFsdWUsIHNyY1ZhbHVlLCBzcmNJbmRleCwgY3VzdG9taXplciwgc3RhY2spO1xuICAgICAgICBzdGFja1snZGVsZXRlJ10oc3JjVmFsdWUpO1xuICAgICAgfVxuICAgICAgYXNzaWduTWVyZ2VWYWx1ZShvYmplY3QsIGtleSwgbmV3VmFsdWUpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLm50aGAgd2hpY2ggZG9lc24ndCBjb2VyY2UgYXJndW1lbnRzLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gcXVlcnkuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IG4gVGhlIGluZGV4IG9mIHRoZSBlbGVtZW50IHRvIHJldHVybi5cbiAgICAgKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgbnRoIGVsZW1lbnQgb2YgYGFycmF5YC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlTnRoKGFycmF5LCBuKSB7XG4gICAgICB2YXIgbGVuZ3RoID0gYXJyYXkubGVuZ3RoO1xuICAgICAgaWYgKCFsZW5ndGgpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgbiArPSBuIDwgMCA/IGxlbmd0aCA6IDA7XG4gICAgICByZXR1cm4gaXNJbmRleChuLCBsZW5ndGgpID8gYXJyYXlbbl0gOiB1bmRlZmluZWQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8ub3JkZXJCeWAgd2l0aG91dCBwYXJhbSBndWFyZHMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7QXJyYXl8T2JqZWN0fSBjb2xsZWN0aW9uIFRoZSBjb2xsZWN0aW9uIHRvIGl0ZXJhdGUgb3Zlci5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9uW118T2JqZWN0W118c3RyaW5nW119IGl0ZXJhdGVlcyBUaGUgaXRlcmF0ZWVzIHRvIHNvcnQgYnkuXG4gICAgICogQHBhcmFtIHtzdHJpbmdbXX0gb3JkZXJzIFRoZSBzb3J0IG9yZGVycyBvZiBgaXRlcmF0ZWVzYC5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIG5ldyBzb3J0ZWQgYXJyYXkuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZU9yZGVyQnkoY29sbGVjdGlvbiwgaXRlcmF0ZWVzLCBvcmRlcnMpIHtcbiAgICAgIGlmIChpdGVyYXRlZXMubGVuZ3RoKSB7XG4gICAgICAgIGl0ZXJhdGVlcyA9IGFycmF5TWFwKGl0ZXJhdGVlcywgZnVuY3Rpb24oaXRlcmF0ZWUpIHtcbiAgICAgICAgICBpZiAoaXNBcnJheShpdGVyYXRlZSkpIHtcbiAgICAgICAgICAgIHJldHVybiBmdW5jdGlvbih2YWx1ZSkge1xuICAgICAgICAgICAgICByZXR1cm4gYmFzZUdldCh2YWx1ZSwgaXRlcmF0ZWUubGVuZ3RoID09PSAxID8gaXRlcmF0ZWVbMF0gOiBpdGVyYXRlZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICAgIHJldHVybiBpdGVyYXRlZTtcbiAgICAgICAgfSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBpdGVyYXRlZXMgPSBbaWRlbnRpdHldO1xuICAgICAgfVxuXG4gICAgICB2YXIgaW5kZXggPSAtMTtcbiAgICAgIGl0ZXJhdGVlcyA9IGFycmF5TWFwKGl0ZXJhdGVlcywgYmFzZVVuYXJ5KGdldEl0ZXJhdGVlKCkpKTtcblxuICAgICAgdmFyIHJlc3VsdCA9IGJhc2VNYXAoY29sbGVjdGlvbiwgZnVuY3Rpb24odmFsdWUsIGtleSwgY29sbGVjdGlvbikge1xuICAgICAgICB2YXIgY3JpdGVyaWEgPSBhcnJheU1hcChpdGVyYXRlZXMsIGZ1bmN0aW9uKGl0ZXJhdGVlKSB7XG4gICAgICAgICAgcmV0dXJuIGl0ZXJhdGVlKHZhbHVlKTtcbiAgICAgICAgfSk7XG4gICAgICAgIHJldHVybiB7ICdjcml0ZXJpYSc6IGNyaXRlcmlhLCAnaW5kZXgnOiArK2luZGV4LCAndmFsdWUnOiB2YWx1ZSB9O1xuICAgICAgfSk7XG5cbiAgICAgIHJldHVybiBiYXNlU29ydEJ5KHJlc3VsdCwgZnVuY3Rpb24ob2JqZWN0LCBvdGhlcikge1xuICAgICAgICByZXR1cm4gY29tcGFyZU11bHRpcGxlKG9iamVjdCwgb3RoZXIsIG9yZGVycyk7XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5waWNrYCB3aXRob3V0IHN1cHBvcnQgZm9yIGluZGl2aWR1YWxcbiAgICAgKiBwcm9wZXJ0eSBpZGVudGlmaWVycy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgc291cmNlIG9iamVjdC5cbiAgICAgKiBAcGFyYW0ge3N0cmluZ1tdfSBwYXRocyBUaGUgcHJvcGVydHkgcGF0aHMgdG8gcGljay5cbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIHRoZSBuZXcgb2JqZWN0LlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VQaWNrKG9iamVjdCwgcGF0aHMpIHtcbiAgICAgIHJldHVybiBiYXNlUGlja0J5KG9iamVjdCwgcGF0aHMsIGZ1bmN0aW9uKHZhbHVlLCBwYXRoKSB7XG4gICAgICAgIHJldHVybiBoYXNJbihvYmplY3QsIHBhdGgpO1xuICAgICAgfSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgIGBfLnBpY2tCeWAgd2l0aG91dCBzdXBwb3J0IGZvciBpdGVyYXRlZSBzaG9ydGhhbmRzLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBzb3VyY2Ugb2JqZWN0LlxuICAgICAqIEBwYXJhbSB7c3RyaW5nW119IHBhdGhzIFRoZSBwcm9wZXJ0eSBwYXRocyB0byBwaWNrLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IHByZWRpY2F0ZSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgcHJvcGVydHkuXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyB0aGUgbmV3IG9iamVjdC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlUGlja0J5KG9iamVjdCwgcGF0aHMsIHByZWRpY2F0ZSkge1xuICAgICAgdmFyIGluZGV4ID0gLTEsXG4gICAgICAgICAgbGVuZ3RoID0gcGF0aHMubGVuZ3RoLFxuICAgICAgICAgIHJlc3VsdCA9IHt9O1xuXG4gICAgICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgICAgICB2YXIgcGF0aCA9IHBhdGhzW2luZGV4XSxcbiAgICAgICAgICAgIHZhbHVlID0gYmFzZUdldChvYmplY3QsIHBhdGgpO1xuXG4gICAgICAgIGlmIChwcmVkaWNhdGUodmFsdWUsIHBhdGgpKSB7XG4gICAgICAgICAgYmFzZVNldChyZXN1bHQsIGNhc3RQYXRoKHBhdGgsIG9iamVjdCksIHZhbHVlKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBBIHNwZWNpYWxpemVkIHZlcnNpb24gb2YgYGJhc2VQcm9wZXJ0eWAgd2hpY2ggc3VwcG9ydHMgZGVlcCBwYXRocy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtBcnJheXxzdHJpbmd9IHBhdGggVGhlIHBhdGggb2YgdGhlIHByb3BlcnR5IHRvIGdldC5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBhY2Nlc3NvciBmdW5jdGlvbi5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlUHJvcGVydHlEZWVwKHBhdGgpIHtcbiAgICAgIHJldHVybiBmdW5jdGlvbihvYmplY3QpIHtcbiAgICAgICAgcmV0dXJuIGJhc2VHZXQob2JqZWN0LCBwYXRoKTtcbiAgICAgIH07XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8ucHVsbEFsbEJ5YCB3aXRob3V0IHN1cHBvcnQgZm9yIGl0ZXJhdGVlXG4gICAgICogc2hvcnRoYW5kcy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIG1vZGlmeS5cbiAgICAgKiBAcGFyYW0ge0FycmF5fSB2YWx1ZXMgVGhlIHZhbHVlcyB0byByZW1vdmUuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2l0ZXJhdGVlXSBUaGUgaXRlcmF0ZWUgaW52b2tlZCBwZXIgZWxlbWVudC5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbY29tcGFyYXRvcl0gVGhlIGNvbXBhcmF0b3IgaW52b2tlZCBwZXIgZWxlbWVudC5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgYGFycmF5YC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlUHVsbEFsbChhcnJheSwgdmFsdWVzLCBpdGVyYXRlZSwgY29tcGFyYXRvcikge1xuICAgICAgdmFyIGluZGV4T2YgPSBjb21wYXJhdG9yID8gYmFzZUluZGV4T2ZXaXRoIDogYmFzZUluZGV4T2YsXG4gICAgICAgICAgaW5kZXggPSAtMSxcbiAgICAgICAgICBsZW5ndGggPSB2YWx1ZXMubGVuZ3RoLFxuICAgICAgICAgIHNlZW4gPSBhcnJheTtcblxuICAgICAgaWYgKGFycmF5ID09PSB2YWx1ZXMpIHtcbiAgICAgICAgdmFsdWVzID0gY29weUFycmF5KHZhbHVlcyk7XG4gICAgICB9XG4gICAgICBpZiAoaXRlcmF0ZWUpIHtcbiAgICAgICAgc2VlbiA9IGFycmF5TWFwKGFycmF5LCBiYXNlVW5hcnkoaXRlcmF0ZWUpKTtcbiAgICAgIH1cbiAgICAgIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgICAgIHZhciBmcm9tSW5kZXggPSAwLFxuICAgICAgICAgICAgdmFsdWUgPSB2YWx1ZXNbaW5kZXhdLFxuICAgICAgICAgICAgY29tcHV0ZWQgPSBpdGVyYXRlZSA/IGl0ZXJhdGVlKHZhbHVlKSA6IHZhbHVlO1xuXG4gICAgICAgIHdoaWxlICgoZnJvbUluZGV4ID0gaW5kZXhPZihzZWVuLCBjb21wdXRlZCwgZnJvbUluZGV4LCBjb21wYXJhdG9yKSkgPiAtMSkge1xuICAgICAgICAgIGlmIChzZWVuICE9PSBhcnJheSkge1xuICAgICAgICAgICAgc3BsaWNlLmNhbGwoc2VlbiwgZnJvbUluZGV4LCAxKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgc3BsaWNlLmNhbGwoYXJyYXksIGZyb21JbmRleCwgMSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiBhcnJheTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5wdWxsQXRgIHdpdGhvdXQgc3VwcG9ydCBmb3IgaW5kaXZpZHVhbFxuICAgICAqIGluZGV4ZXMgb3IgY2FwdHVyaW5nIHRoZSByZW1vdmVkIGVsZW1lbnRzLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gbW9kaWZ5LlxuICAgICAqIEBwYXJhbSB7bnVtYmVyW119IGluZGV4ZXMgVGhlIGluZGV4ZXMgb2YgZWxlbWVudHMgdG8gcmVtb3ZlLlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyBgYXJyYXlgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VQdWxsQXQoYXJyYXksIGluZGV4ZXMpIHtcbiAgICAgIHZhciBsZW5ndGggPSBhcnJheSA/IGluZGV4ZXMubGVuZ3RoIDogMCxcbiAgICAgICAgICBsYXN0SW5kZXggPSBsZW5ndGggLSAxO1xuXG4gICAgICB3aGlsZSAobGVuZ3RoLS0pIHtcbiAgICAgICAgdmFyIGluZGV4ID0gaW5kZXhlc1tsZW5ndGhdO1xuICAgICAgICBpZiAobGVuZ3RoID09IGxhc3RJbmRleCB8fCBpbmRleCAhPT0gcHJldmlvdXMpIHtcbiAgICAgICAgICB2YXIgcHJldmlvdXMgPSBpbmRleDtcbiAgICAgICAgICBpZiAoaXNJbmRleChpbmRleCkpIHtcbiAgICAgICAgICAgIHNwbGljZS5jYWxsKGFycmF5LCBpbmRleCwgMSk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGJhc2VVbnNldChhcnJheSwgaW5kZXgpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIGFycmF5O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLnJhbmRvbWAgd2l0aG91dCBzdXBwb3J0IGZvciByZXR1cm5pbmdcbiAgICAgKiBmbG9hdGluZy1wb2ludCBudW1iZXJzLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge251bWJlcn0gbG93ZXIgVGhlIGxvd2VyIGJvdW5kLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSB1cHBlciBUaGUgdXBwZXIgYm91bmQuXG4gICAgICogQHJldHVybnMge251bWJlcn0gUmV0dXJucyB0aGUgcmFuZG9tIG51bWJlci5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlUmFuZG9tKGxvd2VyLCB1cHBlcikge1xuICAgICAgcmV0dXJuIGxvd2VyICsgbmF0aXZlRmxvb3IobmF0aXZlUmFuZG9tKCkgKiAodXBwZXIgLSBsb3dlciArIDEpKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5yYW5nZWAgYW5kIGBfLnJhbmdlUmlnaHRgIHdoaWNoIGRvZXNuJ3RcbiAgICAgKiBjb2VyY2UgYXJndW1lbnRzLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge251bWJlcn0gc3RhcnQgVGhlIHN0YXJ0IG9mIHRoZSByYW5nZS5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gZW5kIFRoZSBlbmQgb2YgdGhlIHJhbmdlLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBzdGVwIFRoZSB2YWx1ZSB0byBpbmNyZW1lbnQgb3IgZGVjcmVtZW50IGJ5LlxuICAgICAqIEBwYXJhbSB7Ym9vbGVhbn0gW2Zyb21SaWdodF0gU3BlY2lmeSBpdGVyYXRpbmcgZnJvbSByaWdodCB0byBsZWZ0LlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgcmFuZ2Ugb2YgbnVtYmVycy5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlUmFuZ2Uoc3RhcnQsIGVuZCwgc3RlcCwgZnJvbVJpZ2h0KSB7XG4gICAgICB2YXIgaW5kZXggPSAtMSxcbiAgICAgICAgICBsZW5ndGggPSBuYXRpdmVNYXgobmF0aXZlQ2VpbCgoZW5kIC0gc3RhcnQpIC8gKHN0ZXAgfHwgMSkpLCAwKSxcbiAgICAgICAgICByZXN1bHQgPSBBcnJheShsZW5ndGgpO1xuXG4gICAgICB3aGlsZSAobGVuZ3RoLS0pIHtcbiAgICAgICAgcmVzdWx0W2Zyb21SaWdodCA/IGxlbmd0aCA6ICsraW5kZXhdID0gc3RhcnQ7XG4gICAgICAgIHN0YXJ0ICs9IHN0ZXA7XG4gICAgICB9XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLnJlcGVhdGAgd2hpY2ggZG9lc24ndCBjb2VyY2UgYXJndW1lbnRzLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gc3RyaW5nIFRoZSBzdHJpbmcgdG8gcmVwZWF0LlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBuIFRoZSBudW1iZXIgb2YgdGltZXMgdG8gcmVwZWF0IHRoZSBzdHJpbmcuXG4gICAgICogQHJldHVybnMge3N0cmluZ30gUmV0dXJucyB0aGUgcmVwZWF0ZWQgc3RyaW5nLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VSZXBlYXQoc3RyaW5nLCBuKSB7XG4gICAgICB2YXIgcmVzdWx0ID0gJyc7XG4gICAgICBpZiAoIXN0cmluZyB8fCBuIDwgMSB8fCBuID4gTUFYX1NBRkVfSU5URUdFUikge1xuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgICAgfVxuICAgICAgLy8gTGV2ZXJhZ2UgdGhlIGV4cG9uZW50aWF0aW9uIGJ5IHNxdWFyaW5nIGFsZ29yaXRobSBmb3IgYSBmYXN0ZXIgcmVwZWF0LlxuICAgICAgLy8gU2VlIGh0dHBzOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL0V4cG9uZW50aWF0aW9uX2J5X3NxdWFyaW5nIGZvciBtb3JlIGRldGFpbHMuXG4gICAgICBkbyB7XG4gICAgICAgIGlmIChuICUgMikge1xuICAgICAgICAgIHJlc3VsdCArPSBzdHJpbmc7XG4gICAgICAgIH1cbiAgICAgICAgbiA9IG5hdGl2ZUZsb29yKG4gLyAyKTtcbiAgICAgICAgaWYgKG4pIHtcbiAgICAgICAgICBzdHJpbmcgKz0gc3RyaW5nO1xuICAgICAgICB9XG4gICAgICB9IHdoaWxlIChuKTtcblxuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5yZXN0YCB3aGljaCBkb2Vzbid0IHZhbGlkYXRlIG9yIGNvZXJjZSBhcmd1bWVudHMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIGFwcGx5IGEgcmVzdCBwYXJhbWV0ZXIgdG8uXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFtzdGFydD1mdW5jLmxlbmd0aC0xXSBUaGUgc3RhcnQgcG9zaXRpb24gb2YgdGhlIHJlc3QgcGFyYW1ldGVyLlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IGZ1bmN0aW9uLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VSZXN0KGZ1bmMsIHN0YXJ0KSB7XG4gICAgICByZXR1cm4gc2V0VG9TdHJpbmcob3ZlclJlc3QoZnVuYywgc3RhcnQsIGlkZW50aXR5KSwgZnVuYyArICcnKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5zYW1wbGVgLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0FycmF5fE9iamVjdH0gY29sbGVjdGlvbiBUaGUgY29sbGVjdGlvbiB0byBzYW1wbGUuXG4gICAgICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIHJhbmRvbSBlbGVtZW50LlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VTYW1wbGUoY29sbGVjdGlvbikge1xuICAgICAgcmV0dXJuIGFycmF5U2FtcGxlKHZhbHVlcyhjb2xsZWN0aW9uKSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uc2FtcGxlU2l6ZWAgd2l0aG91dCBwYXJhbSBndWFyZHMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7QXJyYXl8T2JqZWN0fSBjb2xsZWN0aW9uIFRoZSBjb2xsZWN0aW9uIHRvIHNhbXBsZS5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gbiBUaGUgbnVtYmVyIG9mIGVsZW1lbnRzIHRvIHNhbXBsZS5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIHJhbmRvbSBlbGVtZW50cy5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlU2FtcGxlU2l6ZShjb2xsZWN0aW9uLCBuKSB7XG4gICAgICB2YXIgYXJyYXkgPSB2YWx1ZXMoY29sbGVjdGlvbik7XG4gICAgICByZXR1cm4gc2h1ZmZsZVNlbGYoYXJyYXksIGJhc2VDbGFtcChuLCAwLCBhcnJheS5sZW5ndGgpKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5zZXRgLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gbW9kaWZ5LlxuICAgICAqIEBwYXJhbSB7QXJyYXl8c3RyaW5nfSBwYXRoIFRoZSBwYXRoIG9mIHRoZSBwcm9wZXJ0eSB0byBzZXQuXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gc2V0LlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtjdXN0b21pemVyXSBUaGUgZnVuY3Rpb24gdG8gY3VzdG9taXplIHBhdGggY3JlYXRpb24uXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyBgb2JqZWN0YC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlU2V0KG9iamVjdCwgcGF0aCwgdmFsdWUsIGN1c3RvbWl6ZXIpIHtcbiAgICAgIGlmICghaXNPYmplY3Qob2JqZWN0KSkge1xuICAgICAgICByZXR1cm4gb2JqZWN0O1xuICAgICAgfVxuICAgICAgcGF0aCA9IGNhc3RQYXRoKHBhdGgsIG9iamVjdCk7XG5cbiAgICAgIHZhciBpbmRleCA9IC0xLFxuICAgICAgICAgIGxlbmd0aCA9IHBhdGgubGVuZ3RoLFxuICAgICAgICAgIGxhc3RJbmRleCA9IGxlbmd0aCAtIDEsXG4gICAgICAgICAgbmVzdGVkID0gb2JqZWN0O1xuXG4gICAgICB3aGlsZSAobmVzdGVkICE9IG51bGwgJiYgKytpbmRleCA8IGxlbmd0aCkge1xuICAgICAgICB2YXIga2V5ID0gdG9LZXkocGF0aFtpbmRleF0pLFxuICAgICAgICAgICAgbmV3VmFsdWUgPSB2YWx1ZTtcblxuICAgICAgICBpZiAoa2V5ID09PSAnX19wcm90b19fJyB8fCBrZXkgPT09ICdjb25zdHJ1Y3RvcicgfHwga2V5ID09PSAncHJvdG90eXBlJykge1xuICAgICAgICAgIHJldHVybiBvYmplY3Q7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoaW5kZXggIT0gbGFzdEluZGV4KSB7XG4gICAgICAgICAgdmFyIG9ialZhbHVlID0gbmVzdGVkW2tleV07XG4gICAgICAgICAgbmV3VmFsdWUgPSBjdXN0b21pemVyID8gY3VzdG9taXplcihvYmpWYWx1ZSwga2V5LCBuZXN0ZWQpIDogdW5kZWZpbmVkO1xuICAgICAgICAgIGlmIChuZXdWYWx1ZSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICBuZXdWYWx1ZSA9IGlzT2JqZWN0KG9ialZhbHVlKVxuICAgICAgICAgICAgICA/IG9ialZhbHVlXG4gICAgICAgICAgICAgIDogKGlzSW5kZXgocGF0aFtpbmRleCArIDFdKSA/IFtdIDoge30pO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBhc3NpZ25WYWx1ZShuZXN0ZWQsIGtleSwgbmV3VmFsdWUpO1xuICAgICAgICBuZXN0ZWQgPSBuZXN0ZWRba2V5XTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBvYmplY3Q7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYHNldERhdGFgIHdpdGhvdXQgc3VwcG9ydCBmb3IgaG90IGxvb3Agc2hvcnRpbmcuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIGFzc29jaWF0ZSBtZXRhZGF0YSB3aXRoLlxuICAgICAqIEBwYXJhbSB7Kn0gZGF0YSBUaGUgbWV0YWRhdGEuXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIGBmdW5jYC5cbiAgICAgKi9cbiAgICB2YXIgYmFzZVNldERhdGEgPSAhbWV0YU1hcCA/IGlkZW50aXR5IDogZnVuY3Rpb24oZnVuYywgZGF0YSkge1xuICAgICAgbWV0YU1hcC5zZXQoZnVuYywgZGF0YSk7XG4gICAgICByZXR1cm4gZnVuYztcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYHNldFRvU3RyaW5nYCB3aXRob3V0IHN1cHBvcnQgZm9yIGhvdCBsb29wIHNob3J0aW5nLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdW5jIFRoZSBmdW5jdGlvbiB0byBtb2RpZnkuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gc3RyaW5nIFRoZSBgdG9TdHJpbmdgIHJlc3VsdC5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgYGZ1bmNgLlxuICAgICAqL1xuICAgIHZhciBiYXNlU2V0VG9TdHJpbmcgPSAhZGVmaW5lUHJvcGVydHkgPyBpZGVudGl0eSA6IGZ1bmN0aW9uKGZ1bmMsIHN0cmluZykge1xuICAgICAgcmV0dXJuIGRlZmluZVByb3BlcnR5KGZ1bmMsICd0b1N0cmluZycsIHtcbiAgICAgICAgJ2NvbmZpZ3VyYWJsZSc6IHRydWUsXG4gICAgICAgICdlbnVtZXJhYmxlJzogZmFsc2UsXG4gICAgICAgICd2YWx1ZSc6IGNvbnN0YW50KHN0cmluZyksXG4gICAgICAgICd3cml0YWJsZSc6IHRydWVcbiAgICAgIH0pO1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5zaHVmZmxlYC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtBcnJheXxPYmplY3R9IGNvbGxlY3Rpb24gVGhlIGNvbGxlY3Rpb24gdG8gc2h1ZmZsZS5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIG5ldyBzaHVmZmxlZCBhcnJheS5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlU2h1ZmZsZShjb2xsZWN0aW9uKSB7XG4gICAgICByZXR1cm4gc2h1ZmZsZVNlbGYodmFsdWVzKGNvbGxlY3Rpb24pKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5zbGljZWAgd2l0aG91dCBhbiBpdGVyYXRlZSBjYWxsIGd1YXJkLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gc2xpY2UuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFtzdGFydD0wXSBUaGUgc3RhcnQgcG9zaXRpb24uXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFtlbmQ9YXJyYXkubGVuZ3RoXSBUaGUgZW5kIHBvc2l0aW9uLlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgc2xpY2Ugb2YgYGFycmF5YC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlU2xpY2UoYXJyYXksIHN0YXJ0LCBlbmQpIHtcbiAgICAgIHZhciBpbmRleCA9IC0xLFxuICAgICAgICAgIGxlbmd0aCA9IGFycmF5Lmxlbmd0aDtcblxuICAgICAgaWYgKHN0YXJ0IDwgMCkge1xuICAgICAgICBzdGFydCA9IC1zdGFydCA+IGxlbmd0aCA/IDAgOiAobGVuZ3RoICsgc3RhcnQpO1xuICAgICAgfVxuICAgICAgZW5kID0gZW5kID4gbGVuZ3RoID8gbGVuZ3RoIDogZW5kO1xuICAgICAgaWYgKGVuZCA8IDApIHtcbiAgICAgICAgZW5kICs9IGxlbmd0aDtcbiAgICAgIH1cbiAgICAgIGxlbmd0aCA9IHN0YXJ0ID4gZW5kID8gMCA6ICgoZW5kIC0gc3RhcnQpID4+PiAwKTtcbiAgICAgIHN0YXJ0ID4+Pj0gMDtcblxuICAgICAgdmFyIHJlc3VsdCA9IEFycmF5KGxlbmd0aCk7XG4gICAgICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgICAgICByZXN1bHRbaW5kZXhdID0gYXJyYXlbaW5kZXggKyBzdGFydF07XG4gICAgICB9XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLnNvbWVgIHdpdGhvdXQgc3VwcG9ydCBmb3IgaXRlcmF0ZWUgc2hvcnRoYW5kcy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtBcnJheXxPYmplY3R9IGNvbGxlY3Rpb24gVGhlIGNvbGxlY3Rpb24gdG8gaXRlcmF0ZSBvdmVyLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IHByZWRpY2F0ZSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBhbnkgZWxlbWVudCBwYXNzZXMgdGhlIHByZWRpY2F0ZSBjaGVjayxcbiAgICAgKiAgZWxzZSBgZmFsc2VgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VTb21lKGNvbGxlY3Rpb24sIHByZWRpY2F0ZSkge1xuICAgICAgdmFyIHJlc3VsdDtcblxuICAgICAgYmFzZUVhY2goY29sbGVjdGlvbiwgZnVuY3Rpb24odmFsdWUsIGluZGV4LCBjb2xsZWN0aW9uKSB7XG4gICAgICAgIHJlc3VsdCA9IHByZWRpY2F0ZSh2YWx1ZSwgaW5kZXgsIGNvbGxlY3Rpb24pO1xuICAgICAgICByZXR1cm4gIXJlc3VsdDtcbiAgICAgIH0pO1xuICAgICAgcmV0dXJuICEhcmVzdWx0O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLnNvcnRlZEluZGV4YCBhbmQgYF8uc29ydGVkTGFzdEluZGV4YCB3aGljaFxuICAgICAqIHBlcmZvcm1zIGEgYmluYXJ5IHNlYXJjaCBvZiBgYXJyYXlgIHRvIGRldGVybWluZSB0aGUgaW5kZXggYXQgd2hpY2ggYHZhbHVlYFxuICAgICAqIHNob3VsZCBiZSBpbnNlcnRlZCBpbnRvIGBhcnJheWAgaW4gb3JkZXIgdG8gbWFpbnRhaW4gaXRzIHNvcnQgb3JkZXIuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBzb3J0ZWQgYXJyYXkgdG8gaW5zcGVjdC5cbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBldmFsdWF0ZS5cbiAgICAgKiBAcGFyYW0ge2Jvb2xlYW59IFtyZXRIaWdoZXN0XSBTcGVjaWZ5IHJldHVybmluZyB0aGUgaGlnaGVzdCBxdWFsaWZpZWQgaW5kZXguXG4gICAgICogQHJldHVybnMge251bWJlcn0gUmV0dXJucyB0aGUgaW5kZXggYXQgd2hpY2ggYHZhbHVlYCBzaG91bGQgYmUgaW5zZXJ0ZWRcbiAgICAgKiAgaW50byBgYXJyYXlgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VTb3J0ZWRJbmRleChhcnJheSwgdmFsdWUsIHJldEhpZ2hlc3QpIHtcbiAgICAgIHZhciBsb3cgPSAwLFxuICAgICAgICAgIGhpZ2ggPSBhcnJheSA9PSBudWxsID8gbG93IDogYXJyYXkubGVuZ3RoO1xuXG4gICAgICBpZiAodHlwZW9mIHZhbHVlID09ICdudW1iZXInICYmIHZhbHVlID09PSB2YWx1ZSAmJiBoaWdoIDw9IEhBTEZfTUFYX0FSUkFZX0xFTkdUSCkge1xuICAgICAgICB3aGlsZSAobG93IDwgaGlnaCkge1xuICAgICAgICAgIHZhciBtaWQgPSAobG93ICsgaGlnaCkgPj4+IDEsXG4gICAgICAgICAgICAgIGNvbXB1dGVkID0gYXJyYXlbbWlkXTtcblxuICAgICAgICAgIGlmIChjb21wdXRlZCAhPT0gbnVsbCAmJiAhaXNTeW1ib2woY29tcHV0ZWQpICYmXG4gICAgICAgICAgICAgIChyZXRIaWdoZXN0ID8gKGNvbXB1dGVkIDw9IHZhbHVlKSA6IChjb21wdXRlZCA8IHZhbHVlKSkpIHtcbiAgICAgICAgICAgIGxvdyA9IG1pZCArIDE7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGhpZ2ggPSBtaWQ7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBoaWdoO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGJhc2VTb3J0ZWRJbmRleEJ5KGFycmF5LCB2YWx1ZSwgaWRlbnRpdHksIHJldEhpZ2hlc3QpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLnNvcnRlZEluZGV4QnlgIGFuZCBgXy5zb3J0ZWRMYXN0SW5kZXhCeWBcbiAgICAgKiB3aGljaCBpbnZva2VzIGBpdGVyYXRlZWAgZm9yIGB2YWx1ZWAgYW5kIGVhY2ggZWxlbWVudCBvZiBgYXJyYXlgIHRvIGNvbXB1dGVcbiAgICAgKiB0aGVpciBzb3J0IHJhbmtpbmcuIFRoZSBpdGVyYXRlZSBpcyBpbnZva2VkIHdpdGggb25lIGFyZ3VtZW50OyAodmFsdWUpLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgc29ydGVkIGFycmF5IHRvIGluc3BlY3QuXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gZXZhbHVhdGUuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gaXRlcmF0ZWUgVGhlIGl0ZXJhdGVlIGludm9rZWQgcGVyIGVsZW1lbnQuXG4gICAgICogQHBhcmFtIHtib29sZWFufSBbcmV0SGlnaGVzdF0gU3BlY2lmeSByZXR1cm5pbmcgdGhlIGhpZ2hlc3QgcXVhbGlmaWVkIGluZGV4LlxuICAgICAqIEByZXR1cm5zIHtudW1iZXJ9IFJldHVybnMgdGhlIGluZGV4IGF0IHdoaWNoIGB2YWx1ZWAgc2hvdWxkIGJlIGluc2VydGVkXG4gICAgICogIGludG8gYGFycmF5YC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlU29ydGVkSW5kZXhCeShhcnJheSwgdmFsdWUsIGl0ZXJhdGVlLCByZXRIaWdoZXN0KSB7XG4gICAgICB2YXIgbG93ID0gMCxcbiAgICAgICAgICBoaWdoID0gYXJyYXkgPT0gbnVsbCA/IDAgOiBhcnJheS5sZW5ndGg7XG4gICAgICBpZiAoaGlnaCA9PT0gMCkge1xuICAgICAgICByZXR1cm4gMDtcbiAgICAgIH1cblxuICAgICAgdmFsdWUgPSBpdGVyYXRlZSh2YWx1ZSk7XG4gICAgICB2YXIgdmFsSXNOYU4gPSB2YWx1ZSAhPT0gdmFsdWUsXG4gICAgICAgICAgdmFsSXNOdWxsID0gdmFsdWUgPT09IG51bGwsXG4gICAgICAgICAgdmFsSXNTeW1ib2wgPSBpc1N5bWJvbCh2YWx1ZSksXG4gICAgICAgICAgdmFsSXNVbmRlZmluZWQgPSB2YWx1ZSA9PT0gdW5kZWZpbmVkO1xuXG4gICAgICB3aGlsZSAobG93IDwgaGlnaCkge1xuICAgICAgICB2YXIgbWlkID0gbmF0aXZlRmxvb3IoKGxvdyArIGhpZ2gpIC8gMiksXG4gICAgICAgICAgICBjb21wdXRlZCA9IGl0ZXJhdGVlKGFycmF5W21pZF0pLFxuICAgICAgICAgICAgb3RoSXNEZWZpbmVkID0gY29tcHV0ZWQgIT09IHVuZGVmaW5lZCxcbiAgICAgICAgICAgIG90aElzTnVsbCA9IGNvbXB1dGVkID09PSBudWxsLFxuICAgICAgICAgICAgb3RoSXNSZWZsZXhpdmUgPSBjb21wdXRlZCA9PT0gY29tcHV0ZWQsXG4gICAgICAgICAgICBvdGhJc1N5bWJvbCA9IGlzU3ltYm9sKGNvbXB1dGVkKTtcblxuICAgICAgICBpZiAodmFsSXNOYU4pIHtcbiAgICAgICAgICB2YXIgc2V0TG93ID0gcmV0SGlnaGVzdCB8fCBvdGhJc1JlZmxleGl2ZTtcbiAgICAgICAgfSBlbHNlIGlmICh2YWxJc1VuZGVmaW5lZCkge1xuICAgICAgICAgIHNldExvdyA9IG90aElzUmVmbGV4aXZlICYmIChyZXRIaWdoZXN0IHx8IG90aElzRGVmaW5lZCk7XG4gICAgICAgIH0gZWxzZSBpZiAodmFsSXNOdWxsKSB7XG4gICAgICAgICAgc2V0TG93ID0gb3RoSXNSZWZsZXhpdmUgJiYgb3RoSXNEZWZpbmVkICYmIChyZXRIaWdoZXN0IHx8ICFvdGhJc051bGwpO1xuICAgICAgICB9IGVsc2UgaWYgKHZhbElzU3ltYm9sKSB7XG4gICAgICAgICAgc2V0TG93ID0gb3RoSXNSZWZsZXhpdmUgJiYgb3RoSXNEZWZpbmVkICYmICFvdGhJc051bGwgJiYgKHJldEhpZ2hlc3QgfHwgIW90aElzU3ltYm9sKTtcbiAgICAgICAgfSBlbHNlIGlmIChvdGhJc051bGwgfHwgb3RoSXNTeW1ib2wpIHtcbiAgICAgICAgICBzZXRMb3cgPSBmYWxzZTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBzZXRMb3cgPSByZXRIaWdoZXN0ID8gKGNvbXB1dGVkIDw9IHZhbHVlKSA6IChjb21wdXRlZCA8IHZhbHVlKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoc2V0TG93KSB7XG4gICAgICAgICAgbG93ID0gbWlkICsgMTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBoaWdoID0gbWlkO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gbmF0aXZlTWluKGhpZ2gsIE1BWF9BUlJBWV9JTkRFWCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uc29ydGVkVW5pcWAgYW5kIGBfLnNvcnRlZFVuaXFCeWAgd2l0aG91dFxuICAgICAqIHN1cHBvcnQgZm9yIGl0ZXJhdGVlIHNob3J0aGFuZHMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBpbnNwZWN0LlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtpdGVyYXRlZV0gVGhlIGl0ZXJhdGVlIGludm9rZWQgcGVyIGVsZW1lbnQuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBuZXcgZHVwbGljYXRlIGZyZWUgYXJyYXkuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZVNvcnRlZFVuaXEoYXJyYXksIGl0ZXJhdGVlKSB7XG4gICAgICB2YXIgaW5kZXggPSAtMSxcbiAgICAgICAgICBsZW5ndGggPSBhcnJheS5sZW5ndGgsXG4gICAgICAgICAgcmVzSW5kZXggPSAwLFxuICAgICAgICAgIHJlc3VsdCA9IFtdO1xuXG4gICAgICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgICAgICB2YXIgdmFsdWUgPSBhcnJheVtpbmRleF0sXG4gICAgICAgICAgICBjb21wdXRlZCA9IGl0ZXJhdGVlID8gaXRlcmF0ZWUodmFsdWUpIDogdmFsdWU7XG5cbiAgICAgICAgaWYgKCFpbmRleCB8fCAhZXEoY29tcHV0ZWQsIHNlZW4pKSB7XG4gICAgICAgICAgdmFyIHNlZW4gPSBjb21wdXRlZDtcbiAgICAgICAgICByZXN1bHRbcmVzSW5kZXgrK10gPSB2YWx1ZSA9PT0gMCA/IDAgOiB2YWx1ZTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy50b051bWJlcmAgd2hpY2ggZG9lc24ndCBlbnN1cmUgY29ycmVjdFxuICAgICAqIGNvbnZlcnNpb25zIG9mIGJpbmFyeSwgaGV4YWRlY2ltYWwsIG9yIG9jdGFsIHN0cmluZyB2YWx1ZXMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIHByb2Nlc3MuXG4gICAgICogQHJldHVybnMge251bWJlcn0gUmV0dXJucyB0aGUgbnVtYmVyLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VUb051bWJlcih2YWx1ZSkge1xuICAgICAgaWYgKHR5cGVvZiB2YWx1ZSA9PSAnbnVtYmVyJykge1xuICAgICAgICByZXR1cm4gdmFsdWU7XG4gICAgICB9XG4gICAgICBpZiAoaXNTeW1ib2wodmFsdWUpKSB7XG4gICAgICAgIHJldHVybiBOQU47XG4gICAgICB9XG4gICAgICByZXR1cm4gK3ZhbHVlO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLnRvU3RyaW5nYCB3aGljaCBkb2Vzbid0IGNvbnZlcnQgbnVsbGlzaFxuICAgICAqIHZhbHVlcyB0byBlbXB0eSBzdHJpbmdzLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBwcm9jZXNzLlxuICAgICAqIEByZXR1cm5zIHtzdHJpbmd9IFJldHVybnMgdGhlIHN0cmluZy5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlVG9TdHJpbmcodmFsdWUpIHtcbiAgICAgIC8vIEV4aXQgZWFybHkgZm9yIHN0cmluZ3MgdG8gYXZvaWQgYSBwZXJmb3JtYW5jZSBoaXQgaW4gc29tZSBlbnZpcm9ubWVudHMuXG4gICAgICBpZiAodHlwZW9mIHZhbHVlID09ICdzdHJpbmcnKSB7XG4gICAgICAgIHJldHVybiB2YWx1ZTtcbiAgICAgIH1cbiAgICAgIGlmIChpc0FycmF5KHZhbHVlKSkge1xuICAgICAgICAvLyBSZWN1cnNpdmVseSBjb252ZXJ0IHZhbHVlcyAoc3VzY2VwdGlibGUgdG8gY2FsbCBzdGFjayBsaW1pdHMpLlxuICAgICAgICByZXR1cm4gYXJyYXlNYXAodmFsdWUsIGJhc2VUb1N0cmluZykgKyAnJztcbiAgICAgIH1cbiAgICAgIGlmIChpc1N5bWJvbCh2YWx1ZSkpIHtcbiAgICAgICAgcmV0dXJuIHN5bWJvbFRvU3RyaW5nID8gc3ltYm9sVG9TdHJpbmcuY2FsbCh2YWx1ZSkgOiAnJztcbiAgICAgIH1cbiAgICAgIHZhciByZXN1bHQgPSAodmFsdWUgKyAnJyk7XG4gICAgICByZXR1cm4gKHJlc3VsdCA9PSAnMCcgJiYgKDEgLyB2YWx1ZSkgPT0gLUlORklOSVRZKSA/ICctMCcgOiByZXN1bHQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8udW5pcUJ5YCB3aXRob3V0IHN1cHBvcnQgZm9yIGl0ZXJhdGVlIHNob3J0aGFuZHMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBpbnNwZWN0LlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtpdGVyYXRlZV0gVGhlIGl0ZXJhdGVlIGludm9rZWQgcGVyIGVsZW1lbnQuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2NvbXBhcmF0b3JdIFRoZSBjb21wYXJhdG9yIGludm9rZWQgcGVyIGVsZW1lbnQuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBuZXcgZHVwbGljYXRlIGZyZWUgYXJyYXkuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZVVuaXEoYXJyYXksIGl0ZXJhdGVlLCBjb21wYXJhdG9yKSB7XG4gICAgICB2YXIgaW5kZXggPSAtMSxcbiAgICAgICAgICBpbmNsdWRlcyA9IGFycmF5SW5jbHVkZXMsXG4gICAgICAgICAgbGVuZ3RoID0gYXJyYXkubGVuZ3RoLFxuICAgICAgICAgIGlzQ29tbW9uID0gdHJ1ZSxcbiAgICAgICAgICByZXN1bHQgPSBbXSxcbiAgICAgICAgICBzZWVuID0gcmVzdWx0O1xuXG4gICAgICBpZiAoY29tcGFyYXRvcikge1xuICAgICAgICBpc0NvbW1vbiA9IGZhbHNlO1xuICAgICAgICBpbmNsdWRlcyA9IGFycmF5SW5jbHVkZXNXaXRoO1xuICAgICAgfVxuICAgICAgZWxzZSBpZiAobGVuZ3RoID49IExBUkdFX0FSUkFZX1NJWkUpIHtcbiAgICAgICAgdmFyIHNldCA9IGl0ZXJhdGVlID8gbnVsbCA6IGNyZWF0ZVNldChhcnJheSk7XG4gICAgICAgIGlmIChzZXQpIHtcbiAgICAgICAgICByZXR1cm4gc2V0VG9BcnJheShzZXQpO1xuICAgICAgICB9XG4gICAgICAgIGlzQ29tbW9uID0gZmFsc2U7XG4gICAgICAgIGluY2x1ZGVzID0gY2FjaGVIYXM7XG4gICAgICAgIHNlZW4gPSBuZXcgU2V0Q2FjaGU7XG4gICAgICB9XG4gICAgICBlbHNlIHtcbiAgICAgICAgc2VlbiA9IGl0ZXJhdGVlID8gW10gOiByZXN1bHQ7XG4gICAgICB9XG4gICAgICBvdXRlcjpcbiAgICAgIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgICAgIHZhciB2YWx1ZSA9IGFycmF5W2luZGV4XSxcbiAgICAgICAgICAgIGNvbXB1dGVkID0gaXRlcmF0ZWUgPyBpdGVyYXRlZSh2YWx1ZSkgOiB2YWx1ZTtcblxuICAgICAgICB2YWx1ZSA9IChjb21wYXJhdG9yIHx8IHZhbHVlICE9PSAwKSA/IHZhbHVlIDogMDtcbiAgICAgICAgaWYgKGlzQ29tbW9uICYmIGNvbXB1dGVkID09PSBjb21wdXRlZCkge1xuICAgICAgICAgIHZhciBzZWVuSW5kZXggPSBzZWVuLmxlbmd0aDtcbiAgICAgICAgICB3aGlsZSAoc2VlbkluZGV4LS0pIHtcbiAgICAgICAgICAgIGlmIChzZWVuW3NlZW5JbmRleF0gPT09IGNvbXB1dGVkKSB7XG4gICAgICAgICAgICAgIGNvbnRpbnVlIG91dGVyO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAoaXRlcmF0ZWUpIHtcbiAgICAgICAgICAgIHNlZW4ucHVzaChjb21wdXRlZCk7XG4gICAgICAgICAgfVxuICAgICAgICAgIHJlc3VsdC5wdXNoKHZhbHVlKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmICghaW5jbHVkZXMoc2VlbiwgY29tcHV0ZWQsIGNvbXBhcmF0b3IpKSB7XG4gICAgICAgICAgaWYgKHNlZW4gIT09IHJlc3VsdCkge1xuICAgICAgICAgICAgc2Vlbi5wdXNoKGNvbXB1dGVkKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgcmVzdWx0LnB1c2godmFsdWUpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLnVuc2V0YC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIG1vZGlmeS5cbiAgICAgKiBAcGFyYW0ge0FycmF5fHN0cmluZ30gcGF0aCBUaGUgcHJvcGVydHkgcGF0aCB0byB1bnNldC5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgdGhlIHByb3BlcnR5IGlzIGRlbGV0ZWQsIGVsc2UgYGZhbHNlYC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlVW5zZXQob2JqZWN0LCBwYXRoKSB7XG4gICAgICBwYXRoID0gY2FzdFBhdGgocGF0aCwgb2JqZWN0KTtcbiAgICAgIG9iamVjdCA9IHBhcmVudChvYmplY3QsIHBhdGgpO1xuICAgICAgcmV0dXJuIG9iamVjdCA9PSBudWxsIHx8IGRlbGV0ZSBvYmplY3RbdG9LZXkobGFzdChwYXRoKSldO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLnVwZGF0ZWAuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBtb2RpZnkuXG4gICAgICogQHBhcmFtIHtBcnJheXxzdHJpbmd9IHBhdGggVGhlIHBhdGggb2YgdGhlIHByb3BlcnR5IHRvIHVwZGF0ZS5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSB1cGRhdGVyIFRoZSBmdW5jdGlvbiB0byBwcm9kdWNlIHRoZSB1cGRhdGVkIHZhbHVlLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtjdXN0b21pemVyXSBUaGUgZnVuY3Rpb24gdG8gY3VzdG9taXplIHBhdGggY3JlYXRpb24uXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyBgb2JqZWN0YC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlVXBkYXRlKG9iamVjdCwgcGF0aCwgdXBkYXRlciwgY3VzdG9taXplcikge1xuICAgICAgcmV0dXJuIGJhc2VTZXQob2JqZWN0LCBwYXRoLCB1cGRhdGVyKGJhc2VHZXQob2JqZWN0LCBwYXRoKSksIGN1c3RvbWl6ZXIpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIG1ldGhvZHMgbGlrZSBgXy5kcm9wV2hpbGVgIGFuZCBgXy50YWtlV2hpbGVgXG4gICAgICogd2l0aG91dCBzdXBwb3J0IGZvciBpdGVyYXRlZSBzaG9ydGhhbmRzLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gcXVlcnkuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gcHJlZGljYXRlIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gICAgICogQHBhcmFtIHtib29sZWFufSBbaXNEcm9wXSBTcGVjaWZ5IGRyb3BwaW5nIGVsZW1lbnRzIGluc3RlYWQgb2YgdGFraW5nIHRoZW0uXG4gICAgICogQHBhcmFtIHtib29sZWFufSBbZnJvbVJpZ2h0XSBTcGVjaWZ5IGl0ZXJhdGluZyBmcm9tIHJpZ2h0IHRvIGxlZnQuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBzbGljZSBvZiBgYXJyYXlgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VXaGlsZShhcnJheSwgcHJlZGljYXRlLCBpc0Ryb3AsIGZyb21SaWdodCkge1xuICAgICAgdmFyIGxlbmd0aCA9IGFycmF5Lmxlbmd0aCxcbiAgICAgICAgICBpbmRleCA9IGZyb21SaWdodCA/IGxlbmd0aCA6IC0xO1xuXG4gICAgICB3aGlsZSAoKGZyb21SaWdodCA/IGluZGV4LS0gOiArK2luZGV4IDwgbGVuZ3RoKSAmJlxuICAgICAgICBwcmVkaWNhdGUoYXJyYXlbaW5kZXhdLCBpbmRleCwgYXJyYXkpKSB7fVxuXG4gICAgICByZXR1cm4gaXNEcm9wXG4gICAgICAgID8gYmFzZVNsaWNlKGFycmF5LCAoZnJvbVJpZ2h0ID8gMCA6IGluZGV4KSwgKGZyb21SaWdodCA/IGluZGV4ICsgMSA6IGxlbmd0aCkpXG4gICAgICAgIDogYmFzZVNsaWNlKGFycmF5LCAoZnJvbVJpZ2h0ID8gaW5kZXggKyAxIDogMCksIChmcm9tUmlnaHQgPyBsZW5ndGggOiBpbmRleCkpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGB3cmFwcGVyVmFsdWVgIHdoaWNoIHJldHVybnMgdGhlIHJlc3VsdCBvZlxuICAgICAqIHBlcmZvcm1pbmcgYSBzZXF1ZW5jZSBvZiBhY3Rpb25zIG9uIHRoZSB1bndyYXBwZWQgYHZhbHVlYCwgd2hlcmUgZWFjaFxuICAgICAqIHN1Y2Nlc3NpdmUgYWN0aW9uIGlzIHN1cHBsaWVkIHRoZSByZXR1cm4gdmFsdWUgb2YgdGhlIHByZXZpb3VzLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB1bndyYXBwZWQgdmFsdWUuXG4gICAgICogQHBhcmFtIHtBcnJheX0gYWN0aW9ucyBBY3Rpb25zIHRvIHBlcmZvcm0gdG8gcmVzb2x2ZSB0aGUgdW53cmFwcGVkIHZhbHVlLlxuICAgICAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSByZXNvbHZlZCB2YWx1ZS5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlV3JhcHBlclZhbHVlKHZhbHVlLCBhY3Rpb25zKSB7XG4gICAgICB2YXIgcmVzdWx0ID0gdmFsdWU7XG4gICAgICBpZiAocmVzdWx0IGluc3RhbmNlb2YgTGF6eVdyYXBwZXIpIHtcbiAgICAgICAgcmVzdWx0ID0gcmVzdWx0LnZhbHVlKCk7XG4gICAgICB9XG4gICAgICByZXR1cm4gYXJyYXlSZWR1Y2UoYWN0aW9ucywgZnVuY3Rpb24ocmVzdWx0LCBhY3Rpb24pIHtcbiAgICAgICAgcmV0dXJuIGFjdGlvbi5mdW5jLmFwcGx5KGFjdGlvbi50aGlzQXJnLCBhcnJheVB1c2goW3Jlc3VsdF0sIGFjdGlvbi5hcmdzKSk7XG4gICAgICB9LCByZXN1bHQpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIG1ldGhvZHMgbGlrZSBgXy54b3JgLCB3aXRob3V0IHN1cHBvcnQgZm9yXG4gICAgICogaXRlcmF0ZWUgc2hvcnRoYW5kcywgdGhhdCBhY2NlcHRzIGFuIGFycmF5IG9mIGFycmF5cyB0byBpbnNwZWN0LlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheXMgVGhlIGFycmF5cyB0byBpbnNwZWN0LlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtpdGVyYXRlZV0gVGhlIGl0ZXJhdGVlIGludm9rZWQgcGVyIGVsZW1lbnQuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2NvbXBhcmF0b3JdIFRoZSBjb21wYXJhdG9yIGludm9rZWQgcGVyIGVsZW1lbnQuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBuZXcgYXJyYXkgb2YgdmFsdWVzLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VYb3IoYXJyYXlzLCBpdGVyYXRlZSwgY29tcGFyYXRvcikge1xuICAgICAgdmFyIGxlbmd0aCA9IGFycmF5cy5sZW5ndGg7XG4gICAgICBpZiAobGVuZ3RoIDwgMikge1xuICAgICAgICByZXR1cm4gbGVuZ3RoID8gYmFzZVVuaXEoYXJyYXlzWzBdKSA6IFtdO1xuICAgICAgfVxuICAgICAgdmFyIGluZGV4ID0gLTEsXG4gICAgICAgICAgcmVzdWx0ID0gQXJyYXkobGVuZ3RoKTtcblxuICAgICAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICAgICAgdmFyIGFycmF5ID0gYXJyYXlzW2luZGV4XSxcbiAgICAgICAgICAgIG90aEluZGV4ID0gLTE7XG5cbiAgICAgICAgd2hpbGUgKCsrb3RoSW5kZXggPCBsZW5ndGgpIHtcbiAgICAgICAgICBpZiAob3RoSW5kZXggIT0gaW5kZXgpIHtcbiAgICAgICAgICAgIHJlc3VsdFtpbmRleF0gPSBiYXNlRGlmZmVyZW5jZShyZXN1bHRbaW5kZXhdIHx8IGFycmF5LCBhcnJheXNbb3RoSW5kZXhdLCBpdGVyYXRlZSwgY29tcGFyYXRvcik7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gYmFzZVVuaXEoYmFzZUZsYXR0ZW4ocmVzdWx0LCAxKSwgaXRlcmF0ZWUsIGNvbXBhcmF0b3IpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoaXMgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy56aXBPYmplY3RgIHdoaWNoIGFzc2lnbnMgdmFsdWVzIHVzaW5nIGBhc3NpZ25GdW5jYC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtBcnJheX0gcHJvcHMgVGhlIHByb3BlcnR5IGlkZW50aWZpZXJzLlxuICAgICAqIEBwYXJhbSB7QXJyYXl9IHZhbHVlcyBUaGUgcHJvcGVydHkgdmFsdWVzLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGFzc2lnbkZ1bmMgVGhlIGZ1bmN0aW9uIHRvIGFzc2lnbiB2YWx1ZXMuXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyB0aGUgbmV3IG9iamVjdC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlWmlwT2JqZWN0KHByb3BzLCB2YWx1ZXMsIGFzc2lnbkZ1bmMpIHtcbiAgICAgIHZhciBpbmRleCA9IC0xLFxuICAgICAgICAgIGxlbmd0aCA9IHByb3BzLmxlbmd0aCxcbiAgICAgICAgICB2YWxzTGVuZ3RoID0gdmFsdWVzLmxlbmd0aCxcbiAgICAgICAgICByZXN1bHQgPSB7fTtcblxuICAgICAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICAgICAgdmFyIHZhbHVlID0gaW5kZXggPCB2YWxzTGVuZ3RoID8gdmFsdWVzW2luZGV4XSA6IHVuZGVmaW5lZDtcbiAgICAgICAgYXNzaWduRnVuYyhyZXN1bHQsIHByb3BzW2luZGV4XSwgdmFsdWUpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDYXN0cyBgdmFsdWVgIHRvIGFuIGVtcHR5IGFycmF5IGlmIGl0J3Mgbm90IGFuIGFycmF5IGxpa2Ugb2JqZWN0LlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBpbnNwZWN0LlxuICAgICAqIEByZXR1cm5zIHtBcnJheXxPYmplY3R9IFJldHVybnMgdGhlIGNhc3QgYXJyYXktbGlrZSBvYmplY3QuXG4gICAgICovXG4gICAgZnVuY3Rpb24gY2FzdEFycmF5TGlrZU9iamVjdCh2YWx1ZSkge1xuICAgICAgcmV0dXJuIGlzQXJyYXlMaWtlT2JqZWN0KHZhbHVlKSA/IHZhbHVlIDogW107XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ2FzdHMgYHZhbHVlYCB0byBgaWRlbnRpdHlgIGlmIGl0J3Mgbm90IGEgZnVuY3Rpb24uXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGluc3BlY3QuXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIGNhc3QgZnVuY3Rpb24uXG4gICAgICovXG4gICAgZnVuY3Rpb24gY2FzdEZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgICByZXR1cm4gdHlwZW9mIHZhbHVlID09ICdmdW5jdGlvbicgPyB2YWx1ZSA6IGlkZW50aXR5O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENhc3RzIGB2YWx1ZWAgdG8gYSBwYXRoIGFycmF5IGlmIGl0J3Mgbm90IG9uZS5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gaW5zcGVjdC5cbiAgICAgKiBAcGFyYW0ge09iamVjdH0gW29iamVjdF0gVGhlIG9iamVjdCB0byBxdWVyeSBrZXlzIG9uLlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgY2FzdCBwcm9wZXJ0eSBwYXRoIGFycmF5LlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGNhc3RQYXRoKHZhbHVlLCBvYmplY3QpIHtcbiAgICAgIGlmIChpc0FycmF5KHZhbHVlKSkge1xuICAgICAgICByZXR1cm4gdmFsdWU7XG4gICAgICB9XG4gICAgICByZXR1cm4gaXNLZXkodmFsdWUsIG9iamVjdCkgPyBbdmFsdWVdIDogc3RyaW5nVG9QYXRoKHRvU3RyaW5nKHZhbHVlKSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQSBgYmFzZVJlc3RgIGFsaWFzIHdoaWNoIGNhbiBiZSByZXBsYWNlZCB3aXRoIGBpZGVudGl0eWAgYnkgbW9kdWxlXG4gICAgICogcmVwbGFjZW1lbnQgcGx1Z2lucy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHR5cGUge0Z1bmN0aW9ufVxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIGFwcGx5IGEgcmVzdCBwYXJhbWV0ZXIgdG8uXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgZnVuY3Rpb24uXG4gICAgICovXG4gICAgdmFyIGNhc3RSZXN0ID0gYmFzZVJlc3Q7XG5cbiAgICAvKipcbiAgICAgKiBDYXN0cyBgYXJyYXlgIHRvIGEgc2xpY2UgaWYgaXQncyBuZWVkZWQuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBpbnNwZWN0LlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBzdGFydCBUaGUgc3RhcnQgcG9zaXRpb24uXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFtlbmQ9YXJyYXkubGVuZ3RoXSBUaGUgZW5kIHBvc2l0aW9uLlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgY2FzdCBzbGljZS5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBjYXN0U2xpY2UoYXJyYXksIHN0YXJ0LCBlbmQpIHtcbiAgICAgIHZhciBsZW5ndGggPSBhcnJheS5sZW5ndGg7XG4gICAgICBlbmQgPSBlbmQgPT09IHVuZGVmaW5lZCA/IGxlbmd0aCA6IGVuZDtcbiAgICAgIHJldHVybiAoIXN0YXJ0ICYmIGVuZCA+PSBsZW5ndGgpID8gYXJyYXkgOiBiYXNlU2xpY2UoYXJyYXksIHN0YXJ0LCBlbmQpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEEgc2ltcGxlIHdyYXBwZXIgYXJvdW5kIHRoZSBnbG9iYWwgW2BjbGVhclRpbWVvdXRgXShodHRwczovL21kbi5pby9jbGVhclRpbWVvdXQpLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge251bWJlcnxPYmplY3R9IGlkIFRoZSB0aW1lciBpZCBvciB0aW1lb3V0IG9iamVjdCBvZiB0aGUgdGltZXIgdG8gY2xlYXIuXG4gICAgICovXG4gICAgdmFyIGNsZWFyVGltZW91dCA9IGN0eENsZWFyVGltZW91dCB8fCBmdW5jdGlvbihpZCkge1xuICAgICAgcmV0dXJuIHJvb3QuY2xlYXJUaW1lb3V0KGlkKTtcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGNsb25lIG9mICBgYnVmZmVyYC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtCdWZmZXJ9IGJ1ZmZlciBUaGUgYnVmZmVyIHRvIGNsb25lLlxuICAgICAqIEBwYXJhbSB7Ym9vbGVhbn0gW2lzRGVlcF0gU3BlY2lmeSBhIGRlZXAgY2xvbmUuXG4gICAgICogQHJldHVybnMge0J1ZmZlcn0gUmV0dXJucyB0aGUgY2xvbmVkIGJ1ZmZlci5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBjbG9uZUJ1ZmZlcihidWZmZXIsIGlzRGVlcCkge1xuICAgICAgaWYgKGlzRGVlcCkge1xuICAgICAgICByZXR1cm4gYnVmZmVyLnNsaWNlKCk7XG4gICAgICB9XG4gICAgICB2YXIgbGVuZ3RoID0gYnVmZmVyLmxlbmd0aCxcbiAgICAgICAgICByZXN1bHQgPSBhbGxvY1Vuc2FmZSA/IGFsbG9jVW5zYWZlKGxlbmd0aCkgOiBuZXcgYnVmZmVyLmNvbnN0cnVjdG9yKGxlbmd0aCk7XG5cbiAgICAgIGJ1ZmZlci5jb3B5KHJlc3VsdCk7XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBjbG9uZSBvZiBgYXJyYXlCdWZmZXJgLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0FycmF5QnVmZmVyfSBhcnJheUJ1ZmZlciBUaGUgYXJyYXkgYnVmZmVyIHRvIGNsb25lLlxuICAgICAqIEByZXR1cm5zIHtBcnJheUJ1ZmZlcn0gUmV0dXJucyB0aGUgY2xvbmVkIGFycmF5IGJ1ZmZlci5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBjbG9uZUFycmF5QnVmZmVyKGFycmF5QnVmZmVyKSB7XG4gICAgICB2YXIgcmVzdWx0ID0gbmV3IGFycmF5QnVmZmVyLmNvbnN0cnVjdG9yKGFycmF5QnVmZmVyLmJ5dGVMZW5ndGgpO1xuICAgICAgbmV3IFVpbnQ4QXJyYXkocmVzdWx0KS5zZXQobmV3IFVpbnQ4QXJyYXkoYXJyYXlCdWZmZXIpKTtcbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGNsb25lIG9mIGBkYXRhVmlld2AuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBkYXRhVmlldyBUaGUgZGF0YSB2aWV3IHRvIGNsb25lLlxuICAgICAqIEBwYXJhbSB7Ym9vbGVhbn0gW2lzRGVlcF0gU3BlY2lmeSBhIGRlZXAgY2xvbmUuXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyB0aGUgY2xvbmVkIGRhdGEgdmlldy5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBjbG9uZURhdGFWaWV3KGRhdGFWaWV3LCBpc0RlZXApIHtcbiAgICAgIHZhciBidWZmZXIgPSBpc0RlZXAgPyBjbG9uZUFycmF5QnVmZmVyKGRhdGFWaWV3LmJ1ZmZlcikgOiBkYXRhVmlldy5idWZmZXI7XG4gICAgICByZXR1cm4gbmV3IGRhdGFWaWV3LmNvbnN0cnVjdG9yKGJ1ZmZlciwgZGF0YVZpZXcuYnl0ZU9mZnNldCwgZGF0YVZpZXcuYnl0ZUxlbmd0aCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGNsb25lIG9mIGByZWdleHBgLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gcmVnZXhwIFRoZSByZWdleHAgdG8gY2xvbmUuXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyB0aGUgY2xvbmVkIHJlZ2V4cC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBjbG9uZVJlZ0V4cChyZWdleHApIHtcbiAgICAgIHZhciByZXN1bHQgPSBuZXcgcmVnZXhwLmNvbnN0cnVjdG9yKHJlZ2V4cC5zb3VyY2UsIHJlRmxhZ3MuZXhlYyhyZWdleHApKTtcbiAgICAgIHJlc3VsdC5sYXN0SW5kZXggPSByZWdleHAubGFzdEluZGV4O1xuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgY2xvbmUgb2YgdGhlIGBzeW1ib2xgIG9iamVjdC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtPYmplY3R9IHN5bWJvbCBUaGUgc3ltYm9sIG9iamVjdCB0byBjbG9uZS5cbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIHRoZSBjbG9uZWQgc3ltYm9sIG9iamVjdC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBjbG9uZVN5bWJvbChzeW1ib2wpIHtcbiAgICAgIHJldHVybiBzeW1ib2xWYWx1ZU9mID8gT2JqZWN0KHN5bWJvbFZhbHVlT2YuY2FsbChzeW1ib2wpKSA6IHt9O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBjbG9uZSBvZiBgdHlwZWRBcnJheWAuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSB0eXBlZEFycmF5IFRoZSB0eXBlZCBhcnJheSB0byBjbG9uZS5cbiAgICAgKiBAcGFyYW0ge2Jvb2xlYW59IFtpc0RlZXBdIFNwZWNpZnkgYSBkZWVwIGNsb25lLlxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgdGhlIGNsb25lZCB0eXBlZCBhcnJheS5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBjbG9uZVR5cGVkQXJyYXkodHlwZWRBcnJheSwgaXNEZWVwKSB7XG4gICAgICB2YXIgYnVmZmVyID0gaXNEZWVwID8gY2xvbmVBcnJheUJ1ZmZlcih0eXBlZEFycmF5LmJ1ZmZlcikgOiB0eXBlZEFycmF5LmJ1ZmZlcjtcbiAgICAgIHJldHVybiBuZXcgdHlwZWRBcnJheS5jb25zdHJ1Y3RvcihidWZmZXIsIHR5cGVkQXJyYXkuYnl0ZU9mZnNldCwgdHlwZWRBcnJheS5sZW5ndGgpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENvbXBhcmVzIHZhbHVlcyB0byBzb3J0IHRoZW0gaW4gYXNjZW5kaW5nIG9yZGVyLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjb21wYXJlLlxuICAgICAqIEBwYXJhbSB7Kn0gb3RoZXIgVGhlIG90aGVyIHZhbHVlIHRvIGNvbXBhcmUuXG4gICAgICogQHJldHVybnMge251bWJlcn0gUmV0dXJucyB0aGUgc29ydCBvcmRlciBpbmRpY2F0b3IgZm9yIGB2YWx1ZWAuXG4gICAgICovXG4gICAgZnVuY3Rpb24gY29tcGFyZUFzY2VuZGluZyh2YWx1ZSwgb3RoZXIpIHtcbiAgICAgIGlmICh2YWx1ZSAhPT0gb3RoZXIpIHtcbiAgICAgICAgdmFyIHZhbElzRGVmaW5lZCA9IHZhbHVlICE9PSB1bmRlZmluZWQsXG4gICAgICAgICAgICB2YWxJc051bGwgPSB2YWx1ZSA9PT0gbnVsbCxcbiAgICAgICAgICAgIHZhbElzUmVmbGV4aXZlID0gdmFsdWUgPT09IHZhbHVlLFxuICAgICAgICAgICAgdmFsSXNTeW1ib2wgPSBpc1N5bWJvbCh2YWx1ZSk7XG5cbiAgICAgICAgdmFyIG90aElzRGVmaW5lZCA9IG90aGVyICE9PSB1bmRlZmluZWQsXG4gICAgICAgICAgICBvdGhJc051bGwgPSBvdGhlciA9PT0gbnVsbCxcbiAgICAgICAgICAgIG90aElzUmVmbGV4aXZlID0gb3RoZXIgPT09IG90aGVyLFxuICAgICAgICAgICAgb3RoSXNTeW1ib2wgPSBpc1N5bWJvbChvdGhlcik7XG5cbiAgICAgICAgaWYgKCghb3RoSXNOdWxsICYmICFvdGhJc1N5bWJvbCAmJiAhdmFsSXNTeW1ib2wgJiYgdmFsdWUgPiBvdGhlcikgfHxcbiAgICAgICAgICAgICh2YWxJc1N5bWJvbCAmJiBvdGhJc0RlZmluZWQgJiYgb3RoSXNSZWZsZXhpdmUgJiYgIW90aElzTnVsbCAmJiAhb3RoSXNTeW1ib2wpIHx8XG4gICAgICAgICAgICAodmFsSXNOdWxsICYmIG90aElzRGVmaW5lZCAmJiBvdGhJc1JlZmxleGl2ZSkgfHxcbiAgICAgICAgICAgICghdmFsSXNEZWZpbmVkICYmIG90aElzUmVmbGV4aXZlKSB8fFxuICAgICAgICAgICAgIXZhbElzUmVmbGV4aXZlKSB7XG4gICAgICAgICAgcmV0dXJuIDE7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCghdmFsSXNOdWxsICYmICF2YWxJc1N5bWJvbCAmJiAhb3RoSXNTeW1ib2wgJiYgdmFsdWUgPCBvdGhlcikgfHxcbiAgICAgICAgICAgIChvdGhJc1N5bWJvbCAmJiB2YWxJc0RlZmluZWQgJiYgdmFsSXNSZWZsZXhpdmUgJiYgIXZhbElzTnVsbCAmJiAhdmFsSXNTeW1ib2wpIHx8XG4gICAgICAgICAgICAob3RoSXNOdWxsICYmIHZhbElzRGVmaW5lZCAmJiB2YWxJc1JlZmxleGl2ZSkgfHxcbiAgICAgICAgICAgICghb3RoSXNEZWZpbmVkICYmIHZhbElzUmVmbGV4aXZlKSB8fFxuICAgICAgICAgICAgIW90aElzUmVmbGV4aXZlKSB7XG4gICAgICAgICAgcmV0dXJuIC0xO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gMDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBVc2VkIGJ5IGBfLm9yZGVyQnlgIHRvIGNvbXBhcmUgbXVsdGlwbGUgcHJvcGVydGllcyBvZiBhIHZhbHVlIHRvIGFub3RoZXJcbiAgICAgKiBhbmQgc3RhYmxlIHNvcnQgdGhlbS5cbiAgICAgKlxuICAgICAqIElmIGBvcmRlcnNgIGlzIHVuc3BlY2lmaWVkLCBhbGwgdmFsdWVzIGFyZSBzb3J0ZWQgaW4gYXNjZW5kaW5nIG9yZGVyLiBPdGhlcndpc2UsXG4gICAgICogc3BlY2lmeSBhbiBvcmRlciBvZiBcImRlc2NcIiBmb3IgZGVzY2VuZGluZyBvciBcImFzY1wiIGZvciBhc2NlbmRpbmcgc29ydCBvcmRlclxuICAgICAqIG9mIGNvcnJlc3BvbmRpbmcgdmFsdWVzLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gY29tcGFyZS5cbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb3RoZXIgVGhlIG90aGVyIG9iamVjdCB0byBjb21wYXJlLlxuICAgICAqIEBwYXJhbSB7Ym9vbGVhbltdfHN0cmluZ1tdfSBvcmRlcnMgVGhlIG9yZGVyIHRvIHNvcnQgYnkgZm9yIGVhY2ggcHJvcGVydHkuXG4gICAgICogQHJldHVybnMge251bWJlcn0gUmV0dXJucyB0aGUgc29ydCBvcmRlciBpbmRpY2F0b3IgZm9yIGBvYmplY3RgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGNvbXBhcmVNdWx0aXBsZShvYmplY3QsIG90aGVyLCBvcmRlcnMpIHtcbiAgICAgIHZhciBpbmRleCA9IC0xLFxuICAgICAgICAgIG9iakNyaXRlcmlhID0gb2JqZWN0LmNyaXRlcmlhLFxuICAgICAgICAgIG90aENyaXRlcmlhID0gb3RoZXIuY3JpdGVyaWEsXG4gICAgICAgICAgbGVuZ3RoID0gb2JqQ3JpdGVyaWEubGVuZ3RoLFxuICAgICAgICAgIG9yZGVyc0xlbmd0aCA9IG9yZGVycy5sZW5ndGg7XG5cbiAgICAgIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgICAgIHZhciByZXN1bHQgPSBjb21wYXJlQXNjZW5kaW5nKG9iakNyaXRlcmlhW2luZGV4XSwgb3RoQ3JpdGVyaWFbaW5kZXhdKTtcbiAgICAgICAgaWYgKHJlc3VsdCkge1xuICAgICAgICAgIGlmIChpbmRleCA+PSBvcmRlcnNMZW5ndGgpIHtcbiAgICAgICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICAgICAgfVxuICAgICAgICAgIHZhciBvcmRlciA9IG9yZGVyc1tpbmRleF07XG4gICAgICAgICAgcmV0dXJuIHJlc3VsdCAqIChvcmRlciA9PSAnZGVzYycgPyAtMSA6IDEpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICAvLyBGaXhlcyBhbiBgQXJyYXkjc29ydGAgYnVnIGluIHRoZSBKUyBlbmdpbmUgZW1iZWRkZWQgaW4gQWRvYmUgYXBwbGljYXRpb25zXG4gICAgICAvLyB0aGF0IGNhdXNlcyBpdCwgdW5kZXIgY2VydGFpbiBjaXJjdW1zdGFuY2VzLCB0byBwcm92aWRlIHRoZSBzYW1lIHZhbHVlIGZvclxuICAgICAgLy8gYG9iamVjdGAgYW5kIGBvdGhlcmAuIFNlZSBodHRwczovL2dpdGh1Yi5jb20vamFzaGtlbmFzL3VuZGVyc2NvcmUvcHVsbC8xMjQ3XG4gICAgICAvLyBmb3IgbW9yZSBkZXRhaWxzLlxuICAgICAgLy9cbiAgICAgIC8vIFRoaXMgYWxzbyBlbnN1cmVzIGEgc3RhYmxlIHNvcnQgaW4gVjggYW5kIG90aGVyIGVuZ2luZXMuXG4gICAgICAvLyBTZWUgaHR0cHM6Ly9idWdzLmNocm9taXVtLm9yZy9wL3Y4L2lzc3Vlcy9kZXRhaWw/aWQ9OTAgZm9yIG1vcmUgZGV0YWlscy5cbiAgICAgIHJldHVybiBvYmplY3QuaW5kZXggLSBvdGhlci5pbmRleDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGFuIGFycmF5IHRoYXQgaXMgdGhlIGNvbXBvc2l0aW9uIG9mIHBhcnRpYWxseSBhcHBsaWVkIGFyZ3VtZW50cyxcbiAgICAgKiBwbGFjZWhvbGRlcnMsIGFuZCBwcm92aWRlZCBhcmd1bWVudHMgaW50byBhIHNpbmdsZSBhcnJheSBvZiBhcmd1bWVudHMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFyZ3MgVGhlIHByb3ZpZGVkIGFyZ3VtZW50cy5cbiAgICAgKiBAcGFyYW0ge0FycmF5fSBwYXJ0aWFscyBUaGUgYXJndW1lbnRzIHRvIHByZXBlbmQgdG8gdGhvc2UgcHJvdmlkZWQuXG4gICAgICogQHBhcmFtIHtBcnJheX0gaG9sZGVycyBUaGUgYHBhcnRpYWxzYCBwbGFjZWhvbGRlciBpbmRleGVzLlxuICAgICAqIEBwYXJhbXMge2Jvb2xlYW59IFtpc0N1cnJpZWRdIFNwZWNpZnkgY29tcG9zaW5nIGZvciBhIGN1cnJpZWQgZnVuY3Rpb24uXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBuZXcgYXJyYXkgb2YgY29tcG9zZWQgYXJndW1lbnRzLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGNvbXBvc2VBcmdzKGFyZ3MsIHBhcnRpYWxzLCBob2xkZXJzLCBpc0N1cnJpZWQpIHtcbiAgICAgIHZhciBhcmdzSW5kZXggPSAtMSxcbiAgICAgICAgICBhcmdzTGVuZ3RoID0gYXJncy5sZW5ndGgsXG4gICAgICAgICAgaG9sZGVyc0xlbmd0aCA9IGhvbGRlcnMubGVuZ3RoLFxuICAgICAgICAgIGxlZnRJbmRleCA9IC0xLFxuICAgICAgICAgIGxlZnRMZW5ndGggPSBwYXJ0aWFscy5sZW5ndGgsXG4gICAgICAgICAgcmFuZ2VMZW5ndGggPSBuYXRpdmVNYXgoYXJnc0xlbmd0aCAtIGhvbGRlcnNMZW5ndGgsIDApLFxuICAgICAgICAgIHJlc3VsdCA9IEFycmF5KGxlZnRMZW5ndGggKyByYW5nZUxlbmd0aCksXG4gICAgICAgICAgaXNVbmN1cnJpZWQgPSAhaXNDdXJyaWVkO1xuXG4gICAgICB3aGlsZSAoKytsZWZ0SW5kZXggPCBsZWZ0TGVuZ3RoKSB7XG4gICAgICAgIHJlc3VsdFtsZWZ0SW5kZXhdID0gcGFydGlhbHNbbGVmdEluZGV4XTtcbiAgICAgIH1cbiAgICAgIHdoaWxlICgrK2FyZ3NJbmRleCA8IGhvbGRlcnNMZW5ndGgpIHtcbiAgICAgICAgaWYgKGlzVW5jdXJyaWVkIHx8IGFyZ3NJbmRleCA8IGFyZ3NMZW5ndGgpIHtcbiAgICAgICAgICByZXN1bHRbaG9sZGVyc1thcmdzSW5kZXhdXSA9IGFyZ3NbYXJnc0luZGV4XTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgd2hpbGUgKHJhbmdlTGVuZ3RoLS0pIHtcbiAgICAgICAgcmVzdWx0W2xlZnRJbmRleCsrXSA9IGFyZ3NbYXJnc0luZGV4KytdO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIGZ1bmN0aW9uIGlzIGxpa2UgYGNvbXBvc2VBcmdzYCBleGNlcHQgdGhhdCB0aGUgYXJndW1lbnRzIGNvbXBvc2l0aW9uXG4gICAgICogaXMgdGFpbG9yZWQgZm9yIGBfLnBhcnRpYWxSaWdodGAuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFyZ3MgVGhlIHByb3ZpZGVkIGFyZ3VtZW50cy5cbiAgICAgKiBAcGFyYW0ge0FycmF5fSBwYXJ0aWFscyBUaGUgYXJndW1lbnRzIHRvIGFwcGVuZCB0byB0aG9zZSBwcm92aWRlZC5cbiAgICAgKiBAcGFyYW0ge0FycmF5fSBob2xkZXJzIFRoZSBgcGFydGlhbHNgIHBsYWNlaG9sZGVyIGluZGV4ZXMuXG4gICAgICogQHBhcmFtcyB7Ym9vbGVhbn0gW2lzQ3VycmllZF0gU3BlY2lmeSBjb21wb3NpbmcgZm9yIGEgY3VycmllZCBmdW5jdGlvbi5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIG5ldyBhcnJheSBvZiBjb21wb3NlZCBhcmd1bWVudHMuXG4gICAgICovXG4gICAgZnVuY3Rpb24gY29tcG9zZUFyZ3NSaWdodChhcmdzLCBwYXJ0aWFscywgaG9sZGVycywgaXNDdXJyaWVkKSB7XG4gICAgICB2YXIgYXJnc0luZGV4ID0gLTEsXG4gICAgICAgICAgYXJnc0xlbmd0aCA9IGFyZ3MubGVuZ3RoLFxuICAgICAgICAgIGhvbGRlcnNJbmRleCA9IC0xLFxuICAgICAgICAgIGhvbGRlcnNMZW5ndGggPSBob2xkZXJzLmxlbmd0aCxcbiAgICAgICAgICByaWdodEluZGV4ID0gLTEsXG4gICAgICAgICAgcmlnaHRMZW5ndGggPSBwYXJ0aWFscy5sZW5ndGgsXG4gICAgICAgICAgcmFuZ2VMZW5ndGggPSBuYXRpdmVNYXgoYXJnc0xlbmd0aCAtIGhvbGRlcnNMZW5ndGgsIDApLFxuICAgICAgICAgIHJlc3VsdCA9IEFycmF5KHJhbmdlTGVuZ3RoICsgcmlnaHRMZW5ndGgpLFxuICAgICAgICAgIGlzVW5jdXJyaWVkID0gIWlzQ3VycmllZDtcblxuICAgICAgd2hpbGUgKCsrYXJnc0luZGV4IDwgcmFuZ2VMZW5ndGgpIHtcbiAgICAgICAgcmVzdWx0W2FyZ3NJbmRleF0gPSBhcmdzW2FyZ3NJbmRleF07XG4gICAgICB9XG4gICAgICB2YXIgb2Zmc2V0ID0gYXJnc0luZGV4O1xuICAgICAgd2hpbGUgKCsrcmlnaHRJbmRleCA8IHJpZ2h0TGVuZ3RoKSB7XG4gICAgICAgIHJlc3VsdFtvZmZzZXQgKyByaWdodEluZGV4XSA9IHBhcnRpYWxzW3JpZ2h0SW5kZXhdO1xuICAgICAgfVxuICAgICAgd2hpbGUgKCsraG9sZGVyc0luZGV4IDwgaG9sZGVyc0xlbmd0aCkge1xuICAgICAgICBpZiAoaXNVbmN1cnJpZWQgfHwgYXJnc0luZGV4IDwgYXJnc0xlbmd0aCkge1xuICAgICAgICAgIHJlc3VsdFtvZmZzZXQgKyBob2xkZXJzW2hvbGRlcnNJbmRleF1dID0gYXJnc1thcmdzSW5kZXgrK107XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ29waWVzIHRoZSB2YWx1ZXMgb2YgYHNvdXJjZWAgdG8gYGFycmF5YC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtBcnJheX0gc291cmNlIFRoZSBhcnJheSB0byBjb3B5IHZhbHVlcyBmcm9tLlxuICAgICAqIEBwYXJhbSB7QXJyYXl9IFthcnJheT1bXV0gVGhlIGFycmF5IHRvIGNvcHkgdmFsdWVzIHRvLlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyBgYXJyYXlgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGNvcHlBcnJheShzb3VyY2UsIGFycmF5KSB7XG4gICAgICB2YXIgaW5kZXggPSAtMSxcbiAgICAgICAgICBsZW5ndGggPSBzb3VyY2UubGVuZ3RoO1xuXG4gICAgICBhcnJheSB8fCAoYXJyYXkgPSBBcnJheShsZW5ndGgpKTtcbiAgICAgIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgICAgIGFycmF5W2luZGV4XSA9IHNvdXJjZVtpbmRleF07XG4gICAgICB9XG4gICAgICByZXR1cm4gYXJyYXk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ29waWVzIHByb3BlcnRpZXMgb2YgYHNvdXJjZWAgdG8gYG9iamVjdGAuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBzb3VyY2UgVGhlIG9iamVjdCB0byBjb3B5IHByb3BlcnRpZXMgZnJvbS5cbiAgICAgKiBAcGFyYW0ge0FycmF5fSBwcm9wcyBUaGUgcHJvcGVydHkgaWRlbnRpZmllcnMgdG8gY29weS5cbiAgICAgKiBAcGFyYW0ge09iamVjdH0gW29iamVjdD17fV0gVGhlIG9iamVjdCB0byBjb3B5IHByb3BlcnRpZXMgdG8uXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2N1c3RvbWl6ZXJdIFRoZSBmdW5jdGlvbiB0byBjdXN0b21pemUgY29waWVkIHZhbHVlcy5cbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIGBvYmplY3RgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGNvcHlPYmplY3Qoc291cmNlLCBwcm9wcywgb2JqZWN0LCBjdXN0b21pemVyKSB7XG4gICAgICB2YXIgaXNOZXcgPSAhb2JqZWN0O1xuICAgICAgb2JqZWN0IHx8IChvYmplY3QgPSB7fSk7XG5cbiAgICAgIHZhciBpbmRleCA9IC0xLFxuICAgICAgICAgIGxlbmd0aCA9IHByb3BzLmxlbmd0aDtcblxuICAgICAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICAgICAgdmFyIGtleSA9IHByb3BzW2luZGV4XTtcblxuICAgICAgICB2YXIgbmV3VmFsdWUgPSBjdXN0b21pemVyXG4gICAgICAgICAgPyBjdXN0b21pemVyKG9iamVjdFtrZXldLCBzb3VyY2Vba2V5XSwga2V5LCBvYmplY3QsIHNvdXJjZSlcbiAgICAgICAgICA6IHVuZGVmaW5lZDtcblxuICAgICAgICBpZiAobmV3VmFsdWUgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgIG5ld1ZhbHVlID0gc291cmNlW2tleV07XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGlzTmV3KSB7XG4gICAgICAgICAgYmFzZUFzc2lnblZhbHVlKG9iamVjdCwga2V5LCBuZXdWYWx1ZSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgYXNzaWduVmFsdWUob2JqZWN0LCBrZXksIG5ld1ZhbHVlKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIG9iamVjdDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDb3BpZXMgb3duIHN5bWJvbHMgb2YgYHNvdXJjZWAgdG8gYG9iamVjdGAuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBzb3VyY2UgVGhlIG9iamVjdCB0byBjb3B5IHN5bWJvbHMgZnJvbS5cbiAgICAgKiBAcGFyYW0ge09iamVjdH0gW29iamVjdD17fV0gVGhlIG9iamVjdCB0byBjb3B5IHN5bWJvbHMgdG8uXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyBgb2JqZWN0YC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBjb3B5U3ltYm9scyhzb3VyY2UsIG9iamVjdCkge1xuICAgICAgcmV0dXJuIGNvcHlPYmplY3Qoc291cmNlLCBnZXRTeW1ib2xzKHNvdXJjZSksIG9iamVjdCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ29waWVzIG93biBhbmQgaW5oZXJpdGVkIHN5bWJvbHMgb2YgYHNvdXJjZWAgdG8gYG9iamVjdGAuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBzb3VyY2UgVGhlIG9iamVjdCB0byBjb3B5IHN5bWJvbHMgZnJvbS5cbiAgICAgKiBAcGFyYW0ge09iamVjdH0gW29iamVjdD17fV0gVGhlIG9iamVjdCB0byBjb3B5IHN5bWJvbHMgdG8uXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyBgb2JqZWN0YC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBjb3B5U3ltYm9sc0luKHNvdXJjZSwgb2JqZWN0KSB7XG4gICAgICByZXR1cm4gY29weU9iamVjdChzb3VyY2UsIGdldFN5bWJvbHNJbihzb3VyY2UpLCBvYmplY3QpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBmdW5jdGlvbiBsaWtlIGBfLmdyb3VwQnlgLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBzZXR0ZXIgVGhlIGZ1bmN0aW9uIHRvIHNldCBhY2N1bXVsYXRvciB2YWx1ZXMuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2luaXRpYWxpemVyXSBUaGUgYWNjdW11bGF0b3Igb2JqZWN0IGluaXRpYWxpemVyLlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IGFnZ3JlZ2F0b3IgZnVuY3Rpb24uXG4gICAgICovXG4gICAgZnVuY3Rpb24gY3JlYXRlQWdncmVnYXRvcihzZXR0ZXIsIGluaXRpYWxpemVyKSB7XG4gICAgICByZXR1cm4gZnVuY3Rpb24oY29sbGVjdGlvbiwgaXRlcmF0ZWUpIHtcbiAgICAgICAgdmFyIGZ1bmMgPSBpc0FycmF5KGNvbGxlY3Rpb24pID8gYXJyYXlBZ2dyZWdhdG9yIDogYmFzZUFnZ3JlZ2F0b3IsXG4gICAgICAgICAgICBhY2N1bXVsYXRvciA9IGluaXRpYWxpemVyID8gaW5pdGlhbGl6ZXIoKSA6IHt9O1xuXG4gICAgICAgIHJldHVybiBmdW5jKGNvbGxlY3Rpb24sIHNldHRlciwgZ2V0SXRlcmF0ZWUoaXRlcmF0ZWUsIDIpLCBhY2N1bXVsYXRvcik7XG4gICAgICB9O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBmdW5jdGlvbiBsaWtlIGBfLmFzc2lnbmAuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGFzc2lnbmVyIFRoZSBmdW5jdGlvbiB0byBhc3NpZ24gdmFsdWVzLlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IGFzc2lnbmVyIGZ1bmN0aW9uLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGNyZWF0ZUFzc2lnbmVyKGFzc2lnbmVyKSB7XG4gICAgICByZXR1cm4gYmFzZVJlc3QoZnVuY3Rpb24ob2JqZWN0LCBzb3VyY2VzKSB7XG4gICAgICAgIHZhciBpbmRleCA9IC0xLFxuICAgICAgICAgICAgbGVuZ3RoID0gc291cmNlcy5sZW5ndGgsXG4gICAgICAgICAgICBjdXN0b21pemVyID0gbGVuZ3RoID4gMSA/IHNvdXJjZXNbbGVuZ3RoIC0gMV0gOiB1bmRlZmluZWQsXG4gICAgICAgICAgICBndWFyZCA9IGxlbmd0aCA+IDIgPyBzb3VyY2VzWzJdIDogdW5kZWZpbmVkO1xuXG4gICAgICAgIGN1c3RvbWl6ZXIgPSAoYXNzaWduZXIubGVuZ3RoID4gMyAmJiB0eXBlb2YgY3VzdG9taXplciA9PSAnZnVuY3Rpb24nKVxuICAgICAgICAgID8gKGxlbmd0aC0tLCBjdXN0b21pemVyKVxuICAgICAgICAgIDogdW5kZWZpbmVkO1xuXG4gICAgICAgIGlmIChndWFyZCAmJiBpc0l0ZXJhdGVlQ2FsbChzb3VyY2VzWzBdLCBzb3VyY2VzWzFdLCBndWFyZCkpIHtcbiAgICAgICAgICBjdXN0b21pemVyID0gbGVuZ3RoIDwgMyA/IHVuZGVmaW5lZCA6IGN1c3RvbWl6ZXI7XG4gICAgICAgICAgbGVuZ3RoID0gMTtcbiAgICAgICAgfVxuICAgICAgICBvYmplY3QgPSBPYmplY3Qob2JqZWN0KTtcbiAgICAgICAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICAgICAgICB2YXIgc291cmNlID0gc291cmNlc1tpbmRleF07XG4gICAgICAgICAgaWYgKHNvdXJjZSkge1xuICAgICAgICAgICAgYXNzaWduZXIob2JqZWN0LCBzb3VyY2UsIGluZGV4LCBjdXN0b21pemVyKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG9iamVjdDtcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBgYmFzZUVhY2hgIG9yIGBiYXNlRWFjaFJpZ2h0YCBmdW5jdGlvbi5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gZWFjaEZ1bmMgVGhlIGZ1bmN0aW9uIHRvIGl0ZXJhdGUgb3ZlciBhIGNvbGxlY3Rpb24uXG4gICAgICogQHBhcmFtIHtib29sZWFufSBbZnJvbVJpZ2h0XSBTcGVjaWZ5IGl0ZXJhdGluZyBmcm9tIHJpZ2h0IHRvIGxlZnQuXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgYmFzZSBmdW5jdGlvbi5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBjcmVhdGVCYXNlRWFjaChlYWNoRnVuYywgZnJvbVJpZ2h0KSB7XG4gICAgICByZXR1cm4gZnVuY3Rpb24oY29sbGVjdGlvbiwgaXRlcmF0ZWUpIHtcbiAgICAgICAgaWYgKGNvbGxlY3Rpb24gPT0gbnVsbCkge1xuICAgICAgICAgIHJldHVybiBjb2xsZWN0aW9uO1xuICAgICAgICB9XG4gICAgICAgIGlmICghaXNBcnJheUxpa2UoY29sbGVjdGlvbikpIHtcbiAgICAgICAgICByZXR1cm4gZWFjaEZ1bmMoY29sbGVjdGlvbiwgaXRlcmF0ZWUpO1xuICAgICAgICB9XG4gICAgICAgIHZhciBsZW5ndGggPSBjb2xsZWN0aW9uLmxlbmd0aCxcbiAgICAgICAgICAgIGluZGV4ID0gZnJvbVJpZ2h0ID8gbGVuZ3RoIDogLTEsXG4gICAgICAgICAgICBpdGVyYWJsZSA9IE9iamVjdChjb2xsZWN0aW9uKTtcblxuICAgICAgICB3aGlsZSAoKGZyb21SaWdodCA/IGluZGV4LS0gOiArK2luZGV4IDwgbGVuZ3RoKSkge1xuICAgICAgICAgIGlmIChpdGVyYXRlZShpdGVyYWJsZVtpbmRleF0sIGluZGV4LCBpdGVyYWJsZSkgPT09IGZhbHNlKSB7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGNvbGxlY3Rpb247XG4gICAgICB9O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBiYXNlIGZ1bmN0aW9uIGZvciBtZXRob2RzIGxpa2UgYF8uZm9ySW5gIGFuZCBgXy5mb3JPd25gLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge2Jvb2xlYW59IFtmcm9tUmlnaHRdIFNwZWNpZnkgaXRlcmF0aW5nIGZyb20gcmlnaHQgdG8gbGVmdC5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBiYXNlIGZ1bmN0aW9uLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGNyZWF0ZUJhc2VGb3IoZnJvbVJpZ2h0KSB7XG4gICAgICByZXR1cm4gZnVuY3Rpb24ob2JqZWN0LCBpdGVyYXRlZSwga2V5c0Z1bmMpIHtcbiAgICAgICAgdmFyIGluZGV4ID0gLTEsXG4gICAgICAgICAgICBpdGVyYWJsZSA9IE9iamVjdChvYmplY3QpLFxuICAgICAgICAgICAgcHJvcHMgPSBrZXlzRnVuYyhvYmplY3QpLFxuICAgICAgICAgICAgbGVuZ3RoID0gcHJvcHMubGVuZ3RoO1xuXG4gICAgICAgIHdoaWxlIChsZW5ndGgtLSkge1xuICAgICAgICAgIHZhciBrZXkgPSBwcm9wc1tmcm9tUmlnaHQgPyBsZW5ndGggOiArK2luZGV4XTtcbiAgICAgICAgICBpZiAoaXRlcmF0ZWUoaXRlcmFibGVba2V5XSwga2V5LCBpdGVyYWJsZSkgPT09IGZhbHNlKSB7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG9iamVjdDtcbiAgICAgIH07XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGZ1bmN0aW9uIHRoYXQgd3JhcHMgYGZ1bmNgIHRvIGludm9rZSBpdCB3aXRoIHRoZSBvcHRpb25hbCBgdGhpc2BcbiAgICAgKiBiaW5kaW5nIG9mIGB0aGlzQXJnYC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gZnVuYyBUaGUgZnVuY3Rpb24gdG8gd3JhcC5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gYml0bWFzayBUaGUgYml0bWFzayBmbGFncy4gU2VlIGBjcmVhdGVXcmFwYCBmb3IgbW9yZSBkZXRhaWxzLlxuICAgICAqIEBwYXJhbSB7Kn0gW3RoaXNBcmddIFRoZSBgdGhpc2AgYmluZGluZyBvZiBgZnVuY2AuXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgd3JhcHBlZCBmdW5jdGlvbi5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBjcmVhdGVCaW5kKGZ1bmMsIGJpdG1hc2ssIHRoaXNBcmcpIHtcbiAgICAgIHZhciBpc0JpbmQgPSBiaXRtYXNrICYgV1JBUF9CSU5EX0ZMQUcsXG4gICAgICAgICAgQ3RvciA9IGNyZWF0ZUN0b3IoZnVuYyk7XG5cbiAgICAgIGZ1bmN0aW9uIHdyYXBwZXIoKSB7XG4gICAgICAgIHZhciBmbiA9ICh0aGlzICYmIHRoaXMgIT09IHJvb3QgJiYgdGhpcyBpbnN0YW5jZW9mIHdyYXBwZXIpID8gQ3RvciA6IGZ1bmM7XG4gICAgICAgIHJldHVybiBmbi5hcHBseShpc0JpbmQgPyB0aGlzQXJnIDogdGhpcywgYXJndW1lbnRzKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiB3cmFwcGVyO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBmdW5jdGlvbiBsaWtlIGBfLmxvd2VyRmlyc3RgLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gbWV0aG9kTmFtZSBUaGUgbmFtZSBvZiB0aGUgYFN0cmluZ2AgY2FzZSBtZXRob2QgdG8gdXNlLlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IGNhc2UgZnVuY3Rpb24uXG4gICAgICovXG4gICAgZnVuY3Rpb24gY3JlYXRlQ2FzZUZpcnN0KG1ldGhvZE5hbWUpIHtcbiAgICAgIHJldHVybiBmdW5jdGlvbihzdHJpbmcpIHtcbiAgICAgICAgc3RyaW5nID0gdG9TdHJpbmcoc3RyaW5nKTtcblxuICAgICAgICB2YXIgc3RyU3ltYm9scyA9IGhhc1VuaWNvZGUoc3RyaW5nKVxuICAgICAgICAgID8gc3RyaW5nVG9BcnJheShzdHJpbmcpXG4gICAgICAgICAgOiB1bmRlZmluZWQ7XG5cbiAgICAgICAgdmFyIGNociA9IHN0clN5bWJvbHNcbiAgICAgICAgICA/IHN0clN5bWJvbHNbMF1cbiAgICAgICAgICA6IHN0cmluZy5jaGFyQXQoMCk7XG5cbiAgICAgICAgdmFyIHRyYWlsaW5nID0gc3RyU3ltYm9sc1xuICAgICAgICAgID8gY2FzdFNsaWNlKHN0clN5bWJvbHMsIDEpLmpvaW4oJycpXG4gICAgICAgICAgOiBzdHJpbmcuc2xpY2UoMSk7XG5cbiAgICAgICAgcmV0dXJuIGNoclttZXRob2ROYW1lXSgpICsgdHJhaWxpbmc7XG4gICAgICB9O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBmdW5jdGlvbiBsaWtlIGBfLmNhbWVsQ2FzZWAuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGNhbGxiYWNrIFRoZSBmdW5jdGlvbiB0byBjb21iaW5lIGVhY2ggd29yZC5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBjb21wb3VuZGVyIGZ1bmN0aW9uLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGNyZWF0ZUNvbXBvdW5kZXIoY2FsbGJhY2spIHtcbiAgICAgIHJldHVybiBmdW5jdGlvbihzdHJpbmcpIHtcbiAgICAgICAgcmV0dXJuIGFycmF5UmVkdWNlKHdvcmRzKGRlYnVycihzdHJpbmcpLnJlcGxhY2UocmVBcG9zLCAnJykpLCBjYWxsYmFjaywgJycpO1xuICAgICAgfTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgZnVuY3Rpb24gdGhhdCBwcm9kdWNlcyBhbiBpbnN0YW5jZSBvZiBgQ3RvcmAgcmVnYXJkbGVzcyBvZlxuICAgICAqIHdoZXRoZXIgaXQgd2FzIGludm9rZWQgYXMgcGFydCBvZiBhIGBuZXdgIGV4cHJlc3Npb24gb3IgYnkgYGNhbGxgIG9yIGBhcHBseWAuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IEN0b3IgVGhlIGNvbnN0cnVjdG9yIHRvIHdyYXAuXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgd3JhcHBlZCBmdW5jdGlvbi5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBjcmVhdGVDdG9yKEN0b3IpIHtcbiAgICAgIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICAgICAgLy8gVXNlIGEgYHN3aXRjaGAgc3RhdGVtZW50IHRvIHdvcmsgd2l0aCBjbGFzcyBjb25zdHJ1Y3RvcnMuIFNlZVxuICAgICAgICAvLyBodHRwOi8vZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi83LjAvI3NlYy1lY21hc2NyaXB0LWZ1bmN0aW9uLW9iamVjdHMtY2FsbC10aGlzYXJndW1lbnQtYXJndW1lbnRzbGlzdFxuICAgICAgICAvLyBmb3IgbW9yZSBkZXRhaWxzLlxuICAgICAgICB2YXIgYXJncyA9IGFyZ3VtZW50cztcbiAgICAgICAgc3dpdGNoIChhcmdzLmxlbmd0aCkge1xuICAgICAgICAgIGNhc2UgMDogcmV0dXJuIG5ldyBDdG9yO1xuICAgICAgICAgIGNhc2UgMTogcmV0dXJuIG5ldyBDdG9yKGFyZ3NbMF0pO1xuICAgICAgICAgIGNhc2UgMjogcmV0dXJuIG5ldyBDdG9yKGFyZ3NbMF0sIGFyZ3NbMV0pO1xuICAgICAgICAgIGNhc2UgMzogcmV0dXJuIG5ldyBDdG9yKGFyZ3NbMF0sIGFyZ3NbMV0sIGFyZ3NbMl0pO1xuICAgICAgICAgIGNhc2UgNDogcmV0dXJuIG5ldyBDdG9yKGFyZ3NbMF0sIGFyZ3NbMV0sIGFyZ3NbMl0sIGFyZ3NbM10pO1xuICAgICAgICAgIGNhc2UgNTogcmV0dXJuIG5ldyBDdG9yKGFyZ3NbMF0sIGFyZ3NbMV0sIGFyZ3NbMl0sIGFyZ3NbM10sIGFyZ3NbNF0pO1xuICAgICAgICAgIGNhc2UgNjogcmV0dXJuIG5ldyBDdG9yKGFyZ3NbMF0sIGFyZ3NbMV0sIGFyZ3NbMl0sIGFyZ3NbM10sIGFyZ3NbNF0sIGFyZ3NbNV0pO1xuICAgICAgICAgIGNhc2UgNzogcmV0dXJuIG5ldyBDdG9yKGFyZ3NbMF0sIGFyZ3NbMV0sIGFyZ3NbMl0sIGFyZ3NbM10sIGFyZ3NbNF0sIGFyZ3NbNV0sIGFyZ3NbNl0pO1xuICAgICAgICB9XG4gICAgICAgIHZhciB0aGlzQmluZGluZyA9IGJhc2VDcmVhdGUoQ3Rvci5wcm90b3R5cGUpLFxuICAgICAgICAgICAgcmVzdWx0ID0gQ3Rvci5hcHBseSh0aGlzQmluZGluZywgYXJncyk7XG5cbiAgICAgICAgLy8gTWltaWMgdGhlIGNvbnN0cnVjdG9yJ3MgYHJldHVybmAgYmVoYXZpb3IuXG4gICAgICAgIC8vIFNlZSBodHRwczovL2VzNS5naXRodWIuaW8vI3gxMy4yLjIgZm9yIG1vcmUgZGV0YWlscy5cbiAgICAgICAgcmV0dXJuIGlzT2JqZWN0KHJlc3VsdCkgPyByZXN1bHQgOiB0aGlzQmluZGluZztcbiAgICAgIH07XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGZ1bmN0aW9uIHRoYXQgd3JhcHMgYGZ1bmNgIHRvIGVuYWJsZSBjdXJyeWluZy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gZnVuYyBUaGUgZnVuY3Rpb24gdG8gd3JhcC5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gYml0bWFzayBUaGUgYml0bWFzayBmbGFncy4gU2VlIGBjcmVhdGVXcmFwYCBmb3IgbW9yZSBkZXRhaWxzLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBhcml0eSBUaGUgYXJpdHkgb2YgYGZ1bmNgLlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IHdyYXBwZWQgZnVuY3Rpb24uXG4gICAgICovXG4gICAgZnVuY3Rpb24gY3JlYXRlQ3VycnkoZnVuYywgYml0bWFzaywgYXJpdHkpIHtcbiAgICAgIHZhciBDdG9yID0gY3JlYXRlQ3RvcihmdW5jKTtcblxuICAgICAgZnVuY3Rpb24gd3JhcHBlcigpIHtcbiAgICAgICAgdmFyIGxlbmd0aCA9IGFyZ3VtZW50cy5sZW5ndGgsXG4gICAgICAgICAgICBhcmdzID0gQXJyYXkobGVuZ3RoKSxcbiAgICAgICAgICAgIGluZGV4ID0gbGVuZ3RoLFxuICAgICAgICAgICAgcGxhY2Vob2xkZXIgPSBnZXRIb2xkZXIod3JhcHBlcik7XG5cbiAgICAgICAgd2hpbGUgKGluZGV4LS0pIHtcbiAgICAgICAgICBhcmdzW2luZGV4XSA9IGFyZ3VtZW50c1tpbmRleF07XG4gICAgICAgIH1cbiAgICAgICAgdmFyIGhvbGRlcnMgPSAobGVuZ3RoIDwgMyAmJiBhcmdzWzBdICE9PSBwbGFjZWhvbGRlciAmJiBhcmdzW2xlbmd0aCAtIDFdICE9PSBwbGFjZWhvbGRlcilcbiAgICAgICAgICA/IFtdXG4gICAgICAgICAgOiByZXBsYWNlSG9sZGVycyhhcmdzLCBwbGFjZWhvbGRlcik7XG5cbiAgICAgICAgbGVuZ3RoIC09IGhvbGRlcnMubGVuZ3RoO1xuICAgICAgICBpZiAobGVuZ3RoIDwgYXJpdHkpIHtcbiAgICAgICAgICByZXR1cm4gY3JlYXRlUmVjdXJyeShcbiAgICAgICAgICAgIGZ1bmMsIGJpdG1hc2ssIGNyZWF0ZUh5YnJpZCwgd3JhcHBlci5wbGFjZWhvbGRlciwgdW5kZWZpbmVkLFxuICAgICAgICAgICAgYXJncywgaG9sZGVycywgdW5kZWZpbmVkLCB1bmRlZmluZWQsIGFyaXR5IC0gbGVuZ3RoKTtcbiAgICAgICAgfVxuICAgICAgICB2YXIgZm4gPSAodGhpcyAmJiB0aGlzICE9PSByb290ICYmIHRoaXMgaW5zdGFuY2VvZiB3cmFwcGVyKSA/IEN0b3IgOiBmdW5jO1xuICAgICAgICByZXR1cm4gYXBwbHkoZm4sIHRoaXMsIGFyZ3MpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHdyYXBwZXI7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGBfLmZpbmRgIG9yIGBfLmZpbmRMYXN0YCBmdW5jdGlvbi5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gZmluZEluZGV4RnVuYyBUaGUgZnVuY3Rpb24gdG8gZmluZCB0aGUgY29sbGVjdGlvbiBpbmRleC5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBmaW5kIGZ1bmN0aW9uLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGNyZWF0ZUZpbmQoZmluZEluZGV4RnVuYykge1xuICAgICAgcmV0dXJuIGZ1bmN0aW9uKGNvbGxlY3Rpb24sIHByZWRpY2F0ZSwgZnJvbUluZGV4KSB7XG4gICAgICAgIHZhciBpdGVyYWJsZSA9IE9iamVjdChjb2xsZWN0aW9uKTtcbiAgICAgICAgaWYgKCFpc0FycmF5TGlrZShjb2xsZWN0aW9uKSkge1xuICAgICAgICAgIHZhciBpdGVyYXRlZSA9IGdldEl0ZXJhdGVlKHByZWRpY2F0ZSwgMyk7XG4gICAgICAgICAgY29sbGVjdGlvbiA9IGtleXMoY29sbGVjdGlvbik7XG4gICAgICAgICAgcHJlZGljYXRlID0gZnVuY3Rpb24oa2V5KSB7IHJldHVybiBpdGVyYXRlZShpdGVyYWJsZVtrZXldLCBrZXksIGl0ZXJhYmxlKTsgfTtcbiAgICAgICAgfVxuICAgICAgICB2YXIgaW5kZXggPSBmaW5kSW5kZXhGdW5jKGNvbGxlY3Rpb24sIHByZWRpY2F0ZSwgZnJvbUluZGV4KTtcbiAgICAgICAgcmV0dXJuIGluZGV4ID4gLTEgPyBpdGVyYWJsZVtpdGVyYXRlZSA/IGNvbGxlY3Rpb25baW5kZXhdIDogaW5kZXhdIDogdW5kZWZpbmVkO1xuICAgICAgfTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgYF8uZmxvd2Agb3IgYF8uZmxvd1JpZ2h0YCBmdW5jdGlvbi5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtib29sZWFufSBbZnJvbVJpZ2h0XSBTcGVjaWZ5IGl0ZXJhdGluZyBmcm9tIHJpZ2h0IHRvIGxlZnQuXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgZmxvdyBmdW5jdGlvbi5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBjcmVhdGVGbG93KGZyb21SaWdodCkge1xuICAgICAgcmV0dXJuIGZsYXRSZXN0KGZ1bmN0aW9uKGZ1bmNzKSB7XG4gICAgICAgIHZhciBsZW5ndGggPSBmdW5jcy5sZW5ndGgsXG4gICAgICAgICAgICBpbmRleCA9IGxlbmd0aCxcbiAgICAgICAgICAgIHByZXJlcSA9IExvZGFzaFdyYXBwZXIucHJvdG90eXBlLnRocnU7XG5cbiAgICAgICAgaWYgKGZyb21SaWdodCkge1xuICAgICAgICAgIGZ1bmNzLnJldmVyc2UoKTtcbiAgICAgICAgfVxuICAgICAgICB3aGlsZSAoaW5kZXgtLSkge1xuICAgICAgICAgIHZhciBmdW5jID0gZnVuY3NbaW5kZXhdO1xuICAgICAgICAgIGlmICh0eXBlb2YgZnVuYyAhPSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKEZVTkNfRVJST1JfVEVYVCk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmIChwcmVyZXEgJiYgIXdyYXBwZXIgJiYgZ2V0RnVuY05hbWUoZnVuYykgPT0gJ3dyYXBwZXInKSB7XG4gICAgICAgICAgICB2YXIgd3JhcHBlciA9IG5ldyBMb2Rhc2hXcmFwcGVyKFtdLCB0cnVlKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgaW5kZXggPSB3cmFwcGVyID8gaW5kZXggOiBsZW5ndGg7XG4gICAgICAgIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgICAgICAgZnVuYyA9IGZ1bmNzW2luZGV4XTtcblxuICAgICAgICAgIHZhciBmdW5jTmFtZSA9IGdldEZ1bmNOYW1lKGZ1bmMpLFxuICAgICAgICAgICAgICBkYXRhID0gZnVuY05hbWUgPT0gJ3dyYXBwZXInID8gZ2V0RGF0YShmdW5jKSA6IHVuZGVmaW5lZDtcblxuICAgICAgICAgIGlmIChkYXRhICYmIGlzTGF6aWFibGUoZGF0YVswXSkgJiZcbiAgICAgICAgICAgICAgICBkYXRhWzFdID09IChXUkFQX0FSWV9GTEFHIHwgV1JBUF9DVVJSWV9GTEFHIHwgV1JBUF9QQVJUSUFMX0ZMQUcgfCBXUkFQX1JFQVJHX0ZMQUcpICYmXG4gICAgICAgICAgICAgICAgIWRhdGFbNF0ubGVuZ3RoICYmIGRhdGFbOV0gPT0gMVxuICAgICAgICAgICAgICApIHtcbiAgICAgICAgICAgIHdyYXBwZXIgPSB3cmFwcGVyW2dldEZ1bmNOYW1lKGRhdGFbMF0pXS5hcHBseSh3cmFwcGVyLCBkYXRhWzNdKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgd3JhcHBlciA9IChmdW5jLmxlbmd0aCA9PSAxICYmIGlzTGF6aWFibGUoZnVuYykpXG4gICAgICAgICAgICAgID8gd3JhcHBlcltmdW5jTmFtZV0oKVxuICAgICAgICAgICAgICA6IHdyYXBwZXIudGhydShmdW5jKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgICAgICAgIHZhciBhcmdzID0gYXJndW1lbnRzLFxuICAgICAgICAgICAgICB2YWx1ZSA9IGFyZ3NbMF07XG5cbiAgICAgICAgICBpZiAod3JhcHBlciAmJiBhcmdzLmxlbmd0aCA9PSAxICYmIGlzQXJyYXkodmFsdWUpKSB7XG4gICAgICAgICAgICByZXR1cm4gd3JhcHBlci5wbGFudCh2YWx1ZSkudmFsdWUoKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgdmFyIGluZGV4ID0gMCxcbiAgICAgICAgICAgICAgcmVzdWx0ID0gbGVuZ3RoID8gZnVuY3NbaW5kZXhdLmFwcGx5KHRoaXMsIGFyZ3MpIDogdmFsdWU7XG5cbiAgICAgICAgICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgICAgICAgICAgcmVzdWx0ID0gZnVuY3NbaW5kZXhdLmNhbGwodGhpcywgcmVzdWx0KTtcbiAgICAgICAgICB9XG4gICAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICAgICAgfTtcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBmdW5jdGlvbiB0aGF0IHdyYXBzIGBmdW5jYCB0byBpbnZva2UgaXQgd2l0aCBvcHRpb25hbCBgdGhpc2BcbiAgICAgKiBiaW5kaW5nIG9mIGB0aGlzQXJnYCwgcGFydGlhbCBhcHBsaWNhdGlvbiwgYW5kIGN1cnJ5aW5nLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufHN0cmluZ30gZnVuYyBUaGUgZnVuY3Rpb24gb3IgbWV0aG9kIG5hbWUgdG8gd3JhcC5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gYml0bWFzayBUaGUgYml0bWFzayBmbGFncy4gU2VlIGBjcmVhdGVXcmFwYCBmb3IgbW9yZSBkZXRhaWxzLlxuICAgICAqIEBwYXJhbSB7Kn0gW3RoaXNBcmddIFRoZSBgdGhpc2AgYmluZGluZyBvZiBgZnVuY2AuXG4gICAgICogQHBhcmFtIHtBcnJheX0gW3BhcnRpYWxzXSBUaGUgYXJndW1lbnRzIHRvIHByZXBlbmQgdG8gdGhvc2UgcHJvdmlkZWQgdG9cbiAgICAgKiAgdGhlIG5ldyBmdW5jdGlvbi5cbiAgICAgKiBAcGFyYW0ge0FycmF5fSBbaG9sZGVyc10gVGhlIGBwYXJ0aWFsc2AgcGxhY2Vob2xkZXIgaW5kZXhlcy5cbiAgICAgKiBAcGFyYW0ge0FycmF5fSBbcGFydGlhbHNSaWdodF0gVGhlIGFyZ3VtZW50cyB0byBhcHBlbmQgdG8gdGhvc2UgcHJvdmlkZWRcbiAgICAgKiAgdG8gdGhlIG5ldyBmdW5jdGlvbi5cbiAgICAgKiBAcGFyYW0ge0FycmF5fSBbaG9sZGVyc1JpZ2h0XSBUaGUgYHBhcnRpYWxzUmlnaHRgIHBsYWNlaG9sZGVyIGluZGV4ZXMuXG4gICAgICogQHBhcmFtIHtBcnJheX0gW2FyZ1Bvc10gVGhlIGFyZ3VtZW50IHBvc2l0aW9ucyBvZiB0aGUgbmV3IGZ1bmN0aW9uLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbYXJ5XSBUaGUgYXJpdHkgY2FwIG9mIGBmdW5jYC5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW2FyaXR5XSBUaGUgYXJpdHkgb2YgYGZ1bmNgLlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IHdyYXBwZWQgZnVuY3Rpb24uXG4gICAgICovXG4gICAgZnVuY3Rpb24gY3JlYXRlSHlicmlkKGZ1bmMsIGJpdG1hc2ssIHRoaXNBcmcsIHBhcnRpYWxzLCBob2xkZXJzLCBwYXJ0aWFsc1JpZ2h0LCBob2xkZXJzUmlnaHQsIGFyZ1BvcywgYXJ5LCBhcml0eSkge1xuICAgICAgdmFyIGlzQXJ5ID0gYml0bWFzayAmIFdSQVBfQVJZX0ZMQUcsXG4gICAgICAgICAgaXNCaW5kID0gYml0bWFzayAmIFdSQVBfQklORF9GTEFHLFxuICAgICAgICAgIGlzQmluZEtleSA9IGJpdG1hc2sgJiBXUkFQX0JJTkRfS0VZX0ZMQUcsXG4gICAgICAgICAgaXNDdXJyaWVkID0gYml0bWFzayAmIChXUkFQX0NVUlJZX0ZMQUcgfCBXUkFQX0NVUlJZX1JJR0hUX0ZMQUcpLFxuICAgICAgICAgIGlzRmxpcCA9IGJpdG1hc2sgJiBXUkFQX0ZMSVBfRkxBRyxcbiAgICAgICAgICBDdG9yID0gaXNCaW5kS2V5ID8gdW5kZWZpbmVkIDogY3JlYXRlQ3RvcihmdW5jKTtcblxuICAgICAgZnVuY3Rpb24gd3JhcHBlcigpIHtcbiAgICAgICAgdmFyIGxlbmd0aCA9IGFyZ3VtZW50cy5sZW5ndGgsXG4gICAgICAgICAgICBhcmdzID0gQXJyYXkobGVuZ3RoKSxcbiAgICAgICAgICAgIGluZGV4ID0gbGVuZ3RoO1xuXG4gICAgICAgIHdoaWxlIChpbmRleC0tKSB7XG4gICAgICAgICAgYXJnc1tpbmRleF0gPSBhcmd1bWVudHNbaW5kZXhdO1xuICAgICAgICB9XG4gICAgICAgIGlmIChpc0N1cnJpZWQpIHtcbiAgICAgICAgICB2YXIgcGxhY2Vob2xkZXIgPSBnZXRIb2xkZXIod3JhcHBlciksXG4gICAgICAgICAgICAgIGhvbGRlcnNDb3VudCA9IGNvdW50SG9sZGVycyhhcmdzLCBwbGFjZWhvbGRlcik7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHBhcnRpYWxzKSB7XG4gICAgICAgICAgYXJncyA9IGNvbXBvc2VBcmdzKGFyZ3MsIHBhcnRpYWxzLCBob2xkZXJzLCBpc0N1cnJpZWQpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChwYXJ0aWFsc1JpZ2h0KSB7XG4gICAgICAgICAgYXJncyA9IGNvbXBvc2VBcmdzUmlnaHQoYXJncywgcGFydGlhbHNSaWdodCwgaG9sZGVyc1JpZ2h0LCBpc0N1cnJpZWQpO1xuICAgICAgICB9XG4gICAgICAgIGxlbmd0aCAtPSBob2xkZXJzQ291bnQ7XG4gICAgICAgIGlmIChpc0N1cnJpZWQgJiYgbGVuZ3RoIDwgYXJpdHkpIHtcbiAgICAgICAgICB2YXIgbmV3SG9sZGVycyA9IHJlcGxhY2VIb2xkZXJzKGFyZ3MsIHBsYWNlaG9sZGVyKTtcbiAgICAgICAgICByZXR1cm4gY3JlYXRlUmVjdXJyeShcbiAgICAgICAgICAgIGZ1bmMsIGJpdG1hc2ssIGNyZWF0ZUh5YnJpZCwgd3JhcHBlci5wbGFjZWhvbGRlciwgdGhpc0FyZyxcbiAgICAgICAgICAgIGFyZ3MsIG5ld0hvbGRlcnMsIGFyZ1BvcywgYXJ5LCBhcml0eSAtIGxlbmd0aFxuICAgICAgICAgICk7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIHRoaXNCaW5kaW5nID0gaXNCaW5kID8gdGhpc0FyZyA6IHRoaXMsXG4gICAgICAgICAgICBmbiA9IGlzQmluZEtleSA/IHRoaXNCaW5kaW5nW2Z1bmNdIDogZnVuYztcblxuICAgICAgICBsZW5ndGggPSBhcmdzLmxlbmd0aDtcbiAgICAgICAgaWYgKGFyZ1Bvcykge1xuICAgICAgICAgIGFyZ3MgPSByZW9yZGVyKGFyZ3MsIGFyZ1Bvcyk7XG4gICAgICAgIH0gZWxzZSBpZiAoaXNGbGlwICYmIGxlbmd0aCA+IDEpIHtcbiAgICAgICAgICBhcmdzLnJldmVyc2UoKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoaXNBcnkgJiYgYXJ5IDwgbGVuZ3RoKSB7XG4gICAgICAgICAgYXJncy5sZW5ndGggPSBhcnk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRoaXMgJiYgdGhpcyAhPT0gcm9vdCAmJiB0aGlzIGluc3RhbmNlb2Ygd3JhcHBlcikge1xuICAgICAgICAgIGZuID0gQ3RvciB8fCBjcmVhdGVDdG9yKGZuKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gZm4uYXBwbHkodGhpc0JpbmRpbmcsIGFyZ3MpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHdyYXBwZXI7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGZ1bmN0aW9uIGxpa2UgYF8uaW52ZXJ0QnlgLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBzZXR0ZXIgVGhlIGZ1bmN0aW9uIHRvIHNldCBhY2N1bXVsYXRvciB2YWx1ZXMuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gdG9JdGVyYXRlZSBUaGUgZnVuY3Rpb24gdG8gcmVzb2x2ZSBpdGVyYXRlZXMuXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgaW52ZXJ0ZXIgZnVuY3Rpb24uXG4gICAgICovXG4gICAgZnVuY3Rpb24gY3JlYXRlSW52ZXJ0ZXIoc2V0dGVyLCB0b0l0ZXJhdGVlKSB7XG4gICAgICByZXR1cm4gZnVuY3Rpb24ob2JqZWN0LCBpdGVyYXRlZSkge1xuICAgICAgICByZXR1cm4gYmFzZUludmVydGVyKG9iamVjdCwgc2V0dGVyLCB0b0l0ZXJhdGVlKGl0ZXJhdGVlKSwge30pO1xuICAgICAgfTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgZnVuY3Rpb24gdGhhdCBwZXJmb3JtcyBhIG1hdGhlbWF0aWNhbCBvcGVyYXRpb24gb24gdHdvIHZhbHVlcy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gb3BlcmF0b3IgVGhlIGZ1bmN0aW9uIHRvIHBlcmZvcm0gdGhlIG9wZXJhdGlvbi5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW2RlZmF1bHRWYWx1ZV0gVGhlIHZhbHVlIHVzZWQgZm9yIGB1bmRlZmluZWRgIGFyZ3VtZW50cy5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBtYXRoZW1hdGljYWwgb3BlcmF0aW9uIGZ1bmN0aW9uLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGNyZWF0ZU1hdGhPcGVyYXRpb24ob3BlcmF0b3IsIGRlZmF1bHRWYWx1ZSkge1xuICAgICAgcmV0dXJuIGZ1bmN0aW9uKHZhbHVlLCBvdGhlcikge1xuICAgICAgICB2YXIgcmVzdWx0O1xuICAgICAgICBpZiAodmFsdWUgPT09IHVuZGVmaW5lZCAmJiBvdGhlciA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgcmV0dXJuIGRlZmF1bHRWYWx1ZTtcbiAgICAgICAgfVxuICAgICAgICBpZiAodmFsdWUgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgIHJlc3VsdCA9IHZhbHVlO1xuICAgICAgICB9XG4gICAgICAgIGlmIChvdGhlciAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgaWYgKHJlc3VsdCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICByZXR1cm4gb3RoZXI7XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmICh0eXBlb2YgdmFsdWUgPT0gJ3N0cmluZycgfHwgdHlwZW9mIG90aGVyID09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgICB2YWx1ZSA9IGJhc2VUb1N0cmluZyh2YWx1ZSk7XG4gICAgICAgICAgICBvdGhlciA9IGJhc2VUb1N0cmluZyhvdGhlcik7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHZhbHVlID0gYmFzZVRvTnVtYmVyKHZhbHVlKTtcbiAgICAgICAgICAgIG90aGVyID0gYmFzZVRvTnVtYmVyKG90aGVyKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgcmVzdWx0ID0gb3BlcmF0b3IodmFsdWUsIG90aGVyKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgICAgfTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgZnVuY3Rpb24gbGlrZSBgXy5vdmVyYC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gYXJyYXlGdW5jIFRoZSBmdW5jdGlvbiB0byBpdGVyYXRlIG92ZXIgaXRlcmF0ZWVzLlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IG92ZXIgZnVuY3Rpb24uXG4gICAgICovXG4gICAgZnVuY3Rpb24gY3JlYXRlT3ZlcihhcnJheUZ1bmMpIHtcbiAgICAgIHJldHVybiBmbGF0UmVzdChmdW5jdGlvbihpdGVyYXRlZXMpIHtcbiAgICAgICAgaXRlcmF0ZWVzID0gYXJyYXlNYXAoaXRlcmF0ZWVzLCBiYXNlVW5hcnkoZ2V0SXRlcmF0ZWUoKSkpO1xuICAgICAgICByZXR1cm4gYmFzZVJlc3QoZnVuY3Rpb24oYXJncykge1xuICAgICAgICAgIHZhciB0aGlzQXJnID0gdGhpcztcbiAgICAgICAgICByZXR1cm4gYXJyYXlGdW5jKGl0ZXJhdGVlcywgZnVuY3Rpb24oaXRlcmF0ZWUpIHtcbiAgICAgICAgICAgIHJldHVybiBhcHBseShpdGVyYXRlZSwgdGhpc0FyZywgYXJncyk7XG4gICAgICAgICAgfSk7XG4gICAgICAgIH0pO1xuICAgICAgfSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyB0aGUgcGFkZGluZyBmb3IgYHN0cmluZ2AgYmFzZWQgb24gYGxlbmd0aGAuIFRoZSBgY2hhcnNgIHN0cmluZ1xuICAgICAqIGlzIHRydW5jYXRlZCBpZiB0aGUgbnVtYmVyIG9mIGNoYXJhY3RlcnMgZXhjZWVkcyBgbGVuZ3RoYC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IGxlbmd0aCBUaGUgcGFkZGluZyBsZW5ndGguXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IFtjaGFycz0nICddIFRoZSBzdHJpbmcgdXNlZCBhcyBwYWRkaW5nLlxuICAgICAqIEByZXR1cm5zIHtzdHJpbmd9IFJldHVybnMgdGhlIHBhZGRpbmcgZm9yIGBzdHJpbmdgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGNyZWF0ZVBhZGRpbmcobGVuZ3RoLCBjaGFycykge1xuICAgICAgY2hhcnMgPSBjaGFycyA9PT0gdW5kZWZpbmVkID8gJyAnIDogYmFzZVRvU3RyaW5nKGNoYXJzKTtcblxuICAgICAgdmFyIGNoYXJzTGVuZ3RoID0gY2hhcnMubGVuZ3RoO1xuICAgICAgaWYgKGNoYXJzTGVuZ3RoIDwgMikge1xuICAgICAgICByZXR1cm4gY2hhcnNMZW5ndGggPyBiYXNlUmVwZWF0KGNoYXJzLCBsZW5ndGgpIDogY2hhcnM7XG4gICAgICB9XG4gICAgICB2YXIgcmVzdWx0ID0gYmFzZVJlcGVhdChjaGFycywgbmF0aXZlQ2VpbChsZW5ndGggLyBzdHJpbmdTaXplKGNoYXJzKSkpO1xuICAgICAgcmV0dXJuIGhhc1VuaWNvZGUoY2hhcnMpXG4gICAgICAgID8gY2FzdFNsaWNlKHN0cmluZ1RvQXJyYXkocmVzdWx0KSwgMCwgbGVuZ3RoKS5qb2luKCcnKVxuICAgICAgICA6IHJlc3VsdC5zbGljZSgwLCBsZW5ndGgpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBmdW5jdGlvbiB0aGF0IHdyYXBzIGBmdW5jYCB0byBpbnZva2UgaXQgd2l0aCB0aGUgYHRoaXNgIGJpbmRpbmdcbiAgICAgKiBvZiBgdGhpc0FyZ2AgYW5kIGBwYXJ0aWFsc2AgcHJlcGVuZGVkIHRvIHRoZSBhcmd1bWVudHMgaXQgcmVjZWl2ZXMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIHdyYXAuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IGJpdG1hc2sgVGhlIGJpdG1hc2sgZmxhZ3MuIFNlZSBgY3JlYXRlV3JhcGAgZm9yIG1vcmUgZGV0YWlscy5cbiAgICAgKiBAcGFyYW0geyp9IHRoaXNBcmcgVGhlIGB0aGlzYCBiaW5kaW5nIG9mIGBmdW5jYC5cbiAgICAgKiBAcGFyYW0ge0FycmF5fSBwYXJ0aWFscyBUaGUgYXJndW1lbnRzIHRvIHByZXBlbmQgdG8gdGhvc2UgcHJvdmlkZWQgdG9cbiAgICAgKiAgdGhlIG5ldyBmdW5jdGlvbi5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyB3cmFwcGVkIGZ1bmN0aW9uLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGNyZWF0ZVBhcnRpYWwoZnVuYywgYml0bWFzaywgdGhpc0FyZywgcGFydGlhbHMpIHtcbiAgICAgIHZhciBpc0JpbmQgPSBiaXRtYXNrICYgV1JBUF9CSU5EX0ZMQUcsXG4gICAgICAgICAgQ3RvciA9IGNyZWF0ZUN0b3IoZnVuYyk7XG5cbiAgICAgIGZ1bmN0aW9uIHdyYXBwZXIoKSB7XG4gICAgICAgIHZhciBhcmdzSW5kZXggPSAtMSxcbiAgICAgICAgICAgIGFyZ3NMZW5ndGggPSBhcmd1bWVudHMubGVuZ3RoLFxuICAgICAgICAgICAgbGVmdEluZGV4ID0gLTEsXG4gICAgICAgICAgICBsZWZ0TGVuZ3RoID0gcGFydGlhbHMubGVuZ3RoLFxuICAgICAgICAgICAgYXJncyA9IEFycmF5KGxlZnRMZW5ndGggKyBhcmdzTGVuZ3RoKSxcbiAgICAgICAgICAgIGZuID0gKHRoaXMgJiYgdGhpcyAhPT0gcm9vdCAmJiB0aGlzIGluc3RhbmNlb2Ygd3JhcHBlcikgPyBDdG9yIDogZnVuYztcblxuICAgICAgICB3aGlsZSAoKytsZWZ0SW5kZXggPCBsZWZ0TGVuZ3RoKSB7XG4gICAgICAgICAgYXJnc1tsZWZ0SW5kZXhdID0gcGFydGlhbHNbbGVmdEluZGV4XTtcbiAgICAgICAgfVxuICAgICAgICB3aGlsZSAoYXJnc0xlbmd0aC0tKSB7XG4gICAgICAgICAgYXJnc1tsZWZ0SW5kZXgrK10gPSBhcmd1bWVudHNbKythcmdzSW5kZXhdO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBhcHBseShmbiwgaXNCaW5kID8gdGhpc0FyZyA6IHRoaXMsIGFyZ3MpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHdyYXBwZXI7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGBfLnJhbmdlYCBvciBgXy5yYW5nZVJpZ2h0YCBmdW5jdGlvbi5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtib29sZWFufSBbZnJvbVJpZ2h0XSBTcGVjaWZ5IGl0ZXJhdGluZyBmcm9tIHJpZ2h0IHRvIGxlZnQuXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgcmFuZ2UgZnVuY3Rpb24uXG4gICAgICovXG4gICAgZnVuY3Rpb24gY3JlYXRlUmFuZ2UoZnJvbVJpZ2h0KSB7XG4gICAgICByZXR1cm4gZnVuY3Rpb24oc3RhcnQsIGVuZCwgc3RlcCkge1xuICAgICAgICBpZiAoc3RlcCAmJiB0eXBlb2Ygc3RlcCAhPSAnbnVtYmVyJyAmJiBpc0l0ZXJhdGVlQ2FsbChzdGFydCwgZW5kLCBzdGVwKSkge1xuICAgICAgICAgIGVuZCA9IHN0ZXAgPSB1bmRlZmluZWQ7XG4gICAgICAgIH1cbiAgICAgICAgLy8gRW5zdXJlIHRoZSBzaWduIG9mIGAtMGAgaXMgcHJlc2VydmVkLlxuICAgICAgICBzdGFydCA9IHRvRmluaXRlKHN0YXJ0KTtcbiAgICAgICAgaWYgKGVuZCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgZW5kID0gc3RhcnQ7XG4gICAgICAgICAgc3RhcnQgPSAwO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGVuZCA9IHRvRmluaXRlKGVuZCk7XG4gICAgICAgIH1cbiAgICAgICAgc3RlcCA9IHN0ZXAgPT09IHVuZGVmaW5lZCA/IChzdGFydCA8IGVuZCA/IDEgOiAtMSkgOiB0b0Zpbml0ZShzdGVwKTtcbiAgICAgICAgcmV0dXJuIGJhc2VSYW5nZShzdGFydCwgZW5kLCBzdGVwLCBmcm9tUmlnaHQpO1xuICAgICAgfTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgZnVuY3Rpb24gdGhhdCBwZXJmb3JtcyBhIHJlbGF0aW9uYWwgb3BlcmF0aW9uIG9uIHR3byB2YWx1ZXMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IG9wZXJhdG9yIFRoZSBmdW5jdGlvbiB0byBwZXJmb3JtIHRoZSBvcGVyYXRpb24uXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgcmVsYXRpb25hbCBvcGVyYXRpb24gZnVuY3Rpb24uXG4gICAgICovXG4gICAgZnVuY3Rpb24gY3JlYXRlUmVsYXRpb25hbE9wZXJhdGlvbihvcGVyYXRvcikge1xuICAgICAgcmV0dXJuIGZ1bmN0aW9uKHZhbHVlLCBvdGhlcikge1xuICAgICAgICBpZiAoISh0eXBlb2YgdmFsdWUgPT0gJ3N0cmluZycgJiYgdHlwZW9mIG90aGVyID09ICdzdHJpbmcnKSkge1xuICAgICAgICAgIHZhbHVlID0gdG9OdW1iZXIodmFsdWUpO1xuICAgICAgICAgIG90aGVyID0gdG9OdW1iZXIob3RoZXIpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBvcGVyYXRvcih2YWx1ZSwgb3RoZXIpO1xuICAgICAgfTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgZnVuY3Rpb24gdGhhdCB3cmFwcyBgZnVuY2AgdG8gY29udGludWUgY3VycnlpbmcuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIHdyYXAuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IGJpdG1hc2sgVGhlIGJpdG1hc2sgZmxhZ3MuIFNlZSBgY3JlYXRlV3JhcGAgZm9yIG1vcmUgZGV0YWlscy5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSB3cmFwRnVuYyBUaGUgZnVuY3Rpb24gdG8gY3JlYXRlIHRoZSBgZnVuY2Agd3JhcHBlci5cbiAgICAgKiBAcGFyYW0geyp9IHBsYWNlaG9sZGVyIFRoZSBwbGFjZWhvbGRlciB2YWx1ZS5cbiAgICAgKiBAcGFyYW0geyp9IFt0aGlzQXJnXSBUaGUgYHRoaXNgIGJpbmRpbmcgb2YgYGZ1bmNgLlxuICAgICAqIEBwYXJhbSB7QXJyYXl9IFtwYXJ0aWFsc10gVGhlIGFyZ3VtZW50cyB0byBwcmVwZW5kIHRvIHRob3NlIHByb3ZpZGVkIHRvXG4gICAgICogIHRoZSBuZXcgZnVuY3Rpb24uXG4gICAgICogQHBhcmFtIHtBcnJheX0gW2hvbGRlcnNdIFRoZSBgcGFydGlhbHNgIHBsYWNlaG9sZGVyIGluZGV4ZXMuXG4gICAgICogQHBhcmFtIHtBcnJheX0gW2FyZ1Bvc10gVGhlIGFyZ3VtZW50IHBvc2l0aW9ucyBvZiB0aGUgbmV3IGZ1bmN0aW9uLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbYXJ5XSBUaGUgYXJpdHkgY2FwIG9mIGBmdW5jYC5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW2FyaXR5XSBUaGUgYXJpdHkgb2YgYGZ1bmNgLlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IHdyYXBwZWQgZnVuY3Rpb24uXG4gICAgICovXG4gICAgZnVuY3Rpb24gY3JlYXRlUmVjdXJyeShmdW5jLCBiaXRtYXNrLCB3cmFwRnVuYywgcGxhY2Vob2xkZXIsIHRoaXNBcmcsIHBhcnRpYWxzLCBob2xkZXJzLCBhcmdQb3MsIGFyeSwgYXJpdHkpIHtcbiAgICAgIHZhciBpc0N1cnJ5ID0gYml0bWFzayAmIFdSQVBfQ1VSUllfRkxBRyxcbiAgICAgICAgICBuZXdIb2xkZXJzID0gaXNDdXJyeSA/IGhvbGRlcnMgOiB1bmRlZmluZWQsXG4gICAgICAgICAgbmV3SG9sZGVyc1JpZ2h0ID0gaXNDdXJyeSA/IHVuZGVmaW5lZCA6IGhvbGRlcnMsXG4gICAgICAgICAgbmV3UGFydGlhbHMgPSBpc0N1cnJ5ID8gcGFydGlhbHMgOiB1bmRlZmluZWQsXG4gICAgICAgICAgbmV3UGFydGlhbHNSaWdodCA9IGlzQ3VycnkgPyB1bmRlZmluZWQgOiBwYXJ0aWFscztcblxuICAgICAgYml0bWFzayB8PSAoaXNDdXJyeSA/IFdSQVBfUEFSVElBTF9GTEFHIDogV1JBUF9QQVJUSUFMX1JJR0hUX0ZMQUcpO1xuICAgICAgYml0bWFzayAmPSB+KGlzQ3VycnkgPyBXUkFQX1BBUlRJQUxfUklHSFRfRkxBRyA6IFdSQVBfUEFSVElBTF9GTEFHKTtcblxuICAgICAgaWYgKCEoYml0bWFzayAmIFdSQVBfQ1VSUllfQk9VTkRfRkxBRykpIHtcbiAgICAgICAgYml0bWFzayAmPSB+KFdSQVBfQklORF9GTEFHIHwgV1JBUF9CSU5EX0tFWV9GTEFHKTtcbiAgICAgIH1cbiAgICAgIHZhciBuZXdEYXRhID0gW1xuICAgICAgICBmdW5jLCBiaXRtYXNrLCB0aGlzQXJnLCBuZXdQYXJ0aWFscywgbmV3SG9sZGVycywgbmV3UGFydGlhbHNSaWdodCxcbiAgICAgICAgbmV3SG9sZGVyc1JpZ2h0LCBhcmdQb3MsIGFyeSwgYXJpdHlcbiAgICAgIF07XG5cbiAgICAgIHZhciByZXN1bHQgPSB3cmFwRnVuYy5hcHBseSh1bmRlZmluZWQsIG5ld0RhdGEpO1xuICAgICAgaWYgKGlzTGF6aWFibGUoZnVuYykpIHtcbiAgICAgICAgc2V0RGF0YShyZXN1bHQsIG5ld0RhdGEpO1xuICAgICAgfVxuICAgICAgcmVzdWx0LnBsYWNlaG9sZGVyID0gcGxhY2Vob2xkZXI7XG4gICAgICByZXR1cm4gc2V0V3JhcFRvU3RyaW5nKHJlc3VsdCwgZnVuYywgYml0bWFzayk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGZ1bmN0aW9uIGxpa2UgYF8ucm91bmRgLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gbWV0aG9kTmFtZSBUaGUgbmFtZSBvZiB0aGUgYE1hdGhgIG1ldGhvZCB0byB1c2Ugd2hlbiByb3VuZGluZy5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyByb3VuZCBmdW5jdGlvbi5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBjcmVhdGVSb3VuZChtZXRob2ROYW1lKSB7XG4gICAgICB2YXIgZnVuYyA9IE1hdGhbbWV0aG9kTmFtZV07XG4gICAgICByZXR1cm4gZnVuY3Rpb24obnVtYmVyLCBwcmVjaXNpb24pIHtcbiAgICAgICAgbnVtYmVyID0gdG9OdW1iZXIobnVtYmVyKTtcbiAgICAgICAgcHJlY2lzaW9uID0gcHJlY2lzaW9uID09IG51bGwgPyAwIDogbmF0aXZlTWluKHRvSW50ZWdlcihwcmVjaXNpb24pLCAyOTIpO1xuICAgICAgICBpZiAocHJlY2lzaW9uICYmIG5hdGl2ZUlzRmluaXRlKG51bWJlcikpIHtcbiAgICAgICAgICAvLyBTaGlmdCB3aXRoIGV4cG9uZW50aWFsIG5vdGF0aW9uIHRvIGF2b2lkIGZsb2F0aW5nLXBvaW50IGlzc3Vlcy5cbiAgICAgICAgICAvLyBTZWUgW01ETl0oaHR0cHM6Ly9tZG4uaW8vcm91bmQjRXhhbXBsZXMpIGZvciBtb3JlIGRldGFpbHMuXG4gICAgICAgICAgdmFyIHBhaXIgPSAodG9TdHJpbmcobnVtYmVyKSArICdlJykuc3BsaXQoJ2UnKSxcbiAgICAgICAgICAgICAgdmFsdWUgPSBmdW5jKHBhaXJbMF0gKyAnZScgKyAoK3BhaXJbMV0gKyBwcmVjaXNpb24pKTtcblxuICAgICAgICAgIHBhaXIgPSAodG9TdHJpbmcodmFsdWUpICsgJ2UnKS5zcGxpdCgnZScpO1xuICAgICAgICAgIHJldHVybiArKHBhaXJbMF0gKyAnZScgKyAoK3BhaXJbMV0gLSBwcmVjaXNpb24pKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gZnVuYyhudW1iZXIpO1xuICAgICAgfTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgc2V0IG9iamVjdCBvZiBgdmFsdWVzYC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtBcnJheX0gdmFsdWVzIFRoZSB2YWx1ZXMgdG8gYWRkIHRvIHRoZSBzZXQuXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyB0aGUgbmV3IHNldC5cbiAgICAgKi9cbiAgICB2YXIgY3JlYXRlU2V0ID0gIShTZXQgJiYgKDEgLyBzZXRUb0FycmF5KG5ldyBTZXQoWywtMF0pKVsxXSkgPT0gSU5GSU5JVFkpID8gbm9vcCA6IGZ1bmN0aW9uKHZhbHVlcykge1xuICAgICAgcmV0dXJuIG5ldyBTZXQodmFsdWVzKTtcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGBfLnRvUGFpcnNgIG9yIGBfLnRvUGFpcnNJbmAgZnVuY3Rpb24uXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGtleXNGdW5jIFRoZSBmdW5jdGlvbiB0byBnZXQgdGhlIGtleXMgb2YgYSBnaXZlbiBvYmplY3QuXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgcGFpcnMgZnVuY3Rpb24uXG4gICAgICovXG4gICAgZnVuY3Rpb24gY3JlYXRlVG9QYWlycyhrZXlzRnVuYykge1xuICAgICAgcmV0dXJuIGZ1bmN0aW9uKG9iamVjdCkge1xuICAgICAgICB2YXIgdGFnID0gZ2V0VGFnKG9iamVjdCk7XG4gICAgICAgIGlmICh0YWcgPT0gbWFwVGFnKSB7XG4gICAgICAgICAgcmV0dXJuIG1hcFRvQXJyYXkob2JqZWN0KTtcbiAgICAgICAgfVxuICAgICAgICBpZiAodGFnID09IHNldFRhZykge1xuICAgICAgICAgIHJldHVybiBzZXRUb1BhaXJzKG9iamVjdCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGJhc2VUb1BhaXJzKG9iamVjdCwga2V5c0Z1bmMob2JqZWN0KSk7XG4gICAgICB9O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBmdW5jdGlvbiB0aGF0IGVpdGhlciBjdXJyaWVzIG9yIGludm9rZXMgYGZ1bmNgIHdpdGggb3B0aW9uYWxcbiAgICAgKiBgdGhpc2AgYmluZGluZyBhbmQgcGFydGlhbGx5IGFwcGxpZWQgYXJndW1lbnRzLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufHN0cmluZ30gZnVuYyBUaGUgZnVuY3Rpb24gb3IgbWV0aG9kIG5hbWUgdG8gd3JhcC5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gYml0bWFzayBUaGUgYml0bWFzayBmbGFncy5cbiAgICAgKiAgICAxIC0gYF8uYmluZGBcbiAgICAgKiAgICAyIC0gYF8uYmluZEtleWBcbiAgICAgKiAgICA0IC0gYF8uY3VycnlgIG9yIGBfLmN1cnJ5UmlnaHRgIG9mIGEgYm91bmQgZnVuY3Rpb25cbiAgICAgKiAgICA4IC0gYF8uY3VycnlgXG4gICAgICogICAxNiAtIGBfLmN1cnJ5UmlnaHRgXG4gICAgICogICAzMiAtIGBfLnBhcnRpYWxgXG4gICAgICogICA2NCAtIGBfLnBhcnRpYWxSaWdodGBcbiAgICAgKiAgMTI4IC0gYF8ucmVhcmdgXG4gICAgICogIDI1NiAtIGBfLmFyeWBcbiAgICAgKiAgNTEyIC0gYF8uZmxpcGBcbiAgICAgKiBAcGFyYW0geyp9IFt0aGlzQXJnXSBUaGUgYHRoaXNgIGJpbmRpbmcgb2YgYGZ1bmNgLlxuICAgICAqIEBwYXJhbSB7QXJyYXl9IFtwYXJ0aWFsc10gVGhlIGFyZ3VtZW50cyB0byBiZSBwYXJ0aWFsbHkgYXBwbGllZC5cbiAgICAgKiBAcGFyYW0ge0FycmF5fSBbaG9sZGVyc10gVGhlIGBwYXJ0aWFsc2AgcGxhY2Vob2xkZXIgaW5kZXhlcy5cbiAgICAgKiBAcGFyYW0ge0FycmF5fSBbYXJnUG9zXSBUaGUgYXJndW1lbnQgcG9zaXRpb25zIG9mIHRoZSBuZXcgZnVuY3Rpb24uXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFthcnldIFRoZSBhcml0eSBjYXAgb2YgYGZ1bmNgLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbYXJpdHldIFRoZSBhcml0eSBvZiBgZnVuY2AuXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgd3JhcHBlZCBmdW5jdGlvbi5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBjcmVhdGVXcmFwKGZ1bmMsIGJpdG1hc2ssIHRoaXNBcmcsIHBhcnRpYWxzLCBob2xkZXJzLCBhcmdQb3MsIGFyeSwgYXJpdHkpIHtcbiAgICAgIHZhciBpc0JpbmRLZXkgPSBiaXRtYXNrICYgV1JBUF9CSU5EX0tFWV9GTEFHO1xuICAgICAgaWYgKCFpc0JpbmRLZXkgJiYgdHlwZW9mIGZ1bmMgIT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKEZVTkNfRVJST1JfVEVYVCk7XG4gICAgICB9XG4gICAgICB2YXIgbGVuZ3RoID0gcGFydGlhbHMgPyBwYXJ0aWFscy5sZW5ndGggOiAwO1xuICAgICAgaWYgKCFsZW5ndGgpIHtcbiAgICAgICAgYml0bWFzayAmPSB+KFdSQVBfUEFSVElBTF9GTEFHIHwgV1JBUF9QQVJUSUFMX1JJR0hUX0ZMQUcpO1xuICAgICAgICBwYXJ0aWFscyA9IGhvbGRlcnMgPSB1bmRlZmluZWQ7XG4gICAgICB9XG4gICAgICBhcnkgPSBhcnkgPT09IHVuZGVmaW5lZCA/IGFyeSA6IG5hdGl2ZU1heCh0b0ludGVnZXIoYXJ5KSwgMCk7XG4gICAgICBhcml0eSA9IGFyaXR5ID09PSB1bmRlZmluZWQgPyBhcml0eSA6IHRvSW50ZWdlcihhcml0eSk7XG4gICAgICBsZW5ndGggLT0gaG9sZGVycyA/IGhvbGRlcnMubGVuZ3RoIDogMDtcblxuICAgICAgaWYgKGJpdG1hc2sgJiBXUkFQX1BBUlRJQUxfUklHSFRfRkxBRykge1xuICAgICAgICB2YXIgcGFydGlhbHNSaWdodCA9IHBhcnRpYWxzLFxuICAgICAgICAgICAgaG9sZGVyc1JpZ2h0ID0gaG9sZGVycztcblxuICAgICAgICBwYXJ0aWFscyA9IGhvbGRlcnMgPSB1bmRlZmluZWQ7XG4gICAgICB9XG4gICAgICB2YXIgZGF0YSA9IGlzQmluZEtleSA/IHVuZGVmaW5lZCA6IGdldERhdGEoZnVuYyk7XG5cbiAgICAgIHZhciBuZXdEYXRhID0gW1xuICAgICAgICBmdW5jLCBiaXRtYXNrLCB0aGlzQXJnLCBwYXJ0aWFscywgaG9sZGVycywgcGFydGlhbHNSaWdodCwgaG9sZGVyc1JpZ2h0LFxuICAgICAgICBhcmdQb3MsIGFyeSwgYXJpdHlcbiAgICAgIF07XG5cbiAgICAgIGlmIChkYXRhKSB7XG4gICAgICAgIG1lcmdlRGF0YShuZXdEYXRhLCBkYXRhKTtcbiAgICAgIH1cbiAgICAgIGZ1bmMgPSBuZXdEYXRhWzBdO1xuICAgICAgYml0bWFzayA9IG5ld0RhdGFbMV07XG4gICAgICB0aGlzQXJnID0gbmV3RGF0YVsyXTtcbiAgICAgIHBhcnRpYWxzID0gbmV3RGF0YVszXTtcbiAgICAgIGhvbGRlcnMgPSBuZXdEYXRhWzRdO1xuICAgICAgYXJpdHkgPSBuZXdEYXRhWzldID0gbmV3RGF0YVs5XSA9PT0gdW5kZWZpbmVkXG4gICAgICAgID8gKGlzQmluZEtleSA/IDAgOiBmdW5jLmxlbmd0aClcbiAgICAgICAgOiBuYXRpdmVNYXgobmV3RGF0YVs5XSAtIGxlbmd0aCwgMCk7XG5cbiAgICAgIGlmICghYXJpdHkgJiYgYml0bWFzayAmIChXUkFQX0NVUlJZX0ZMQUcgfCBXUkFQX0NVUlJZX1JJR0hUX0ZMQUcpKSB7XG4gICAgICAgIGJpdG1hc2sgJj0gfihXUkFQX0NVUlJZX0ZMQUcgfCBXUkFQX0NVUlJZX1JJR0hUX0ZMQUcpO1xuICAgICAgfVxuICAgICAgaWYgKCFiaXRtYXNrIHx8IGJpdG1hc2sgPT0gV1JBUF9CSU5EX0ZMQUcpIHtcbiAgICAgICAgdmFyIHJlc3VsdCA9IGNyZWF0ZUJpbmQoZnVuYywgYml0bWFzaywgdGhpc0FyZyk7XG4gICAgICB9IGVsc2UgaWYgKGJpdG1hc2sgPT0gV1JBUF9DVVJSWV9GTEFHIHx8IGJpdG1hc2sgPT0gV1JBUF9DVVJSWV9SSUdIVF9GTEFHKSB7XG4gICAgICAgIHJlc3VsdCA9IGNyZWF0ZUN1cnJ5KGZ1bmMsIGJpdG1hc2ssIGFyaXR5KTtcbiAgICAgIH0gZWxzZSBpZiAoKGJpdG1hc2sgPT0gV1JBUF9QQVJUSUFMX0ZMQUcgfHwgYml0bWFzayA9PSAoV1JBUF9CSU5EX0ZMQUcgfCBXUkFQX1BBUlRJQUxfRkxBRykpICYmICFob2xkZXJzLmxlbmd0aCkge1xuICAgICAgICByZXN1bHQgPSBjcmVhdGVQYXJ0aWFsKGZ1bmMsIGJpdG1hc2ssIHRoaXNBcmcsIHBhcnRpYWxzKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJlc3VsdCA9IGNyZWF0ZUh5YnJpZC5hcHBseSh1bmRlZmluZWQsIG5ld0RhdGEpO1xuICAgICAgfVxuICAgICAgdmFyIHNldHRlciA9IGRhdGEgPyBiYXNlU2V0RGF0YSA6IHNldERhdGE7XG4gICAgICByZXR1cm4gc2V0V3JhcFRvU3RyaW5nKHNldHRlcihyZXN1bHQsIG5ld0RhdGEpLCBmdW5jLCBiaXRtYXNrKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBVc2VkIGJ5IGBfLmRlZmF1bHRzYCB0byBjdXN0b21pemUgaXRzIGBfLmFzc2lnbkluYCB1c2UgdG8gYXNzaWduIHByb3BlcnRpZXNcbiAgICAgKiBvZiBzb3VyY2Ugb2JqZWN0cyB0byB0aGUgZGVzdGluYXRpb24gb2JqZWN0IGZvciBhbGwgZGVzdGluYXRpb24gcHJvcGVydGllc1xuICAgICAqIHRoYXQgcmVzb2x2ZSB0byBgdW5kZWZpbmVkYC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHsqfSBvYmpWYWx1ZSBUaGUgZGVzdGluYXRpb24gdmFsdWUuXG4gICAgICogQHBhcmFtIHsqfSBzcmNWYWx1ZSBUaGUgc291cmNlIHZhbHVlLlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgcHJvcGVydHkgdG8gYXNzaWduLlxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIHBhcmVudCBvYmplY3Qgb2YgYG9ialZhbHVlYC5cbiAgICAgKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgdmFsdWUgdG8gYXNzaWduLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGN1c3RvbURlZmF1bHRzQXNzaWduSW4ob2JqVmFsdWUsIHNyY1ZhbHVlLCBrZXksIG9iamVjdCkge1xuICAgICAgaWYgKG9ialZhbHVlID09PSB1bmRlZmluZWQgfHxcbiAgICAgICAgICAoZXEob2JqVmFsdWUsIG9iamVjdFByb3RvW2tleV0pICYmICFoYXNPd25Qcm9wZXJ0eS5jYWxsKG9iamVjdCwga2V5KSkpIHtcbiAgICAgICAgcmV0dXJuIHNyY1ZhbHVlO1xuICAgICAgfVxuICAgICAgcmV0dXJuIG9ialZhbHVlO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFVzZWQgYnkgYF8uZGVmYXVsdHNEZWVwYCB0byBjdXN0b21pemUgaXRzIGBfLm1lcmdlYCB1c2UgdG8gbWVyZ2Ugc291cmNlXG4gICAgICogb2JqZWN0cyBpbnRvIGRlc3RpbmF0aW9uIG9iamVjdHMgdGhhdCBhcmUgcGFzc2VkIHRocnUuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7Kn0gb2JqVmFsdWUgVGhlIGRlc3RpbmF0aW9uIHZhbHVlLlxuICAgICAqIEBwYXJhbSB7Kn0gc3JjVmFsdWUgVGhlIHNvdXJjZSB2YWx1ZS5cbiAgICAgKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIHByb3BlcnR5IHRvIG1lcmdlLlxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIHBhcmVudCBvYmplY3Qgb2YgYG9ialZhbHVlYC5cbiAgICAgKiBAcGFyYW0ge09iamVjdH0gc291cmNlIFRoZSBwYXJlbnQgb2JqZWN0IG9mIGBzcmNWYWx1ZWAuXG4gICAgICogQHBhcmFtIHtPYmplY3R9IFtzdGFja10gVHJhY2tzIHRyYXZlcnNlZCBzb3VyY2UgdmFsdWVzIGFuZCB0aGVpciBtZXJnZWRcbiAgICAgKiAgY291bnRlcnBhcnRzLlxuICAgICAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSB2YWx1ZSB0byBhc3NpZ24uXG4gICAgICovXG4gICAgZnVuY3Rpb24gY3VzdG9tRGVmYXVsdHNNZXJnZShvYmpWYWx1ZSwgc3JjVmFsdWUsIGtleSwgb2JqZWN0LCBzb3VyY2UsIHN0YWNrKSB7XG4gICAgICBpZiAoaXNPYmplY3Qob2JqVmFsdWUpICYmIGlzT2JqZWN0KHNyY1ZhbHVlKSkge1xuICAgICAgICAvLyBSZWN1cnNpdmVseSBtZXJnZSBvYmplY3RzIGFuZCBhcnJheXMgKHN1c2NlcHRpYmxlIHRvIGNhbGwgc3RhY2sgbGltaXRzKS5cbiAgICAgICAgc3RhY2suc2V0KHNyY1ZhbHVlLCBvYmpWYWx1ZSk7XG4gICAgICAgIGJhc2VNZXJnZShvYmpWYWx1ZSwgc3JjVmFsdWUsIHVuZGVmaW5lZCwgY3VzdG9tRGVmYXVsdHNNZXJnZSwgc3RhY2spO1xuICAgICAgICBzdGFja1snZGVsZXRlJ10oc3JjVmFsdWUpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIG9ialZhbHVlO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFVzZWQgYnkgYF8ub21pdGAgdG8gY3VzdG9taXplIGl0cyBgXy5jbG9uZURlZXBgIHVzZSB0byBvbmx5IGNsb25lIHBsYWluXG4gICAgICogb2JqZWN0cy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gaW5zcGVjdC5cbiAgICAgKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIHByb3BlcnR5IHRvIGluc3BlY3QuXG4gICAgICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIHVuY2xvbmVkIHZhbHVlIG9yIGB1bmRlZmluZWRgIHRvIGRlZmVyIGNsb25pbmcgdG8gYF8uY2xvbmVEZWVwYC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBjdXN0b21PbWl0Q2xvbmUodmFsdWUpIHtcbiAgICAgIHJldHVybiBpc1BsYWluT2JqZWN0KHZhbHVlKSA/IHVuZGVmaW5lZCA6IHZhbHVlO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEEgc3BlY2lhbGl6ZWQgdmVyc2lvbiBvZiBgYmFzZUlzRXF1YWxEZWVwYCBmb3IgYXJyYXlzIHdpdGggc3VwcG9ydCBmb3JcbiAgICAgKiBwYXJ0aWFsIGRlZXAgY29tcGFyaXNvbnMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBjb21wYXJlLlxuICAgICAqIEBwYXJhbSB7QXJyYXl9IG90aGVyIFRoZSBvdGhlciBhcnJheSB0byBjb21wYXJlLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBiaXRtYXNrIFRoZSBiaXRtYXNrIGZsYWdzLiBTZWUgYGJhc2VJc0VxdWFsYCBmb3IgbW9yZSBkZXRhaWxzLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGN1c3RvbWl6ZXIgVGhlIGZ1bmN0aW9uIHRvIGN1c3RvbWl6ZSBjb21wYXJpc29ucy5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBlcXVhbEZ1bmMgVGhlIGZ1bmN0aW9uIHRvIGRldGVybWluZSBlcXVpdmFsZW50cyBvZiB2YWx1ZXMuXG4gICAgICogQHBhcmFtIHtPYmplY3R9IHN0YWNrIFRyYWNrcyB0cmF2ZXJzZWQgYGFycmF5YCBhbmQgYG90aGVyYCBvYmplY3RzLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiB0aGUgYXJyYXlzIGFyZSBlcXVpdmFsZW50LCBlbHNlIGBmYWxzZWAuXG4gICAgICovXG4gICAgZnVuY3Rpb24gZXF1YWxBcnJheXMoYXJyYXksIG90aGVyLCBiaXRtYXNrLCBjdXN0b21pemVyLCBlcXVhbEZ1bmMsIHN0YWNrKSB7XG4gICAgICB2YXIgaXNQYXJ0aWFsID0gYml0bWFzayAmIENPTVBBUkVfUEFSVElBTF9GTEFHLFxuICAgICAgICAgIGFyckxlbmd0aCA9IGFycmF5Lmxlbmd0aCxcbiAgICAgICAgICBvdGhMZW5ndGggPSBvdGhlci5sZW5ndGg7XG5cbiAgICAgIGlmIChhcnJMZW5ndGggIT0gb3RoTGVuZ3RoICYmICEoaXNQYXJ0aWFsICYmIG90aExlbmd0aCA+IGFyckxlbmd0aCkpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuICAgICAgLy8gQ2hlY2sgdGhhdCBjeWNsaWMgdmFsdWVzIGFyZSBlcXVhbC5cbiAgICAgIHZhciBhcnJTdGFja2VkID0gc3RhY2suZ2V0KGFycmF5KTtcbiAgICAgIHZhciBvdGhTdGFja2VkID0gc3RhY2suZ2V0KG90aGVyKTtcbiAgICAgIGlmIChhcnJTdGFja2VkICYmIG90aFN0YWNrZWQpIHtcbiAgICAgICAgcmV0dXJuIGFyclN0YWNrZWQgPT0gb3RoZXIgJiYgb3RoU3RhY2tlZCA9PSBhcnJheTtcbiAgICAgIH1cbiAgICAgIHZhciBpbmRleCA9IC0xLFxuICAgICAgICAgIHJlc3VsdCA9IHRydWUsXG4gICAgICAgICAgc2VlbiA9IChiaXRtYXNrICYgQ09NUEFSRV9VTk9SREVSRURfRkxBRykgPyBuZXcgU2V0Q2FjaGUgOiB1bmRlZmluZWQ7XG5cbiAgICAgIHN0YWNrLnNldChhcnJheSwgb3RoZXIpO1xuICAgICAgc3RhY2suc2V0KG90aGVyLCBhcnJheSk7XG5cbiAgICAgIC8vIElnbm9yZSBub24taW5kZXggcHJvcGVydGllcy5cbiAgICAgIHdoaWxlICgrK2luZGV4IDwgYXJyTGVuZ3RoKSB7XG4gICAgICAgIHZhciBhcnJWYWx1ZSA9IGFycmF5W2luZGV4XSxcbiAgICAgICAgICAgIG90aFZhbHVlID0gb3RoZXJbaW5kZXhdO1xuXG4gICAgICAgIGlmIChjdXN0b21pemVyKSB7XG4gICAgICAgICAgdmFyIGNvbXBhcmVkID0gaXNQYXJ0aWFsXG4gICAgICAgICAgICA/IGN1c3RvbWl6ZXIob3RoVmFsdWUsIGFyclZhbHVlLCBpbmRleCwgb3RoZXIsIGFycmF5LCBzdGFjaylcbiAgICAgICAgICAgIDogY3VzdG9taXplcihhcnJWYWx1ZSwgb3RoVmFsdWUsIGluZGV4LCBhcnJheSwgb3RoZXIsIHN0YWNrKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoY29tcGFyZWQgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgIGlmIChjb21wYXJlZCkge1xuICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgfVxuICAgICAgICAgIHJlc3VsdCA9IGZhbHNlO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICAgIC8vIFJlY3Vyc2l2ZWx5IGNvbXBhcmUgYXJyYXlzIChzdXNjZXB0aWJsZSB0byBjYWxsIHN0YWNrIGxpbWl0cykuXG4gICAgICAgIGlmIChzZWVuKSB7XG4gICAgICAgICAgaWYgKCFhcnJheVNvbWUob3RoZXIsIGZ1bmN0aW9uKG90aFZhbHVlLCBvdGhJbmRleCkge1xuICAgICAgICAgICAgICAgIGlmICghY2FjaGVIYXMoc2Vlbiwgb3RoSW5kZXgpICYmXG4gICAgICAgICAgICAgICAgICAgIChhcnJWYWx1ZSA9PT0gb3RoVmFsdWUgfHwgZXF1YWxGdW5jKGFyclZhbHVlLCBvdGhWYWx1ZSwgYml0bWFzaywgY3VzdG9taXplciwgc3RhY2spKSkge1xuICAgICAgICAgICAgICAgICAgcmV0dXJuIHNlZW4ucHVzaChvdGhJbmRleCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB9KSkge1xuICAgICAgICAgICAgcmVzdWx0ID0gZmFsc2U7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSBpZiAoIShcbiAgICAgICAgICAgICAgYXJyVmFsdWUgPT09IG90aFZhbHVlIHx8XG4gICAgICAgICAgICAgICAgZXF1YWxGdW5jKGFyclZhbHVlLCBvdGhWYWx1ZSwgYml0bWFzaywgY3VzdG9taXplciwgc3RhY2spXG4gICAgICAgICAgICApKSB7XG4gICAgICAgICAgcmVzdWx0ID0gZmFsc2U7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHN0YWNrWydkZWxldGUnXShhcnJheSk7XG4gICAgICBzdGFja1snZGVsZXRlJ10ob3RoZXIpO1xuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBBIHNwZWNpYWxpemVkIHZlcnNpb24gb2YgYGJhc2VJc0VxdWFsRGVlcGAgZm9yIGNvbXBhcmluZyBvYmplY3RzIG9mXG4gICAgICogdGhlIHNhbWUgYHRvU3RyaW5nVGFnYC5cbiAgICAgKlxuICAgICAqICoqTm90ZToqKiBUaGlzIGZ1bmN0aW9uIG9ubHkgc3VwcG9ydHMgY29tcGFyaW5nIHZhbHVlcyB3aXRoIHRhZ3Mgb2ZcbiAgICAgKiBgQm9vbGVhbmAsIGBEYXRlYCwgYEVycm9yYCwgYE51bWJlcmAsIGBSZWdFeHBgLCBvciBgU3RyaW5nYC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIGNvbXBhcmUuXG4gICAgICogQHBhcmFtIHtPYmplY3R9IG90aGVyIFRoZSBvdGhlciBvYmplY3QgdG8gY29tcGFyZS5cbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gdGFnIFRoZSBgdG9TdHJpbmdUYWdgIG9mIHRoZSBvYmplY3RzIHRvIGNvbXBhcmUuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IGJpdG1hc2sgVGhlIGJpdG1hc2sgZmxhZ3MuIFNlZSBgYmFzZUlzRXF1YWxgIGZvciBtb3JlIGRldGFpbHMuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gY3VzdG9taXplciBUaGUgZnVuY3Rpb24gdG8gY3VzdG9taXplIGNvbXBhcmlzb25zLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGVxdWFsRnVuYyBUaGUgZnVuY3Rpb24gdG8gZGV0ZXJtaW5lIGVxdWl2YWxlbnRzIG9mIHZhbHVlcy5cbiAgICAgKiBAcGFyYW0ge09iamVjdH0gc3RhY2sgVHJhY2tzIHRyYXZlcnNlZCBgb2JqZWN0YCBhbmQgYG90aGVyYCBvYmplY3RzLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiB0aGUgb2JqZWN0cyBhcmUgZXF1aXZhbGVudCwgZWxzZSBgZmFsc2VgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGVxdWFsQnlUYWcob2JqZWN0LCBvdGhlciwgdGFnLCBiaXRtYXNrLCBjdXN0b21pemVyLCBlcXVhbEZ1bmMsIHN0YWNrKSB7XG4gICAgICBzd2l0Y2ggKHRhZykge1xuICAgICAgICBjYXNlIGRhdGFWaWV3VGFnOlxuICAgICAgICAgIGlmICgob2JqZWN0LmJ5dGVMZW5ndGggIT0gb3RoZXIuYnl0ZUxlbmd0aCkgfHxcbiAgICAgICAgICAgICAgKG9iamVjdC5ieXRlT2Zmc2V0ICE9IG90aGVyLmJ5dGVPZmZzZXQpKSB7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgfVxuICAgICAgICAgIG9iamVjdCA9IG9iamVjdC5idWZmZXI7XG4gICAgICAgICAgb3RoZXIgPSBvdGhlci5idWZmZXI7XG5cbiAgICAgICAgY2FzZSBhcnJheUJ1ZmZlclRhZzpcbiAgICAgICAgICBpZiAoKG9iamVjdC5ieXRlTGVuZ3RoICE9IG90aGVyLmJ5dGVMZW5ndGgpIHx8XG4gICAgICAgICAgICAgICFlcXVhbEZ1bmMobmV3IFVpbnQ4QXJyYXkob2JqZWN0KSwgbmV3IFVpbnQ4QXJyYXkob3RoZXIpKSkge1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgIH1cbiAgICAgICAgICByZXR1cm4gdHJ1ZTtcblxuICAgICAgICBjYXNlIGJvb2xUYWc6XG4gICAgICAgIGNhc2UgZGF0ZVRhZzpcbiAgICAgICAgY2FzZSBudW1iZXJUYWc6XG4gICAgICAgICAgLy8gQ29lcmNlIGJvb2xlYW5zIHRvIGAxYCBvciBgMGAgYW5kIGRhdGVzIHRvIG1pbGxpc2Vjb25kcy5cbiAgICAgICAgICAvLyBJbnZhbGlkIGRhdGVzIGFyZSBjb2VyY2VkIHRvIGBOYU5gLlxuICAgICAgICAgIHJldHVybiBlcSgrb2JqZWN0LCArb3RoZXIpO1xuXG4gICAgICAgIGNhc2UgZXJyb3JUYWc6XG4gICAgICAgICAgcmV0dXJuIG9iamVjdC5uYW1lID09IG90aGVyLm5hbWUgJiYgb2JqZWN0Lm1lc3NhZ2UgPT0gb3RoZXIubWVzc2FnZTtcblxuICAgICAgICBjYXNlIHJlZ2V4cFRhZzpcbiAgICAgICAgY2FzZSBzdHJpbmdUYWc6XG4gICAgICAgICAgLy8gQ29lcmNlIHJlZ2V4ZXMgdG8gc3RyaW5ncyBhbmQgdHJlYXQgc3RyaW5ncywgcHJpbWl0aXZlcyBhbmQgb2JqZWN0cyxcbiAgICAgICAgICAvLyBhcyBlcXVhbC4gU2VlIGh0dHA6Ly93d3cuZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi83LjAvI3NlYy1yZWdleHAucHJvdG90eXBlLnRvc3RyaW5nXG4gICAgICAgICAgLy8gZm9yIG1vcmUgZGV0YWlscy5cbiAgICAgICAgICByZXR1cm4gb2JqZWN0ID09IChvdGhlciArICcnKTtcblxuICAgICAgICBjYXNlIG1hcFRhZzpcbiAgICAgICAgICB2YXIgY29udmVydCA9IG1hcFRvQXJyYXk7XG5cbiAgICAgICAgY2FzZSBzZXRUYWc6XG4gICAgICAgICAgdmFyIGlzUGFydGlhbCA9IGJpdG1hc2sgJiBDT01QQVJFX1BBUlRJQUxfRkxBRztcbiAgICAgICAgICBjb252ZXJ0IHx8IChjb252ZXJ0ID0gc2V0VG9BcnJheSk7XG5cbiAgICAgICAgICBpZiAob2JqZWN0LnNpemUgIT0gb3RoZXIuc2l6ZSAmJiAhaXNQYXJ0aWFsKSB7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgfVxuICAgICAgICAgIC8vIEFzc3VtZSBjeWNsaWMgdmFsdWVzIGFyZSBlcXVhbC5cbiAgICAgICAgICB2YXIgc3RhY2tlZCA9IHN0YWNrLmdldChvYmplY3QpO1xuICAgICAgICAgIGlmIChzdGFja2VkKSB7XG4gICAgICAgICAgICByZXR1cm4gc3RhY2tlZCA9PSBvdGhlcjtcbiAgICAgICAgICB9XG4gICAgICAgICAgYml0bWFzayB8PSBDT01QQVJFX1VOT1JERVJFRF9GTEFHO1xuXG4gICAgICAgICAgLy8gUmVjdXJzaXZlbHkgY29tcGFyZSBvYmplY3RzIChzdXNjZXB0aWJsZSB0byBjYWxsIHN0YWNrIGxpbWl0cykuXG4gICAgICAgICAgc3RhY2suc2V0KG9iamVjdCwgb3RoZXIpO1xuICAgICAgICAgIHZhciByZXN1bHQgPSBlcXVhbEFycmF5cyhjb252ZXJ0KG9iamVjdCksIGNvbnZlcnQob3RoZXIpLCBiaXRtYXNrLCBjdXN0b21pemVyLCBlcXVhbEZ1bmMsIHN0YWNrKTtcbiAgICAgICAgICBzdGFja1snZGVsZXRlJ10ob2JqZWN0KTtcbiAgICAgICAgICByZXR1cm4gcmVzdWx0O1xuXG4gICAgICAgIGNhc2Ugc3ltYm9sVGFnOlxuICAgICAgICAgIGlmIChzeW1ib2xWYWx1ZU9mKSB7XG4gICAgICAgICAgICByZXR1cm4gc3ltYm9sVmFsdWVPZi5jYWxsKG9iamVjdCkgPT0gc3ltYm9sVmFsdWVPZi5jYWxsKG90aGVyKTtcbiAgICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQSBzcGVjaWFsaXplZCB2ZXJzaW9uIG9mIGBiYXNlSXNFcXVhbERlZXBgIGZvciBvYmplY3RzIHdpdGggc3VwcG9ydCBmb3JcbiAgICAgKiBwYXJ0aWFsIGRlZXAgY29tcGFyaXNvbnMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBjb21wYXJlLlxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvdGhlciBUaGUgb3RoZXIgb2JqZWN0IHRvIGNvbXBhcmUuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IGJpdG1hc2sgVGhlIGJpdG1hc2sgZmxhZ3MuIFNlZSBgYmFzZUlzRXF1YWxgIGZvciBtb3JlIGRldGFpbHMuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gY3VzdG9taXplciBUaGUgZnVuY3Rpb24gdG8gY3VzdG9taXplIGNvbXBhcmlzb25zLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGVxdWFsRnVuYyBUaGUgZnVuY3Rpb24gdG8gZGV0ZXJtaW5lIGVxdWl2YWxlbnRzIG9mIHZhbHVlcy5cbiAgICAgKiBAcGFyYW0ge09iamVjdH0gc3RhY2sgVHJhY2tzIHRyYXZlcnNlZCBgb2JqZWN0YCBhbmQgYG90aGVyYCBvYmplY3RzLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiB0aGUgb2JqZWN0cyBhcmUgZXF1aXZhbGVudCwgZWxzZSBgZmFsc2VgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGVxdWFsT2JqZWN0cyhvYmplY3QsIG90aGVyLCBiaXRtYXNrLCBjdXN0b21pemVyLCBlcXVhbEZ1bmMsIHN0YWNrKSB7XG4gICAgICB2YXIgaXNQYXJ0aWFsID0gYml0bWFzayAmIENPTVBBUkVfUEFSVElBTF9GTEFHLFxuICAgICAgICAgIG9ialByb3BzID0gZ2V0QWxsS2V5cyhvYmplY3QpLFxuICAgICAgICAgIG9iakxlbmd0aCA9IG9ialByb3BzLmxlbmd0aCxcbiAgICAgICAgICBvdGhQcm9wcyA9IGdldEFsbEtleXMob3RoZXIpLFxuICAgICAgICAgIG90aExlbmd0aCA9IG90aFByb3BzLmxlbmd0aDtcblxuICAgICAgaWYgKG9iakxlbmd0aCAhPSBvdGhMZW5ndGggJiYgIWlzUGFydGlhbCkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG4gICAgICB2YXIgaW5kZXggPSBvYmpMZW5ndGg7XG4gICAgICB3aGlsZSAoaW5kZXgtLSkge1xuICAgICAgICB2YXIga2V5ID0gb2JqUHJvcHNbaW5kZXhdO1xuICAgICAgICBpZiAoIShpc1BhcnRpYWwgPyBrZXkgaW4gb3RoZXIgOiBoYXNPd25Qcm9wZXJ0eS5jYWxsKG90aGVyLCBrZXkpKSkge1xuICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgLy8gQ2hlY2sgdGhhdCBjeWNsaWMgdmFsdWVzIGFyZSBlcXVhbC5cbiAgICAgIHZhciBvYmpTdGFja2VkID0gc3RhY2suZ2V0KG9iamVjdCk7XG4gICAgICB2YXIgb3RoU3RhY2tlZCA9IHN0YWNrLmdldChvdGhlcik7XG4gICAgICBpZiAob2JqU3RhY2tlZCAmJiBvdGhTdGFja2VkKSB7XG4gICAgICAgIHJldHVybiBvYmpTdGFja2VkID09IG90aGVyICYmIG90aFN0YWNrZWQgPT0gb2JqZWN0O1xuICAgICAgfVxuICAgICAgdmFyIHJlc3VsdCA9IHRydWU7XG4gICAgICBzdGFjay5zZXQob2JqZWN0LCBvdGhlcik7XG4gICAgICBzdGFjay5zZXQob3RoZXIsIG9iamVjdCk7XG5cbiAgICAgIHZhciBza2lwQ3RvciA9IGlzUGFydGlhbDtcbiAgICAgIHdoaWxlICgrK2luZGV4IDwgb2JqTGVuZ3RoKSB7XG4gICAgICAgIGtleSA9IG9ialByb3BzW2luZGV4XTtcbiAgICAgICAgdmFyIG9ialZhbHVlID0gb2JqZWN0W2tleV0sXG4gICAgICAgICAgICBvdGhWYWx1ZSA9IG90aGVyW2tleV07XG5cbiAgICAgICAgaWYgKGN1c3RvbWl6ZXIpIHtcbiAgICAgICAgICB2YXIgY29tcGFyZWQgPSBpc1BhcnRpYWxcbiAgICAgICAgICAgID8gY3VzdG9taXplcihvdGhWYWx1ZSwgb2JqVmFsdWUsIGtleSwgb3RoZXIsIG9iamVjdCwgc3RhY2spXG4gICAgICAgICAgICA6IGN1c3RvbWl6ZXIob2JqVmFsdWUsIG90aFZhbHVlLCBrZXksIG9iamVjdCwgb3RoZXIsIHN0YWNrKTtcbiAgICAgICAgfVxuICAgICAgICAvLyBSZWN1cnNpdmVseSBjb21wYXJlIG9iamVjdHMgKHN1c2NlcHRpYmxlIHRvIGNhbGwgc3RhY2sgbGltaXRzKS5cbiAgICAgICAgaWYgKCEoY29tcGFyZWQgPT09IHVuZGVmaW5lZFxuICAgICAgICAgICAgICA/IChvYmpWYWx1ZSA9PT0gb3RoVmFsdWUgfHwgZXF1YWxGdW5jKG9ialZhbHVlLCBvdGhWYWx1ZSwgYml0bWFzaywgY3VzdG9taXplciwgc3RhY2spKVxuICAgICAgICAgICAgICA6IGNvbXBhcmVkXG4gICAgICAgICAgICApKSB7XG4gICAgICAgICAgcmVzdWx0ID0gZmFsc2U7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgICAgc2tpcEN0b3IgfHwgKHNraXBDdG9yID0ga2V5ID09ICdjb25zdHJ1Y3RvcicpO1xuICAgICAgfVxuICAgICAgaWYgKHJlc3VsdCAmJiAhc2tpcEN0b3IpIHtcbiAgICAgICAgdmFyIG9iakN0b3IgPSBvYmplY3QuY29uc3RydWN0b3IsXG4gICAgICAgICAgICBvdGhDdG9yID0gb3RoZXIuY29uc3RydWN0b3I7XG5cbiAgICAgICAgLy8gTm9uIGBPYmplY3RgIG9iamVjdCBpbnN0YW5jZXMgd2l0aCBkaWZmZXJlbnQgY29uc3RydWN0b3JzIGFyZSBub3QgZXF1YWwuXG4gICAgICAgIGlmIChvYmpDdG9yICE9IG90aEN0b3IgJiZcbiAgICAgICAgICAgICgnY29uc3RydWN0b3InIGluIG9iamVjdCAmJiAnY29uc3RydWN0b3InIGluIG90aGVyKSAmJlxuICAgICAgICAgICAgISh0eXBlb2Ygb2JqQ3RvciA9PSAnZnVuY3Rpb24nICYmIG9iakN0b3IgaW5zdGFuY2VvZiBvYmpDdG9yICYmXG4gICAgICAgICAgICAgIHR5cGVvZiBvdGhDdG9yID09ICdmdW5jdGlvbicgJiYgb3RoQ3RvciBpbnN0YW5jZW9mIG90aEN0b3IpKSB7XG4gICAgICAgICAgcmVzdWx0ID0gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHN0YWNrWydkZWxldGUnXShvYmplY3QpO1xuICAgICAgc3RhY2tbJ2RlbGV0ZSddKG90aGVyKTtcbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQSBzcGVjaWFsaXplZCB2ZXJzaW9uIG9mIGBiYXNlUmVzdGAgd2hpY2ggZmxhdHRlbnMgdGhlIHJlc3QgYXJyYXkuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIGFwcGx5IGEgcmVzdCBwYXJhbWV0ZXIgdG8uXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgZnVuY3Rpb24uXG4gICAgICovXG4gICAgZnVuY3Rpb24gZmxhdFJlc3QoZnVuYykge1xuICAgICAgcmV0dXJuIHNldFRvU3RyaW5nKG92ZXJSZXN0KGZ1bmMsIHVuZGVmaW5lZCwgZmxhdHRlbiksIGZ1bmMgKyAnJyk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhbiBhcnJheSBvZiBvd24gZW51bWVyYWJsZSBwcm9wZXJ0eSBuYW1lcyBhbmQgc3ltYm9scyBvZiBgb2JqZWN0YC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIHF1ZXJ5LlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgYXJyYXkgb2YgcHJvcGVydHkgbmFtZXMgYW5kIHN5bWJvbHMuXG4gICAgICovXG4gICAgZnVuY3Rpb24gZ2V0QWxsS2V5cyhvYmplY3QpIHtcbiAgICAgIHJldHVybiBiYXNlR2V0QWxsS2V5cyhvYmplY3QsIGtleXMsIGdldFN5bWJvbHMpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYW4gYXJyYXkgb2Ygb3duIGFuZCBpbmhlcml0ZWQgZW51bWVyYWJsZSBwcm9wZXJ0eSBuYW1lcyBhbmRcbiAgICAgKiBzeW1ib2xzIG9mIGBvYmplY3RgLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gcXVlcnkuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBhcnJheSBvZiBwcm9wZXJ0eSBuYW1lcyBhbmQgc3ltYm9scy5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBnZXRBbGxLZXlzSW4ob2JqZWN0KSB7XG4gICAgICByZXR1cm4gYmFzZUdldEFsbEtleXMob2JqZWN0LCBrZXlzSW4sIGdldFN5bWJvbHNJbik7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogR2V0cyBtZXRhZGF0YSBmb3IgYGZ1bmNgLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdW5jIFRoZSBmdW5jdGlvbiB0byBxdWVyeS5cbiAgICAgKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgbWV0YWRhdGEgZm9yIGBmdW5jYC5cbiAgICAgKi9cbiAgICB2YXIgZ2V0RGF0YSA9ICFtZXRhTWFwID8gbm9vcCA6IGZ1bmN0aW9uKGZ1bmMpIHtcbiAgICAgIHJldHVybiBtZXRhTWFwLmdldChmdW5jKTtcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogR2V0cyB0aGUgbmFtZSBvZiBgZnVuY2AuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIHF1ZXJ5LlxuICAgICAqIEByZXR1cm5zIHtzdHJpbmd9IFJldHVybnMgdGhlIGZ1bmN0aW9uIG5hbWUuXG4gICAgICovXG4gICAgZnVuY3Rpb24gZ2V0RnVuY05hbWUoZnVuYykge1xuICAgICAgdmFyIHJlc3VsdCA9IChmdW5jLm5hbWUgKyAnJyksXG4gICAgICAgICAgYXJyYXkgPSByZWFsTmFtZXNbcmVzdWx0XSxcbiAgICAgICAgICBsZW5ndGggPSBoYXNPd25Qcm9wZXJ0eS5jYWxsKHJlYWxOYW1lcywgcmVzdWx0KSA/IGFycmF5Lmxlbmd0aCA6IDA7XG5cbiAgICAgIHdoaWxlIChsZW5ndGgtLSkge1xuICAgICAgICB2YXIgZGF0YSA9IGFycmF5W2xlbmd0aF0sXG4gICAgICAgICAgICBvdGhlckZ1bmMgPSBkYXRhLmZ1bmM7XG4gICAgICAgIGlmIChvdGhlckZ1bmMgPT0gbnVsbCB8fCBvdGhlckZ1bmMgPT0gZnVuYykge1xuICAgICAgICAgIHJldHVybiBkYXRhLm5hbWU7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogR2V0cyB0aGUgYXJndW1lbnQgcGxhY2Vob2xkZXIgdmFsdWUgZm9yIGBmdW5jYC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gZnVuYyBUaGUgZnVuY3Rpb24gdG8gaW5zcGVjdC5cbiAgICAgKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgcGxhY2Vob2xkZXIgdmFsdWUuXG4gICAgICovXG4gICAgZnVuY3Rpb24gZ2V0SG9sZGVyKGZ1bmMpIHtcbiAgICAgIHZhciBvYmplY3QgPSBoYXNPd25Qcm9wZXJ0eS5jYWxsKGxvZGFzaCwgJ3BsYWNlaG9sZGVyJykgPyBsb2Rhc2ggOiBmdW5jO1xuICAgICAgcmV0dXJuIG9iamVjdC5wbGFjZWhvbGRlcjtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBHZXRzIHRoZSBhcHByb3ByaWF0ZSBcIml0ZXJhdGVlXCIgZnVuY3Rpb24uIElmIGBfLml0ZXJhdGVlYCBpcyBjdXN0b21pemVkLFxuICAgICAqIHRoaXMgZnVuY3Rpb24gcmV0dXJucyB0aGUgY3VzdG9tIG1ldGhvZCwgb3RoZXJ3aXNlIGl0IHJldHVybnMgYGJhc2VJdGVyYXRlZWAuXG4gICAgICogSWYgYXJndW1lbnRzIGFyZSBwcm92aWRlZCwgdGhlIGNob3NlbiBmdW5jdGlvbiBpcyBpbnZva2VkIHdpdGggdGhlbSBhbmRcbiAgICAgKiBpdHMgcmVzdWx0IGlzIHJldHVybmVkLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0geyp9IFt2YWx1ZV0gVGhlIHZhbHVlIHRvIGNvbnZlcnQgdG8gYW4gaXRlcmF0ZWUuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFthcml0eV0gVGhlIGFyaXR5IG9mIHRoZSBjcmVhdGVkIGl0ZXJhdGVlLlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgY2hvc2VuIGZ1bmN0aW9uIG9yIGl0cyByZXN1bHQuXG4gICAgICovXG4gICAgZnVuY3Rpb24gZ2V0SXRlcmF0ZWUoKSB7XG4gICAgICB2YXIgcmVzdWx0ID0gbG9kYXNoLml0ZXJhdGVlIHx8IGl0ZXJhdGVlO1xuICAgICAgcmVzdWx0ID0gcmVzdWx0ID09PSBpdGVyYXRlZSA/IGJhc2VJdGVyYXRlZSA6IHJlc3VsdDtcbiAgICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gcmVzdWx0KGFyZ3VtZW50c1swXSwgYXJndW1lbnRzWzFdKSA6IHJlc3VsdDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBHZXRzIHRoZSBkYXRhIGZvciBgbWFwYC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtPYmplY3R9IG1hcCBUaGUgbWFwIHRvIHF1ZXJ5LlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIHJlZmVyZW5jZSBrZXkuXG4gICAgICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIG1hcCBkYXRhLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGdldE1hcERhdGEobWFwLCBrZXkpIHtcbiAgICAgIHZhciBkYXRhID0gbWFwLl9fZGF0YV9fO1xuICAgICAgcmV0dXJuIGlzS2V5YWJsZShrZXkpXG4gICAgICAgID8gZGF0YVt0eXBlb2Yga2V5ID09ICdzdHJpbmcnID8gJ3N0cmluZycgOiAnaGFzaCddXG4gICAgICAgIDogZGF0YS5tYXA7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogR2V0cyB0aGUgcHJvcGVydHkgbmFtZXMsIHZhbHVlcywgYW5kIGNvbXBhcmUgZmxhZ3Mgb2YgYG9iamVjdGAuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBxdWVyeS5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIG1hdGNoIGRhdGEgb2YgYG9iamVjdGAuXG4gICAgICovXG4gICAgZnVuY3Rpb24gZ2V0TWF0Y2hEYXRhKG9iamVjdCkge1xuICAgICAgdmFyIHJlc3VsdCA9IGtleXMob2JqZWN0KSxcbiAgICAgICAgICBsZW5ndGggPSByZXN1bHQubGVuZ3RoO1xuXG4gICAgICB3aGlsZSAobGVuZ3RoLS0pIHtcbiAgICAgICAgdmFyIGtleSA9IHJlc3VsdFtsZW5ndGhdLFxuICAgICAgICAgICAgdmFsdWUgPSBvYmplY3Rba2V5XTtcblxuICAgICAgICByZXN1bHRbbGVuZ3RoXSA9IFtrZXksIHZhbHVlLCBpc1N0cmljdENvbXBhcmFibGUodmFsdWUpXTtcbiAgICAgIH1cbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogR2V0cyB0aGUgbmF0aXZlIGZ1bmN0aW9uIGF0IGBrZXlgIG9mIGBvYmplY3RgLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gcXVlcnkuXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSBtZXRob2QgdG8gZ2V0LlxuICAgICAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSBmdW5jdGlvbiBpZiBpdCdzIG5hdGl2ZSwgZWxzZSBgdW5kZWZpbmVkYC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBnZXROYXRpdmUob2JqZWN0LCBrZXkpIHtcbiAgICAgIHZhciB2YWx1ZSA9IGdldFZhbHVlKG9iamVjdCwga2V5KTtcbiAgICAgIHJldHVybiBiYXNlSXNOYXRpdmUodmFsdWUpID8gdmFsdWUgOiB1bmRlZmluZWQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQSBzcGVjaWFsaXplZCB2ZXJzaW9uIG9mIGBiYXNlR2V0VGFnYCB3aGljaCBpZ25vcmVzIGBTeW1ib2wudG9TdHJpbmdUYWdgIHZhbHVlcy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gcXVlcnkuXG4gICAgICogQHJldHVybnMge3N0cmluZ30gUmV0dXJucyB0aGUgcmF3IGB0b1N0cmluZ1RhZ2AuXG4gICAgICovXG4gICAgZnVuY3Rpb24gZ2V0UmF3VGFnKHZhbHVlKSB7XG4gICAgICB2YXIgaXNPd24gPSBoYXNPd25Qcm9wZXJ0eS5jYWxsKHZhbHVlLCBzeW1Ub1N0cmluZ1RhZyksXG4gICAgICAgICAgdGFnID0gdmFsdWVbc3ltVG9TdHJpbmdUYWddO1xuXG4gICAgICB0cnkge1xuICAgICAgICB2YWx1ZVtzeW1Ub1N0cmluZ1RhZ10gPSB1bmRlZmluZWQ7XG4gICAgICAgIHZhciB1bm1hc2tlZCA9IHRydWU7XG4gICAgICB9IGNhdGNoIChlKSB7fVxuXG4gICAgICB2YXIgcmVzdWx0ID0gbmF0aXZlT2JqZWN0VG9TdHJpbmcuY2FsbCh2YWx1ZSk7XG4gICAgICBpZiAodW5tYXNrZWQpIHtcbiAgICAgICAgaWYgKGlzT3duKSB7XG4gICAgICAgICAgdmFsdWVbc3ltVG9TdHJpbmdUYWddID0gdGFnO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGRlbGV0ZSB2YWx1ZVtzeW1Ub1N0cmluZ1RhZ107XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhbiBhcnJheSBvZiB0aGUgb3duIGVudW1lcmFibGUgc3ltYm9scyBvZiBgb2JqZWN0YC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIHF1ZXJ5LlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgYXJyYXkgb2Ygc3ltYm9scy5cbiAgICAgKi9cbiAgICB2YXIgZ2V0U3ltYm9scyA9ICFuYXRpdmVHZXRTeW1ib2xzID8gc3R1YkFycmF5IDogZnVuY3Rpb24ob2JqZWN0KSB7XG4gICAgICBpZiAob2JqZWN0ID09IG51bGwpIHtcbiAgICAgICAgcmV0dXJuIFtdO1xuICAgICAgfVxuICAgICAgb2JqZWN0ID0gT2JqZWN0KG9iamVjdCk7XG4gICAgICByZXR1cm4gYXJyYXlGaWx0ZXIobmF0aXZlR2V0U3ltYm9scyhvYmplY3QpLCBmdW5jdGlvbihzeW1ib2wpIHtcbiAgICAgICAgcmV0dXJuIHByb3BlcnR5SXNFbnVtZXJhYmxlLmNhbGwob2JqZWN0LCBzeW1ib2wpO1xuICAgICAgfSk7XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYW4gYXJyYXkgb2YgdGhlIG93biBhbmQgaW5oZXJpdGVkIGVudW1lcmFibGUgc3ltYm9scyBvZiBgb2JqZWN0YC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIHF1ZXJ5LlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgYXJyYXkgb2Ygc3ltYm9scy5cbiAgICAgKi9cbiAgICB2YXIgZ2V0U3ltYm9sc0luID0gIW5hdGl2ZUdldFN5bWJvbHMgPyBzdHViQXJyYXkgOiBmdW5jdGlvbihvYmplY3QpIHtcbiAgICAgIHZhciByZXN1bHQgPSBbXTtcbiAgICAgIHdoaWxlIChvYmplY3QpIHtcbiAgICAgICAgYXJyYXlQdXNoKHJlc3VsdCwgZ2V0U3ltYm9scyhvYmplY3QpKTtcbiAgICAgICAgb2JqZWN0ID0gZ2V0UHJvdG90eXBlKG9iamVjdCk7XG4gICAgICB9XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBHZXRzIHRoZSBgdG9TdHJpbmdUYWdgIG9mIGB2YWx1ZWAuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIHF1ZXJ5LlxuICAgICAqIEByZXR1cm5zIHtzdHJpbmd9IFJldHVybnMgdGhlIGB0b1N0cmluZ1RhZ2AuXG4gICAgICovXG4gICAgdmFyIGdldFRhZyA9IGJhc2VHZXRUYWc7XG5cbiAgICAvLyBGYWxsYmFjayBmb3IgZGF0YSB2aWV3cywgbWFwcywgc2V0cywgYW5kIHdlYWsgbWFwcyBpbiBJRSAxMSBhbmQgcHJvbWlzZXMgaW4gTm9kZS5qcyA8IDYuXG4gICAgaWYgKChEYXRhVmlldyAmJiBnZXRUYWcobmV3IERhdGFWaWV3KG5ldyBBcnJheUJ1ZmZlcigxKSkpICE9IGRhdGFWaWV3VGFnKSB8fFxuICAgICAgICAoTWFwICYmIGdldFRhZyhuZXcgTWFwKSAhPSBtYXBUYWcpIHx8XG4gICAgICAgIChQcm9taXNlICYmIGdldFRhZyhQcm9taXNlLnJlc29sdmUoKSkgIT0gcHJvbWlzZVRhZykgfHxcbiAgICAgICAgKFNldCAmJiBnZXRUYWcobmV3IFNldCkgIT0gc2V0VGFnKSB8fFxuICAgICAgICAoV2Vha01hcCAmJiBnZXRUYWcobmV3IFdlYWtNYXApICE9IHdlYWtNYXBUYWcpKSB7XG4gICAgICBnZXRUYWcgPSBmdW5jdGlvbih2YWx1ZSkge1xuICAgICAgICB2YXIgcmVzdWx0ID0gYmFzZUdldFRhZyh2YWx1ZSksXG4gICAgICAgICAgICBDdG9yID0gcmVzdWx0ID09IG9iamVjdFRhZyA/IHZhbHVlLmNvbnN0cnVjdG9yIDogdW5kZWZpbmVkLFxuICAgICAgICAgICAgY3RvclN0cmluZyA9IEN0b3IgPyB0b1NvdXJjZShDdG9yKSA6ICcnO1xuXG4gICAgICAgIGlmIChjdG9yU3RyaW5nKSB7XG4gICAgICAgICAgc3dpdGNoIChjdG9yU3RyaW5nKSB7XG4gICAgICAgICAgICBjYXNlIGRhdGFWaWV3Q3RvclN0cmluZzogcmV0dXJuIGRhdGFWaWV3VGFnO1xuICAgICAgICAgICAgY2FzZSBtYXBDdG9yU3RyaW5nOiByZXR1cm4gbWFwVGFnO1xuICAgICAgICAgICAgY2FzZSBwcm9taXNlQ3RvclN0cmluZzogcmV0dXJuIHByb21pc2VUYWc7XG4gICAgICAgICAgICBjYXNlIHNldEN0b3JTdHJpbmc6IHJldHVybiBzZXRUYWc7XG4gICAgICAgICAgICBjYXNlIHdlYWtNYXBDdG9yU3RyaW5nOiByZXR1cm4gd2Vha01hcFRhZztcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICAgIH07XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogR2V0cyB0aGUgdmlldywgYXBwbHlpbmcgYW55IGB0cmFuc2Zvcm1zYCB0byB0aGUgYHN0YXJ0YCBhbmQgYGVuZGAgcG9zaXRpb25zLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge251bWJlcn0gc3RhcnQgVGhlIHN0YXJ0IG9mIHRoZSB2aWV3LlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBlbmQgVGhlIGVuZCBvZiB0aGUgdmlldy5cbiAgICAgKiBAcGFyYW0ge0FycmF5fSB0cmFuc2Zvcm1zIFRoZSB0cmFuc2Zvcm1hdGlvbnMgdG8gYXBwbHkgdG8gdGhlIHZpZXcuXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyBhbiBvYmplY3QgY29udGFpbmluZyB0aGUgYHN0YXJ0YCBhbmQgYGVuZGBcbiAgICAgKiAgcG9zaXRpb25zIG9mIHRoZSB2aWV3LlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGdldFZpZXcoc3RhcnQsIGVuZCwgdHJhbnNmb3Jtcykge1xuICAgICAgdmFyIGluZGV4ID0gLTEsXG4gICAgICAgICAgbGVuZ3RoID0gdHJhbnNmb3Jtcy5sZW5ndGg7XG5cbiAgICAgIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgICAgIHZhciBkYXRhID0gdHJhbnNmb3Jtc1tpbmRleF0sXG4gICAgICAgICAgICBzaXplID0gZGF0YS5zaXplO1xuXG4gICAgICAgIHN3aXRjaCAoZGF0YS50eXBlKSB7XG4gICAgICAgICAgY2FzZSAnZHJvcCc6ICAgICAgc3RhcnQgKz0gc2l6ZTsgYnJlYWs7XG4gICAgICAgICAgY2FzZSAnZHJvcFJpZ2h0JzogZW5kIC09IHNpemU7IGJyZWFrO1xuICAgICAgICAgIGNhc2UgJ3Rha2UnOiAgICAgIGVuZCA9IG5hdGl2ZU1pbihlbmQsIHN0YXJ0ICsgc2l6ZSk7IGJyZWFrO1xuICAgICAgICAgIGNhc2UgJ3Rha2VSaWdodCc6IHN0YXJ0ID0gbmF0aXZlTWF4KHN0YXJ0LCBlbmQgLSBzaXplKTsgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiB7ICdzdGFydCc6IHN0YXJ0LCAnZW5kJzogZW5kIH07XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogRXh0cmFjdHMgd3JhcHBlciBkZXRhaWxzIGZyb20gdGhlIGBzb3VyY2VgIGJvZHkgY29tbWVudC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IHNvdXJjZSBUaGUgc291cmNlIHRvIGluc3BlY3QuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSB3cmFwcGVyIGRldGFpbHMuXG4gICAgICovXG4gICAgZnVuY3Rpb24gZ2V0V3JhcERldGFpbHMoc291cmNlKSB7XG4gICAgICB2YXIgbWF0Y2ggPSBzb3VyY2UubWF0Y2gocmVXcmFwRGV0YWlscyk7XG4gICAgICByZXR1cm4gbWF0Y2ggPyBtYXRjaFsxXS5zcGxpdChyZVNwbGl0RGV0YWlscykgOiBbXTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDaGVja3MgaWYgYHBhdGhgIGV4aXN0cyBvbiBgb2JqZWN0YC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIHF1ZXJ5LlxuICAgICAqIEBwYXJhbSB7QXJyYXl8c3RyaW5nfSBwYXRoIFRoZSBwYXRoIHRvIGNoZWNrLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGhhc0Z1bmMgVGhlIGZ1bmN0aW9uIHRvIGNoZWNrIHByb3BlcnRpZXMuXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGBwYXRoYCBleGlzdHMsIGVsc2UgYGZhbHNlYC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBoYXNQYXRoKG9iamVjdCwgcGF0aCwgaGFzRnVuYykge1xuICAgICAgcGF0aCA9IGNhc3RQYXRoKHBhdGgsIG9iamVjdCk7XG5cbiAgICAgIHZhciBpbmRleCA9IC0xLFxuICAgICAgICAgIGxlbmd0aCA9IHBhdGgubGVuZ3RoLFxuICAgICAgICAgIHJlc3VsdCA9IGZhbHNlO1xuXG4gICAgICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgICAgICB2YXIga2V5ID0gdG9LZXkocGF0aFtpbmRleF0pO1xuICAgICAgICBpZiAoIShyZXN1bHQgPSBvYmplY3QgIT0gbnVsbCAmJiBoYXNGdW5jKG9iamVjdCwga2V5KSkpIHtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgICBvYmplY3QgPSBvYmplY3Rba2V5XTtcbiAgICAgIH1cbiAgICAgIGlmIChyZXN1bHQgfHwgKytpbmRleCAhPSBsZW5ndGgpIHtcbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICAgIH1cbiAgICAgIGxlbmd0aCA9IG9iamVjdCA9PSBudWxsID8gMCA6IG9iamVjdC5sZW5ndGg7XG4gICAgICByZXR1cm4gISFsZW5ndGggJiYgaXNMZW5ndGgobGVuZ3RoKSAmJiBpc0luZGV4KGtleSwgbGVuZ3RoKSAmJlxuICAgICAgICAoaXNBcnJheShvYmplY3QpIHx8IGlzQXJndW1lbnRzKG9iamVjdCkpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEluaXRpYWxpemVzIGFuIGFycmF5IGNsb25lLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gY2xvbmUuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBpbml0aWFsaXplZCBjbG9uZS5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBpbml0Q2xvbmVBcnJheShhcnJheSkge1xuICAgICAgdmFyIGxlbmd0aCA9IGFycmF5Lmxlbmd0aCxcbiAgICAgICAgICByZXN1bHQgPSBuZXcgYXJyYXkuY29uc3RydWN0b3IobGVuZ3RoKTtcblxuICAgICAgLy8gQWRkIHByb3BlcnRpZXMgYXNzaWduZWQgYnkgYFJlZ0V4cCNleGVjYC5cbiAgICAgIGlmIChsZW5ndGggJiYgdHlwZW9mIGFycmF5WzBdID09ICdzdHJpbmcnICYmIGhhc093blByb3BlcnR5LmNhbGwoYXJyYXksICdpbmRleCcpKSB7XG4gICAgICAgIHJlc3VsdC5pbmRleCA9IGFycmF5LmluZGV4O1xuICAgICAgICByZXN1bHQuaW5wdXQgPSBhcnJheS5pbnB1dDtcbiAgICAgIH1cbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogSW5pdGlhbGl6ZXMgYW4gb2JqZWN0IGNsb25lLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gY2xvbmUuXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyB0aGUgaW5pdGlhbGl6ZWQgY2xvbmUuXG4gICAgICovXG4gICAgZnVuY3Rpb24gaW5pdENsb25lT2JqZWN0KG9iamVjdCkge1xuICAgICAgcmV0dXJuICh0eXBlb2Ygb2JqZWN0LmNvbnN0cnVjdG9yID09ICdmdW5jdGlvbicgJiYgIWlzUHJvdG90eXBlKG9iamVjdCkpXG4gICAgICAgID8gYmFzZUNyZWF0ZShnZXRQcm90b3R5cGUob2JqZWN0KSlcbiAgICAgICAgOiB7fTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBJbml0aWFsaXplcyBhbiBvYmplY3QgY2xvbmUgYmFzZWQgb24gaXRzIGB0b1N0cmluZ1RhZ2AuXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogVGhpcyBmdW5jdGlvbiBvbmx5IHN1cHBvcnRzIGNsb25pbmcgdmFsdWVzIHdpdGggdGFncyBvZlxuICAgICAqIGBCb29sZWFuYCwgYERhdGVgLCBgRXJyb3JgLCBgTWFwYCwgYE51bWJlcmAsIGBSZWdFeHBgLCBgU2V0YCwgb3IgYFN0cmluZ2AuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBjbG9uZS5cbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gdGFnIFRoZSBgdG9TdHJpbmdUYWdgIG9mIHRoZSBvYmplY3QgdG8gY2xvbmUuXG4gICAgICogQHBhcmFtIHtib29sZWFufSBbaXNEZWVwXSBTcGVjaWZ5IGEgZGVlcCBjbG9uZS5cbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIHRoZSBpbml0aWFsaXplZCBjbG9uZS5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBpbml0Q2xvbmVCeVRhZyhvYmplY3QsIHRhZywgaXNEZWVwKSB7XG4gICAgICB2YXIgQ3RvciA9IG9iamVjdC5jb25zdHJ1Y3RvcjtcbiAgICAgIHN3aXRjaCAodGFnKSB7XG4gICAgICAgIGNhc2UgYXJyYXlCdWZmZXJUYWc6XG4gICAgICAgICAgcmV0dXJuIGNsb25lQXJyYXlCdWZmZXIob2JqZWN0KTtcblxuICAgICAgICBjYXNlIGJvb2xUYWc6XG4gICAgICAgIGNhc2UgZGF0ZVRhZzpcbiAgICAgICAgICByZXR1cm4gbmV3IEN0b3IoK29iamVjdCk7XG5cbiAgICAgICAgY2FzZSBkYXRhVmlld1RhZzpcbiAgICAgICAgICByZXR1cm4gY2xvbmVEYXRhVmlldyhvYmplY3QsIGlzRGVlcCk7XG5cbiAgICAgICAgY2FzZSBmbG9hdDMyVGFnOiBjYXNlIGZsb2F0NjRUYWc6XG4gICAgICAgIGNhc2UgaW50OFRhZzogY2FzZSBpbnQxNlRhZzogY2FzZSBpbnQzMlRhZzpcbiAgICAgICAgY2FzZSB1aW50OFRhZzogY2FzZSB1aW50OENsYW1wZWRUYWc6IGNhc2UgdWludDE2VGFnOiBjYXNlIHVpbnQzMlRhZzpcbiAgICAgICAgICByZXR1cm4gY2xvbmVUeXBlZEFycmF5KG9iamVjdCwgaXNEZWVwKTtcblxuICAgICAgICBjYXNlIG1hcFRhZzpcbiAgICAgICAgICByZXR1cm4gbmV3IEN0b3I7XG5cbiAgICAgICAgY2FzZSBudW1iZXJUYWc6XG4gICAgICAgIGNhc2Ugc3RyaW5nVGFnOlxuICAgICAgICAgIHJldHVybiBuZXcgQ3RvcihvYmplY3QpO1xuXG4gICAgICAgIGNhc2UgcmVnZXhwVGFnOlxuICAgICAgICAgIHJldHVybiBjbG9uZVJlZ0V4cChvYmplY3QpO1xuXG4gICAgICAgIGNhc2Ugc2V0VGFnOlxuICAgICAgICAgIHJldHVybiBuZXcgQ3RvcjtcblxuICAgICAgICBjYXNlIHN5bWJvbFRhZzpcbiAgICAgICAgICByZXR1cm4gY2xvbmVTeW1ib2wob2JqZWN0KTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBJbnNlcnRzIHdyYXBwZXIgYGRldGFpbHNgIGluIGEgY29tbWVudCBhdCB0aGUgdG9wIG9mIHRoZSBgc291cmNlYCBib2R5LlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gc291cmNlIFRoZSBzb3VyY2UgdG8gbW9kaWZ5LlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gZGV0YWlscyBUaGUgZGV0YWlscyB0byBpbnNlcnQuXG4gICAgICogQHJldHVybnMge3N0cmluZ30gUmV0dXJucyB0aGUgbW9kaWZpZWQgc291cmNlLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGluc2VydFdyYXBEZXRhaWxzKHNvdXJjZSwgZGV0YWlscykge1xuICAgICAgdmFyIGxlbmd0aCA9IGRldGFpbHMubGVuZ3RoO1xuICAgICAgaWYgKCFsZW5ndGgpIHtcbiAgICAgICAgcmV0dXJuIHNvdXJjZTtcbiAgICAgIH1cbiAgICAgIHZhciBsYXN0SW5kZXggPSBsZW5ndGggLSAxO1xuICAgICAgZGV0YWlsc1tsYXN0SW5kZXhdID0gKGxlbmd0aCA+IDEgPyAnJiAnIDogJycpICsgZGV0YWlsc1tsYXN0SW5kZXhdO1xuICAgICAgZGV0YWlscyA9IGRldGFpbHMuam9pbihsZW5ndGggPiAyID8gJywgJyA6ICcgJyk7XG4gICAgICByZXR1cm4gc291cmNlLnJlcGxhY2UocmVXcmFwQ29tbWVudCwgJ3tcXG4vKiBbd3JhcHBlZCB3aXRoICcgKyBkZXRhaWxzICsgJ10gKi9cXG4nKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBhIGZsYXR0ZW5hYmxlIGBhcmd1bWVudHNgIG9iamVjdCBvciBhcnJheS5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgZmxhdHRlbmFibGUsIGVsc2UgYGZhbHNlYC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBpc0ZsYXR0ZW5hYmxlKHZhbHVlKSB7XG4gICAgICByZXR1cm4gaXNBcnJheSh2YWx1ZSkgfHwgaXNBcmd1bWVudHModmFsdWUpIHx8XG4gICAgICAgICEhKHNwcmVhZGFibGVTeW1ib2wgJiYgdmFsdWUgJiYgdmFsdWVbc3ByZWFkYWJsZVN5bWJvbF0pO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGEgdmFsaWQgYXJyYXktbGlrZSBpbmRleC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFtsZW5ndGg9TUFYX1NBRkVfSU5URUdFUl0gVGhlIHVwcGVyIGJvdW5kcyBvZiBhIHZhbGlkIGluZGV4LlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGEgdmFsaWQgaW5kZXgsIGVsc2UgYGZhbHNlYC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBpc0luZGV4KHZhbHVlLCBsZW5ndGgpIHtcbiAgICAgIHZhciB0eXBlID0gdHlwZW9mIHZhbHVlO1xuICAgICAgbGVuZ3RoID0gbGVuZ3RoID09IG51bGwgPyBNQVhfU0FGRV9JTlRFR0VSIDogbGVuZ3RoO1xuXG4gICAgICByZXR1cm4gISFsZW5ndGggJiZcbiAgICAgICAgKHR5cGUgPT0gJ251bWJlcicgfHxcbiAgICAgICAgICAodHlwZSAhPSAnc3ltYm9sJyAmJiByZUlzVWludC50ZXN0KHZhbHVlKSkpICYmXG4gICAgICAgICAgICAodmFsdWUgPiAtMSAmJiB2YWx1ZSAlIDEgPT0gMCAmJiB2YWx1ZSA8IGxlbmd0aCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ2hlY2tzIGlmIHRoZSBnaXZlbiBhcmd1bWVudHMgYXJlIGZyb20gYW4gaXRlcmF0ZWUgY2FsbC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgcG90ZW50aWFsIGl0ZXJhdGVlIHZhbHVlIGFyZ3VtZW50LlxuICAgICAqIEBwYXJhbSB7Kn0gaW5kZXggVGhlIHBvdGVudGlhbCBpdGVyYXRlZSBpbmRleCBvciBrZXkgYXJndW1lbnQuXG4gICAgICogQHBhcmFtIHsqfSBvYmplY3QgVGhlIHBvdGVudGlhbCBpdGVyYXRlZSBvYmplY3QgYXJndW1lbnQuXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIHRoZSBhcmd1bWVudHMgYXJlIGZyb20gYW4gaXRlcmF0ZWUgY2FsbCxcbiAgICAgKiAgZWxzZSBgZmFsc2VgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGlzSXRlcmF0ZWVDYWxsKHZhbHVlLCBpbmRleCwgb2JqZWN0KSB7XG4gICAgICBpZiAoIWlzT2JqZWN0KG9iamVjdCkpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuICAgICAgdmFyIHR5cGUgPSB0eXBlb2YgaW5kZXg7XG4gICAgICBpZiAodHlwZSA9PSAnbnVtYmVyJ1xuICAgICAgICAgICAgPyAoaXNBcnJheUxpa2Uob2JqZWN0KSAmJiBpc0luZGV4KGluZGV4LCBvYmplY3QubGVuZ3RoKSlcbiAgICAgICAgICAgIDogKHR5cGUgPT0gJ3N0cmluZycgJiYgaW5kZXggaW4gb2JqZWN0KVxuICAgICAgICAgICkge1xuICAgICAgICByZXR1cm4gZXEob2JqZWN0W2luZGV4XSwgdmFsdWUpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGEgcHJvcGVydHkgbmFtZSBhbmQgbm90IGEgcHJvcGVydHkgcGF0aC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gICAgICogQHBhcmFtIHtPYmplY3R9IFtvYmplY3RdIFRoZSBvYmplY3QgdG8gcXVlcnkga2V5cyBvbi5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhIHByb3BlcnR5IG5hbWUsIGVsc2UgYGZhbHNlYC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBpc0tleSh2YWx1ZSwgb2JqZWN0KSB7XG4gICAgICBpZiAoaXNBcnJheSh2YWx1ZSkpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuICAgICAgdmFyIHR5cGUgPSB0eXBlb2YgdmFsdWU7XG4gICAgICBpZiAodHlwZSA9PSAnbnVtYmVyJyB8fCB0eXBlID09ICdzeW1ib2wnIHx8IHR5cGUgPT0gJ2Jvb2xlYW4nIHx8XG4gICAgICAgICAgdmFsdWUgPT0gbnVsbCB8fCBpc1N5bWJvbCh2YWx1ZSkpIHtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICB9XG4gICAgICByZXR1cm4gcmVJc1BsYWluUHJvcC50ZXN0KHZhbHVlKSB8fCAhcmVJc0RlZXBQcm9wLnRlc3QodmFsdWUpIHx8XG4gICAgICAgIChvYmplY3QgIT0gbnVsbCAmJiB2YWx1ZSBpbiBPYmplY3Qob2JqZWN0KSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgc3VpdGFibGUgZm9yIHVzZSBhcyB1bmlxdWUgb2JqZWN0IGtleS5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgc3VpdGFibGUsIGVsc2UgYGZhbHNlYC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBpc0tleWFibGUodmFsdWUpIHtcbiAgICAgIHZhciB0eXBlID0gdHlwZW9mIHZhbHVlO1xuICAgICAgcmV0dXJuICh0eXBlID09ICdzdHJpbmcnIHx8IHR5cGUgPT0gJ251bWJlcicgfHwgdHlwZSA9PSAnc3ltYm9sJyB8fCB0eXBlID09ICdib29sZWFuJylcbiAgICAgICAgPyAodmFsdWUgIT09ICdfX3Byb3RvX18nKVxuICAgICAgICA6ICh2YWx1ZSA9PT0gbnVsbCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ2hlY2tzIGlmIGBmdW5jYCBoYXMgYSBsYXp5IGNvdW50ZXJwYXJ0LlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdW5jIFRoZSBmdW5jdGlvbiB0byBjaGVjay5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYGZ1bmNgIGhhcyBhIGxhenkgY291bnRlcnBhcnQsXG4gICAgICogIGVsc2UgYGZhbHNlYC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBpc0xhemlhYmxlKGZ1bmMpIHtcbiAgICAgIHZhciBmdW5jTmFtZSA9IGdldEZ1bmNOYW1lKGZ1bmMpLFxuICAgICAgICAgIG90aGVyID0gbG9kYXNoW2Z1bmNOYW1lXTtcblxuICAgICAgaWYgKHR5cGVvZiBvdGhlciAhPSAnZnVuY3Rpb24nIHx8ICEoZnVuY05hbWUgaW4gTGF6eVdyYXBwZXIucHJvdG90eXBlKSkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG4gICAgICBpZiAoZnVuYyA9PT0gb3RoZXIpIHtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICB9XG4gICAgICB2YXIgZGF0YSA9IGdldERhdGEob3RoZXIpO1xuICAgICAgcmV0dXJuICEhZGF0YSAmJiBmdW5jID09PSBkYXRhWzBdO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENoZWNrcyBpZiBgZnVuY2AgaGFzIGl0cyBzb3VyY2UgbWFza2VkLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdW5jIFRoZSBmdW5jdGlvbiB0byBjaGVjay5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYGZ1bmNgIGlzIG1hc2tlZCwgZWxzZSBgZmFsc2VgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGlzTWFza2VkKGZ1bmMpIHtcbiAgICAgIHJldHVybiAhIW1hc2tTcmNLZXkgJiYgKG1hc2tTcmNLZXkgaW4gZnVuYyk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ2hlY2tzIGlmIGBmdW5jYCBpcyBjYXBhYmxlIG9mIGJlaW5nIG1hc2tlZC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGBmdW5jYCBpcyBtYXNrYWJsZSwgZWxzZSBgZmFsc2VgLlxuICAgICAqL1xuICAgIHZhciBpc01hc2thYmxlID0gY29yZUpzRGF0YSA/IGlzRnVuY3Rpb24gOiBzdHViRmFsc2U7XG5cbiAgICAvKipcbiAgICAgKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBsaWtlbHkgYSBwcm90b3R5cGUgb2JqZWN0LlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhIHByb3RvdHlwZSwgZWxzZSBgZmFsc2VgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGlzUHJvdG90eXBlKHZhbHVlKSB7XG4gICAgICB2YXIgQ3RvciA9IHZhbHVlICYmIHZhbHVlLmNvbnN0cnVjdG9yLFxuICAgICAgICAgIHByb3RvID0gKHR5cGVvZiBDdG9yID09ICdmdW5jdGlvbicgJiYgQ3Rvci5wcm90b3R5cGUpIHx8IG9iamVjdFByb3RvO1xuXG4gICAgICByZXR1cm4gdmFsdWUgPT09IHByb3RvO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIHN1aXRhYmxlIGZvciBzdHJpY3QgZXF1YWxpdHkgY29tcGFyaXNvbnMsIGkuZS4gYD09PWAuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlmIHN1aXRhYmxlIGZvciBzdHJpY3RcbiAgICAgKiAgZXF1YWxpdHkgY29tcGFyaXNvbnMsIGVsc2UgYGZhbHNlYC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBpc1N0cmljdENvbXBhcmFibGUodmFsdWUpIHtcbiAgICAgIHJldHVybiB2YWx1ZSA9PT0gdmFsdWUgJiYgIWlzT2JqZWN0KHZhbHVlKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBBIHNwZWNpYWxpemVkIHZlcnNpb24gb2YgYG1hdGNoZXNQcm9wZXJ0eWAgZm9yIHNvdXJjZSB2YWx1ZXMgc3VpdGFibGVcbiAgICAgKiBmb3Igc3RyaWN0IGVxdWFsaXR5IGNvbXBhcmlzb25zLCBpLmUuIGA9PT1gLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIHByb3BlcnR5IHRvIGdldC5cbiAgICAgKiBAcGFyYW0geyp9IHNyY1ZhbHVlIFRoZSB2YWx1ZSB0byBtYXRjaC5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBzcGVjIGZ1bmN0aW9uLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIG1hdGNoZXNTdHJpY3RDb21wYXJhYmxlKGtleSwgc3JjVmFsdWUpIHtcbiAgICAgIHJldHVybiBmdW5jdGlvbihvYmplY3QpIHtcbiAgICAgICAgaWYgKG9iamVjdCA9PSBudWxsKSB7XG4gICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBvYmplY3Rba2V5XSA9PT0gc3JjVmFsdWUgJiZcbiAgICAgICAgICAoc3JjVmFsdWUgIT09IHVuZGVmaW5lZCB8fCAoa2V5IGluIE9iamVjdChvYmplY3QpKSk7XG4gICAgICB9O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEEgc3BlY2lhbGl6ZWQgdmVyc2lvbiBvZiBgXy5tZW1vaXplYCB3aGljaCBjbGVhcnMgdGhlIG1lbW9pemVkIGZ1bmN0aW9uJ3NcbiAgICAgKiBjYWNoZSB3aGVuIGl0IGV4Y2VlZHMgYE1BWF9NRU1PSVpFX1NJWkVgLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdW5jIFRoZSBmdW5jdGlvbiB0byBoYXZlIGl0cyBvdXRwdXQgbWVtb2l6ZWQuXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgbWVtb2l6ZWQgZnVuY3Rpb24uXG4gICAgICovXG4gICAgZnVuY3Rpb24gbWVtb2l6ZUNhcHBlZChmdW5jKSB7XG4gICAgICB2YXIgcmVzdWx0ID0gbWVtb2l6ZShmdW5jLCBmdW5jdGlvbihrZXkpIHtcbiAgICAgICAgaWYgKGNhY2hlLnNpemUgPT09IE1BWF9NRU1PSVpFX1NJWkUpIHtcbiAgICAgICAgICBjYWNoZS5jbGVhcigpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBrZXk7XG4gICAgICB9KTtcblxuICAgICAgdmFyIGNhY2hlID0gcmVzdWx0LmNhY2hlO1xuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBNZXJnZXMgdGhlIGZ1bmN0aW9uIG1ldGFkYXRhIG9mIGBzb3VyY2VgIGludG8gYGRhdGFgLlxuICAgICAqXG4gICAgICogTWVyZ2luZyBtZXRhZGF0YSByZWR1Y2VzIHRoZSBudW1iZXIgb2Ygd3JhcHBlcnMgdXNlZCB0byBpbnZva2UgYSBmdW5jdGlvbi5cbiAgICAgKiBUaGlzIGlzIHBvc3NpYmxlIGJlY2F1c2UgbWV0aG9kcyBsaWtlIGBfLmJpbmRgLCBgXy5jdXJyeWAsIGFuZCBgXy5wYXJ0aWFsYFxuICAgICAqIG1heSBiZSBhcHBsaWVkIHJlZ2FyZGxlc3Mgb2YgZXhlY3V0aW9uIG9yZGVyLiBNZXRob2RzIGxpa2UgYF8uYXJ5YCBhbmRcbiAgICAgKiBgXy5yZWFyZ2AgbW9kaWZ5IGZ1bmN0aW9uIGFyZ3VtZW50cywgbWFraW5nIHRoZSBvcmRlciBpbiB3aGljaCB0aGV5IGFyZVxuICAgICAqIGV4ZWN1dGVkIGltcG9ydGFudCwgcHJldmVudGluZyB0aGUgbWVyZ2luZyBvZiBtZXRhZGF0YS4gSG93ZXZlciwgd2UgbWFrZVxuICAgICAqIGFuIGV4Y2VwdGlvbiBmb3IgYSBzYWZlIGNvbWJpbmVkIGNhc2Ugd2hlcmUgY3VycmllZCBmdW5jdGlvbnMgaGF2ZSBgXy5hcnlgXG4gICAgICogYW5kIG9yIGBfLnJlYXJnYCBhcHBsaWVkLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBkYXRhIFRoZSBkZXN0aW5hdGlvbiBtZXRhZGF0YS5cbiAgICAgKiBAcGFyYW0ge0FycmF5fSBzb3VyY2UgVGhlIHNvdXJjZSBtZXRhZGF0YS5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgYGRhdGFgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIG1lcmdlRGF0YShkYXRhLCBzb3VyY2UpIHtcbiAgICAgIHZhciBiaXRtYXNrID0gZGF0YVsxXSxcbiAgICAgICAgICBzcmNCaXRtYXNrID0gc291cmNlWzFdLFxuICAgICAgICAgIG5ld0JpdG1hc2sgPSBiaXRtYXNrIHwgc3JjQml0bWFzayxcbiAgICAgICAgICBpc0NvbW1vbiA9IG5ld0JpdG1hc2sgPCAoV1JBUF9CSU5EX0ZMQUcgfCBXUkFQX0JJTkRfS0VZX0ZMQUcgfCBXUkFQX0FSWV9GTEFHKTtcblxuICAgICAgdmFyIGlzQ29tYm8gPVxuICAgICAgICAoKHNyY0JpdG1hc2sgPT0gV1JBUF9BUllfRkxBRykgJiYgKGJpdG1hc2sgPT0gV1JBUF9DVVJSWV9GTEFHKSkgfHxcbiAgICAgICAgKChzcmNCaXRtYXNrID09IFdSQVBfQVJZX0ZMQUcpICYmIChiaXRtYXNrID09IFdSQVBfUkVBUkdfRkxBRykgJiYgKGRhdGFbN10ubGVuZ3RoIDw9IHNvdXJjZVs4XSkpIHx8XG4gICAgICAgICgoc3JjQml0bWFzayA9PSAoV1JBUF9BUllfRkxBRyB8IFdSQVBfUkVBUkdfRkxBRykpICYmIChzb3VyY2VbN10ubGVuZ3RoIDw9IHNvdXJjZVs4XSkgJiYgKGJpdG1hc2sgPT0gV1JBUF9DVVJSWV9GTEFHKSk7XG5cbiAgICAgIC8vIEV4aXQgZWFybHkgaWYgbWV0YWRhdGEgY2FuJ3QgYmUgbWVyZ2VkLlxuICAgICAgaWYgKCEoaXNDb21tb24gfHwgaXNDb21ibykpIHtcbiAgICAgICAgcmV0dXJuIGRhdGE7XG4gICAgICB9XG4gICAgICAvLyBVc2Ugc291cmNlIGB0aGlzQXJnYCBpZiBhdmFpbGFibGUuXG4gICAgICBpZiAoc3JjQml0bWFzayAmIFdSQVBfQklORF9GTEFHKSB7XG4gICAgICAgIGRhdGFbMl0gPSBzb3VyY2VbMl07XG4gICAgICAgIC8vIFNldCB3aGVuIGN1cnJ5aW5nIGEgYm91bmQgZnVuY3Rpb24uXG4gICAgICAgIG5ld0JpdG1hc2sgfD0gYml0bWFzayAmIFdSQVBfQklORF9GTEFHID8gMCA6IFdSQVBfQ1VSUllfQk9VTkRfRkxBRztcbiAgICAgIH1cbiAgICAgIC8vIENvbXBvc2UgcGFydGlhbCBhcmd1bWVudHMuXG4gICAgICB2YXIgdmFsdWUgPSBzb3VyY2VbM107XG4gICAgICBpZiAodmFsdWUpIHtcbiAgICAgICAgdmFyIHBhcnRpYWxzID0gZGF0YVszXTtcbiAgICAgICAgZGF0YVszXSA9IHBhcnRpYWxzID8gY29tcG9zZUFyZ3MocGFydGlhbHMsIHZhbHVlLCBzb3VyY2VbNF0pIDogdmFsdWU7XG4gICAgICAgIGRhdGFbNF0gPSBwYXJ0aWFscyA/IHJlcGxhY2VIb2xkZXJzKGRhdGFbM10sIFBMQUNFSE9MREVSKSA6IHNvdXJjZVs0XTtcbiAgICAgIH1cbiAgICAgIC8vIENvbXBvc2UgcGFydGlhbCByaWdodCBhcmd1bWVudHMuXG4gICAgICB2YWx1ZSA9IHNvdXJjZVs1XTtcbiAgICAgIGlmICh2YWx1ZSkge1xuICAgICAgICBwYXJ0aWFscyA9IGRhdGFbNV07XG4gICAgICAgIGRhdGFbNV0gPSBwYXJ0aWFscyA/IGNvbXBvc2VBcmdzUmlnaHQocGFydGlhbHMsIHZhbHVlLCBzb3VyY2VbNl0pIDogdmFsdWU7XG4gICAgICAgIGRhdGFbNl0gPSBwYXJ0aWFscyA/IHJlcGxhY2VIb2xkZXJzKGRhdGFbNV0sIFBMQUNFSE9MREVSKSA6IHNvdXJjZVs2XTtcbiAgICAgIH1cbiAgICAgIC8vIFVzZSBzb3VyY2UgYGFyZ1Bvc2AgaWYgYXZhaWxhYmxlLlxuICAgICAgdmFsdWUgPSBzb3VyY2VbN107XG4gICAgICBpZiAodmFsdWUpIHtcbiAgICAgICAgZGF0YVs3XSA9IHZhbHVlO1xuICAgICAgfVxuICAgICAgLy8gVXNlIHNvdXJjZSBgYXJ5YCBpZiBpdCdzIHNtYWxsZXIuXG4gICAgICBpZiAoc3JjQml0bWFzayAmIFdSQVBfQVJZX0ZMQUcpIHtcbiAgICAgICAgZGF0YVs4XSA9IGRhdGFbOF0gPT0gbnVsbCA/IHNvdXJjZVs4XSA6IG5hdGl2ZU1pbihkYXRhWzhdLCBzb3VyY2VbOF0pO1xuICAgICAgfVxuICAgICAgLy8gVXNlIHNvdXJjZSBgYXJpdHlgIGlmIG9uZSBpcyBub3QgcHJvdmlkZWQuXG4gICAgICBpZiAoZGF0YVs5XSA9PSBudWxsKSB7XG4gICAgICAgIGRhdGFbOV0gPSBzb3VyY2VbOV07XG4gICAgICB9XG4gICAgICAvLyBVc2Ugc291cmNlIGBmdW5jYCBhbmQgbWVyZ2UgYml0bWFza3MuXG4gICAgICBkYXRhWzBdID0gc291cmNlWzBdO1xuICAgICAgZGF0YVsxXSA9IG5ld0JpdG1hc2s7XG5cbiAgICAgIHJldHVybiBkYXRhO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoaXMgZnVuY3Rpb24gaXMgbGlrZVxuICAgICAqIFtgT2JqZWN0LmtleXNgXShodHRwOi8vZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi83LjAvI3NlYy1vYmplY3Qua2V5cylcbiAgICAgKiBleGNlcHQgdGhhdCBpdCBpbmNsdWRlcyBpbmhlcml0ZWQgZW51bWVyYWJsZSBwcm9wZXJ0aWVzLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gcXVlcnkuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBhcnJheSBvZiBwcm9wZXJ0eSBuYW1lcy5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBuYXRpdmVLZXlzSW4ob2JqZWN0KSB7XG4gICAgICB2YXIgcmVzdWx0ID0gW107XG4gICAgICBpZiAob2JqZWN0ICE9IG51bGwpIHtcbiAgICAgICAgZm9yICh2YXIga2V5IGluIE9iamVjdChvYmplY3QpKSB7XG4gICAgICAgICAgcmVzdWx0LnB1c2goa2V5KTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDb252ZXJ0cyBgdmFsdWVgIHRvIGEgc3RyaW5nIHVzaW5nIGBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nYC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY29udmVydC5cbiAgICAgKiBAcmV0dXJucyB7c3RyaW5nfSBSZXR1cm5zIHRoZSBjb252ZXJ0ZWQgc3RyaW5nLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIG9iamVjdFRvU3RyaW5nKHZhbHVlKSB7XG4gICAgICByZXR1cm4gbmF0aXZlT2JqZWN0VG9TdHJpbmcuY2FsbCh2YWx1ZSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQSBzcGVjaWFsaXplZCB2ZXJzaW9uIG9mIGBiYXNlUmVzdGAgd2hpY2ggdHJhbnNmb3JtcyB0aGUgcmVzdCBhcnJheS5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gZnVuYyBUaGUgZnVuY3Rpb24gdG8gYXBwbHkgYSByZXN0IHBhcmFtZXRlciB0by5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW3N0YXJ0PWZ1bmMubGVuZ3RoLTFdIFRoZSBzdGFydCBwb3NpdGlvbiBvZiB0aGUgcmVzdCBwYXJhbWV0ZXIuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gdHJhbnNmb3JtIFRoZSByZXN0IGFycmF5IHRyYW5zZm9ybS5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBmdW5jdGlvbi5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBvdmVyUmVzdChmdW5jLCBzdGFydCwgdHJhbnNmb3JtKSB7XG4gICAgICBzdGFydCA9IG5hdGl2ZU1heChzdGFydCA9PT0gdW5kZWZpbmVkID8gKGZ1bmMubGVuZ3RoIC0gMSkgOiBzdGFydCwgMCk7XG4gICAgICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgICAgIHZhciBhcmdzID0gYXJndW1lbnRzLFxuICAgICAgICAgICAgaW5kZXggPSAtMSxcbiAgICAgICAgICAgIGxlbmd0aCA9IG5hdGl2ZU1heChhcmdzLmxlbmd0aCAtIHN0YXJ0LCAwKSxcbiAgICAgICAgICAgIGFycmF5ID0gQXJyYXkobGVuZ3RoKTtcblxuICAgICAgICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgICAgICAgIGFycmF5W2luZGV4XSA9IGFyZ3Nbc3RhcnQgKyBpbmRleF07XG4gICAgICAgIH1cbiAgICAgICAgaW5kZXggPSAtMTtcbiAgICAgICAgdmFyIG90aGVyQXJncyA9IEFycmF5KHN0YXJ0ICsgMSk7XG4gICAgICAgIHdoaWxlICgrK2luZGV4IDwgc3RhcnQpIHtcbiAgICAgICAgICBvdGhlckFyZ3NbaW5kZXhdID0gYXJnc1tpbmRleF07XG4gICAgICAgIH1cbiAgICAgICAgb3RoZXJBcmdzW3N0YXJ0XSA9IHRyYW5zZm9ybShhcnJheSk7XG4gICAgICAgIHJldHVybiBhcHBseShmdW5jLCB0aGlzLCBvdGhlckFyZ3MpO1xuICAgICAgfTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBHZXRzIHRoZSBwYXJlbnQgdmFsdWUgYXQgYHBhdGhgIG9mIGBvYmplY3RgLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gcXVlcnkuXG4gICAgICogQHBhcmFtIHtBcnJheX0gcGF0aCBUaGUgcGF0aCB0byBnZXQgdGhlIHBhcmVudCB2YWx1ZSBvZi5cbiAgICAgKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgcGFyZW50IHZhbHVlLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHBhcmVudChvYmplY3QsIHBhdGgpIHtcbiAgICAgIHJldHVybiBwYXRoLmxlbmd0aCA8IDIgPyBvYmplY3QgOiBiYXNlR2V0KG9iamVjdCwgYmFzZVNsaWNlKHBhdGgsIDAsIC0xKSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUmVvcmRlciBgYXJyYXlgIGFjY29yZGluZyB0byB0aGUgc3BlY2lmaWVkIGluZGV4ZXMgd2hlcmUgdGhlIGVsZW1lbnQgYXRcbiAgICAgKiB0aGUgZmlyc3QgaW5kZXggaXMgYXNzaWduZWQgYXMgdGhlIGZpcnN0IGVsZW1lbnQsIHRoZSBlbGVtZW50IGF0XG4gICAgICogdGhlIHNlY29uZCBpbmRleCBpcyBhc3NpZ25lZCBhcyB0aGUgc2Vjb25kIGVsZW1lbnQsIGFuZCBzbyBvbi5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIHJlb3JkZXIuXG4gICAgICogQHBhcmFtIHtBcnJheX0gaW5kZXhlcyBUaGUgYXJyYW5nZWQgYXJyYXkgaW5kZXhlcy5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgYGFycmF5YC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiByZW9yZGVyKGFycmF5LCBpbmRleGVzKSB7XG4gICAgICB2YXIgYXJyTGVuZ3RoID0gYXJyYXkubGVuZ3RoLFxuICAgICAgICAgIGxlbmd0aCA9IG5hdGl2ZU1pbihpbmRleGVzLmxlbmd0aCwgYXJyTGVuZ3RoKSxcbiAgICAgICAgICBvbGRBcnJheSA9IGNvcHlBcnJheShhcnJheSk7XG5cbiAgICAgIHdoaWxlIChsZW5ndGgtLSkge1xuICAgICAgICB2YXIgaW5kZXggPSBpbmRleGVzW2xlbmd0aF07XG4gICAgICAgIGFycmF5W2xlbmd0aF0gPSBpc0luZGV4KGluZGV4LCBhcnJMZW5ndGgpID8gb2xkQXJyYXlbaW5kZXhdIDogdW5kZWZpbmVkO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGFycmF5O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEdldHMgdGhlIHZhbHVlIGF0IGBrZXlgLCB1bmxlc3MgYGtleWAgaXMgXCJfX3Byb3RvX19cIiBvciBcImNvbnN0cnVjdG9yXCIuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBxdWVyeS5cbiAgICAgKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIHByb3BlcnR5IHRvIGdldC5cbiAgICAgKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgcHJvcGVydHkgdmFsdWUuXG4gICAgICovXG4gICAgZnVuY3Rpb24gc2FmZUdldChvYmplY3QsIGtleSkge1xuICAgICAgaWYgKGtleSA9PT0gJ2NvbnN0cnVjdG9yJyAmJiB0eXBlb2Ygb2JqZWN0W2tleV0gPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICBpZiAoa2V5ID09ICdfX3Byb3RvX18nKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIG9iamVjdFtrZXldO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFNldHMgbWV0YWRhdGEgZm9yIGBmdW5jYC5cbiAgICAgKlxuICAgICAqICoqTm90ZToqKiBJZiB0aGlzIGZ1bmN0aW9uIGJlY29tZXMgaG90LCBpLmUuIGlzIGludm9rZWQgYSBsb3QgaW4gYSBzaG9ydFxuICAgICAqIHBlcmlvZCBvZiB0aW1lLCBpdCB3aWxsIHRyaXAgaXRzIGJyZWFrZXIgYW5kIHRyYW5zaXRpb24gdG8gYW4gaWRlbnRpdHlcbiAgICAgKiBmdW5jdGlvbiB0byBhdm9pZCBnYXJiYWdlIGNvbGxlY3Rpb24gcGF1c2VzIGluIFY4LiBTZWVcbiAgICAgKiBbVjggaXNzdWUgMjA3MF0oaHR0cHM6Ly9idWdzLmNocm9taXVtLm9yZy9wL3Y4L2lzc3Vlcy9kZXRhaWw/aWQ9MjA3MClcbiAgICAgKiBmb3IgbW9yZSBkZXRhaWxzLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdW5jIFRoZSBmdW5jdGlvbiB0byBhc3NvY2lhdGUgbWV0YWRhdGEgd2l0aC5cbiAgICAgKiBAcGFyYW0geyp9IGRhdGEgVGhlIG1ldGFkYXRhLlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyBgZnVuY2AuXG4gICAgICovXG4gICAgdmFyIHNldERhdGEgPSBzaG9ydE91dChiYXNlU2V0RGF0YSk7XG5cbiAgICAvKipcbiAgICAgKiBBIHNpbXBsZSB3cmFwcGVyIGFyb3VuZCB0aGUgZ2xvYmFsIFtgc2V0VGltZW91dGBdKGh0dHBzOi8vbWRuLmlvL3NldFRpbWVvdXQpLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdW5jIFRoZSBmdW5jdGlvbiB0byBkZWxheS5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gd2FpdCBUaGUgbnVtYmVyIG9mIG1pbGxpc2Vjb25kcyB0byBkZWxheSBpbnZvY2F0aW9uLlxuICAgICAqIEByZXR1cm5zIHtudW1iZXJ8T2JqZWN0fSBSZXR1cm5zIHRoZSB0aW1lciBpZCBvciB0aW1lb3V0IG9iamVjdC5cbiAgICAgKi9cbiAgICB2YXIgc2V0VGltZW91dCA9IGN0eFNldFRpbWVvdXQgfHwgZnVuY3Rpb24oZnVuYywgd2FpdCkge1xuICAgICAgcmV0dXJuIHJvb3Quc2V0VGltZW91dChmdW5jLCB3YWl0KTtcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogU2V0cyB0aGUgYHRvU3RyaW5nYCBtZXRob2Qgb2YgYGZ1bmNgIHRvIHJldHVybiBgc3RyaW5nYC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gZnVuYyBUaGUgZnVuY3Rpb24gdG8gbW9kaWZ5LlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IHN0cmluZyBUaGUgYHRvU3RyaW5nYCByZXN1bHQuXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIGBmdW5jYC5cbiAgICAgKi9cbiAgICB2YXIgc2V0VG9TdHJpbmcgPSBzaG9ydE91dChiYXNlU2V0VG9TdHJpbmcpO1xuXG4gICAgLyoqXG4gICAgICogU2V0cyB0aGUgYHRvU3RyaW5nYCBtZXRob2Qgb2YgYHdyYXBwZXJgIHRvIG1pbWljIHRoZSBzb3VyY2Ugb2YgYHJlZmVyZW5jZWBcbiAgICAgKiB3aXRoIHdyYXBwZXIgZGV0YWlscyBpbiBhIGNvbW1lbnQgYXQgdGhlIHRvcCBvZiB0aGUgc291cmNlIGJvZHkuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IHdyYXBwZXIgVGhlIGZ1bmN0aW9uIHRvIG1vZGlmeS5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSByZWZlcmVuY2UgVGhlIHJlZmVyZW5jZSBmdW5jdGlvbi5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gYml0bWFzayBUaGUgYml0bWFzayBmbGFncy4gU2VlIGBjcmVhdGVXcmFwYCBmb3IgbW9yZSBkZXRhaWxzLlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyBgd3JhcHBlcmAuXG4gICAgICovXG4gICAgZnVuY3Rpb24gc2V0V3JhcFRvU3RyaW5nKHdyYXBwZXIsIHJlZmVyZW5jZSwgYml0bWFzaykge1xuICAgICAgdmFyIHNvdXJjZSA9IChyZWZlcmVuY2UgKyAnJyk7XG4gICAgICByZXR1cm4gc2V0VG9TdHJpbmcod3JhcHBlciwgaW5zZXJ0V3JhcERldGFpbHMoc291cmNlLCB1cGRhdGVXcmFwRGV0YWlscyhnZXRXcmFwRGV0YWlscyhzb3VyY2UpLCBiaXRtYXNrKSkpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBmdW5jdGlvbiB0aGF0J2xsIHNob3J0IG91dCBhbmQgaW52b2tlIGBpZGVudGl0eWAgaW5zdGVhZFxuICAgICAqIG9mIGBmdW5jYCB3aGVuIGl0J3MgY2FsbGVkIGBIT1RfQ09VTlRgIG9yIG1vcmUgdGltZXMgaW4gYEhPVF9TUEFOYFxuICAgICAqIG1pbGxpc2Vjb25kcy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gZnVuYyBUaGUgZnVuY3Rpb24gdG8gcmVzdHJpY3QuXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgc2hvcnRhYmxlIGZ1bmN0aW9uLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHNob3J0T3V0KGZ1bmMpIHtcbiAgICAgIHZhciBjb3VudCA9IDAsXG4gICAgICAgICAgbGFzdENhbGxlZCA9IDA7XG5cbiAgICAgIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICAgICAgdmFyIHN0YW1wID0gbmF0aXZlTm93KCksXG4gICAgICAgICAgICByZW1haW5pbmcgPSBIT1RfU1BBTiAtIChzdGFtcCAtIGxhc3RDYWxsZWQpO1xuXG4gICAgICAgIGxhc3RDYWxsZWQgPSBzdGFtcDtcbiAgICAgICAgaWYgKHJlbWFpbmluZyA+IDApIHtcbiAgICAgICAgICBpZiAoKytjb3VudCA+PSBIT1RfQ09VTlQpIHtcbiAgICAgICAgICAgIHJldHVybiBhcmd1bWVudHNbMF07XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGNvdW50ID0gMDtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gZnVuYy5hcHBseSh1bmRlZmluZWQsIGFyZ3VtZW50cyk7XG4gICAgICB9O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEEgc3BlY2lhbGl6ZWQgdmVyc2lvbiBvZiBgXy5zaHVmZmxlYCB3aGljaCBtdXRhdGVzIGFuZCBzZXRzIHRoZSBzaXplIG9mIGBhcnJheWAuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBzaHVmZmxlLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbc2l6ZT1hcnJheS5sZW5ndGhdIFRoZSBzaXplIG9mIGBhcnJheWAuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIGBhcnJheWAuXG4gICAgICovXG4gICAgZnVuY3Rpb24gc2h1ZmZsZVNlbGYoYXJyYXksIHNpemUpIHtcbiAgICAgIHZhciBpbmRleCA9IC0xLFxuICAgICAgICAgIGxlbmd0aCA9IGFycmF5Lmxlbmd0aCxcbiAgICAgICAgICBsYXN0SW5kZXggPSBsZW5ndGggLSAxO1xuXG4gICAgICBzaXplID0gc2l6ZSA9PT0gdW5kZWZpbmVkID8gbGVuZ3RoIDogc2l6ZTtcbiAgICAgIHdoaWxlICgrK2luZGV4IDwgc2l6ZSkge1xuICAgICAgICB2YXIgcmFuZCA9IGJhc2VSYW5kb20oaW5kZXgsIGxhc3RJbmRleCksXG4gICAgICAgICAgICB2YWx1ZSA9IGFycmF5W3JhbmRdO1xuXG4gICAgICAgIGFycmF5W3JhbmRdID0gYXJyYXlbaW5kZXhdO1xuICAgICAgICBhcnJheVtpbmRleF0gPSB2YWx1ZTtcbiAgICAgIH1cbiAgICAgIGFycmF5Lmxlbmd0aCA9IHNpemU7XG4gICAgICByZXR1cm4gYXJyYXk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ29udmVydHMgYHN0cmluZ2AgdG8gYSBwcm9wZXJ0eSBwYXRoIGFycmF5LlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gc3RyaW5nIFRoZSBzdHJpbmcgdG8gY29udmVydC5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIHByb3BlcnR5IHBhdGggYXJyYXkuXG4gICAgICovXG4gICAgdmFyIHN0cmluZ1RvUGF0aCA9IG1lbW9pemVDYXBwZWQoZnVuY3Rpb24oc3RyaW5nKSB7XG4gICAgICB2YXIgcmVzdWx0ID0gW107XG4gICAgICBpZiAoc3RyaW5nLmNoYXJDb2RlQXQoMCkgPT09IDQ2IC8qIC4gKi8pIHtcbiAgICAgICAgcmVzdWx0LnB1c2goJycpO1xuICAgICAgfVxuICAgICAgc3RyaW5nLnJlcGxhY2UocmVQcm9wTmFtZSwgZnVuY3Rpb24obWF0Y2gsIG51bWJlciwgcXVvdGUsIHN1YlN0cmluZykge1xuICAgICAgICByZXN1bHQucHVzaChxdW90ZSA/IHN1YlN0cmluZy5yZXBsYWNlKHJlRXNjYXBlQ2hhciwgJyQxJykgOiAobnVtYmVyIHx8IG1hdGNoKSk7XG4gICAgICB9KTtcbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfSk7XG5cbiAgICAvKipcbiAgICAgKiBDb252ZXJ0cyBgdmFsdWVgIHRvIGEgc3RyaW5nIGtleSBpZiBpdCdzIG5vdCBhIHN0cmluZyBvciBzeW1ib2wuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGluc3BlY3QuXG4gICAgICogQHJldHVybnMge3N0cmluZ3xzeW1ib2x9IFJldHVybnMgdGhlIGtleS5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiB0b0tleSh2YWx1ZSkge1xuICAgICAgaWYgKHR5cGVvZiB2YWx1ZSA9PSAnc3RyaW5nJyB8fCBpc1N5bWJvbCh2YWx1ZSkpIHtcbiAgICAgICAgcmV0dXJuIHZhbHVlO1xuICAgICAgfVxuICAgICAgdmFyIHJlc3VsdCA9ICh2YWx1ZSArICcnKTtcbiAgICAgIHJldHVybiAocmVzdWx0ID09ICcwJyAmJiAoMSAvIHZhbHVlKSA9PSAtSU5GSU5JVFkpID8gJy0wJyA6IHJlc3VsdDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDb252ZXJ0cyBgZnVuY2AgdG8gaXRzIHNvdXJjZSBjb2RlLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdW5jIFRoZSBmdW5jdGlvbiB0byBjb252ZXJ0LlxuICAgICAqIEByZXR1cm5zIHtzdHJpbmd9IFJldHVybnMgdGhlIHNvdXJjZSBjb2RlLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHRvU291cmNlKGZ1bmMpIHtcbiAgICAgIGlmIChmdW5jICE9IG51bGwpIHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICByZXR1cm4gZnVuY1RvU3RyaW5nLmNhbGwoZnVuYyk7XG4gICAgICAgIH0gY2F0Y2ggKGUpIHt9XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgcmV0dXJuIChmdW5jICsgJycpO1xuICAgICAgICB9IGNhdGNoIChlKSB7fVxuICAgICAgfVxuICAgICAgcmV0dXJuICcnO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFVwZGF0ZXMgd3JhcHBlciBgZGV0YWlsc2AgYmFzZWQgb24gYGJpdG1hc2tgIGZsYWdzLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IGRldGFpbHMgVGhlIGRldGFpbHMgdG8gbW9kaWZ5LlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBiaXRtYXNrIFRoZSBiaXRtYXNrIGZsYWdzLiBTZWUgYGNyZWF0ZVdyYXBgIGZvciBtb3JlIGRldGFpbHMuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIGBkZXRhaWxzYC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiB1cGRhdGVXcmFwRGV0YWlscyhkZXRhaWxzLCBiaXRtYXNrKSB7XG4gICAgICBhcnJheUVhY2god3JhcEZsYWdzLCBmdW5jdGlvbihwYWlyKSB7XG4gICAgICAgIHZhciB2YWx1ZSA9ICdfLicgKyBwYWlyWzBdO1xuICAgICAgICBpZiAoKGJpdG1hc2sgJiBwYWlyWzFdKSAmJiAhYXJyYXlJbmNsdWRlcyhkZXRhaWxzLCB2YWx1ZSkpIHtcbiAgICAgICAgICBkZXRhaWxzLnB1c2godmFsdWUpO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICAgIHJldHVybiBkZXRhaWxzLnNvcnQoKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgY2xvbmUgb2YgYHdyYXBwZXJgLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gd3JhcHBlciBUaGUgd3JhcHBlciB0byBjbG9uZS5cbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIHRoZSBjbG9uZWQgd3JhcHBlci5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiB3cmFwcGVyQ2xvbmUod3JhcHBlcikge1xuICAgICAgaWYgKHdyYXBwZXIgaW5zdGFuY2VvZiBMYXp5V3JhcHBlcikge1xuICAgICAgICByZXR1cm4gd3JhcHBlci5jbG9uZSgpO1xuICAgICAgfVxuICAgICAgdmFyIHJlc3VsdCA9IG5ldyBMb2Rhc2hXcmFwcGVyKHdyYXBwZXIuX193cmFwcGVkX18sIHdyYXBwZXIuX19jaGFpbl9fKTtcbiAgICAgIHJlc3VsdC5fX2FjdGlvbnNfXyA9IGNvcHlBcnJheSh3cmFwcGVyLl9fYWN0aW9uc19fKTtcbiAgICAgIHJlc3VsdC5fX2luZGV4X18gID0gd3JhcHBlci5fX2luZGV4X187XG4gICAgICByZXN1bHQuX192YWx1ZXNfXyA9IHdyYXBwZXIuX192YWx1ZXNfXztcbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuXG4gICAgLyotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qL1xuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhbiBhcnJheSBvZiBlbGVtZW50cyBzcGxpdCBpbnRvIGdyb3VwcyB0aGUgbGVuZ3RoIG9mIGBzaXplYC5cbiAgICAgKiBJZiBgYXJyYXlgIGNhbid0IGJlIHNwbGl0IGV2ZW5seSwgdGhlIGZpbmFsIGNodW5rIHdpbGwgYmUgdGhlIHJlbWFpbmluZ1xuICAgICAqIGVsZW1lbnRzLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDMuMC4wXG4gICAgICogQGNhdGVnb3J5IEFycmF5XG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIHByb2Nlc3MuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFtzaXplPTFdIFRoZSBsZW5ndGggb2YgZWFjaCBjaHVua1xuICAgICAqIEBwYXJhbS0ge09iamVjdH0gW2d1YXJkXSBFbmFibGVzIHVzZSBhcyBhbiBpdGVyYXRlZSBmb3IgbWV0aG9kcyBsaWtlIGBfLm1hcGAuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBuZXcgYXJyYXkgb2YgY2h1bmtzLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmNodW5rKFsnYScsICdiJywgJ2MnLCAnZCddLCAyKTtcbiAgICAgKiAvLyA9PiBbWydhJywgJ2InXSwgWydjJywgJ2QnXV1cbiAgICAgKlxuICAgICAqIF8uY2h1bmsoWydhJywgJ2InLCAnYycsICdkJ10sIDMpO1xuICAgICAqIC8vID0+IFtbJ2EnLCAnYicsICdjJ10sIFsnZCddXVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGNodW5rKGFycmF5LCBzaXplLCBndWFyZCkge1xuICAgICAgaWYgKChndWFyZCA/IGlzSXRlcmF0ZWVDYWxsKGFycmF5LCBzaXplLCBndWFyZCkgOiBzaXplID09PSB1bmRlZmluZWQpKSB7XG4gICAgICAgIHNpemUgPSAxO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgc2l6ZSA9IG5hdGl2ZU1heCh0b0ludGVnZXIoc2l6ZSksIDApO1xuICAgICAgfVxuICAgICAgdmFyIGxlbmd0aCA9IGFycmF5ID09IG51bGwgPyAwIDogYXJyYXkubGVuZ3RoO1xuICAgICAgaWYgKCFsZW5ndGggfHwgc2l6ZSA8IDEpIHtcbiAgICAgICAgcmV0dXJuIFtdO1xuICAgICAgfVxuICAgICAgdmFyIGluZGV4ID0gMCxcbiAgICAgICAgICByZXNJbmRleCA9IDAsXG4gICAgICAgICAgcmVzdWx0ID0gQXJyYXkobmF0aXZlQ2VpbChsZW5ndGggLyBzaXplKSk7XG5cbiAgICAgIHdoaWxlIChpbmRleCA8IGxlbmd0aCkge1xuICAgICAgICByZXN1bHRbcmVzSW5kZXgrK10gPSBiYXNlU2xpY2UoYXJyYXksIGluZGV4LCAoaW5kZXggKz0gc2l6ZSkpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGFuIGFycmF5IHdpdGggYWxsIGZhbHNleSB2YWx1ZXMgcmVtb3ZlZC4gVGhlIHZhbHVlcyBgZmFsc2VgLCBgbnVsbGAsXG4gICAgICogYDBgLCBgXCJcImAsIGB1bmRlZmluZWRgLCBhbmQgYE5hTmAgYXJlIGZhbHNleS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBjYXRlZ29yeSBBcnJheVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBjb21wYWN0LlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgbmV3IGFycmF5IG9mIGZpbHRlcmVkIHZhbHVlcy5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5jb21wYWN0KFswLCAxLCBmYWxzZSwgMiwgJycsIDNdKTtcbiAgICAgKiAvLyA9PiBbMSwgMiwgM11cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBjb21wYWN0KGFycmF5KSB7XG4gICAgICB2YXIgaW5kZXggPSAtMSxcbiAgICAgICAgICBsZW5ndGggPSBhcnJheSA9PSBudWxsID8gMCA6IGFycmF5Lmxlbmd0aCxcbiAgICAgICAgICByZXNJbmRleCA9IDAsXG4gICAgICAgICAgcmVzdWx0ID0gW107XG5cbiAgICAgIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgICAgIHZhciB2YWx1ZSA9IGFycmF5W2luZGV4XTtcbiAgICAgICAgaWYgKHZhbHVlKSB7XG4gICAgICAgICAgcmVzdWx0W3Jlc0luZGV4KytdID0gdmFsdWU7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIG5ldyBhcnJheSBjb25jYXRlbmF0aW5nIGBhcnJheWAgd2l0aCBhbnkgYWRkaXRpb25hbCBhcnJheXNcbiAgICAgKiBhbmQvb3IgdmFsdWVzLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IEFycmF5XG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIGNvbmNhdGVuYXRlLlxuICAgICAqIEBwYXJhbSB7Li4uKn0gW3ZhbHVlc10gVGhlIHZhbHVlcyB0byBjb25jYXRlbmF0ZS5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIG5ldyBjb25jYXRlbmF0ZWQgYXJyYXkuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBhcnJheSA9IFsxXTtcbiAgICAgKiB2YXIgb3RoZXIgPSBfLmNvbmNhdChhcnJheSwgMiwgWzNdLCBbWzRdXSk7XG4gICAgICpcbiAgICAgKiBjb25zb2xlLmxvZyhvdGhlcik7XG4gICAgICogLy8gPT4gWzEsIDIsIDMsIFs0XV1cbiAgICAgKlxuICAgICAqIGNvbnNvbGUubG9nKGFycmF5KTtcbiAgICAgKiAvLyA9PiBbMV1cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBjb25jYXQoKSB7XG4gICAgICB2YXIgbGVuZ3RoID0gYXJndW1lbnRzLmxlbmd0aDtcbiAgICAgIGlmICghbGVuZ3RoKSB7XG4gICAgICAgIHJldHVybiBbXTtcbiAgICAgIH1cbiAgICAgIHZhciBhcmdzID0gQXJyYXkobGVuZ3RoIC0gMSksXG4gICAgICAgICAgYXJyYXkgPSBhcmd1bWVudHNbMF0sXG4gICAgICAgICAgaW5kZXggPSBsZW5ndGg7XG5cbiAgICAgIHdoaWxlIChpbmRleC0tKSB7XG4gICAgICAgIGFyZ3NbaW5kZXggLSAxXSA9IGFyZ3VtZW50c1tpbmRleF07XG4gICAgICB9XG4gICAgICByZXR1cm4gYXJyYXlQdXNoKGlzQXJyYXkoYXJyYXkpID8gY29weUFycmF5KGFycmF5KSA6IFthcnJheV0sIGJhc2VGbGF0dGVuKGFyZ3MsIDEpKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGFuIGFycmF5IG9mIGBhcnJheWAgdmFsdWVzIG5vdCBpbmNsdWRlZCBpbiB0aGUgb3RoZXIgZ2l2ZW4gYXJyYXlzXG4gICAgICogdXNpbmcgW2BTYW1lVmFsdWVaZXJvYF0oaHR0cDovL2VjbWEtaW50ZXJuYXRpb25hbC5vcmcvZWNtYS0yNjIvNy4wLyNzZWMtc2FtZXZhbHVlemVybylcbiAgICAgKiBmb3IgZXF1YWxpdHkgY29tcGFyaXNvbnMuIFRoZSBvcmRlciBhbmQgcmVmZXJlbmNlcyBvZiByZXN1bHQgdmFsdWVzIGFyZVxuICAgICAqIGRldGVybWluZWQgYnkgdGhlIGZpcnN0IGFycmF5LlxuICAgICAqXG4gICAgICogKipOb3RlOioqIFVubGlrZSBgXy5wdWxsQWxsYCwgdGhpcyBtZXRob2QgcmV0dXJucyBhIG5ldyBhcnJheS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBjYXRlZ29yeSBBcnJheVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBpbnNwZWN0LlxuICAgICAqIEBwYXJhbSB7Li4uQXJyYXl9IFt2YWx1ZXNdIFRoZSB2YWx1ZXMgdG8gZXhjbHVkZS5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIG5ldyBhcnJheSBvZiBmaWx0ZXJlZCB2YWx1ZXMuXG4gICAgICogQHNlZSBfLndpdGhvdXQsIF8ueG9yXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uZGlmZmVyZW5jZShbMiwgMV0sIFsyLCAzXSk7XG4gICAgICogLy8gPT4gWzFdXG4gICAgICovXG4gICAgdmFyIGRpZmZlcmVuY2UgPSBiYXNlUmVzdChmdW5jdGlvbihhcnJheSwgdmFsdWVzKSB7XG4gICAgICByZXR1cm4gaXNBcnJheUxpa2VPYmplY3QoYXJyYXkpXG4gICAgICAgID8gYmFzZURpZmZlcmVuY2UoYXJyYXksIGJhc2VGbGF0dGVuKHZhbHVlcywgMSwgaXNBcnJheUxpa2VPYmplY3QsIHRydWUpKVxuICAgICAgICA6IFtdO1xuICAgIH0pO1xuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgaXMgbGlrZSBgXy5kaWZmZXJlbmNlYCBleGNlcHQgdGhhdCBpdCBhY2NlcHRzIGBpdGVyYXRlZWAgd2hpY2hcbiAgICAgKiBpcyBpbnZva2VkIGZvciBlYWNoIGVsZW1lbnQgb2YgYGFycmF5YCBhbmQgYHZhbHVlc2AgdG8gZ2VuZXJhdGUgdGhlIGNyaXRlcmlvblxuICAgICAqIGJ5IHdoaWNoIHRoZXkncmUgY29tcGFyZWQuIFRoZSBvcmRlciBhbmQgcmVmZXJlbmNlcyBvZiByZXN1bHQgdmFsdWVzIGFyZVxuICAgICAqIGRldGVybWluZWQgYnkgdGhlIGZpcnN0IGFycmF5LiBUaGUgaXRlcmF0ZWUgaXMgaW52b2tlZCB3aXRoIG9uZSBhcmd1bWVudDpcbiAgICAgKiAodmFsdWUpLlxuICAgICAqXG4gICAgICogKipOb3RlOioqIFVubGlrZSBgXy5wdWxsQWxsQnlgLCB0aGlzIG1ldGhvZCByZXR1cm5zIGEgbmV3IGFycmF5LlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IEFycmF5XG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIGluc3BlY3QuXG4gICAgICogQHBhcmFtIHsuLi5BcnJheX0gW3ZhbHVlc10gVGhlIHZhbHVlcyB0byBleGNsdWRlLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtpdGVyYXRlZT1fLmlkZW50aXR5XSBUaGUgaXRlcmF0ZWUgaW52b2tlZCBwZXIgZWxlbWVudC5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIG5ldyBhcnJheSBvZiBmaWx0ZXJlZCB2YWx1ZXMuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uZGlmZmVyZW5jZUJ5KFsyLjEsIDEuMl0sIFsyLjMsIDMuNF0sIE1hdGguZmxvb3IpO1xuICAgICAqIC8vID0+IFsxLjJdXG4gICAgICpcbiAgICAgKiAvLyBUaGUgYF8ucHJvcGVydHlgIGl0ZXJhdGVlIHNob3J0aGFuZC5cbiAgICAgKiBfLmRpZmZlcmVuY2VCeShbeyAneCc6IDIgfSwgeyAneCc6IDEgfV0sIFt7ICd4JzogMSB9XSwgJ3gnKTtcbiAgICAgKiAvLyA9PiBbeyAneCc6IDIgfV1cbiAgICAgKi9cbiAgICB2YXIgZGlmZmVyZW5jZUJ5ID0gYmFzZVJlc3QoZnVuY3Rpb24oYXJyYXksIHZhbHVlcykge1xuICAgICAgdmFyIGl0ZXJhdGVlID0gbGFzdCh2YWx1ZXMpO1xuICAgICAgaWYgKGlzQXJyYXlMaWtlT2JqZWN0KGl0ZXJhdGVlKSkge1xuICAgICAgICBpdGVyYXRlZSA9IHVuZGVmaW5lZDtcbiAgICAgIH1cbiAgICAgIHJldHVybiBpc0FycmF5TGlrZU9iamVjdChhcnJheSlcbiAgICAgICAgPyBiYXNlRGlmZmVyZW5jZShhcnJheSwgYmFzZUZsYXR0ZW4odmFsdWVzLCAxLCBpc0FycmF5TGlrZU9iamVjdCwgdHJ1ZSksIGdldEl0ZXJhdGVlKGl0ZXJhdGVlLCAyKSlcbiAgICAgICAgOiBbXTtcbiAgICB9KTtcblxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIGlzIGxpa2UgYF8uZGlmZmVyZW5jZWAgZXhjZXB0IHRoYXQgaXQgYWNjZXB0cyBgY29tcGFyYXRvcmBcbiAgICAgKiB3aGljaCBpcyBpbnZva2VkIHRvIGNvbXBhcmUgZWxlbWVudHMgb2YgYGFycmF5YCB0byBgdmFsdWVzYC4gVGhlIG9yZGVyIGFuZFxuICAgICAqIHJlZmVyZW5jZXMgb2YgcmVzdWx0IHZhbHVlcyBhcmUgZGV0ZXJtaW5lZCBieSB0aGUgZmlyc3QgYXJyYXkuIFRoZSBjb21wYXJhdG9yXG4gICAgICogaXMgaW52b2tlZCB3aXRoIHR3byBhcmd1bWVudHM6IChhcnJWYWwsIG90aFZhbCkuXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogVW5saWtlIGBfLnB1bGxBbGxXaXRoYCwgdGhpcyBtZXRob2QgcmV0dXJucyBhIG5ldyBhcnJheS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBBcnJheVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBpbnNwZWN0LlxuICAgICAqIEBwYXJhbSB7Li4uQXJyYXl9IFt2YWx1ZXNdIFRoZSB2YWx1ZXMgdG8gZXhjbHVkZS5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbY29tcGFyYXRvcl0gVGhlIGNvbXBhcmF0b3IgaW52b2tlZCBwZXIgZWxlbWVudC5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIG5ldyBhcnJheSBvZiBmaWx0ZXJlZCB2YWx1ZXMuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBvYmplY3RzID0gW3sgJ3gnOiAxLCAneSc6IDIgfSwgeyAneCc6IDIsICd5JzogMSB9XTtcbiAgICAgKlxuICAgICAqIF8uZGlmZmVyZW5jZVdpdGgob2JqZWN0cywgW3sgJ3gnOiAxLCAneSc6IDIgfV0sIF8uaXNFcXVhbCk7XG4gICAgICogLy8gPT4gW3sgJ3gnOiAyLCAneSc6IDEgfV1cbiAgICAgKi9cbiAgICB2YXIgZGlmZmVyZW5jZVdpdGggPSBiYXNlUmVzdChmdW5jdGlvbihhcnJheSwgdmFsdWVzKSB7XG4gICAgICB2YXIgY29tcGFyYXRvciA9IGxhc3QodmFsdWVzKTtcbiAgICAgIGlmIChpc0FycmF5TGlrZU9iamVjdChjb21wYXJhdG9yKSkge1xuICAgICAgICBjb21wYXJhdG9yID0gdW5kZWZpbmVkO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGlzQXJyYXlMaWtlT2JqZWN0KGFycmF5KVxuICAgICAgICA/IGJhc2VEaWZmZXJlbmNlKGFycmF5LCBiYXNlRmxhdHRlbih2YWx1ZXMsIDEsIGlzQXJyYXlMaWtlT2JqZWN0LCB0cnVlKSwgdW5kZWZpbmVkLCBjb21wYXJhdG9yKVxuICAgICAgICA6IFtdO1xuICAgIH0pO1xuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIHNsaWNlIG9mIGBhcnJheWAgd2l0aCBgbmAgZWxlbWVudHMgZHJvcHBlZCBmcm9tIHRoZSBiZWdpbm5pbmcuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMC41LjBcbiAgICAgKiBAY2F0ZWdvcnkgQXJyYXlcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gcXVlcnkuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFtuPTFdIFRoZSBudW1iZXIgb2YgZWxlbWVudHMgdG8gZHJvcC5cbiAgICAgKiBAcGFyYW0tIHtPYmplY3R9IFtndWFyZF0gRW5hYmxlcyB1c2UgYXMgYW4gaXRlcmF0ZWUgZm9yIG1ldGhvZHMgbGlrZSBgXy5tYXBgLlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgc2xpY2Ugb2YgYGFycmF5YC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5kcm9wKFsxLCAyLCAzXSk7XG4gICAgICogLy8gPT4gWzIsIDNdXG4gICAgICpcbiAgICAgKiBfLmRyb3AoWzEsIDIsIDNdLCAyKTtcbiAgICAgKiAvLyA9PiBbM11cbiAgICAgKlxuICAgICAqIF8uZHJvcChbMSwgMiwgM10sIDUpO1xuICAgICAqIC8vID0+IFtdXG4gICAgICpcbiAgICAgKiBfLmRyb3AoWzEsIDIsIDNdLCAwKTtcbiAgICAgKiAvLyA9PiBbMSwgMiwgM11cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBkcm9wKGFycmF5LCBuLCBndWFyZCkge1xuICAgICAgdmFyIGxlbmd0aCA9IGFycmF5ID09IG51bGwgPyAwIDogYXJyYXkubGVuZ3RoO1xuICAgICAgaWYgKCFsZW5ndGgpIHtcbiAgICAgICAgcmV0dXJuIFtdO1xuICAgICAgfVxuICAgICAgbiA9IChndWFyZCB8fCBuID09PSB1bmRlZmluZWQpID8gMSA6IHRvSW50ZWdlcihuKTtcbiAgICAgIHJldHVybiBiYXNlU2xpY2UoYXJyYXksIG4gPCAwID8gMCA6IG4sIGxlbmd0aCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIHNsaWNlIG9mIGBhcnJheWAgd2l0aCBgbmAgZWxlbWVudHMgZHJvcHBlZCBmcm9tIHRoZSBlbmQuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMy4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgQXJyYXlcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gcXVlcnkuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFtuPTFdIFRoZSBudW1iZXIgb2YgZWxlbWVudHMgdG8gZHJvcC5cbiAgICAgKiBAcGFyYW0tIHtPYmplY3R9IFtndWFyZF0gRW5hYmxlcyB1c2UgYXMgYW4gaXRlcmF0ZWUgZm9yIG1ldGhvZHMgbGlrZSBgXy5tYXBgLlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgc2xpY2Ugb2YgYGFycmF5YC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5kcm9wUmlnaHQoWzEsIDIsIDNdKTtcbiAgICAgKiAvLyA9PiBbMSwgMl1cbiAgICAgKlxuICAgICAqIF8uZHJvcFJpZ2h0KFsxLCAyLCAzXSwgMik7XG4gICAgICogLy8gPT4gWzFdXG4gICAgICpcbiAgICAgKiBfLmRyb3BSaWdodChbMSwgMiwgM10sIDUpO1xuICAgICAqIC8vID0+IFtdXG4gICAgICpcbiAgICAgKiBfLmRyb3BSaWdodChbMSwgMiwgM10sIDApO1xuICAgICAqIC8vID0+IFsxLCAyLCAzXVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGRyb3BSaWdodChhcnJheSwgbiwgZ3VhcmQpIHtcbiAgICAgIHZhciBsZW5ndGggPSBhcnJheSA9PSBudWxsID8gMCA6IGFycmF5Lmxlbmd0aDtcbiAgICAgIGlmICghbGVuZ3RoKSB7XG4gICAgICAgIHJldHVybiBbXTtcbiAgICAgIH1cbiAgICAgIG4gPSAoZ3VhcmQgfHwgbiA9PT0gdW5kZWZpbmVkKSA/IDEgOiB0b0ludGVnZXIobik7XG4gICAgICBuID0gbGVuZ3RoIC0gbjtcbiAgICAgIHJldHVybiBiYXNlU2xpY2UoYXJyYXksIDAsIG4gPCAwID8gMCA6IG4pO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBzbGljZSBvZiBgYXJyYXlgIGV4Y2x1ZGluZyBlbGVtZW50cyBkcm9wcGVkIGZyb20gdGhlIGVuZC5cbiAgICAgKiBFbGVtZW50cyBhcmUgZHJvcHBlZCB1bnRpbCBgcHJlZGljYXRlYCByZXR1cm5zIGZhbHNleS4gVGhlIHByZWRpY2F0ZSBpc1xuICAgICAqIGludm9rZWQgd2l0aCB0aHJlZSBhcmd1bWVudHM6ICh2YWx1ZSwgaW5kZXgsIGFycmF5KS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAzLjAuMFxuICAgICAqIEBjYXRlZ29yeSBBcnJheVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBxdWVyeS5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbcHJlZGljYXRlPV8uaWRlbnRpdHldIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBzbGljZSBvZiBgYXJyYXlgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgdXNlcnMgPSBbXG4gICAgICogICB7ICd1c2VyJzogJ2Jhcm5leScsICAnYWN0aXZlJzogdHJ1ZSB9LFxuICAgICAqICAgeyAndXNlcic6ICdmcmVkJywgICAgJ2FjdGl2ZSc6IGZhbHNlIH0sXG4gICAgICogICB7ICd1c2VyJzogJ3BlYmJsZXMnLCAnYWN0aXZlJzogZmFsc2UgfVxuICAgICAqIF07XG4gICAgICpcbiAgICAgKiBfLmRyb3BSaWdodFdoaWxlKHVzZXJzLCBmdW5jdGlvbihvKSB7IHJldHVybiAhby5hY3RpdmU7IH0pO1xuICAgICAqIC8vID0+IG9iamVjdHMgZm9yIFsnYmFybmV5J11cbiAgICAgKlxuICAgICAqIC8vIFRoZSBgXy5tYXRjaGVzYCBpdGVyYXRlZSBzaG9ydGhhbmQuXG4gICAgICogXy5kcm9wUmlnaHRXaGlsZSh1c2VycywgeyAndXNlcic6ICdwZWJibGVzJywgJ2FjdGl2ZSc6IGZhbHNlIH0pO1xuICAgICAqIC8vID0+IG9iamVjdHMgZm9yIFsnYmFybmV5JywgJ2ZyZWQnXVxuICAgICAqXG4gICAgICogLy8gVGhlIGBfLm1hdGNoZXNQcm9wZXJ0eWAgaXRlcmF0ZWUgc2hvcnRoYW5kLlxuICAgICAqIF8uZHJvcFJpZ2h0V2hpbGUodXNlcnMsIFsnYWN0aXZlJywgZmFsc2VdKTtcbiAgICAgKiAvLyA9PiBvYmplY3RzIGZvciBbJ2Jhcm5leSddXG4gICAgICpcbiAgICAgKiAvLyBUaGUgYF8ucHJvcGVydHlgIGl0ZXJhdGVlIHNob3J0aGFuZC5cbiAgICAgKiBfLmRyb3BSaWdodFdoaWxlKHVzZXJzLCAnYWN0aXZlJyk7XG4gICAgICogLy8gPT4gb2JqZWN0cyBmb3IgWydiYXJuZXknLCAnZnJlZCcsICdwZWJibGVzJ11cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBkcm9wUmlnaHRXaGlsZShhcnJheSwgcHJlZGljYXRlKSB7XG4gICAgICByZXR1cm4gKGFycmF5ICYmIGFycmF5Lmxlbmd0aClcbiAgICAgICAgPyBiYXNlV2hpbGUoYXJyYXksIGdldEl0ZXJhdGVlKHByZWRpY2F0ZSwgMyksIHRydWUsIHRydWUpXG4gICAgICAgIDogW107XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIHNsaWNlIG9mIGBhcnJheWAgZXhjbHVkaW5nIGVsZW1lbnRzIGRyb3BwZWQgZnJvbSB0aGUgYmVnaW5uaW5nLlxuICAgICAqIEVsZW1lbnRzIGFyZSBkcm9wcGVkIHVudGlsIGBwcmVkaWNhdGVgIHJldHVybnMgZmFsc2V5LiBUaGUgcHJlZGljYXRlIGlzXG4gICAgICogaW52b2tlZCB3aXRoIHRocmVlIGFyZ3VtZW50czogKHZhbHVlLCBpbmRleCwgYXJyYXkpLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDMuMC4wXG4gICAgICogQGNhdGVnb3J5IEFycmF5XG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIHF1ZXJ5LlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtwcmVkaWNhdGU9Xy5pZGVudGl0eV0gVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIHNsaWNlIG9mIGBhcnJheWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciB1c2VycyA9IFtcbiAgICAgKiAgIHsgJ3VzZXInOiAnYmFybmV5JywgICdhY3RpdmUnOiBmYWxzZSB9LFxuICAgICAqICAgeyAndXNlcic6ICdmcmVkJywgICAgJ2FjdGl2ZSc6IGZhbHNlIH0sXG4gICAgICogICB7ICd1c2VyJzogJ3BlYmJsZXMnLCAnYWN0aXZlJzogdHJ1ZSB9XG4gICAgICogXTtcbiAgICAgKlxuICAgICAqIF8uZHJvcFdoaWxlKHVzZXJzLCBmdW5jdGlvbihvKSB7IHJldHVybiAhby5hY3RpdmU7IH0pO1xuICAgICAqIC8vID0+IG9iamVjdHMgZm9yIFsncGViYmxlcyddXG4gICAgICpcbiAgICAgKiAvLyBUaGUgYF8ubWF0Y2hlc2AgaXRlcmF0ZWUgc2hvcnRoYW5kLlxuICAgICAqIF8uZHJvcFdoaWxlKHVzZXJzLCB7ICd1c2VyJzogJ2Jhcm5leScsICdhY3RpdmUnOiBmYWxzZSB9KTtcbiAgICAgKiAvLyA9PiBvYmplY3RzIGZvciBbJ2ZyZWQnLCAncGViYmxlcyddXG4gICAgICpcbiAgICAgKiAvLyBUaGUgYF8ubWF0Y2hlc1Byb3BlcnR5YCBpdGVyYXRlZSBzaG9ydGhhbmQuXG4gICAgICogXy5kcm9wV2hpbGUodXNlcnMsIFsnYWN0aXZlJywgZmFsc2VdKTtcbiAgICAgKiAvLyA9PiBvYmplY3RzIGZvciBbJ3BlYmJsZXMnXVxuICAgICAqXG4gICAgICogLy8gVGhlIGBfLnByb3BlcnR5YCBpdGVyYXRlZSBzaG9ydGhhbmQuXG4gICAgICogXy5kcm9wV2hpbGUodXNlcnMsICdhY3RpdmUnKTtcbiAgICAgKiAvLyA9PiBvYmplY3RzIGZvciBbJ2Jhcm5leScsICdmcmVkJywgJ3BlYmJsZXMnXVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGRyb3BXaGlsZShhcnJheSwgcHJlZGljYXRlKSB7XG4gICAgICByZXR1cm4gKGFycmF5ICYmIGFycmF5Lmxlbmd0aClcbiAgICAgICAgPyBiYXNlV2hpbGUoYXJyYXksIGdldEl0ZXJhdGVlKHByZWRpY2F0ZSwgMyksIHRydWUpXG4gICAgICAgIDogW107XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogRmlsbHMgZWxlbWVudHMgb2YgYGFycmF5YCB3aXRoIGB2YWx1ZWAgZnJvbSBgc3RhcnRgIHVwIHRvLCBidXQgbm90XG4gICAgICogaW5jbHVkaW5nLCBgZW5kYC5cbiAgICAgKlxuICAgICAqICoqTm90ZToqKiBUaGlzIG1ldGhvZCBtdXRhdGVzIGBhcnJheWAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMy4yLjBcbiAgICAgKiBAY2F0ZWdvcnkgQXJyYXlcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gZmlsbC5cbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBmaWxsIGBhcnJheWAgd2l0aC5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW3N0YXJ0PTBdIFRoZSBzdGFydCBwb3NpdGlvbi5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW2VuZD1hcnJheS5sZW5ndGhdIFRoZSBlbmQgcG9zaXRpb24uXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIGBhcnJheWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBhcnJheSA9IFsxLCAyLCAzXTtcbiAgICAgKlxuICAgICAqIF8uZmlsbChhcnJheSwgJ2EnKTtcbiAgICAgKiBjb25zb2xlLmxvZyhhcnJheSk7XG4gICAgICogLy8gPT4gWydhJywgJ2EnLCAnYSddXG4gICAgICpcbiAgICAgKiBfLmZpbGwoQXJyYXkoMyksIDIpO1xuICAgICAqIC8vID0+IFsyLCAyLCAyXVxuICAgICAqXG4gICAgICogXy5maWxsKFs0LCA2LCA4LCAxMF0sICcqJywgMSwgMyk7XG4gICAgICogLy8gPT4gWzQsICcqJywgJyonLCAxMF1cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBmaWxsKGFycmF5LCB2YWx1ZSwgc3RhcnQsIGVuZCkge1xuICAgICAgdmFyIGxlbmd0aCA9IGFycmF5ID09IG51bGwgPyAwIDogYXJyYXkubGVuZ3RoO1xuICAgICAgaWYgKCFsZW5ndGgpIHtcbiAgICAgICAgcmV0dXJuIFtdO1xuICAgICAgfVxuICAgICAgaWYgKHN0YXJ0ICYmIHR5cGVvZiBzdGFydCAhPSAnbnVtYmVyJyAmJiBpc0l0ZXJhdGVlQ2FsbChhcnJheSwgdmFsdWUsIHN0YXJ0KSkge1xuICAgICAgICBzdGFydCA9IDA7XG4gICAgICAgIGVuZCA9IGxlbmd0aDtcbiAgICAgIH1cbiAgICAgIHJldHVybiBiYXNlRmlsbChhcnJheSwgdmFsdWUsIHN0YXJ0LCBlbmQpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIGlzIGxpa2UgYF8uZmluZGAgZXhjZXB0IHRoYXQgaXQgcmV0dXJucyB0aGUgaW5kZXggb2YgdGhlIGZpcnN0XG4gICAgICogZWxlbWVudCBgcHJlZGljYXRlYCByZXR1cm5zIHRydXRoeSBmb3IgaW5zdGVhZCBvZiB0aGUgZWxlbWVudCBpdHNlbGYuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMS4xLjBcbiAgICAgKiBAY2F0ZWdvcnkgQXJyYXlcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gaW5zcGVjdC5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbcHJlZGljYXRlPV8uaWRlbnRpdHldIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFtmcm9tSW5kZXg9MF0gVGhlIGluZGV4IHRvIHNlYXJjaCBmcm9tLlxuICAgICAqIEByZXR1cm5zIHtudW1iZXJ9IFJldHVybnMgdGhlIGluZGV4IG9mIHRoZSBmb3VuZCBlbGVtZW50LCBlbHNlIGAtMWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciB1c2VycyA9IFtcbiAgICAgKiAgIHsgJ3VzZXInOiAnYmFybmV5JywgICdhY3RpdmUnOiBmYWxzZSB9LFxuICAgICAqICAgeyAndXNlcic6ICdmcmVkJywgICAgJ2FjdGl2ZSc6IGZhbHNlIH0sXG4gICAgICogICB7ICd1c2VyJzogJ3BlYmJsZXMnLCAnYWN0aXZlJzogdHJ1ZSB9XG4gICAgICogXTtcbiAgICAgKlxuICAgICAqIF8uZmluZEluZGV4KHVzZXJzLCBmdW5jdGlvbihvKSB7IHJldHVybiBvLnVzZXIgPT0gJ2Jhcm5leSc7IH0pO1xuICAgICAqIC8vID0+IDBcbiAgICAgKlxuICAgICAqIC8vIFRoZSBgXy5tYXRjaGVzYCBpdGVyYXRlZSBzaG9ydGhhbmQuXG4gICAgICogXy5maW5kSW5kZXgodXNlcnMsIHsgJ3VzZXInOiAnZnJlZCcsICdhY3RpdmUnOiBmYWxzZSB9KTtcbiAgICAgKiAvLyA9PiAxXG4gICAgICpcbiAgICAgKiAvLyBUaGUgYF8ubWF0Y2hlc1Byb3BlcnR5YCBpdGVyYXRlZSBzaG9ydGhhbmQuXG4gICAgICogXy5maW5kSW5kZXgodXNlcnMsIFsnYWN0aXZlJywgZmFsc2VdKTtcbiAgICAgKiAvLyA9PiAwXG4gICAgICpcbiAgICAgKiAvLyBUaGUgYF8ucHJvcGVydHlgIGl0ZXJhdGVlIHNob3J0aGFuZC5cbiAgICAgKiBfLmZpbmRJbmRleCh1c2VycywgJ2FjdGl2ZScpO1xuICAgICAqIC8vID0+IDJcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBmaW5kSW5kZXgoYXJyYXksIHByZWRpY2F0ZSwgZnJvbUluZGV4KSB7XG4gICAgICB2YXIgbGVuZ3RoID0gYXJyYXkgPT0gbnVsbCA/IDAgOiBhcnJheS5sZW5ndGg7XG4gICAgICBpZiAoIWxlbmd0aCkge1xuICAgICAgICByZXR1cm4gLTE7XG4gICAgICB9XG4gICAgICB2YXIgaW5kZXggPSBmcm9tSW5kZXggPT0gbnVsbCA/IDAgOiB0b0ludGVnZXIoZnJvbUluZGV4KTtcbiAgICAgIGlmIChpbmRleCA8IDApIHtcbiAgICAgICAgaW5kZXggPSBuYXRpdmVNYXgobGVuZ3RoICsgaW5kZXgsIDApO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGJhc2VGaW5kSW5kZXgoYXJyYXksIGdldEl0ZXJhdGVlKHByZWRpY2F0ZSwgMyksIGluZGV4KTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCBpcyBsaWtlIGBfLmZpbmRJbmRleGAgZXhjZXB0IHRoYXQgaXQgaXRlcmF0ZXMgb3ZlciBlbGVtZW50c1xuICAgICAqIG9mIGBjb2xsZWN0aW9uYCBmcm9tIHJpZ2h0IHRvIGxlZnQuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMi4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgQXJyYXlcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gaW5zcGVjdC5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbcHJlZGljYXRlPV8uaWRlbnRpdHldIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFtmcm9tSW5kZXg9YXJyYXkubGVuZ3RoLTFdIFRoZSBpbmRleCB0byBzZWFyY2ggZnJvbS5cbiAgICAgKiBAcmV0dXJucyB7bnVtYmVyfSBSZXR1cm5zIHRoZSBpbmRleCBvZiB0aGUgZm91bmQgZWxlbWVudCwgZWxzZSBgLTFgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgdXNlcnMgPSBbXG4gICAgICogICB7ICd1c2VyJzogJ2Jhcm5leScsICAnYWN0aXZlJzogdHJ1ZSB9LFxuICAgICAqICAgeyAndXNlcic6ICdmcmVkJywgICAgJ2FjdGl2ZSc6IGZhbHNlIH0sXG4gICAgICogICB7ICd1c2VyJzogJ3BlYmJsZXMnLCAnYWN0aXZlJzogZmFsc2UgfVxuICAgICAqIF07XG4gICAgICpcbiAgICAgKiBfLmZpbmRMYXN0SW5kZXgodXNlcnMsIGZ1bmN0aW9uKG8pIHsgcmV0dXJuIG8udXNlciA9PSAncGViYmxlcyc7IH0pO1xuICAgICAqIC8vID0+IDJcbiAgICAgKlxuICAgICAqIC8vIFRoZSBgXy5tYXRjaGVzYCBpdGVyYXRlZSBzaG9ydGhhbmQuXG4gICAgICogXy5maW5kTGFzdEluZGV4KHVzZXJzLCB7ICd1c2VyJzogJ2Jhcm5leScsICdhY3RpdmUnOiB0cnVlIH0pO1xuICAgICAqIC8vID0+IDBcbiAgICAgKlxuICAgICAqIC8vIFRoZSBgXy5tYXRjaGVzUHJvcGVydHlgIGl0ZXJhdGVlIHNob3J0aGFuZC5cbiAgICAgKiBfLmZpbmRMYXN0SW5kZXgodXNlcnMsIFsnYWN0aXZlJywgZmFsc2VdKTtcbiAgICAgKiAvLyA9PiAyXG4gICAgICpcbiAgICAgKiAvLyBUaGUgYF8ucHJvcGVydHlgIGl0ZXJhdGVlIHNob3J0aGFuZC5cbiAgICAgKiBfLmZpbmRMYXN0SW5kZXgodXNlcnMsICdhY3RpdmUnKTtcbiAgICAgKiAvLyA9PiAwXG4gICAgICovXG4gICAgZnVuY3Rpb24gZmluZExhc3RJbmRleChhcnJheSwgcHJlZGljYXRlLCBmcm9tSW5kZXgpIHtcbiAgICAgIHZhciBsZW5ndGggPSBhcnJheSA9PSBudWxsID8gMCA6IGFycmF5Lmxlbmd0aDtcbiAgICAgIGlmICghbGVuZ3RoKSB7XG4gICAgICAgIHJldHVybiAtMTtcbiAgICAgIH1cbiAgICAgIHZhciBpbmRleCA9IGxlbmd0aCAtIDE7XG4gICAgICBpZiAoZnJvbUluZGV4ICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgaW5kZXggPSB0b0ludGVnZXIoZnJvbUluZGV4KTtcbiAgICAgICAgaW5kZXggPSBmcm9tSW5kZXggPCAwXG4gICAgICAgICAgPyBuYXRpdmVNYXgobGVuZ3RoICsgaW5kZXgsIDApXG4gICAgICAgICAgOiBuYXRpdmVNaW4oaW5kZXgsIGxlbmd0aCAtIDEpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGJhc2VGaW5kSW5kZXgoYXJyYXksIGdldEl0ZXJhdGVlKHByZWRpY2F0ZSwgMyksIGluZGV4LCB0cnVlKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBGbGF0dGVucyBgYXJyYXlgIGEgc2luZ2xlIGxldmVsIGRlZXAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAY2F0ZWdvcnkgQXJyYXlcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gZmxhdHRlbi5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIG5ldyBmbGF0dGVuZWQgYXJyYXkuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uZmxhdHRlbihbMSwgWzIsIFszLCBbNF1dLCA1XV0pO1xuICAgICAqIC8vID0+IFsxLCAyLCBbMywgWzRdXSwgNV1cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBmbGF0dGVuKGFycmF5KSB7XG4gICAgICB2YXIgbGVuZ3RoID0gYXJyYXkgPT0gbnVsbCA/IDAgOiBhcnJheS5sZW5ndGg7XG4gICAgICByZXR1cm4gbGVuZ3RoID8gYmFzZUZsYXR0ZW4oYXJyYXksIDEpIDogW107XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUmVjdXJzaXZlbHkgZmxhdHRlbnMgYGFycmF5YC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAzLjAuMFxuICAgICAqIEBjYXRlZ29yeSBBcnJheVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBmbGF0dGVuLlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgbmV3IGZsYXR0ZW5lZCBhcnJheS5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5mbGF0dGVuRGVlcChbMSwgWzIsIFszLCBbNF1dLCA1XV0pO1xuICAgICAqIC8vID0+IFsxLCAyLCAzLCA0LCA1XVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGZsYXR0ZW5EZWVwKGFycmF5KSB7XG4gICAgICB2YXIgbGVuZ3RoID0gYXJyYXkgPT0gbnVsbCA/IDAgOiBhcnJheS5sZW5ndGg7XG4gICAgICByZXR1cm4gbGVuZ3RoID8gYmFzZUZsYXR0ZW4oYXJyYXksIElORklOSVRZKSA6IFtdO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFJlY3Vyc2l2ZWx5IGZsYXR0ZW4gYGFycmF5YCB1cCB0byBgZGVwdGhgIHRpbWVzLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuNC4wXG4gICAgICogQGNhdGVnb3J5IEFycmF5XG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIGZsYXR0ZW4uXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFtkZXB0aD0xXSBUaGUgbWF4aW11bSByZWN1cnNpb24gZGVwdGguXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBuZXcgZmxhdHRlbmVkIGFycmF5LlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgYXJyYXkgPSBbMSwgWzIsIFszLCBbNF1dLCA1XV07XG4gICAgICpcbiAgICAgKiBfLmZsYXR0ZW5EZXB0aChhcnJheSwgMSk7XG4gICAgICogLy8gPT4gWzEsIDIsIFszLCBbNF1dLCA1XVxuICAgICAqXG4gICAgICogXy5mbGF0dGVuRGVwdGgoYXJyYXksIDIpO1xuICAgICAqIC8vID0+IFsxLCAyLCAzLCBbNF0sIDVdXG4gICAgICovXG4gICAgZnVuY3Rpb24gZmxhdHRlbkRlcHRoKGFycmF5LCBkZXB0aCkge1xuICAgICAgdmFyIGxlbmd0aCA9IGFycmF5ID09IG51bGwgPyAwIDogYXJyYXkubGVuZ3RoO1xuICAgICAgaWYgKCFsZW5ndGgpIHtcbiAgICAgICAgcmV0dXJuIFtdO1xuICAgICAgfVxuICAgICAgZGVwdGggPSBkZXB0aCA9PT0gdW5kZWZpbmVkID8gMSA6IHRvSW50ZWdlcihkZXB0aCk7XG4gICAgICByZXR1cm4gYmFzZUZsYXR0ZW4oYXJyYXksIGRlcHRoKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgaW52ZXJzZSBvZiBgXy50b1BhaXJzYDsgdGhpcyBtZXRob2QgcmV0dXJucyBhbiBvYmplY3QgY29tcG9zZWRcbiAgICAgKiBmcm9tIGtleS12YWx1ZSBgcGFpcnNgLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IEFycmF5XG4gICAgICogQHBhcmFtIHtBcnJheX0gcGFpcnMgVGhlIGtleS12YWx1ZSBwYWlycy5cbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIHRoZSBuZXcgb2JqZWN0LlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmZyb21QYWlycyhbWydhJywgMV0sIFsnYicsIDJdXSk7XG4gICAgICogLy8gPT4geyAnYSc6IDEsICdiJzogMiB9XG4gICAgICovXG4gICAgZnVuY3Rpb24gZnJvbVBhaXJzKHBhaXJzKSB7XG4gICAgICB2YXIgaW5kZXggPSAtMSxcbiAgICAgICAgICBsZW5ndGggPSBwYWlycyA9PSBudWxsID8gMCA6IHBhaXJzLmxlbmd0aCxcbiAgICAgICAgICByZXN1bHQgPSB7fTtcblxuICAgICAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICAgICAgdmFyIHBhaXIgPSBwYWlyc1tpbmRleF07XG4gICAgICAgIHJlc3VsdFtwYWlyWzBdXSA9IHBhaXJbMV07XG4gICAgICB9XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEdldHMgdGhlIGZpcnN0IGVsZW1lbnQgb2YgYGFycmF5YC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBhbGlhcyBmaXJzdFxuICAgICAqIEBjYXRlZ29yeSBBcnJheVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBxdWVyeS5cbiAgICAgKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgZmlyc3QgZWxlbWVudCBvZiBgYXJyYXlgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmhlYWQoWzEsIDIsIDNdKTtcbiAgICAgKiAvLyA9PiAxXG4gICAgICpcbiAgICAgKiBfLmhlYWQoW10pO1xuICAgICAqIC8vID0+IHVuZGVmaW5lZFxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGhlYWQoYXJyYXkpIHtcbiAgICAgIHJldHVybiAoYXJyYXkgJiYgYXJyYXkubGVuZ3RoKSA/IGFycmF5WzBdIDogdW5kZWZpbmVkO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEdldHMgdGhlIGluZGV4IGF0IHdoaWNoIHRoZSBmaXJzdCBvY2N1cnJlbmNlIG9mIGB2YWx1ZWAgaXMgZm91bmQgaW4gYGFycmF5YFxuICAgICAqIHVzaW5nIFtgU2FtZVZhbHVlWmVyb2BdKGh0dHA6Ly9lY21hLWludGVybmF0aW9uYWwub3JnL2VjbWEtMjYyLzcuMC8jc2VjLXNhbWV2YWx1ZXplcm8pXG4gICAgICogZm9yIGVxdWFsaXR5IGNvbXBhcmlzb25zLiBJZiBgZnJvbUluZGV4YCBpcyBuZWdhdGl2ZSwgaXQncyB1c2VkIGFzIHRoZVxuICAgICAqIG9mZnNldCBmcm9tIHRoZSBlbmQgb2YgYGFycmF5YC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBjYXRlZ29yeSBBcnJheVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBpbnNwZWN0LlxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIHNlYXJjaCBmb3IuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFtmcm9tSW5kZXg9MF0gVGhlIGluZGV4IHRvIHNlYXJjaCBmcm9tLlxuICAgICAqIEByZXR1cm5zIHtudW1iZXJ9IFJldHVybnMgdGhlIGluZGV4IG9mIHRoZSBtYXRjaGVkIHZhbHVlLCBlbHNlIGAtMWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uaW5kZXhPZihbMSwgMiwgMSwgMl0sIDIpO1xuICAgICAqIC8vID0+IDFcbiAgICAgKlxuICAgICAqIC8vIFNlYXJjaCBmcm9tIHRoZSBgZnJvbUluZGV4YC5cbiAgICAgKiBfLmluZGV4T2YoWzEsIDIsIDEsIDJdLCAyLCAyKTtcbiAgICAgKiAvLyA9PiAzXG4gICAgICovXG4gICAgZnVuY3Rpb24gaW5kZXhPZihhcnJheSwgdmFsdWUsIGZyb21JbmRleCkge1xuICAgICAgdmFyIGxlbmd0aCA9IGFycmF5ID09IG51bGwgPyAwIDogYXJyYXkubGVuZ3RoO1xuICAgICAgaWYgKCFsZW5ndGgpIHtcbiAgICAgICAgcmV0dXJuIC0xO1xuICAgICAgfVxuICAgICAgdmFyIGluZGV4ID0gZnJvbUluZGV4ID09IG51bGwgPyAwIDogdG9JbnRlZ2VyKGZyb21JbmRleCk7XG4gICAgICBpZiAoaW5kZXggPCAwKSB7XG4gICAgICAgIGluZGV4ID0gbmF0aXZlTWF4KGxlbmd0aCArIGluZGV4LCAwKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBiYXNlSW5kZXhPZihhcnJheSwgdmFsdWUsIGluZGV4KTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBHZXRzIGFsbCBidXQgdGhlIGxhc3QgZWxlbWVudCBvZiBgYXJyYXlgLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDAuMS4wXG4gICAgICogQGNhdGVnb3J5IEFycmF5XG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIHF1ZXJ5LlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgc2xpY2Ugb2YgYGFycmF5YC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5pbml0aWFsKFsxLCAyLCAzXSk7XG4gICAgICogLy8gPT4gWzEsIDJdXG4gICAgICovXG4gICAgZnVuY3Rpb24gaW5pdGlhbChhcnJheSkge1xuICAgICAgdmFyIGxlbmd0aCA9IGFycmF5ID09IG51bGwgPyAwIDogYXJyYXkubGVuZ3RoO1xuICAgICAgcmV0dXJuIGxlbmd0aCA/IGJhc2VTbGljZShhcnJheSwgMCwgLTEpIDogW107XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhbiBhcnJheSBvZiB1bmlxdWUgdmFsdWVzIHRoYXQgYXJlIGluY2x1ZGVkIGluIGFsbCBnaXZlbiBhcnJheXNcbiAgICAgKiB1c2luZyBbYFNhbWVWYWx1ZVplcm9gXShodHRwOi8vZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi83LjAvI3NlYy1zYW1ldmFsdWV6ZXJvKVxuICAgICAqIGZvciBlcXVhbGl0eSBjb21wYXJpc29ucy4gVGhlIG9yZGVyIGFuZCByZWZlcmVuY2VzIG9mIHJlc3VsdCB2YWx1ZXMgYXJlXG4gICAgICogZGV0ZXJtaW5lZCBieSB0aGUgZmlyc3QgYXJyYXkuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAY2F0ZWdvcnkgQXJyYXlcbiAgICAgKiBAcGFyYW0gey4uLkFycmF5fSBbYXJyYXlzXSBUaGUgYXJyYXlzIHRvIGluc3BlY3QuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBuZXcgYXJyYXkgb2YgaW50ZXJzZWN0aW5nIHZhbHVlcy5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5pbnRlcnNlY3Rpb24oWzIsIDFdLCBbMiwgM10pO1xuICAgICAqIC8vID0+IFsyXVxuICAgICAqL1xuICAgIHZhciBpbnRlcnNlY3Rpb24gPSBiYXNlUmVzdChmdW5jdGlvbihhcnJheXMpIHtcbiAgICAgIHZhciBtYXBwZWQgPSBhcnJheU1hcChhcnJheXMsIGNhc3RBcnJheUxpa2VPYmplY3QpO1xuICAgICAgcmV0dXJuIChtYXBwZWQubGVuZ3RoICYmIG1hcHBlZFswXSA9PT0gYXJyYXlzWzBdKVxuICAgICAgICA/IGJhc2VJbnRlcnNlY3Rpb24obWFwcGVkKVxuICAgICAgICA6IFtdO1xuICAgIH0pO1xuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgaXMgbGlrZSBgXy5pbnRlcnNlY3Rpb25gIGV4Y2VwdCB0aGF0IGl0IGFjY2VwdHMgYGl0ZXJhdGVlYFxuICAgICAqIHdoaWNoIGlzIGludm9rZWQgZm9yIGVhY2ggZWxlbWVudCBvZiBlYWNoIGBhcnJheXNgIHRvIGdlbmVyYXRlIHRoZSBjcml0ZXJpb25cbiAgICAgKiBieSB3aGljaCB0aGV5J3JlIGNvbXBhcmVkLiBUaGUgb3JkZXIgYW5kIHJlZmVyZW5jZXMgb2YgcmVzdWx0IHZhbHVlcyBhcmVcbiAgICAgKiBkZXRlcm1pbmVkIGJ5IHRoZSBmaXJzdCBhcnJheS4gVGhlIGl0ZXJhdGVlIGlzIGludm9rZWQgd2l0aCBvbmUgYXJndW1lbnQ6XG4gICAgICogKHZhbHVlKS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBBcnJheVxuICAgICAqIEBwYXJhbSB7Li4uQXJyYXl9IFthcnJheXNdIFRoZSBhcnJheXMgdG8gaW5zcGVjdC5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbaXRlcmF0ZWU9Xy5pZGVudGl0eV0gVGhlIGl0ZXJhdGVlIGludm9rZWQgcGVyIGVsZW1lbnQuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBuZXcgYXJyYXkgb2YgaW50ZXJzZWN0aW5nIHZhbHVlcy5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5pbnRlcnNlY3Rpb25CeShbMi4xLCAxLjJdLCBbMi4zLCAzLjRdLCBNYXRoLmZsb29yKTtcbiAgICAgKiAvLyA9PiBbMi4xXVxuICAgICAqXG4gICAgICogLy8gVGhlIGBfLnByb3BlcnR5YCBpdGVyYXRlZSBzaG9ydGhhbmQuXG4gICAgICogXy5pbnRlcnNlY3Rpb25CeShbeyAneCc6IDEgfV0sIFt7ICd4JzogMiB9LCB7ICd4JzogMSB9XSwgJ3gnKTtcbiAgICAgKiAvLyA9PiBbeyAneCc6IDEgfV1cbiAgICAgKi9cbiAgICB2YXIgaW50ZXJzZWN0aW9uQnkgPSBiYXNlUmVzdChmdW5jdGlvbihhcnJheXMpIHtcbiAgICAgIHZhciBpdGVyYXRlZSA9IGxhc3QoYXJyYXlzKSxcbiAgICAgICAgICBtYXBwZWQgPSBhcnJheU1hcChhcnJheXMsIGNhc3RBcnJheUxpa2VPYmplY3QpO1xuXG4gICAgICBpZiAoaXRlcmF0ZWUgPT09IGxhc3QobWFwcGVkKSkge1xuICAgICAgICBpdGVyYXRlZSA9IHVuZGVmaW5lZDtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIG1hcHBlZC5wb3AoKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiAobWFwcGVkLmxlbmd0aCAmJiBtYXBwZWRbMF0gPT09IGFycmF5c1swXSlcbiAgICAgICAgPyBiYXNlSW50ZXJzZWN0aW9uKG1hcHBlZCwgZ2V0SXRlcmF0ZWUoaXRlcmF0ZWUsIDIpKVxuICAgICAgICA6IFtdO1xuICAgIH0pO1xuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgaXMgbGlrZSBgXy5pbnRlcnNlY3Rpb25gIGV4Y2VwdCB0aGF0IGl0IGFjY2VwdHMgYGNvbXBhcmF0b3JgXG4gICAgICogd2hpY2ggaXMgaW52b2tlZCB0byBjb21wYXJlIGVsZW1lbnRzIG9mIGBhcnJheXNgLiBUaGUgb3JkZXIgYW5kIHJlZmVyZW5jZXNcbiAgICAgKiBvZiByZXN1bHQgdmFsdWVzIGFyZSBkZXRlcm1pbmVkIGJ5IHRoZSBmaXJzdCBhcnJheS4gVGhlIGNvbXBhcmF0b3IgaXNcbiAgICAgKiBpbnZva2VkIHdpdGggdHdvIGFyZ3VtZW50czogKGFyclZhbCwgb3RoVmFsKS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBBcnJheVxuICAgICAqIEBwYXJhbSB7Li4uQXJyYXl9IFthcnJheXNdIFRoZSBhcnJheXMgdG8gaW5zcGVjdC5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbY29tcGFyYXRvcl0gVGhlIGNvbXBhcmF0b3IgaW52b2tlZCBwZXIgZWxlbWVudC5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIG5ldyBhcnJheSBvZiBpbnRlcnNlY3RpbmcgdmFsdWVzLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgb2JqZWN0cyA9IFt7ICd4JzogMSwgJ3knOiAyIH0sIHsgJ3gnOiAyLCAneSc6IDEgfV07XG4gICAgICogdmFyIG90aGVycyA9IFt7ICd4JzogMSwgJ3knOiAxIH0sIHsgJ3gnOiAxLCAneSc6IDIgfV07XG4gICAgICpcbiAgICAgKiBfLmludGVyc2VjdGlvbldpdGgob2JqZWN0cywgb3RoZXJzLCBfLmlzRXF1YWwpO1xuICAgICAqIC8vID0+IFt7ICd4JzogMSwgJ3knOiAyIH1dXG4gICAgICovXG4gICAgdmFyIGludGVyc2VjdGlvbldpdGggPSBiYXNlUmVzdChmdW5jdGlvbihhcnJheXMpIHtcbiAgICAgIHZhciBjb21wYXJhdG9yID0gbGFzdChhcnJheXMpLFxuICAgICAgICAgIG1hcHBlZCA9IGFycmF5TWFwKGFycmF5cywgY2FzdEFycmF5TGlrZU9iamVjdCk7XG5cbiAgICAgIGNvbXBhcmF0b3IgPSB0eXBlb2YgY29tcGFyYXRvciA9PSAnZnVuY3Rpb24nID8gY29tcGFyYXRvciA6IHVuZGVmaW5lZDtcbiAgICAgIGlmIChjb21wYXJhdG9yKSB7XG4gICAgICAgIG1hcHBlZC5wb3AoKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiAobWFwcGVkLmxlbmd0aCAmJiBtYXBwZWRbMF0gPT09IGFycmF5c1swXSlcbiAgICAgICAgPyBiYXNlSW50ZXJzZWN0aW9uKG1hcHBlZCwgdW5kZWZpbmVkLCBjb21wYXJhdG9yKVxuICAgICAgICA6IFtdO1xuICAgIH0pO1xuXG4gICAgLyoqXG4gICAgICogQ29udmVydHMgYWxsIGVsZW1lbnRzIGluIGBhcnJheWAgaW50byBhIHN0cmluZyBzZXBhcmF0ZWQgYnkgYHNlcGFyYXRvcmAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgQXJyYXlcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gY29udmVydC5cbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gW3NlcGFyYXRvcj0nLCddIFRoZSBlbGVtZW50IHNlcGFyYXRvci5cbiAgICAgKiBAcmV0dXJucyB7c3RyaW5nfSBSZXR1cm5zIHRoZSBqb2luZWQgc3RyaW5nLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmpvaW4oWydhJywgJ2InLCAnYyddLCAnficpO1xuICAgICAqIC8vID0+ICdhfmJ+YydcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBqb2luKGFycmF5LCBzZXBhcmF0b3IpIHtcbiAgICAgIHJldHVybiBhcnJheSA9PSBudWxsID8gJycgOiBuYXRpdmVKb2luLmNhbGwoYXJyYXksIHNlcGFyYXRvcik7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogR2V0cyB0aGUgbGFzdCBlbGVtZW50IG9mIGBhcnJheWAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAY2F0ZWdvcnkgQXJyYXlcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gcXVlcnkuXG4gICAgICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIGxhc3QgZWxlbWVudCBvZiBgYXJyYXlgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmxhc3QoWzEsIDIsIDNdKTtcbiAgICAgKiAvLyA9PiAzXG4gICAgICovXG4gICAgZnVuY3Rpb24gbGFzdChhcnJheSkge1xuICAgICAgdmFyIGxlbmd0aCA9IGFycmF5ID09IG51bGwgPyAwIDogYXJyYXkubGVuZ3RoO1xuICAgICAgcmV0dXJuIGxlbmd0aCA/IGFycmF5W2xlbmd0aCAtIDFdIDogdW5kZWZpbmVkO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIGlzIGxpa2UgYF8uaW5kZXhPZmAgZXhjZXB0IHRoYXQgaXQgaXRlcmF0ZXMgb3ZlciBlbGVtZW50cyBvZlxuICAgICAqIGBhcnJheWAgZnJvbSByaWdodCB0byBsZWZ0LlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDAuMS4wXG4gICAgICogQGNhdGVnb3J5IEFycmF5XG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIGluc3BlY3QuXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gc2VhcmNoIGZvci5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW2Zyb21JbmRleD1hcnJheS5sZW5ndGgtMV0gVGhlIGluZGV4IHRvIHNlYXJjaCBmcm9tLlxuICAgICAqIEByZXR1cm5zIHtudW1iZXJ9IFJldHVybnMgdGhlIGluZGV4IG9mIHRoZSBtYXRjaGVkIHZhbHVlLCBlbHNlIGAtMWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8ubGFzdEluZGV4T2YoWzEsIDIsIDEsIDJdLCAyKTtcbiAgICAgKiAvLyA9PiAzXG4gICAgICpcbiAgICAgKiAvLyBTZWFyY2ggZnJvbSB0aGUgYGZyb21JbmRleGAuXG4gICAgICogXy5sYXN0SW5kZXhPZihbMSwgMiwgMSwgMl0sIDIsIDIpO1xuICAgICAqIC8vID0+IDFcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBsYXN0SW5kZXhPZihhcnJheSwgdmFsdWUsIGZyb21JbmRleCkge1xuICAgICAgdmFyIGxlbmd0aCA9IGFycmF5ID09IG51bGwgPyAwIDogYXJyYXkubGVuZ3RoO1xuICAgICAgaWYgKCFsZW5ndGgpIHtcbiAgICAgICAgcmV0dXJuIC0xO1xuICAgICAgfVxuICAgICAgdmFyIGluZGV4ID0gbGVuZ3RoO1xuICAgICAgaWYgKGZyb21JbmRleCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIGluZGV4ID0gdG9JbnRlZ2VyKGZyb21JbmRleCk7XG4gICAgICAgIGluZGV4ID0gaW5kZXggPCAwID8gbmF0aXZlTWF4KGxlbmd0aCArIGluZGV4LCAwKSA6IG5hdGl2ZU1pbihpbmRleCwgbGVuZ3RoIC0gMSk7XG4gICAgICB9XG4gICAgICByZXR1cm4gdmFsdWUgPT09IHZhbHVlXG4gICAgICAgID8gc3RyaWN0TGFzdEluZGV4T2YoYXJyYXksIHZhbHVlLCBpbmRleClcbiAgICAgICAgOiBiYXNlRmluZEluZGV4KGFycmF5LCBiYXNlSXNOYU4sIGluZGV4LCB0cnVlKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBHZXRzIHRoZSBlbGVtZW50IGF0IGluZGV4IGBuYCBvZiBgYXJyYXlgLiBJZiBgbmAgaXMgbmVnYXRpdmUsIHRoZSBudGhcbiAgICAgKiBlbGVtZW50IGZyb20gdGhlIGVuZCBpcyByZXR1cm5lZC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjExLjBcbiAgICAgKiBAY2F0ZWdvcnkgQXJyYXlcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gcXVlcnkuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFtuPTBdIFRoZSBpbmRleCBvZiB0aGUgZWxlbWVudCB0byByZXR1cm4uXG4gICAgICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIG50aCBlbGVtZW50IG9mIGBhcnJheWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBhcnJheSA9IFsnYScsICdiJywgJ2MnLCAnZCddO1xuICAgICAqXG4gICAgICogXy5udGgoYXJyYXksIDEpO1xuICAgICAqIC8vID0+ICdiJ1xuICAgICAqXG4gICAgICogXy5udGgoYXJyYXksIC0yKTtcbiAgICAgKiAvLyA9PiAnYyc7XG4gICAgICovXG4gICAgZnVuY3Rpb24gbnRoKGFycmF5LCBuKSB7XG4gICAgICByZXR1cm4gKGFycmF5ICYmIGFycmF5Lmxlbmd0aCkgPyBiYXNlTnRoKGFycmF5LCB0b0ludGVnZXIobikpIDogdW5kZWZpbmVkO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFJlbW92ZXMgYWxsIGdpdmVuIHZhbHVlcyBmcm9tIGBhcnJheWAgdXNpbmdcbiAgICAgKiBbYFNhbWVWYWx1ZVplcm9gXShodHRwOi8vZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi83LjAvI3NlYy1zYW1ldmFsdWV6ZXJvKVxuICAgICAqIGZvciBlcXVhbGl0eSBjb21wYXJpc29ucy5cbiAgICAgKlxuICAgICAqICoqTm90ZToqKiBVbmxpa2UgYF8ud2l0aG91dGAsIHRoaXMgbWV0aG9kIG11dGF0ZXMgYGFycmF5YC4gVXNlIGBfLnJlbW92ZWBcbiAgICAgKiB0byByZW1vdmUgZWxlbWVudHMgZnJvbSBhbiBhcnJheSBieSBwcmVkaWNhdGUuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMi4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgQXJyYXlcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gbW9kaWZ5LlxuICAgICAqIEBwYXJhbSB7Li4uKn0gW3ZhbHVlc10gVGhlIHZhbHVlcyB0byByZW1vdmUuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIGBhcnJheWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBhcnJheSA9IFsnYScsICdiJywgJ2MnLCAnYScsICdiJywgJ2MnXTtcbiAgICAgKlxuICAgICAqIF8ucHVsbChhcnJheSwgJ2EnLCAnYycpO1xuICAgICAqIGNvbnNvbGUubG9nKGFycmF5KTtcbiAgICAgKiAvLyA9PiBbJ2InLCAnYiddXG4gICAgICovXG4gICAgdmFyIHB1bGwgPSBiYXNlUmVzdChwdWxsQWxsKTtcblxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIGlzIGxpa2UgYF8ucHVsbGAgZXhjZXB0IHRoYXQgaXQgYWNjZXB0cyBhbiBhcnJheSBvZiB2YWx1ZXMgdG8gcmVtb3ZlLlxuICAgICAqXG4gICAgICogKipOb3RlOioqIFVubGlrZSBgXy5kaWZmZXJlbmNlYCwgdGhpcyBtZXRob2QgbXV0YXRlcyBgYXJyYXlgLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IEFycmF5XG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIG1vZGlmeS5cbiAgICAgKiBAcGFyYW0ge0FycmF5fSB2YWx1ZXMgVGhlIHZhbHVlcyB0byByZW1vdmUuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIGBhcnJheWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBhcnJheSA9IFsnYScsICdiJywgJ2MnLCAnYScsICdiJywgJ2MnXTtcbiAgICAgKlxuICAgICAqIF8ucHVsbEFsbChhcnJheSwgWydhJywgJ2MnXSk7XG4gICAgICogY29uc29sZS5sb2coYXJyYXkpO1xuICAgICAqIC8vID0+IFsnYicsICdiJ11cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBwdWxsQWxsKGFycmF5LCB2YWx1ZXMpIHtcbiAgICAgIHJldHVybiAoYXJyYXkgJiYgYXJyYXkubGVuZ3RoICYmIHZhbHVlcyAmJiB2YWx1ZXMubGVuZ3RoKVxuICAgICAgICA/IGJhc2VQdWxsQWxsKGFycmF5LCB2YWx1ZXMpXG4gICAgICAgIDogYXJyYXk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgaXMgbGlrZSBgXy5wdWxsQWxsYCBleGNlcHQgdGhhdCBpdCBhY2NlcHRzIGBpdGVyYXRlZWAgd2hpY2ggaXNcbiAgICAgKiBpbnZva2VkIGZvciBlYWNoIGVsZW1lbnQgb2YgYGFycmF5YCBhbmQgYHZhbHVlc2AgdG8gZ2VuZXJhdGUgdGhlIGNyaXRlcmlvblxuICAgICAqIGJ5IHdoaWNoIHRoZXkncmUgY29tcGFyZWQuIFRoZSBpdGVyYXRlZSBpcyBpbnZva2VkIHdpdGggb25lIGFyZ3VtZW50OiAodmFsdWUpLlxuICAgICAqXG4gICAgICogKipOb3RlOioqIFVubGlrZSBgXy5kaWZmZXJlbmNlQnlgLCB0aGlzIG1ldGhvZCBtdXRhdGVzIGBhcnJheWAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgQXJyYXlcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gbW9kaWZ5LlxuICAgICAqIEBwYXJhbSB7QXJyYXl9IHZhbHVlcyBUaGUgdmFsdWVzIHRvIHJlbW92ZS5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbaXRlcmF0ZWU9Xy5pZGVudGl0eV0gVGhlIGl0ZXJhdGVlIGludm9rZWQgcGVyIGVsZW1lbnQuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIGBhcnJheWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBhcnJheSA9IFt7ICd4JzogMSB9LCB7ICd4JzogMiB9LCB7ICd4JzogMyB9LCB7ICd4JzogMSB9XTtcbiAgICAgKlxuICAgICAqIF8ucHVsbEFsbEJ5KGFycmF5LCBbeyAneCc6IDEgfSwgeyAneCc6IDMgfV0sICd4Jyk7XG4gICAgICogY29uc29sZS5sb2coYXJyYXkpO1xuICAgICAqIC8vID0+IFt7ICd4JzogMiB9XVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHB1bGxBbGxCeShhcnJheSwgdmFsdWVzLCBpdGVyYXRlZSkge1xuICAgICAgcmV0dXJuIChhcnJheSAmJiBhcnJheS5sZW5ndGggJiYgdmFsdWVzICYmIHZhbHVlcy5sZW5ndGgpXG4gICAgICAgID8gYmFzZVB1bGxBbGwoYXJyYXksIHZhbHVlcywgZ2V0SXRlcmF0ZWUoaXRlcmF0ZWUsIDIpKVxuICAgICAgICA6IGFycmF5O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIGlzIGxpa2UgYF8ucHVsbEFsbGAgZXhjZXB0IHRoYXQgaXQgYWNjZXB0cyBgY29tcGFyYXRvcmAgd2hpY2hcbiAgICAgKiBpcyBpbnZva2VkIHRvIGNvbXBhcmUgZWxlbWVudHMgb2YgYGFycmF5YCB0byBgdmFsdWVzYC4gVGhlIGNvbXBhcmF0b3IgaXNcbiAgICAgKiBpbnZva2VkIHdpdGggdHdvIGFyZ3VtZW50czogKGFyclZhbCwgb3RoVmFsKS5cbiAgICAgKlxuICAgICAqICoqTm90ZToqKiBVbmxpa2UgYF8uZGlmZmVyZW5jZVdpdGhgLCB0aGlzIG1ldGhvZCBtdXRhdGVzIGBhcnJheWAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC42LjBcbiAgICAgKiBAY2F0ZWdvcnkgQXJyYXlcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gbW9kaWZ5LlxuICAgICAqIEBwYXJhbSB7QXJyYXl9IHZhbHVlcyBUaGUgdmFsdWVzIHRvIHJlbW92ZS5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbY29tcGFyYXRvcl0gVGhlIGNvbXBhcmF0b3IgaW52b2tlZCBwZXIgZWxlbWVudC5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgYGFycmF5YC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIGFycmF5ID0gW3sgJ3gnOiAxLCAneSc6IDIgfSwgeyAneCc6IDMsICd5JzogNCB9LCB7ICd4JzogNSwgJ3knOiA2IH1dO1xuICAgICAqXG4gICAgICogXy5wdWxsQWxsV2l0aChhcnJheSwgW3sgJ3gnOiAzLCAneSc6IDQgfV0sIF8uaXNFcXVhbCk7XG4gICAgICogY29uc29sZS5sb2coYXJyYXkpO1xuICAgICAqIC8vID0+IFt7ICd4JzogMSwgJ3knOiAyIH0sIHsgJ3gnOiA1LCAneSc6IDYgfV1cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBwdWxsQWxsV2l0aChhcnJheSwgdmFsdWVzLCBjb21wYXJhdG9yKSB7XG4gICAgICByZXR1cm4gKGFycmF5ICYmIGFycmF5Lmxlbmd0aCAmJiB2YWx1ZXMgJiYgdmFsdWVzLmxlbmd0aClcbiAgICAgICAgPyBiYXNlUHVsbEFsbChhcnJheSwgdmFsdWVzLCB1bmRlZmluZWQsIGNvbXBhcmF0b3IpXG4gICAgICAgIDogYXJyYXk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUmVtb3ZlcyBlbGVtZW50cyBmcm9tIGBhcnJheWAgY29ycmVzcG9uZGluZyB0byBgaW5kZXhlc2AgYW5kIHJldHVybnMgYW5cbiAgICAgKiBhcnJheSBvZiByZW1vdmVkIGVsZW1lbnRzLlxuICAgICAqXG4gICAgICogKipOb3RlOioqIFVubGlrZSBgXy5hdGAsIHRoaXMgbWV0aG9kIG11dGF0ZXMgYGFycmF5YC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAzLjAuMFxuICAgICAqIEBjYXRlZ29yeSBBcnJheVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBtb2RpZnkuXG4gICAgICogQHBhcmFtIHsuLi4obnVtYmVyfG51bWJlcltdKX0gW2luZGV4ZXNdIFRoZSBpbmRleGVzIG9mIGVsZW1lbnRzIHRvIHJlbW92ZS5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIG5ldyBhcnJheSBvZiByZW1vdmVkIGVsZW1lbnRzLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgYXJyYXkgPSBbJ2EnLCAnYicsICdjJywgJ2QnXTtcbiAgICAgKiB2YXIgcHVsbGVkID0gXy5wdWxsQXQoYXJyYXksIFsxLCAzXSk7XG4gICAgICpcbiAgICAgKiBjb25zb2xlLmxvZyhhcnJheSk7XG4gICAgICogLy8gPT4gWydhJywgJ2MnXVxuICAgICAqXG4gICAgICogY29uc29sZS5sb2cocHVsbGVkKTtcbiAgICAgKiAvLyA9PiBbJ2InLCAnZCddXG4gICAgICovXG4gICAgdmFyIHB1bGxBdCA9IGZsYXRSZXN0KGZ1bmN0aW9uKGFycmF5LCBpbmRleGVzKSB7XG4gICAgICB2YXIgbGVuZ3RoID0gYXJyYXkgPT0gbnVsbCA/IDAgOiBhcnJheS5sZW5ndGgsXG4gICAgICAgICAgcmVzdWx0ID0gYmFzZUF0KGFycmF5LCBpbmRleGVzKTtcblxuICAgICAgYmFzZVB1bGxBdChhcnJheSwgYXJyYXlNYXAoaW5kZXhlcywgZnVuY3Rpb24oaW5kZXgpIHtcbiAgICAgICAgcmV0dXJuIGlzSW5kZXgoaW5kZXgsIGxlbmd0aCkgPyAraW5kZXggOiBpbmRleDtcbiAgICAgIH0pLnNvcnQoY29tcGFyZUFzY2VuZGluZykpO1xuXG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH0pO1xuXG4gICAgLyoqXG4gICAgICogUmVtb3ZlcyBhbGwgZWxlbWVudHMgZnJvbSBgYXJyYXlgIHRoYXQgYHByZWRpY2F0ZWAgcmV0dXJucyB0cnV0aHkgZm9yXG4gICAgICogYW5kIHJldHVybnMgYW4gYXJyYXkgb2YgdGhlIHJlbW92ZWQgZWxlbWVudHMuIFRoZSBwcmVkaWNhdGUgaXMgaW52b2tlZFxuICAgICAqIHdpdGggdGhyZWUgYXJndW1lbnRzOiAodmFsdWUsIGluZGV4LCBhcnJheSkuXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogVW5saWtlIGBfLmZpbHRlcmAsIHRoaXMgbWV0aG9kIG11dGF0ZXMgYGFycmF5YC4gVXNlIGBfLnB1bGxgXG4gICAgICogdG8gcHVsbCBlbGVtZW50cyBmcm9tIGFuIGFycmF5IGJ5IHZhbHVlLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDIuMC4wXG4gICAgICogQGNhdGVnb3J5IEFycmF5XG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIG1vZGlmeS5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbcHJlZGljYXRlPV8uaWRlbnRpdHldIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBuZXcgYXJyYXkgb2YgcmVtb3ZlZCBlbGVtZW50cy5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIGFycmF5ID0gWzEsIDIsIDMsIDRdO1xuICAgICAqIHZhciBldmVucyA9IF8ucmVtb3ZlKGFycmF5LCBmdW5jdGlvbihuKSB7XG4gICAgICogICByZXR1cm4gbiAlIDIgPT0gMDtcbiAgICAgKiB9KTtcbiAgICAgKlxuICAgICAqIGNvbnNvbGUubG9nKGFycmF5KTtcbiAgICAgKiAvLyA9PiBbMSwgM11cbiAgICAgKlxuICAgICAqIGNvbnNvbGUubG9nKGV2ZW5zKTtcbiAgICAgKiAvLyA9PiBbMiwgNF1cbiAgICAgKi9cbiAgICBmdW5jdGlvbiByZW1vdmUoYXJyYXksIHByZWRpY2F0ZSkge1xuICAgICAgdmFyIHJlc3VsdCA9IFtdO1xuICAgICAgaWYgKCEoYXJyYXkgJiYgYXJyYXkubGVuZ3RoKSkge1xuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgICAgfVxuICAgICAgdmFyIGluZGV4ID0gLTEsXG4gICAgICAgICAgaW5kZXhlcyA9IFtdLFxuICAgICAgICAgIGxlbmd0aCA9IGFycmF5Lmxlbmd0aDtcblxuICAgICAgcHJlZGljYXRlID0gZ2V0SXRlcmF0ZWUocHJlZGljYXRlLCAzKTtcbiAgICAgIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgICAgIHZhciB2YWx1ZSA9IGFycmF5W2luZGV4XTtcbiAgICAgICAgaWYgKHByZWRpY2F0ZSh2YWx1ZSwgaW5kZXgsIGFycmF5KSkge1xuICAgICAgICAgIHJlc3VsdC5wdXNoKHZhbHVlKTtcbiAgICAgICAgICBpbmRleGVzLnB1c2goaW5kZXgpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBiYXNlUHVsbEF0KGFycmF5LCBpbmRleGVzKTtcbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUmV2ZXJzZXMgYGFycmF5YCBzbyB0aGF0IHRoZSBmaXJzdCBlbGVtZW50IGJlY29tZXMgdGhlIGxhc3QsIHRoZSBzZWNvbmRcbiAgICAgKiBlbGVtZW50IGJlY29tZXMgdGhlIHNlY29uZCB0byBsYXN0LCBhbmQgc28gb24uXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogVGhpcyBtZXRob2QgbXV0YXRlcyBgYXJyYXlgIGFuZCBpcyBiYXNlZCBvblxuICAgICAqIFtgQXJyYXkjcmV2ZXJzZWBdKGh0dHBzOi8vbWRuLmlvL0FycmF5L3JldmVyc2UpLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IEFycmF5XG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIG1vZGlmeS5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgYGFycmF5YC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIGFycmF5ID0gWzEsIDIsIDNdO1xuICAgICAqXG4gICAgICogXy5yZXZlcnNlKGFycmF5KTtcbiAgICAgKiAvLyA9PiBbMywgMiwgMV1cbiAgICAgKlxuICAgICAqIGNvbnNvbGUubG9nKGFycmF5KTtcbiAgICAgKiAvLyA9PiBbMywgMiwgMV1cbiAgICAgKi9cbiAgICBmdW5jdGlvbiByZXZlcnNlKGFycmF5KSB7XG4gICAgICByZXR1cm4gYXJyYXkgPT0gbnVsbCA/IGFycmF5IDogbmF0aXZlUmV2ZXJzZS5jYWxsKGFycmF5KTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgc2xpY2Ugb2YgYGFycmF5YCBmcm9tIGBzdGFydGAgdXAgdG8sIGJ1dCBub3QgaW5jbHVkaW5nLCBgZW5kYC5cbiAgICAgKlxuICAgICAqICoqTm90ZToqKiBUaGlzIG1ldGhvZCBpcyB1c2VkIGluc3RlYWQgb2ZcbiAgICAgKiBbYEFycmF5I3NsaWNlYF0oaHR0cHM6Ly9tZG4uaW8vQXJyYXkvc2xpY2UpIHRvIGVuc3VyZSBkZW5zZSBhcnJheXMgYXJlXG4gICAgICogcmV0dXJuZWQuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMy4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgQXJyYXlcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gc2xpY2UuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFtzdGFydD0wXSBUaGUgc3RhcnQgcG9zaXRpb24uXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFtlbmQ9YXJyYXkubGVuZ3RoXSBUaGUgZW5kIHBvc2l0aW9uLlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgc2xpY2Ugb2YgYGFycmF5YC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBzbGljZShhcnJheSwgc3RhcnQsIGVuZCkge1xuICAgICAgdmFyIGxlbmd0aCA9IGFycmF5ID09IG51bGwgPyAwIDogYXJyYXkubGVuZ3RoO1xuICAgICAgaWYgKCFsZW5ndGgpIHtcbiAgICAgICAgcmV0dXJuIFtdO1xuICAgICAgfVxuICAgICAgaWYgKGVuZCAmJiB0eXBlb2YgZW5kICE9ICdudW1iZXInICYmIGlzSXRlcmF0ZWVDYWxsKGFycmF5LCBzdGFydCwgZW5kKSkge1xuICAgICAgICBzdGFydCA9IDA7XG4gICAgICAgIGVuZCA9IGxlbmd0aDtcbiAgICAgIH1cbiAgICAgIGVsc2Uge1xuICAgICAgICBzdGFydCA9IHN0YXJ0ID09IG51bGwgPyAwIDogdG9JbnRlZ2VyKHN0YXJ0KTtcbiAgICAgICAgZW5kID0gZW5kID09PSB1bmRlZmluZWQgPyBsZW5ndGggOiB0b0ludGVnZXIoZW5kKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBiYXNlU2xpY2UoYXJyYXksIHN0YXJ0LCBlbmQpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFVzZXMgYSBiaW5hcnkgc2VhcmNoIHRvIGRldGVybWluZSB0aGUgbG93ZXN0IGluZGV4IGF0IHdoaWNoIGB2YWx1ZWBcbiAgICAgKiBzaG91bGQgYmUgaW5zZXJ0ZWQgaW50byBgYXJyYXlgIGluIG9yZGVyIHRvIG1haW50YWluIGl0cyBzb3J0IG9yZGVyLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDAuMS4wXG4gICAgICogQGNhdGVnb3J5IEFycmF5XG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIHNvcnRlZCBhcnJheSB0byBpbnNwZWN0LlxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGV2YWx1YXRlLlxuICAgICAqIEByZXR1cm5zIHtudW1iZXJ9IFJldHVybnMgdGhlIGluZGV4IGF0IHdoaWNoIGB2YWx1ZWAgc2hvdWxkIGJlIGluc2VydGVkXG4gICAgICogIGludG8gYGFycmF5YC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5zb3J0ZWRJbmRleChbMzAsIDUwXSwgNDApO1xuICAgICAqIC8vID0+IDFcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBzb3J0ZWRJbmRleChhcnJheSwgdmFsdWUpIHtcbiAgICAgIHJldHVybiBiYXNlU29ydGVkSW5kZXgoYXJyYXksIHZhbHVlKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCBpcyBsaWtlIGBfLnNvcnRlZEluZGV4YCBleGNlcHQgdGhhdCBpdCBhY2NlcHRzIGBpdGVyYXRlZWBcbiAgICAgKiB3aGljaCBpcyBpbnZva2VkIGZvciBgdmFsdWVgIGFuZCBlYWNoIGVsZW1lbnQgb2YgYGFycmF5YCB0byBjb21wdXRlIHRoZWlyXG4gICAgICogc29ydCByYW5raW5nLiBUaGUgaXRlcmF0ZWUgaXMgaW52b2tlZCB3aXRoIG9uZSBhcmd1bWVudDogKHZhbHVlKS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBBcnJheVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBzb3J0ZWQgYXJyYXkgdG8gaW5zcGVjdC5cbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBldmFsdWF0ZS5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbaXRlcmF0ZWU9Xy5pZGVudGl0eV0gVGhlIGl0ZXJhdGVlIGludm9rZWQgcGVyIGVsZW1lbnQuXG4gICAgICogQHJldHVybnMge251bWJlcn0gUmV0dXJucyB0aGUgaW5kZXggYXQgd2hpY2ggYHZhbHVlYCBzaG91bGQgYmUgaW5zZXJ0ZWRcbiAgICAgKiAgaW50byBgYXJyYXlgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgb2JqZWN0cyA9IFt7ICd4JzogNCB9LCB7ICd4JzogNSB9XTtcbiAgICAgKlxuICAgICAqIF8uc29ydGVkSW5kZXhCeShvYmplY3RzLCB7ICd4JzogNCB9LCBmdW5jdGlvbihvKSB7IHJldHVybiBvLng7IH0pO1xuICAgICAqIC8vID0+IDBcbiAgICAgKlxuICAgICAqIC8vIFRoZSBgXy5wcm9wZXJ0eWAgaXRlcmF0ZWUgc2hvcnRoYW5kLlxuICAgICAqIF8uc29ydGVkSW5kZXhCeShvYmplY3RzLCB7ICd4JzogNCB9LCAneCcpO1xuICAgICAqIC8vID0+IDBcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBzb3J0ZWRJbmRleEJ5KGFycmF5LCB2YWx1ZSwgaXRlcmF0ZWUpIHtcbiAgICAgIHJldHVybiBiYXNlU29ydGVkSW5kZXhCeShhcnJheSwgdmFsdWUsIGdldEl0ZXJhdGVlKGl0ZXJhdGVlLCAyKSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgaXMgbGlrZSBgXy5pbmRleE9mYCBleGNlcHQgdGhhdCBpdCBwZXJmb3JtcyBhIGJpbmFyeVxuICAgICAqIHNlYXJjaCBvbiBhIHNvcnRlZCBgYXJyYXlgLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IEFycmF5XG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIGluc3BlY3QuXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gc2VhcmNoIGZvci5cbiAgICAgKiBAcmV0dXJucyB7bnVtYmVyfSBSZXR1cm5zIHRoZSBpbmRleCBvZiB0aGUgbWF0Y2hlZCB2YWx1ZSwgZWxzZSBgLTFgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLnNvcnRlZEluZGV4T2YoWzQsIDUsIDUsIDUsIDZdLCA1KTtcbiAgICAgKiAvLyA9PiAxXG4gICAgICovXG4gICAgZnVuY3Rpb24gc29ydGVkSW5kZXhPZihhcnJheSwgdmFsdWUpIHtcbiAgICAgIHZhciBsZW5ndGggPSBhcnJheSA9PSBudWxsID8gMCA6IGFycmF5Lmxlbmd0aDtcbiAgICAgIGlmIChsZW5ndGgpIHtcbiAgICAgICAgdmFyIGluZGV4ID0gYmFzZVNvcnRlZEluZGV4KGFycmF5LCB2YWx1ZSk7XG4gICAgICAgIGlmIChpbmRleCA8IGxlbmd0aCAmJiBlcShhcnJheVtpbmRleF0sIHZhbHVlKSkge1xuICAgICAgICAgIHJldHVybiBpbmRleDtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIC0xO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIGlzIGxpa2UgYF8uc29ydGVkSW5kZXhgIGV4Y2VwdCB0aGF0IGl0IHJldHVybnMgdGhlIGhpZ2hlc3RcbiAgICAgKiBpbmRleCBhdCB3aGljaCBgdmFsdWVgIHNob3VsZCBiZSBpbnNlcnRlZCBpbnRvIGBhcnJheWAgaW4gb3JkZXIgdG9cbiAgICAgKiBtYWludGFpbiBpdHMgc29ydCBvcmRlci5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAzLjAuMFxuICAgICAqIEBjYXRlZ29yeSBBcnJheVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBzb3J0ZWQgYXJyYXkgdG8gaW5zcGVjdC5cbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBldmFsdWF0ZS5cbiAgICAgKiBAcmV0dXJucyB7bnVtYmVyfSBSZXR1cm5zIHRoZSBpbmRleCBhdCB3aGljaCBgdmFsdWVgIHNob3VsZCBiZSBpbnNlcnRlZFxuICAgICAqICBpbnRvIGBhcnJheWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uc29ydGVkTGFzdEluZGV4KFs0LCA1LCA1LCA1LCA2XSwgNSk7XG4gICAgICogLy8gPT4gNFxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHNvcnRlZExhc3RJbmRleChhcnJheSwgdmFsdWUpIHtcbiAgICAgIHJldHVybiBiYXNlU29ydGVkSW5kZXgoYXJyYXksIHZhbHVlLCB0cnVlKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCBpcyBsaWtlIGBfLnNvcnRlZExhc3RJbmRleGAgZXhjZXB0IHRoYXQgaXQgYWNjZXB0cyBgaXRlcmF0ZWVgXG4gICAgICogd2hpY2ggaXMgaW52b2tlZCBmb3IgYHZhbHVlYCBhbmQgZWFjaCBlbGVtZW50IG9mIGBhcnJheWAgdG8gY29tcHV0ZSB0aGVpclxuICAgICAqIHNvcnQgcmFua2luZy4gVGhlIGl0ZXJhdGVlIGlzIGludm9rZWQgd2l0aCBvbmUgYXJndW1lbnQ6ICh2YWx1ZSkuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgQXJyYXlcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgc29ydGVkIGFycmF5IHRvIGluc3BlY3QuXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gZXZhbHVhdGUuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2l0ZXJhdGVlPV8uaWRlbnRpdHldIFRoZSBpdGVyYXRlZSBpbnZva2VkIHBlciBlbGVtZW50LlxuICAgICAqIEByZXR1cm5zIHtudW1iZXJ9IFJldHVybnMgdGhlIGluZGV4IGF0IHdoaWNoIGB2YWx1ZWAgc2hvdWxkIGJlIGluc2VydGVkXG4gICAgICogIGludG8gYGFycmF5YC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIG9iamVjdHMgPSBbeyAneCc6IDQgfSwgeyAneCc6IDUgfV07XG4gICAgICpcbiAgICAgKiBfLnNvcnRlZExhc3RJbmRleEJ5KG9iamVjdHMsIHsgJ3gnOiA0IH0sIGZ1bmN0aW9uKG8pIHsgcmV0dXJuIG8ueDsgfSk7XG4gICAgICogLy8gPT4gMVxuICAgICAqXG4gICAgICogLy8gVGhlIGBfLnByb3BlcnR5YCBpdGVyYXRlZSBzaG9ydGhhbmQuXG4gICAgICogXy5zb3J0ZWRMYXN0SW5kZXhCeShvYmplY3RzLCB7ICd4JzogNCB9LCAneCcpO1xuICAgICAqIC8vID0+IDFcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBzb3J0ZWRMYXN0SW5kZXhCeShhcnJheSwgdmFsdWUsIGl0ZXJhdGVlKSB7XG4gICAgICByZXR1cm4gYmFzZVNvcnRlZEluZGV4QnkoYXJyYXksIHZhbHVlLCBnZXRJdGVyYXRlZShpdGVyYXRlZSwgMiksIHRydWUpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIGlzIGxpa2UgYF8ubGFzdEluZGV4T2ZgIGV4Y2VwdCB0aGF0IGl0IHBlcmZvcm1zIGEgYmluYXJ5XG4gICAgICogc2VhcmNoIG9uIGEgc29ydGVkIGBhcnJheWAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgQXJyYXlcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gaW5zcGVjdC5cbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBzZWFyY2ggZm9yLlxuICAgICAqIEByZXR1cm5zIHtudW1iZXJ9IFJldHVybnMgdGhlIGluZGV4IG9mIHRoZSBtYXRjaGVkIHZhbHVlLCBlbHNlIGAtMWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uc29ydGVkTGFzdEluZGV4T2YoWzQsIDUsIDUsIDUsIDZdLCA1KTtcbiAgICAgKiAvLyA9PiAzXG4gICAgICovXG4gICAgZnVuY3Rpb24gc29ydGVkTGFzdEluZGV4T2YoYXJyYXksIHZhbHVlKSB7XG4gICAgICB2YXIgbGVuZ3RoID0gYXJyYXkgPT0gbnVsbCA/IDAgOiBhcnJheS5sZW5ndGg7XG4gICAgICBpZiAobGVuZ3RoKSB7XG4gICAgICAgIHZhciBpbmRleCA9IGJhc2VTb3J0ZWRJbmRleChhcnJheSwgdmFsdWUsIHRydWUpIC0gMTtcbiAgICAgICAgaWYgKGVxKGFycmF5W2luZGV4XSwgdmFsdWUpKSB7XG4gICAgICAgICAgcmV0dXJuIGluZGV4O1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gLTE7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgaXMgbGlrZSBgXy51bmlxYCBleGNlcHQgdGhhdCBpdCdzIGRlc2lnbmVkIGFuZCBvcHRpbWl6ZWRcbiAgICAgKiBmb3Igc29ydGVkIGFycmF5cy5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBBcnJheVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBpbnNwZWN0LlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgbmV3IGR1cGxpY2F0ZSBmcmVlIGFycmF5LlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLnNvcnRlZFVuaXEoWzEsIDEsIDJdKTtcbiAgICAgKiAvLyA9PiBbMSwgMl1cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBzb3J0ZWRVbmlxKGFycmF5KSB7XG4gICAgICByZXR1cm4gKGFycmF5ICYmIGFycmF5Lmxlbmd0aClcbiAgICAgICAgPyBiYXNlU29ydGVkVW5pcShhcnJheSlcbiAgICAgICAgOiBbXTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCBpcyBsaWtlIGBfLnVuaXFCeWAgZXhjZXB0IHRoYXQgaXQncyBkZXNpZ25lZCBhbmQgb3B0aW1pemVkXG4gICAgICogZm9yIHNvcnRlZCBhcnJheXMuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgQXJyYXlcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gaW5zcGVjdC5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbaXRlcmF0ZWVdIFRoZSBpdGVyYXRlZSBpbnZva2VkIHBlciBlbGVtZW50LlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgbmV3IGR1cGxpY2F0ZSBmcmVlIGFycmF5LlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLnNvcnRlZFVuaXFCeShbMS4xLCAxLjIsIDIuMywgMi40XSwgTWF0aC5mbG9vcik7XG4gICAgICogLy8gPT4gWzEuMSwgMi4zXVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHNvcnRlZFVuaXFCeShhcnJheSwgaXRlcmF0ZWUpIHtcbiAgICAgIHJldHVybiAoYXJyYXkgJiYgYXJyYXkubGVuZ3RoKVxuICAgICAgICA/IGJhc2VTb3J0ZWRVbmlxKGFycmF5LCBnZXRJdGVyYXRlZShpdGVyYXRlZSwgMikpXG4gICAgICAgIDogW107XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogR2V0cyBhbGwgYnV0IHRoZSBmaXJzdCBlbGVtZW50IG9mIGBhcnJheWAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgQXJyYXlcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gcXVlcnkuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBzbGljZSBvZiBgYXJyYXlgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLnRhaWwoWzEsIDIsIDNdKTtcbiAgICAgKiAvLyA9PiBbMiwgM11cbiAgICAgKi9cbiAgICBmdW5jdGlvbiB0YWlsKGFycmF5KSB7XG4gICAgICB2YXIgbGVuZ3RoID0gYXJyYXkgPT0gbnVsbCA/IDAgOiBhcnJheS5sZW5ndGg7XG4gICAgICByZXR1cm4gbGVuZ3RoID8gYmFzZVNsaWNlKGFycmF5LCAxLCBsZW5ndGgpIDogW107XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIHNsaWNlIG9mIGBhcnJheWAgd2l0aCBgbmAgZWxlbWVudHMgdGFrZW4gZnJvbSB0aGUgYmVnaW5uaW5nLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDAuMS4wXG4gICAgICogQGNhdGVnb3J5IEFycmF5XG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIHF1ZXJ5LlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbbj0xXSBUaGUgbnVtYmVyIG9mIGVsZW1lbnRzIHRvIHRha2UuXG4gICAgICogQHBhcmFtLSB7T2JqZWN0fSBbZ3VhcmRdIEVuYWJsZXMgdXNlIGFzIGFuIGl0ZXJhdGVlIGZvciBtZXRob2RzIGxpa2UgYF8ubWFwYC5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIHNsaWNlIG9mIGBhcnJheWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8udGFrZShbMSwgMiwgM10pO1xuICAgICAqIC8vID0+IFsxXVxuICAgICAqXG4gICAgICogXy50YWtlKFsxLCAyLCAzXSwgMik7XG4gICAgICogLy8gPT4gWzEsIDJdXG4gICAgICpcbiAgICAgKiBfLnRha2UoWzEsIDIsIDNdLCA1KTtcbiAgICAgKiAvLyA9PiBbMSwgMiwgM11cbiAgICAgKlxuICAgICAqIF8udGFrZShbMSwgMiwgM10sIDApO1xuICAgICAqIC8vID0+IFtdXG4gICAgICovXG4gICAgZnVuY3Rpb24gdGFrZShhcnJheSwgbiwgZ3VhcmQpIHtcbiAgICAgIGlmICghKGFycmF5ICYmIGFycmF5Lmxlbmd0aCkpIHtcbiAgICAgICAgcmV0dXJuIFtdO1xuICAgICAgfVxuICAgICAgbiA9IChndWFyZCB8fCBuID09PSB1bmRlZmluZWQpID8gMSA6IHRvSW50ZWdlcihuKTtcbiAgICAgIHJldHVybiBiYXNlU2xpY2UoYXJyYXksIDAsIG4gPCAwID8gMCA6IG4pO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBzbGljZSBvZiBgYXJyYXlgIHdpdGggYG5gIGVsZW1lbnRzIHRha2VuIGZyb20gdGhlIGVuZC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAzLjAuMFxuICAgICAqIEBjYXRlZ29yeSBBcnJheVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBxdWVyeS5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW249MV0gVGhlIG51bWJlciBvZiBlbGVtZW50cyB0byB0YWtlLlxuICAgICAqIEBwYXJhbS0ge09iamVjdH0gW2d1YXJkXSBFbmFibGVzIHVzZSBhcyBhbiBpdGVyYXRlZSBmb3IgbWV0aG9kcyBsaWtlIGBfLm1hcGAuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBzbGljZSBvZiBgYXJyYXlgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLnRha2VSaWdodChbMSwgMiwgM10pO1xuICAgICAqIC8vID0+IFszXVxuICAgICAqXG4gICAgICogXy50YWtlUmlnaHQoWzEsIDIsIDNdLCAyKTtcbiAgICAgKiAvLyA9PiBbMiwgM11cbiAgICAgKlxuICAgICAqIF8udGFrZVJpZ2h0KFsxLCAyLCAzXSwgNSk7XG4gICAgICogLy8gPT4gWzEsIDIsIDNdXG4gICAgICpcbiAgICAgKiBfLnRha2VSaWdodChbMSwgMiwgM10sIDApO1xuICAgICAqIC8vID0+IFtdXG4gICAgICovXG4gICAgZnVuY3Rpb24gdGFrZVJpZ2h0KGFycmF5LCBuLCBndWFyZCkge1xuICAgICAgdmFyIGxlbmd0aCA9IGFycmF5ID09IG51bGwgPyAwIDogYXJyYXkubGVuZ3RoO1xuICAgICAgaWYgKCFsZW5ndGgpIHtcbiAgICAgICAgcmV0dXJuIFtdO1xuICAgICAgfVxuICAgICAgbiA9IChndWFyZCB8fCBuID09PSB1bmRlZmluZWQpID8gMSA6IHRvSW50ZWdlcihuKTtcbiAgICAgIG4gPSBsZW5ndGggLSBuO1xuICAgICAgcmV0dXJuIGJhc2VTbGljZShhcnJheSwgbiA8IDAgPyAwIDogbiwgbGVuZ3RoKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgc2xpY2Ugb2YgYGFycmF5YCB3aXRoIGVsZW1lbnRzIHRha2VuIGZyb20gdGhlIGVuZC4gRWxlbWVudHMgYXJlXG4gICAgICogdGFrZW4gdW50aWwgYHByZWRpY2F0ZWAgcmV0dXJucyBmYWxzZXkuIFRoZSBwcmVkaWNhdGUgaXMgaW52b2tlZCB3aXRoXG4gICAgICogdGhyZWUgYXJndW1lbnRzOiAodmFsdWUsIGluZGV4LCBhcnJheSkuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMy4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgQXJyYXlcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gcXVlcnkuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW3ByZWRpY2F0ZT1fLmlkZW50aXR5XSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgc2xpY2Ugb2YgYGFycmF5YC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIHVzZXJzID0gW1xuICAgICAqICAgeyAndXNlcic6ICdiYXJuZXknLCAgJ2FjdGl2ZSc6IHRydWUgfSxcbiAgICAgKiAgIHsgJ3VzZXInOiAnZnJlZCcsICAgICdhY3RpdmUnOiBmYWxzZSB9LFxuICAgICAqICAgeyAndXNlcic6ICdwZWJibGVzJywgJ2FjdGl2ZSc6IGZhbHNlIH1cbiAgICAgKiBdO1xuICAgICAqXG4gICAgICogXy50YWtlUmlnaHRXaGlsZSh1c2VycywgZnVuY3Rpb24obykgeyByZXR1cm4gIW8uYWN0aXZlOyB9KTtcbiAgICAgKiAvLyA9PiBvYmplY3RzIGZvciBbJ2ZyZWQnLCAncGViYmxlcyddXG4gICAgICpcbiAgICAgKiAvLyBUaGUgYF8ubWF0Y2hlc2AgaXRlcmF0ZWUgc2hvcnRoYW5kLlxuICAgICAqIF8udGFrZVJpZ2h0V2hpbGUodXNlcnMsIHsgJ3VzZXInOiAncGViYmxlcycsICdhY3RpdmUnOiBmYWxzZSB9KTtcbiAgICAgKiAvLyA9PiBvYmplY3RzIGZvciBbJ3BlYmJsZXMnXVxuICAgICAqXG4gICAgICogLy8gVGhlIGBfLm1hdGNoZXNQcm9wZXJ0eWAgaXRlcmF0ZWUgc2hvcnRoYW5kLlxuICAgICAqIF8udGFrZVJpZ2h0V2hpbGUodXNlcnMsIFsnYWN0aXZlJywgZmFsc2VdKTtcbiAgICAgKiAvLyA9PiBvYmplY3RzIGZvciBbJ2ZyZWQnLCAncGViYmxlcyddXG4gICAgICpcbiAgICAgKiAvLyBUaGUgYF8ucHJvcGVydHlgIGl0ZXJhdGVlIHNob3J0aGFuZC5cbiAgICAgKiBfLnRha2VSaWdodFdoaWxlKHVzZXJzLCAnYWN0aXZlJyk7XG4gICAgICogLy8gPT4gW11cbiAgICAgKi9cbiAgICBmdW5jdGlvbiB0YWtlUmlnaHRXaGlsZShhcnJheSwgcHJlZGljYXRlKSB7XG4gICAgICByZXR1cm4gKGFycmF5ICYmIGFycmF5Lmxlbmd0aClcbiAgICAgICAgPyBiYXNlV2hpbGUoYXJyYXksIGdldEl0ZXJhdGVlKHByZWRpY2F0ZSwgMyksIGZhbHNlLCB0cnVlKVxuICAgICAgICA6IFtdO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBzbGljZSBvZiBgYXJyYXlgIHdpdGggZWxlbWVudHMgdGFrZW4gZnJvbSB0aGUgYmVnaW5uaW5nLiBFbGVtZW50c1xuICAgICAqIGFyZSB0YWtlbiB1bnRpbCBgcHJlZGljYXRlYCByZXR1cm5zIGZhbHNleS4gVGhlIHByZWRpY2F0ZSBpcyBpbnZva2VkIHdpdGhcbiAgICAgKiB0aHJlZSBhcmd1bWVudHM6ICh2YWx1ZSwgaW5kZXgsIGFycmF5KS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAzLjAuMFxuICAgICAqIEBjYXRlZ29yeSBBcnJheVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBxdWVyeS5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbcHJlZGljYXRlPV8uaWRlbnRpdHldIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBzbGljZSBvZiBgYXJyYXlgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgdXNlcnMgPSBbXG4gICAgICogICB7ICd1c2VyJzogJ2Jhcm5leScsICAnYWN0aXZlJzogZmFsc2UgfSxcbiAgICAgKiAgIHsgJ3VzZXInOiAnZnJlZCcsICAgICdhY3RpdmUnOiBmYWxzZSB9LFxuICAgICAqICAgeyAndXNlcic6ICdwZWJibGVzJywgJ2FjdGl2ZSc6IHRydWUgfVxuICAgICAqIF07XG4gICAgICpcbiAgICAgKiBfLnRha2VXaGlsZSh1c2VycywgZnVuY3Rpb24obykgeyByZXR1cm4gIW8uYWN0aXZlOyB9KTtcbiAgICAgKiAvLyA9PiBvYmplY3RzIGZvciBbJ2Jhcm5leScsICdmcmVkJ11cbiAgICAgKlxuICAgICAqIC8vIFRoZSBgXy5tYXRjaGVzYCBpdGVyYXRlZSBzaG9ydGhhbmQuXG4gICAgICogXy50YWtlV2hpbGUodXNlcnMsIHsgJ3VzZXInOiAnYmFybmV5JywgJ2FjdGl2ZSc6IGZhbHNlIH0pO1xuICAgICAqIC8vID0+IG9iamVjdHMgZm9yIFsnYmFybmV5J11cbiAgICAgKlxuICAgICAqIC8vIFRoZSBgXy5tYXRjaGVzUHJvcGVydHlgIGl0ZXJhdGVlIHNob3J0aGFuZC5cbiAgICAgKiBfLnRha2VXaGlsZSh1c2VycywgWydhY3RpdmUnLCBmYWxzZV0pO1xuICAgICAqIC8vID0+IG9iamVjdHMgZm9yIFsnYmFybmV5JywgJ2ZyZWQnXVxuICAgICAqXG4gICAgICogLy8gVGhlIGBfLnByb3BlcnR5YCBpdGVyYXRlZSBzaG9ydGhhbmQuXG4gICAgICogXy50YWtlV2hpbGUodXNlcnMsICdhY3RpdmUnKTtcbiAgICAgKiAvLyA9PiBbXVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHRha2VXaGlsZShhcnJheSwgcHJlZGljYXRlKSB7XG4gICAgICByZXR1cm4gKGFycmF5ICYmIGFycmF5Lmxlbmd0aClcbiAgICAgICAgPyBiYXNlV2hpbGUoYXJyYXksIGdldEl0ZXJhdGVlKHByZWRpY2F0ZSwgMykpXG4gICAgICAgIDogW107XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhbiBhcnJheSBvZiB1bmlxdWUgdmFsdWVzLCBpbiBvcmRlciwgZnJvbSBhbGwgZ2l2ZW4gYXJyYXlzIHVzaW5nXG4gICAgICogW2BTYW1lVmFsdWVaZXJvYF0oaHR0cDovL2VjbWEtaW50ZXJuYXRpb25hbC5vcmcvZWNtYS0yNjIvNy4wLyNzZWMtc2FtZXZhbHVlemVybylcbiAgICAgKiBmb3IgZXF1YWxpdHkgY29tcGFyaXNvbnMuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAY2F0ZWdvcnkgQXJyYXlcbiAgICAgKiBAcGFyYW0gey4uLkFycmF5fSBbYXJyYXlzXSBUaGUgYXJyYXlzIHRvIGluc3BlY3QuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBuZXcgYXJyYXkgb2YgY29tYmluZWQgdmFsdWVzLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLnVuaW9uKFsyXSwgWzEsIDJdKTtcbiAgICAgKiAvLyA9PiBbMiwgMV1cbiAgICAgKi9cbiAgICB2YXIgdW5pb24gPSBiYXNlUmVzdChmdW5jdGlvbihhcnJheXMpIHtcbiAgICAgIHJldHVybiBiYXNlVW5pcShiYXNlRmxhdHRlbihhcnJheXMsIDEsIGlzQXJyYXlMaWtlT2JqZWN0LCB0cnVlKSk7XG4gICAgfSk7XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCBpcyBsaWtlIGBfLnVuaW9uYCBleGNlcHQgdGhhdCBpdCBhY2NlcHRzIGBpdGVyYXRlZWAgd2hpY2ggaXNcbiAgICAgKiBpbnZva2VkIGZvciBlYWNoIGVsZW1lbnQgb2YgZWFjaCBgYXJyYXlzYCB0byBnZW5lcmF0ZSB0aGUgY3JpdGVyaW9uIGJ5XG4gICAgICogd2hpY2ggdW5pcXVlbmVzcyBpcyBjb21wdXRlZC4gUmVzdWx0IHZhbHVlcyBhcmUgY2hvc2VuIGZyb20gdGhlIGZpcnN0XG4gICAgICogYXJyYXkgaW4gd2hpY2ggdGhlIHZhbHVlIG9jY3Vycy4gVGhlIGl0ZXJhdGVlIGlzIGludm9rZWQgd2l0aCBvbmUgYXJndW1lbnQ6XG4gICAgICogKHZhbHVlKS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBBcnJheVxuICAgICAqIEBwYXJhbSB7Li4uQXJyYXl9IFthcnJheXNdIFRoZSBhcnJheXMgdG8gaW5zcGVjdC5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbaXRlcmF0ZWU9Xy5pZGVudGl0eV0gVGhlIGl0ZXJhdGVlIGludm9rZWQgcGVyIGVsZW1lbnQuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBuZXcgYXJyYXkgb2YgY29tYmluZWQgdmFsdWVzLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLnVuaW9uQnkoWzIuMV0sIFsxLjIsIDIuM10sIE1hdGguZmxvb3IpO1xuICAgICAqIC8vID0+IFsyLjEsIDEuMl1cbiAgICAgKlxuICAgICAqIC8vIFRoZSBgXy5wcm9wZXJ0eWAgaXRlcmF0ZWUgc2hvcnRoYW5kLlxuICAgICAqIF8udW5pb25CeShbeyAneCc6IDEgfV0sIFt7ICd4JzogMiB9LCB7ICd4JzogMSB9XSwgJ3gnKTtcbiAgICAgKiAvLyA9PiBbeyAneCc6IDEgfSwgeyAneCc6IDIgfV1cbiAgICAgKi9cbiAgICB2YXIgdW5pb25CeSA9IGJhc2VSZXN0KGZ1bmN0aW9uKGFycmF5cykge1xuICAgICAgdmFyIGl0ZXJhdGVlID0gbGFzdChhcnJheXMpO1xuICAgICAgaWYgKGlzQXJyYXlMaWtlT2JqZWN0KGl0ZXJhdGVlKSkge1xuICAgICAgICBpdGVyYXRlZSA9IHVuZGVmaW5lZDtcbiAgICAgIH1cbiAgICAgIHJldHVybiBiYXNlVW5pcShiYXNlRmxhdHRlbihhcnJheXMsIDEsIGlzQXJyYXlMaWtlT2JqZWN0LCB0cnVlKSwgZ2V0SXRlcmF0ZWUoaXRlcmF0ZWUsIDIpKTtcbiAgICB9KTtcblxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIGlzIGxpa2UgYF8udW5pb25gIGV4Y2VwdCB0aGF0IGl0IGFjY2VwdHMgYGNvbXBhcmF0b3JgIHdoaWNoXG4gICAgICogaXMgaW52b2tlZCB0byBjb21wYXJlIGVsZW1lbnRzIG9mIGBhcnJheXNgLiBSZXN1bHQgdmFsdWVzIGFyZSBjaG9zZW4gZnJvbVxuICAgICAqIHRoZSBmaXJzdCBhcnJheSBpbiB3aGljaCB0aGUgdmFsdWUgb2NjdXJzLiBUaGUgY29tcGFyYXRvciBpcyBpbnZva2VkXG4gICAgICogd2l0aCB0d28gYXJndW1lbnRzOiAoYXJyVmFsLCBvdGhWYWwpLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IEFycmF5XG4gICAgICogQHBhcmFtIHsuLi5BcnJheX0gW2FycmF5c10gVGhlIGFycmF5cyB0byBpbnNwZWN0LlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtjb21wYXJhdG9yXSBUaGUgY29tcGFyYXRvciBpbnZva2VkIHBlciBlbGVtZW50LlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgbmV3IGFycmF5IG9mIGNvbWJpbmVkIHZhbHVlcy5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIG9iamVjdHMgPSBbeyAneCc6IDEsICd5JzogMiB9LCB7ICd4JzogMiwgJ3knOiAxIH1dO1xuICAgICAqIHZhciBvdGhlcnMgPSBbeyAneCc6IDEsICd5JzogMSB9LCB7ICd4JzogMSwgJ3knOiAyIH1dO1xuICAgICAqXG4gICAgICogXy51bmlvbldpdGgob2JqZWN0cywgb3RoZXJzLCBfLmlzRXF1YWwpO1xuICAgICAqIC8vID0+IFt7ICd4JzogMSwgJ3knOiAyIH0sIHsgJ3gnOiAyLCAneSc6IDEgfSwgeyAneCc6IDEsICd5JzogMSB9XVxuICAgICAqL1xuICAgIHZhciB1bmlvbldpdGggPSBiYXNlUmVzdChmdW5jdGlvbihhcnJheXMpIHtcbiAgICAgIHZhciBjb21wYXJhdG9yID0gbGFzdChhcnJheXMpO1xuICAgICAgY29tcGFyYXRvciA9IHR5cGVvZiBjb21wYXJhdG9yID09ICdmdW5jdGlvbicgPyBjb21wYXJhdG9yIDogdW5kZWZpbmVkO1xuICAgICAgcmV0dXJuIGJhc2VVbmlxKGJhc2VGbGF0dGVuKGFycmF5cywgMSwgaXNBcnJheUxpa2VPYmplY3QsIHRydWUpLCB1bmRlZmluZWQsIGNvbXBhcmF0b3IpO1xuICAgIH0pO1xuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGR1cGxpY2F0ZS1mcmVlIHZlcnNpb24gb2YgYW4gYXJyYXksIHVzaW5nXG4gICAgICogW2BTYW1lVmFsdWVaZXJvYF0oaHR0cDovL2VjbWEtaW50ZXJuYXRpb25hbC5vcmcvZWNtYS0yNjIvNy4wLyNzZWMtc2FtZXZhbHVlemVybylcbiAgICAgKiBmb3IgZXF1YWxpdHkgY29tcGFyaXNvbnMsIGluIHdoaWNoIG9ubHkgdGhlIGZpcnN0IG9jY3VycmVuY2Ugb2YgZWFjaCBlbGVtZW50XG4gICAgICogaXMga2VwdC4gVGhlIG9yZGVyIG9mIHJlc3VsdCB2YWx1ZXMgaXMgZGV0ZXJtaW5lZCBieSB0aGUgb3JkZXIgdGhleSBvY2N1clxuICAgICAqIGluIHRoZSBhcnJheS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBjYXRlZ29yeSBBcnJheVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBpbnNwZWN0LlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgbmV3IGR1cGxpY2F0ZSBmcmVlIGFycmF5LlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLnVuaXEoWzIsIDEsIDJdKTtcbiAgICAgKiAvLyA9PiBbMiwgMV1cbiAgICAgKi9cbiAgICBmdW5jdGlvbiB1bmlxKGFycmF5KSB7XG4gICAgICByZXR1cm4gKGFycmF5ICYmIGFycmF5Lmxlbmd0aCkgPyBiYXNlVW5pcShhcnJheSkgOiBbXTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCBpcyBsaWtlIGBfLnVuaXFgIGV4Y2VwdCB0aGF0IGl0IGFjY2VwdHMgYGl0ZXJhdGVlYCB3aGljaCBpc1xuICAgICAqIGludm9rZWQgZm9yIGVhY2ggZWxlbWVudCBpbiBgYXJyYXlgIHRvIGdlbmVyYXRlIHRoZSBjcml0ZXJpb24gYnkgd2hpY2hcbiAgICAgKiB1bmlxdWVuZXNzIGlzIGNvbXB1dGVkLiBUaGUgb3JkZXIgb2YgcmVzdWx0IHZhbHVlcyBpcyBkZXRlcm1pbmVkIGJ5IHRoZVxuICAgICAqIG9yZGVyIHRoZXkgb2NjdXIgaW4gdGhlIGFycmF5LiBUaGUgaXRlcmF0ZWUgaXMgaW52b2tlZCB3aXRoIG9uZSBhcmd1bWVudDpcbiAgICAgKiAodmFsdWUpLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IEFycmF5XG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIGluc3BlY3QuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2l0ZXJhdGVlPV8uaWRlbnRpdHldIFRoZSBpdGVyYXRlZSBpbnZva2VkIHBlciBlbGVtZW50LlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgbmV3IGR1cGxpY2F0ZSBmcmVlIGFycmF5LlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLnVuaXFCeShbMi4xLCAxLjIsIDIuM10sIE1hdGguZmxvb3IpO1xuICAgICAqIC8vID0+IFsyLjEsIDEuMl1cbiAgICAgKlxuICAgICAqIC8vIFRoZSBgXy5wcm9wZXJ0eWAgaXRlcmF0ZWUgc2hvcnRoYW5kLlxuICAgICAqIF8udW5pcUJ5KFt7ICd4JzogMSB9LCB7ICd4JzogMiB9LCB7ICd4JzogMSB9XSwgJ3gnKTtcbiAgICAgKiAvLyA9PiBbeyAneCc6IDEgfSwgeyAneCc6IDIgfV1cbiAgICAgKi9cbiAgICBmdW5jdGlvbiB1bmlxQnkoYXJyYXksIGl0ZXJhdGVlKSB7XG4gICAgICByZXR1cm4gKGFycmF5ICYmIGFycmF5Lmxlbmd0aCkgPyBiYXNlVW5pcShhcnJheSwgZ2V0SXRlcmF0ZWUoaXRlcmF0ZWUsIDIpKSA6IFtdO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIGlzIGxpa2UgYF8udW5pcWAgZXhjZXB0IHRoYXQgaXQgYWNjZXB0cyBgY29tcGFyYXRvcmAgd2hpY2hcbiAgICAgKiBpcyBpbnZva2VkIHRvIGNvbXBhcmUgZWxlbWVudHMgb2YgYGFycmF5YC4gVGhlIG9yZGVyIG9mIHJlc3VsdCB2YWx1ZXMgaXNcbiAgICAgKiBkZXRlcm1pbmVkIGJ5IHRoZSBvcmRlciB0aGV5IG9jY3VyIGluIHRoZSBhcnJheS5UaGUgY29tcGFyYXRvciBpcyBpbnZva2VkXG4gICAgICogd2l0aCB0d28gYXJndW1lbnRzOiAoYXJyVmFsLCBvdGhWYWwpLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IEFycmF5XG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIGluc3BlY3QuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2NvbXBhcmF0b3JdIFRoZSBjb21wYXJhdG9yIGludm9rZWQgcGVyIGVsZW1lbnQuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBuZXcgZHVwbGljYXRlIGZyZWUgYXJyYXkuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBvYmplY3RzID0gW3sgJ3gnOiAxLCAneSc6IDIgfSwgeyAneCc6IDIsICd5JzogMSB9LCB7ICd4JzogMSwgJ3knOiAyIH1dO1xuICAgICAqXG4gICAgICogXy51bmlxV2l0aChvYmplY3RzLCBfLmlzRXF1YWwpO1xuICAgICAqIC8vID0+IFt7ICd4JzogMSwgJ3knOiAyIH0sIHsgJ3gnOiAyLCAneSc6IDEgfV1cbiAgICAgKi9cbiAgICBmdW5jdGlvbiB1bmlxV2l0aChhcnJheSwgY29tcGFyYXRvcikge1xuICAgICAgY29tcGFyYXRvciA9IHR5cGVvZiBjb21wYXJhdG9yID09ICdmdW5jdGlvbicgPyBjb21wYXJhdG9yIDogdW5kZWZpbmVkO1xuICAgICAgcmV0dXJuIChhcnJheSAmJiBhcnJheS5sZW5ndGgpID8gYmFzZVVuaXEoYXJyYXksIHVuZGVmaW5lZCwgY29tcGFyYXRvcikgOiBbXTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCBpcyBsaWtlIGBfLnppcGAgZXhjZXB0IHRoYXQgaXQgYWNjZXB0cyBhbiBhcnJheSBvZiBncm91cGVkXG4gICAgICogZWxlbWVudHMgYW5kIGNyZWF0ZXMgYW4gYXJyYXkgcmVncm91cGluZyB0aGUgZWxlbWVudHMgdG8gdGhlaXIgcHJlLXppcFxuICAgICAqIGNvbmZpZ3VyYXRpb24uXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMS4yLjBcbiAgICAgKiBAY2F0ZWdvcnkgQXJyYXlcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgb2YgZ3JvdXBlZCBlbGVtZW50cyB0byBwcm9jZXNzLlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgbmV3IGFycmF5IG9mIHJlZ3JvdXBlZCBlbGVtZW50cy5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIHppcHBlZCA9IF8uemlwKFsnYScsICdiJ10sIFsxLCAyXSwgW3RydWUsIGZhbHNlXSk7XG4gICAgICogLy8gPT4gW1snYScsIDEsIHRydWVdLCBbJ2InLCAyLCBmYWxzZV1dXG4gICAgICpcbiAgICAgKiBfLnVuemlwKHppcHBlZCk7XG4gICAgICogLy8gPT4gW1snYScsICdiJ10sIFsxLCAyXSwgW3RydWUsIGZhbHNlXV1cbiAgICAgKi9cbiAgICBmdW5jdGlvbiB1bnppcChhcnJheSkge1xuICAgICAgaWYgKCEoYXJyYXkgJiYgYXJyYXkubGVuZ3RoKSkge1xuICAgICAgICByZXR1cm4gW107XG4gICAgICB9XG4gICAgICB2YXIgbGVuZ3RoID0gMDtcbiAgICAgIGFycmF5ID0gYXJyYXlGaWx0ZXIoYXJyYXksIGZ1bmN0aW9uKGdyb3VwKSB7XG4gICAgICAgIGlmIChpc0FycmF5TGlrZU9iamVjdChncm91cCkpIHtcbiAgICAgICAgICBsZW5ndGggPSBuYXRpdmVNYXgoZ3JvdXAubGVuZ3RoLCBsZW5ndGgpO1xuICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICAgIHJldHVybiBiYXNlVGltZXMobGVuZ3RoLCBmdW5jdGlvbihpbmRleCkge1xuICAgICAgICByZXR1cm4gYXJyYXlNYXAoYXJyYXksIGJhc2VQcm9wZXJ0eShpbmRleCkpO1xuICAgICAgfSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgaXMgbGlrZSBgXy51bnppcGAgZXhjZXB0IHRoYXQgaXQgYWNjZXB0cyBgaXRlcmF0ZWVgIHRvIHNwZWNpZnlcbiAgICAgKiBob3cgcmVncm91cGVkIHZhbHVlcyBzaG91bGQgYmUgY29tYmluZWQuIFRoZSBpdGVyYXRlZSBpcyBpbnZva2VkIHdpdGggdGhlXG4gICAgICogZWxlbWVudHMgb2YgZWFjaCBncm91cDogKC4uLmdyb3VwKS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAzLjguMFxuICAgICAqIEBjYXRlZ29yeSBBcnJheVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSBvZiBncm91cGVkIGVsZW1lbnRzIHRvIHByb2Nlc3MuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2l0ZXJhdGVlPV8uaWRlbnRpdHldIFRoZSBmdW5jdGlvbiB0byBjb21iaW5lXG4gICAgICogIHJlZ3JvdXBlZCB2YWx1ZXMuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBuZXcgYXJyYXkgb2YgcmVncm91cGVkIGVsZW1lbnRzLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgemlwcGVkID0gXy56aXAoWzEsIDJdLCBbMTAsIDIwXSwgWzEwMCwgMjAwXSk7XG4gICAgICogLy8gPT4gW1sxLCAxMCwgMTAwXSwgWzIsIDIwLCAyMDBdXVxuICAgICAqXG4gICAgICogXy51bnppcFdpdGgoemlwcGVkLCBfLmFkZCk7XG4gICAgICogLy8gPT4gWzMsIDMwLCAzMDBdXG4gICAgICovXG4gICAgZnVuY3Rpb24gdW56aXBXaXRoKGFycmF5LCBpdGVyYXRlZSkge1xuICAgICAgaWYgKCEoYXJyYXkgJiYgYXJyYXkubGVuZ3RoKSkge1xuICAgICAgICByZXR1cm4gW107XG4gICAgICB9XG4gICAgICB2YXIgcmVzdWx0ID0gdW56aXAoYXJyYXkpO1xuICAgICAgaWYgKGl0ZXJhdGVlID09IG51bGwpIHtcbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICAgIH1cbiAgICAgIHJldHVybiBhcnJheU1hcChyZXN1bHQsIGZ1bmN0aW9uKGdyb3VwKSB7XG4gICAgICAgIHJldHVybiBhcHBseShpdGVyYXRlZSwgdW5kZWZpbmVkLCBncm91cCk7XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGFuIGFycmF5IGV4Y2x1ZGluZyBhbGwgZ2l2ZW4gdmFsdWVzIHVzaW5nXG4gICAgICogW2BTYW1lVmFsdWVaZXJvYF0oaHR0cDovL2VjbWEtaW50ZXJuYXRpb25hbC5vcmcvZWNtYS0yNjIvNy4wLyNzZWMtc2FtZXZhbHVlemVybylcbiAgICAgKiBmb3IgZXF1YWxpdHkgY29tcGFyaXNvbnMuXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogVW5saWtlIGBfLnB1bGxgLCB0aGlzIG1ldGhvZCByZXR1cm5zIGEgbmV3IGFycmF5LlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDAuMS4wXG4gICAgICogQGNhdGVnb3J5IEFycmF5XG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIGluc3BlY3QuXG4gICAgICogQHBhcmFtIHsuLi4qfSBbdmFsdWVzXSBUaGUgdmFsdWVzIHRvIGV4Y2x1ZGUuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBuZXcgYXJyYXkgb2YgZmlsdGVyZWQgdmFsdWVzLlxuICAgICAqIEBzZWUgXy5kaWZmZXJlbmNlLCBfLnhvclxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLndpdGhvdXQoWzIsIDEsIDIsIDNdLCAxLCAyKTtcbiAgICAgKiAvLyA9PiBbM11cbiAgICAgKi9cbiAgICB2YXIgd2l0aG91dCA9IGJhc2VSZXN0KGZ1bmN0aW9uKGFycmF5LCB2YWx1ZXMpIHtcbiAgICAgIHJldHVybiBpc0FycmF5TGlrZU9iamVjdChhcnJheSlcbiAgICAgICAgPyBiYXNlRGlmZmVyZW5jZShhcnJheSwgdmFsdWVzKVxuICAgICAgICA6IFtdO1xuICAgIH0pO1xuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhbiBhcnJheSBvZiB1bmlxdWUgdmFsdWVzIHRoYXQgaXMgdGhlXG4gICAgICogW3N5bW1ldHJpYyBkaWZmZXJlbmNlXShodHRwczovL2VuLndpa2lwZWRpYS5vcmcvd2lraS9TeW1tZXRyaWNfZGlmZmVyZW5jZSlcbiAgICAgKiBvZiB0aGUgZ2l2ZW4gYXJyYXlzLiBUaGUgb3JkZXIgb2YgcmVzdWx0IHZhbHVlcyBpcyBkZXRlcm1pbmVkIGJ5IHRoZSBvcmRlclxuICAgICAqIHRoZXkgb2NjdXIgaW4gdGhlIGFycmF5cy5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAyLjQuMFxuICAgICAqIEBjYXRlZ29yeSBBcnJheVxuICAgICAqIEBwYXJhbSB7Li4uQXJyYXl9IFthcnJheXNdIFRoZSBhcnJheXMgdG8gaW5zcGVjdC5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIG5ldyBhcnJheSBvZiBmaWx0ZXJlZCB2YWx1ZXMuXG4gICAgICogQHNlZSBfLmRpZmZlcmVuY2UsIF8ud2l0aG91dFxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLnhvcihbMiwgMV0sIFsyLCAzXSk7XG4gICAgICogLy8gPT4gWzEsIDNdXG4gICAgICovXG4gICAgdmFyIHhvciA9IGJhc2VSZXN0KGZ1bmN0aW9uKGFycmF5cykge1xuICAgICAgcmV0dXJuIGJhc2VYb3IoYXJyYXlGaWx0ZXIoYXJyYXlzLCBpc0FycmF5TGlrZU9iamVjdCkpO1xuICAgIH0pO1xuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgaXMgbGlrZSBgXy54b3JgIGV4Y2VwdCB0aGF0IGl0IGFjY2VwdHMgYGl0ZXJhdGVlYCB3aGljaCBpc1xuICAgICAqIGludm9rZWQgZm9yIGVhY2ggZWxlbWVudCBvZiBlYWNoIGBhcnJheXNgIHRvIGdlbmVyYXRlIHRoZSBjcml0ZXJpb24gYnlcbiAgICAgKiB3aGljaCBieSB3aGljaCB0aGV5J3JlIGNvbXBhcmVkLiBUaGUgb3JkZXIgb2YgcmVzdWx0IHZhbHVlcyBpcyBkZXRlcm1pbmVkXG4gICAgICogYnkgdGhlIG9yZGVyIHRoZXkgb2NjdXIgaW4gdGhlIGFycmF5cy4gVGhlIGl0ZXJhdGVlIGlzIGludm9rZWQgd2l0aCBvbmVcbiAgICAgKiBhcmd1bWVudDogKHZhbHVlKS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBBcnJheVxuICAgICAqIEBwYXJhbSB7Li4uQXJyYXl9IFthcnJheXNdIFRoZSBhcnJheXMgdG8gaW5zcGVjdC5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbaXRlcmF0ZWU9Xy5pZGVudGl0eV0gVGhlIGl0ZXJhdGVlIGludm9rZWQgcGVyIGVsZW1lbnQuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBuZXcgYXJyYXkgb2YgZmlsdGVyZWQgdmFsdWVzLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLnhvckJ5KFsyLjEsIDEuMl0sIFsyLjMsIDMuNF0sIE1hdGguZmxvb3IpO1xuICAgICAqIC8vID0+IFsxLjIsIDMuNF1cbiAgICAgKlxuICAgICAqIC8vIFRoZSBgXy5wcm9wZXJ0eWAgaXRlcmF0ZWUgc2hvcnRoYW5kLlxuICAgICAqIF8ueG9yQnkoW3sgJ3gnOiAxIH1dLCBbeyAneCc6IDIgfSwgeyAneCc6IDEgfV0sICd4Jyk7XG4gICAgICogLy8gPT4gW3sgJ3gnOiAyIH1dXG4gICAgICovXG4gICAgdmFyIHhvckJ5ID0gYmFzZVJlc3QoZnVuY3Rpb24oYXJyYXlzKSB7XG4gICAgICB2YXIgaXRlcmF0ZWUgPSBsYXN0KGFycmF5cyk7XG4gICAgICBpZiAoaXNBcnJheUxpa2VPYmplY3QoaXRlcmF0ZWUpKSB7XG4gICAgICAgIGl0ZXJhdGVlID0gdW5kZWZpbmVkO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGJhc2VYb3IoYXJyYXlGaWx0ZXIoYXJyYXlzLCBpc0FycmF5TGlrZU9iamVjdCksIGdldEl0ZXJhdGVlKGl0ZXJhdGVlLCAyKSk7XG4gICAgfSk7XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCBpcyBsaWtlIGBfLnhvcmAgZXhjZXB0IHRoYXQgaXQgYWNjZXB0cyBgY29tcGFyYXRvcmAgd2hpY2ggaXNcbiAgICAgKiBpbnZva2VkIHRvIGNvbXBhcmUgZWxlbWVudHMgb2YgYGFycmF5c2AuIFRoZSBvcmRlciBvZiByZXN1bHQgdmFsdWVzIGlzXG4gICAgICogZGV0ZXJtaW5lZCBieSB0aGUgb3JkZXIgdGhleSBvY2N1ciBpbiB0aGUgYXJyYXlzLiBUaGUgY29tcGFyYXRvciBpcyBpbnZva2VkXG4gICAgICogd2l0aCB0d28gYXJndW1lbnRzOiAoYXJyVmFsLCBvdGhWYWwpLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IEFycmF5XG4gICAgICogQHBhcmFtIHsuLi5BcnJheX0gW2FycmF5c10gVGhlIGFycmF5cyB0byBpbnNwZWN0LlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtjb21wYXJhdG9yXSBUaGUgY29tcGFyYXRvciBpbnZva2VkIHBlciBlbGVtZW50LlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgbmV3IGFycmF5IG9mIGZpbHRlcmVkIHZhbHVlcy5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIG9iamVjdHMgPSBbeyAneCc6IDEsICd5JzogMiB9LCB7ICd4JzogMiwgJ3knOiAxIH1dO1xuICAgICAqIHZhciBvdGhlcnMgPSBbeyAneCc6IDEsICd5JzogMSB9LCB7ICd4JzogMSwgJ3knOiAyIH1dO1xuICAgICAqXG4gICAgICogXy54b3JXaXRoKG9iamVjdHMsIG90aGVycywgXy5pc0VxdWFsKTtcbiAgICAgKiAvLyA9PiBbeyAneCc6IDIsICd5JzogMSB9LCB7ICd4JzogMSwgJ3knOiAxIH1dXG4gICAgICovXG4gICAgdmFyIHhvcldpdGggPSBiYXNlUmVzdChmdW5jdGlvbihhcnJheXMpIHtcbiAgICAgIHZhciBjb21wYXJhdG9yID0gbGFzdChhcnJheXMpO1xuICAgICAgY29tcGFyYXRvciA9IHR5cGVvZiBjb21wYXJhdG9yID09ICdmdW5jdGlvbicgPyBjb21wYXJhdG9yIDogdW5kZWZpbmVkO1xuICAgICAgcmV0dXJuIGJhc2VYb3IoYXJyYXlGaWx0ZXIoYXJyYXlzLCBpc0FycmF5TGlrZU9iamVjdCksIHVuZGVmaW5lZCwgY29tcGFyYXRvcik7XG4gICAgfSk7XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGFuIGFycmF5IG9mIGdyb3VwZWQgZWxlbWVudHMsIHRoZSBmaXJzdCBvZiB3aGljaCBjb250YWlucyB0aGVcbiAgICAgKiBmaXJzdCBlbGVtZW50cyBvZiB0aGUgZ2l2ZW4gYXJyYXlzLCB0aGUgc2Vjb25kIG9mIHdoaWNoIGNvbnRhaW5zIHRoZVxuICAgICAqIHNlY29uZCBlbGVtZW50cyBvZiB0aGUgZ2l2ZW4gYXJyYXlzLCBhbmQgc28gb24uXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAY2F0ZWdvcnkgQXJyYXlcbiAgICAgKiBAcGFyYW0gey4uLkFycmF5fSBbYXJyYXlzXSBUaGUgYXJyYXlzIHRvIHByb2Nlc3MuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBuZXcgYXJyYXkgb2YgZ3JvdXBlZCBlbGVtZW50cy5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy56aXAoWydhJywgJ2InXSwgWzEsIDJdLCBbdHJ1ZSwgZmFsc2VdKTtcbiAgICAgKiAvLyA9PiBbWydhJywgMSwgdHJ1ZV0sIFsnYicsIDIsIGZhbHNlXV1cbiAgICAgKi9cbiAgICB2YXIgemlwID0gYmFzZVJlc3QodW56aXApO1xuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgaXMgbGlrZSBgXy5mcm9tUGFpcnNgIGV4Y2VwdCB0aGF0IGl0IGFjY2VwdHMgdHdvIGFycmF5cyxcbiAgICAgKiBvbmUgb2YgcHJvcGVydHkgaWRlbnRpZmllcnMgYW5kIG9uZSBvZiBjb3JyZXNwb25kaW5nIHZhbHVlcy5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAwLjQuMFxuICAgICAqIEBjYXRlZ29yeSBBcnJheVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IFtwcm9wcz1bXV0gVGhlIHByb3BlcnR5IGlkZW50aWZpZXJzLlxuICAgICAqIEBwYXJhbSB7QXJyYXl9IFt2YWx1ZXM9W11dIFRoZSBwcm9wZXJ0eSB2YWx1ZXMuXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyB0aGUgbmV3IG9iamVjdC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy56aXBPYmplY3QoWydhJywgJ2InXSwgWzEsIDJdKTtcbiAgICAgKiAvLyA9PiB7ICdhJzogMSwgJ2InOiAyIH1cbiAgICAgKi9cbiAgICBmdW5jdGlvbiB6aXBPYmplY3QocHJvcHMsIHZhbHVlcykge1xuICAgICAgcmV0dXJuIGJhc2VaaXBPYmplY3QocHJvcHMgfHwgW10sIHZhbHVlcyB8fCBbXSwgYXNzaWduVmFsdWUpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIGlzIGxpa2UgYF8uemlwT2JqZWN0YCBleGNlcHQgdGhhdCBpdCBzdXBwb3J0cyBwcm9wZXJ0eSBwYXRocy5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjEuMFxuICAgICAqIEBjYXRlZ29yeSBBcnJheVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IFtwcm9wcz1bXV0gVGhlIHByb3BlcnR5IGlkZW50aWZpZXJzLlxuICAgICAqIEBwYXJhbSB7QXJyYXl9IFt2YWx1ZXM9W11dIFRoZSBwcm9wZXJ0eSB2YWx1ZXMuXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyB0aGUgbmV3IG9iamVjdC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy56aXBPYmplY3REZWVwKFsnYS5iWzBdLmMnLCAnYS5iWzFdLmQnXSwgWzEsIDJdKTtcbiAgICAgKiAvLyA9PiB7ICdhJzogeyAnYic6IFt7ICdjJzogMSB9LCB7ICdkJzogMiB9XSB9IH1cbiAgICAgKi9cbiAgICBmdW5jdGlvbiB6aXBPYmplY3REZWVwKHByb3BzLCB2YWx1ZXMpIHtcbiAgICAgIHJldHVybiBiYXNlWmlwT2JqZWN0KHByb3BzIHx8IFtdLCB2YWx1ZXMgfHwgW10sIGJhc2VTZXQpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIGlzIGxpa2UgYF8uemlwYCBleGNlcHQgdGhhdCBpdCBhY2NlcHRzIGBpdGVyYXRlZWAgdG8gc3BlY2lmeVxuICAgICAqIGhvdyBncm91cGVkIHZhbHVlcyBzaG91bGQgYmUgY29tYmluZWQuIFRoZSBpdGVyYXRlZSBpcyBpbnZva2VkIHdpdGggdGhlXG4gICAgICogZWxlbWVudHMgb2YgZWFjaCBncm91cDogKC4uLmdyb3VwKS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAzLjguMFxuICAgICAqIEBjYXRlZ29yeSBBcnJheVxuICAgICAqIEBwYXJhbSB7Li4uQXJyYXl9IFthcnJheXNdIFRoZSBhcnJheXMgdG8gcHJvY2Vzcy5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbaXRlcmF0ZWU9Xy5pZGVudGl0eV0gVGhlIGZ1bmN0aW9uIHRvIGNvbWJpbmVcbiAgICAgKiAgZ3JvdXBlZCB2YWx1ZXMuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBuZXcgYXJyYXkgb2YgZ3JvdXBlZCBlbGVtZW50cy5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy56aXBXaXRoKFsxLCAyXSwgWzEwLCAyMF0sIFsxMDAsIDIwMF0sIGZ1bmN0aW9uKGEsIGIsIGMpIHtcbiAgICAgKiAgIHJldHVybiBhICsgYiArIGM7XG4gICAgICogfSk7XG4gICAgICogLy8gPT4gWzExMSwgMjIyXVxuICAgICAqL1xuICAgIHZhciB6aXBXaXRoID0gYmFzZVJlc3QoZnVuY3Rpb24oYXJyYXlzKSB7XG4gICAgICB2YXIgbGVuZ3RoID0gYXJyYXlzLmxlbmd0aCxcbiAgICAgICAgICBpdGVyYXRlZSA9IGxlbmd0aCA+IDEgPyBhcnJheXNbbGVuZ3RoIC0gMV0gOiB1bmRlZmluZWQ7XG5cbiAgICAgIGl0ZXJhdGVlID0gdHlwZW9mIGl0ZXJhdGVlID09ICdmdW5jdGlvbicgPyAoYXJyYXlzLnBvcCgpLCBpdGVyYXRlZSkgOiB1bmRlZmluZWQ7XG4gICAgICByZXR1cm4gdW56aXBXaXRoKGFycmF5cywgaXRlcmF0ZWUpO1xuICAgIH0pO1xuXG4gICAgLyotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qL1xuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGBsb2Rhc2hgIHdyYXBwZXIgaW5zdGFuY2UgdGhhdCB3cmFwcyBgdmFsdWVgIHdpdGggZXhwbGljaXQgbWV0aG9kXG4gICAgICogY2hhaW4gc2VxdWVuY2VzIGVuYWJsZWQuIFRoZSByZXN1bHQgb2Ygc3VjaCBzZXF1ZW5jZXMgbXVzdCBiZSB1bndyYXBwZWRcbiAgICAgKiB3aXRoIGBfI3ZhbHVlYC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAxLjMuMFxuICAgICAqIEBjYXRlZ29yeSBTZXFcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byB3cmFwLlxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgdGhlIG5ldyBgbG9kYXNoYCB3cmFwcGVyIGluc3RhbmNlLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgdXNlcnMgPSBbXG4gICAgICogICB7ICd1c2VyJzogJ2Jhcm5leScsICAnYWdlJzogMzYgfSxcbiAgICAgKiAgIHsgJ3VzZXInOiAnZnJlZCcsICAgICdhZ2UnOiA0MCB9LFxuICAgICAqICAgeyAndXNlcic6ICdwZWJibGVzJywgJ2FnZSc6IDEgfVxuICAgICAqIF07XG4gICAgICpcbiAgICAgKiB2YXIgeW91bmdlc3QgPSBfXG4gICAgICogICAuY2hhaW4odXNlcnMpXG4gICAgICogICAuc29ydEJ5KCdhZ2UnKVxuICAgICAqICAgLm1hcChmdW5jdGlvbihvKSB7XG4gICAgICogICAgIHJldHVybiBvLnVzZXIgKyAnIGlzICcgKyBvLmFnZTtcbiAgICAgKiAgIH0pXG4gICAgICogICAuaGVhZCgpXG4gICAgICogICAudmFsdWUoKTtcbiAgICAgKiAvLyA9PiAncGViYmxlcyBpcyAxJ1xuICAgICAqL1xuICAgIGZ1bmN0aW9uIGNoYWluKHZhbHVlKSB7XG4gICAgICB2YXIgcmVzdWx0ID0gbG9kYXNoKHZhbHVlKTtcbiAgICAgIHJlc3VsdC5fX2NoYWluX18gPSB0cnVlO1xuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCBpbnZva2VzIGBpbnRlcmNlcHRvcmAgYW5kIHJldHVybnMgYHZhbHVlYC4gVGhlIGludGVyY2VwdG9yXG4gICAgICogaXMgaW52b2tlZCB3aXRoIG9uZSBhcmd1bWVudDsgKHZhbHVlKS4gVGhlIHB1cnBvc2Ugb2YgdGhpcyBtZXRob2QgaXMgdG9cbiAgICAgKiBcInRhcCBpbnRvXCIgYSBtZXRob2QgY2hhaW4gc2VxdWVuY2UgaW4gb3JkZXIgdG8gbW9kaWZ5IGludGVybWVkaWF0ZSByZXN1bHRzLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDAuMS4wXG4gICAgICogQGNhdGVnb3J5IFNlcVxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIHByb3ZpZGUgdG8gYGludGVyY2VwdG9yYC5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBpbnRlcmNlcHRvciBUaGUgZnVuY3Rpb24gdG8gaW52b2tlLlxuICAgICAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIGB2YWx1ZWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8oWzEsIDIsIDNdKVxuICAgICAqICAudGFwKGZ1bmN0aW9uKGFycmF5KSB7XG4gICAgICogICAgLy8gTXV0YXRlIGlucHV0IGFycmF5LlxuICAgICAqICAgIGFycmF5LnBvcCgpO1xuICAgICAqICB9KVxuICAgICAqICAucmV2ZXJzZSgpXG4gICAgICogIC52YWx1ZSgpO1xuICAgICAqIC8vID0+IFsyLCAxXVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHRhcCh2YWx1ZSwgaW50ZXJjZXB0b3IpIHtcbiAgICAgIGludGVyY2VwdG9yKHZhbHVlKTtcbiAgICAgIHJldHVybiB2YWx1ZTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCBpcyBsaWtlIGBfLnRhcGAgZXhjZXB0IHRoYXQgaXQgcmV0dXJucyB0aGUgcmVzdWx0IG9mIGBpbnRlcmNlcHRvcmAuXG4gICAgICogVGhlIHB1cnBvc2Ugb2YgdGhpcyBtZXRob2QgaXMgdG8gXCJwYXNzIHRocnVcIiB2YWx1ZXMgcmVwbGFjaW5nIGludGVybWVkaWF0ZVxuICAgICAqIHJlc3VsdHMgaW4gYSBtZXRob2QgY2hhaW4gc2VxdWVuY2UuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMy4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgU2VxXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gcHJvdmlkZSB0byBgaW50ZXJjZXB0b3JgLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGludGVyY2VwdG9yIFRoZSBmdW5jdGlvbiB0byBpbnZva2UuXG4gICAgICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIHJlc3VsdCBvZiBgaW50ZXJjZXB0b3JgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfKCcgIGFiYyAgJylcbiAgICAgKiAgLmNoYWluKClcbiAgICAgKiAgLnRyaW0oKVxuICAgICAqICAudGhydShmdW5jdGlvbih2YWx1ZSkge1xuICAgICAqICAgIHJldHVybiBbdmFsdWVdO1xuICAgICAqICB9KVxuICAgICAqICAudmFsdWUoKTtcbiAgICAgKiAvLyA9PiBbJ2FiYyddXG4gICAgICovXG4gICAgZnVuY3Rpb24gdGhydSh2YWx1ZSwgaW50ZXJjZXB0b3IpIHtcbiAgICAgIHJldHVybiBpbnRlcmNlcHRvcih2YWx1ZSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgaXMgdGhlIHdyYXBwZXIgdmVyc2lvbiBvZiBgXy5hdGAuXG4gICAgICpcbiAgICAgKiBAbmFtZSBhdFxuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDEuMC4wXG4gICAgICogQGNhdGVnb3J5IFNlcVxuICAgICAqIEBwYXJhbSB7Li4uKHN0cmluZ3xzdHJpbmdbXSl9IFtwYXRoc10gVGhlIHByb3BlcnR5IHBhdGhzIHRvIHBpY2suXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyB0aGUgbmV3IGBsb2Rhc2hgIHdyYXBwZXIgaW5zdGFuY2UuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBvYmplY3QgPSB7ICdhJzogW3sgJ2InOiB7ICdjJzogMyB9IH0sIDRdIH07XG4gICAgICpcbiAgICAgKiBfKG9iamVjdCkuYXQoWydhWzBdLmIuYycsICdhWzFdJ10pLnZhbHVlKCk7XG4gICAgICogLy8gPT4gWzMsIDRdXG4gICAgICovXG4gICAgdmFyIHdyYXBwZXJBdCA9IGZsYXRSZXN0KGZ1bmN0aW9uKHBhdGhzKSB7XG4gICAgICB2YXIgbGVuZ3RoID0gcGF0aHMubGVuZ3RoLFxuICAgICAgICAgIHN0YXJ0ID0gbGVuZ3RoID8gcGF0aHNbMF0gOiAwLFxuICAgICAgICAgIHZhbHVlID0gdGhpcy5fX3dyYXBwZWRfXyxcbiAgICAgICAgICBpbnRlcmNlcHRvciA9IGZ1bmN0aW9uKG9iamVjdCkgeyByZXR1cm4gYmFzZUF0KG9iamVjdCwgcGF0aHMpOyB9O1xuXG4gICAgICBpZiAobGVuZ3RoID4gMSB8fCB0aGlzLl9fYWN0aW9uc19fLmxlbmd0aCB8fFxuICAgICAgICAgICEodmFsdWUgaW5zdGFuY2VvZiBMYXp5V3JhcHBlcikgfHwgIWlzSW5kZXgoc3RhcnQpKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnRocnUoaW50ZXJjZXB0b3IpO1xuICAgICAgfVxuICAgICAgdmFsdWUgPSB2YWx1ZS5zbGljZShzdGFydCwgK3N0YXJ0ICsgKGxlbmd0aCA/IDEgOiAwKSk7XG4gICAgICB2YWx1ZS5fX2FjdGlvbnNfXy5wdXNoKHtcbiAgICAgICAgJ2Z1bmMnOiB0aHJ1LFxuICAgICAgICAnYXJncyc6IFtpbnRlcmNlcHRvcl0sXG4gICAgICAgICd0aGlzQXJnJzogdW5kZWZpbmVkXG4gICAgICB9KTtcbiAgICAgIHJldHVybiBuZXcgTG9kYXNoV3JhcHBlcih2YWx1ZSwgdGhpcy5fX2NoYWluX18pLnRocnUoZnVuY3Rpb24oYXJyYXkpIHtcbiAgICAgICAgaWYgKGxlbmd0aCAmJiAhYXJyYXkubGVuZ3RoKSB7XG4gICAgICAgICAgYXJyYXkucHVzaCh1bmRlZmluZWQpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBhcnJheTtcbiAgICAgIH0pO1xuICAgIH0pO1xuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGBsb2Rhc2hgIHdyYXBwZXIgaW5zdGFuY2Ugd2l0aCBleHBsaWNpdCBtZXRob2QgY2hhaW4gc2VxdWVuY2VzIGVuYWJsZWQuXG4gICAgICpcbiAgICAgKiBAbmFtZSBjaGFpblxuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDAuMS4wXG4gICAgICogQGNhdGVnb3J5IFNlcVxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgdGhlIG5ldyBgbG9kYXNoYCB3cmFwcGVyIGluc3RhbmNlLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgdXNlcnMgPSBbXG4gICAgICogICB7ICd1c2VyJzogJ2Jhcm5leScsICdhZ2UnOiAzNiB9LFxuICAgICAqICAgeyAndXNlcic6ICdmcmVkJywgICAnYWdlJzogNDAgfVxuICAgICAqIF07XG4gICAgICpcbiAgICAgKiAvLyBBIHNlcXVlbmNlIHdpdGhvdXQgZXhwbGljaXQgY2hhaW5pbmcuXG4gICAgICogXyh1c2VycykuaGVhZCgpO1xuICAgICAqIC8vID0+IHsgJ3VzZXInOiAnYmFybmV5JywgJ2FnZSc6IDM2IH1cbiAgICAgKlxuICAgICAqIC8vIEEgc2VxdWVuY2Ugd2l0aCBleHBsaWNpdCBjaGFpbmluZy5cbiAgICAgKiBfKHVzZXJzKVxuICAgICAqICAgLmNoYWluKClcbiAgICAgKiAgIC5oZWFkKClcbiAgICAgKiAgIC5waWNrKCd1c2VyJylcbiAgICAgKiAgIC52YWx1ZSgpO1xuICAgICAqIC8vID0+IHsgJ3VzZXInOiAnYmFybmV5JyB9XG4gICAgICovXG4gICAgZnVuY3Rpb24gd3JhcHBlckNoYWluKCkge1xuICAgICAgcmV0dXJuIGNoYWluKHRoaXMpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEV4ZWN1dGVzIHRoZSBjaGFpbiBzZXF1ZW5jZSBhbmQgcmV0dXJucyB0aGUgd3JhcHBlZCByZXN1bHQuXG4gICAgICpcbiAgICAgKiBAbmFtZSBjb21taXRcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAzLjIuMFxuICAgICAqIEBjYXRlZ29yeSBTZXFcbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIHRoZSBuZXcgYGxvZGFzaGAgd3JhcHBlciBpbnN0YW5jZS5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIGFycmF5ID0gWzEsIDJdO1xuICAgICAqIHZhciB3cmFwcGVkID0gXyhhcnJheSkucHVzaCgzKTtcbiAgICAgKlxuICAgICAqIGNvbnNvbGUubG9nKGFycmF5KTtcbiAgICAgKiAvLyA9PiBbMSwgMl1cbiAgICAgKlxuICAgICAqIHdyYXBwZWQgPSB3cmFwcGVkLmNvbW1pdCgpO1xuICAgICAqIGNvbnNvbGUubG9nKGFycmF5KTtcbiAgICAgKiAvLyA9PiBbMSwgMiwgM11cbiAgICAgKlxuICAgICAqIHdyYXBwZWQubGFzdCgpO1xuICAgICAqIC8vID0+IDNcbiAgICAgKlxuICAgICAqIGNvbnNvbGUubG9nKGFycmF5KTtcbiAgICAgKiAvLyA9PiBbMSwgMiwgM11cbiAgICAgKi9cbiAgICBmdW5jdGlvbiB3cmFwcGVyQ29tbWl0KCkge1xuICAgICAgcmV0dXJuIG5ldyBMb2Rhc2hXcmFwcGVyKHRoaXMudmFsdWUoKSwgdGhpcy5fX2NoYWluX18pO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEdldHMgdGhlIG5leHQgdmFsdWUgb24gYSB3cmFwcGVkIG9iamVjdCBmb2xsb3dpbmcgdGhlXG4gICAgICogW2l0ZXJhdG9yIHByb3RvY29sXShodHRwczovL21kbi5pby9pdGVyYXRpb25fcHJvdG9jb2xzI2l0ZXJhdG9yKS5cbiAgICAgKlxuICAgICAqIEBuYW1lIG5leHRcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBTZXFcbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIHRoZSBuZXh0IGl0ZXJhdG9yIHZhbHVlLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgd3JhcHBlZCA9IF8oWzEsIDJdKTtcbiAgICAgKlxuICAgICAqIHdyYXBwZWQubmV4dCgpO1xuICAgICAqIC8vID0+IHsgJ2RvbmUnOiBmYWxzZSwgJ3ZhbHVlJzogMSB9XG4gICAgICpcbiAgICAgKiB3cmFwcGVkLm5leHQoKTtcbiAgICAgKiAvLyA9PiB7ICdkb25lJzogZmFsc2UsICd2YWx1ZSc6IDIgfVxuICAgICAqXG4gICAgICogd3JhcHBlZC5uZXh0KCk7XG4gICAgICogLy8gPT4geyAnZG9uZSc6IHRydWUsICd2YWx1ZSc6IHVuZGVmaW5lZCB9XG4gICAgICovXG4gICAgZnVuY3Rpb24gd3JhcHBlck5leHQoKSB7XG4gICAgICBpZiAodGhpcy5fX3ZhbHVlc19fID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgdGhpcy5fX3ZhbHVlc19fID0gdG9BcnJheSh0aGlzLnZhbHVlKCkpO1xuICAgICAgfVxuICAgICAgdmFyIGRvbmUgPSB0aGlzLl9faW5kZXhfXyA+PSB0aGlzLl9fdmFsdWVzX18ubGVuZ3RoLFxuICAgICAgICAgIHZhbHVlID0gZG9uZSA/IHVuZGVmaW5lZCA6IHRoaXMuX192YWx1ZXNfX1t0aGlzLl9faW5kZXhfXysrXTtcblxuICAgICAgcmV0dXJuIHsgJ2RvbmUnOiBkb25lLCAndmFsdWUnOiB2YWx1ZSB9O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEVuYWJsZXMgdGhlIHdyYXBwZXIgdG8gYmUgaXRlcmFibGUuXG4gICAgICpcbiAgICAgKiBAbmFtZSBTeW1ib2wuaXRlcmF0b3JcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBTZXFcbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIHRoZSB3cmFwcGVyIG9iamVjdC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIHdyYXBwZWQgPSBfKFsxLCAyXSk7XG4gICAgICpcbiAgICAgKiB3cmFwcGVkW1N5bWJvbC5pdGVyYXRvcl0oKSA9PT0gd3JhcHBlZDtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBBcnJheS5mcm9tKHdyYXBwZWQpO1xuICAgICAqIC8vID0+IFsxLCAyXVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHdyYXBwZXJUb0l0ZXJhdG9yKCkge1xuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGNsb25lIG9mIHRoZSBjaGFpbiBzZXF1ZW5jZSBwbGFudGluZyBgdmFsdWVgIGFzIHRoZSB3cmFwcGVkIHZhbHVlLlxuICAgICAqXG4gICAgICogQG5hbWUgcGxhbnRcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAzLjIuMFxuICAgICAqIEBjYXRlZ29yeSBTZXFcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBwbGFudC5cbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIHRoZSBuZXcgYGxvZGFzaGAgd3JhcHBlciBpbnN0YW5jZS5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogZnVuY3Rpb24gc3F1YXJlKG4pIHtcbiAgICAgKiAgIHJldHVybiBuICogbjtcbiAgICAgKiB9XG4gICAgICpcbiAgICAgKiB2YXIgd3JhcHBlZCA9IF8oWzEsIDJdKS5tYXAoc3F1YXJlKTtcbiAgICAgKiB2YXIgb3RoZXIgPSB3cmFwcGVkLnBsYW50KFszLCA0XSk7XG4gICAgICpcbiAgICAgKiBvdGhlci52YWx1ZSgpO1xuICAgICAqIC8vID0+IFs5LCAxNl1cbiAgICAgKlxuICAgICAqIHdyYXBwZWQudmFsdWUoKTtcbiAgICAgKiAvLyA9PiBbMSwgNF1cbiAgICAgKi9cbiAgICBmdW5jdGlvbiB3cmFwcGVyUGxhbnQodmFsdWUpIHtcbiAgICAgIHZhciByZXN1bHQsXG4gICAgICAgICAgcGFyZW50ID0gdGhpcztcblxuICAgICAgd2hpbGUgKHBhcmVudCBpbnN0YW5jZW9mIGJhc2VMb2Rhc2gpIHtcbiAgICAgICAgdmFyIGNsb25lID0gd3JhcHBlckNsb25lKHBhcmVudCk7XG4gICAgICAgIGNsb25lLl9faW5kZXhfXyA9IDA7XG4gICAgICAgIGNsb25lLl9fdmFsdWVzX18gPSB1bmRlZmluZWQ7XG4gICAgICAgIGlmIChyZXN1bHQpIHtcbiAgICAgICAgICBwcmV2aW91cy5fX3dyYXBwZWRfXyA9IGNsb25lO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHJlc3VsdCA9IGNsb25lO1xuICAgICAgICB9XG4gICAgICAgIHZhciBwcmV2aW91cyA9IGNsb25lO1xuICAgICAgICBwYXJlbnQgPSBwYXJlbnQuX193cmFwcGVkX187XG4gICAgICB9XG4gICAgICBwcmV2aW91cy5fX3dyYXBwZWRfXyA9IHZhbHVlO1xuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCBpcyB0aGUgd3JhcHBlciB2ZXJzaW9uIG9mIGBfLnJldmVyc2VgLlxuICAgICAqXG4gICAgICogKipOb3RlOioqIFRoaXMgbWV0aG9kIG11dGF0ZXMgdGhlIHdyYXBwZWQgYXJyYXkuXG4gICAgICpcbiAgICAgKiBAbmFtZSByZXZlcnNlXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAY2F0ZWdvcnkgU2VxXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyB0aGUgbmV3IGBsb2Rhc2hgIHdyYXBwZXIgaW5zdGFuY2UuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBhcnJheSA9IFsxLCAyLCAzXTtcbiAgICAgKlxuICAgICAqIF8oYXJyYXkpLnJldmVyc2UoKS52YWx1ZSgpXG4gICAgICogLy8gPT4gWzMsIDIsIDFdXG4gICAgICpcbiAgICAgKiBjb25zb2xlLmxvZyhhcnJheSk7XG4gICAgICogLy8gPT4gWzMsIDIsIDFdXG4gICAgICovXG4gICAgZnVuY3Rpb24gd3JhcHBlclJldmVyc2UoKSB7XG4gICAgICB2YXIgdmFsdWUgPSB0aGlzLl9fd3JhcHBlZF9fO1xuICAgICAgaWYgKHZhbHVlIGluc3RhbmNlb2YgTGF6eVdyYXBwZXIpIHtcbiAgICAgICAgdmFyIHdyYXBwZWQgPSB2YWx1ZTtcbiAgICAgICAgaWYgKHRoaXMuX19hY3Rpb25zX18ubGVuZ3RoKSB7XG4gICAgICAgICAgd3JhcHBlZCA9IG5ldyBMYXp5V3JhcHBlcih0aGlzKTtcbiAgICAgICAgfVxuICAgICAgICB3cmFwcGVkID0gd3JhcHBlZC5yZXZlcnNlKCk7XG4gICAgICAgIHdyYXBwZWQuX19hY3Rpb25zX18ucHVzaCh7XG4gICAgICAgICAgJ2Z1bmMnOiB0aHJ1LFxuICAgICAgICAgICdhcmdzJzogW3JldmVyc2VdLFxuICAgICAgICAgICd0aGlzQXJnJzogdW5kZWZpbmVkXG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm4gbmV3IExvZGFzaFdyYXBwZXIod3JhcHBlZCwgdGhpcy5fX2NoYWluX18pO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHRoaXMudGhydShyZXZlcnNlKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBFeGVjdXRlcyB0aGUgY2hhaW4gc2VxdWVuY2UgdG8gcmVzb2x2ZSB0aGUgdW53cmFwcGVkIHZhbHVlLlxuICAgICAqXG4gICAgICogQG5hbWUgdmFsdWVcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBhbGlhcyB0b0pTT04sIHZhbHVlT2ZcbiAgICAgKiBAY2F0ZWdvcnkgU2VxXG4gICAgICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIHJlc29sdmVkIHVud3JhcHBlZCB2YWx1ZS5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXyhbMSwgMiwgM10pLnZhbHVlKCk7XG4gICAgICogLy8gPT4gWzEsIDIsIDNdXG4gICAgICovXG4gICAgZnVuY3Rpb24gd3JhcHBlclZhbHVlKCkge1xuICAgICAgcmV0dXJuIGJhc2VXcmFwcGVyVmFsdWUodGhpcy5fX3dyYXBwZWRfXywgdGhpcy5fX2FjdGlvbnNfXyk7XG4gICAgfVxuXG4gICAgLyotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qL1xuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhbiBvYmplY3QgY29tcG9zZWQgb2Yga2V5cyBnZW5lcmF0ZWQgZnJvbSB0aGUgcmVzdWx0cyBvZiBydW5uaW5nXG4gICAgICogZWFjaCBlbGVtZW50IG9mIGBjb2xsZWN0aW9uYCB0aHJ1IGBpdGVyYXRlZWAuIFRoZSBjb3JyZXNwb25kaW5nIHZhbHVlIG9mXG4gICAgICogZWFjaCBrZXkgaXMgdGhlIG51bWJlciBvZiB0aW1lcyB0aGUga2V5IHdhcyByZXR1cm5lZCBieSBgaXRlcmF0ZWVgLiBUaGVcbiAgICAgKiBpdGVyYXRlZSBpcyBpbnZva2VkIHdpdGggb25lIGFyZ3VtZW50OiAodmFsdWUpLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDAuNS4wXG4gICAgICogQGNhdGVnb3J5IENvbGxlY3Rpb25cbiAgICAgKiBAcGFyYW0ge0FycmF5fE9iamVjdH0gY29sbGVjdGlvbiBUaGUgY29sbGVjdGlvbiB0byBpdGVyYXRlIG92ZXIuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2l0ZXJhdGVlPV8uaWRlbnRpdHldIFRoZSBpdGVyYXRlZSB0byB0cmFuc2Zvcm0ga2V5cy5cbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIHRoZSBjb21wb3NlZCBhZ2dyZWdhdGUgb2JqZWN0LlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmNvdW50QnkoWzYuMSwgNC4yLCA2LjNdLCBNYXRoLmZsb29yKTtcbiAgICAgKiAvLyA9PiB7ICc0JzogMSwgJzYnOiAyIH1cbiAgICAgKlxuICAgICAqIC8vIFRoZSBgXy5wcm9wZXJ0eWAgaXRlcmF0ZWUgc2hvcnRoYW5kLlxuICAgICAqIF8uY291bnRCeShbJ29uZScsICd0d28nLCAndGhyZWUnXSwgJ2xlbmd0aCcpO1xuICAgICAqIC8vID0+IHsgJzMnOiAyLCAnNSc6IDEgfVxuICAgICAqL1xuICAgIHZhciBjb3VudEJ5ID0gY3JlYXRlQWdncmVnYXRvcihmdW5jdGlvbihyZXN1bHQsIHZhbHVlLCBrZXkpIHtcbiAgICAgIGlmIChoYXNPd25Qcm9wZXJ0eS5jYWxsKHJlc3VsdCwga2V5KSkge1xuICAgICAgICArK3Jlc3VsdFtrZXldO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgYmFzZUFzc2lnblZhbHVlKHJlc3VsdCwga2V5LCAxKTtcbiAgICAgIH1cbiAgICB9KTtcblxuICAgIC8qKlxuICAgICAqIENoZWNrcyBpZiBgcHJlZGljYXRlYCByZXR1cm5zIHRydXRoeSBmb3IgKiphbGwqKiBlbGVtZW50cyBvZiBgY29sbGVjdGlvbmAuXG4gICAgICogSXRlcmF0aW9uIGlzIHN0b3BwZWQgb25jZSBgcHJlZGljYXRlYCByZXR1cm5zIGZhbHNleS4gVGhlIHByZWRpY2F0ZSBpc1xuICAgICAqIGludm9rZWQgd2l0aCB0aHJlZSBhcmd1bWVudHM6ICh2YWx1ZSwgaW5kZXh8a2V5LCBjb2xsZWN0aW9uKS5cbiAgICAgKlxuICAgICAqICoqTm90ZToqKiBUaGlzIG1ldGhvZCByZXR1cm5zIGB0cnVlYCBmb3JcbiAgICAgKiBbZW1wdHkgY29sbGVjdGlvbnNdKGh0dHBzOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL0VtcHR5X3NldCkgYmVjYXVzZVxuICAgICAqIFtldmVyeXRoaW5nIGlzIHRydWVdKGh0dHBzOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL1ZhY3VvdXNfdHJ1dGgpIG9mXG4gICAgICogZWxlbWVudHMgb2YgZW1wdHkgY29sbGVjdGlvbnMuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAY2F0ZWdvcnkgQ29sbGVjdGlvblxuICAgICAqIEBwYXJhbSB7QXJyYXl8T2JqZWN0fSBjb2xsZWN0aW9uIFRoZSBjb2xsZWN0aW9uIHRvIGl0ZXJhdGUgb3Zlci5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbcHJlZGljYXRlPV8uaWRlbnRpdHldIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gICAgICogQHBhcmFtLSB7T2JqZWN0fSBbZ3VhcmRdIEVuYWJsZXMgdXNlIGFzIGFuIGl0ZXJhdGVlIGZvciBtZXRob2RzIGxpa2UgYF8ubWFwYC5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYWxsIGVsZW1lbnRzIHBhc3MgdGhlIHByZWRpY2F0ZSBjaGVjayxcbiAgICAgKiAgZWxzZSBgZmFsc2VgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmV2ZXJ5KFt0cnVlLCAxLCBudWxsLCAneWVzJ10sIEJvb2xlYW4pO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICpcbiAgICAgKiB2YXIgdXNlcnMgPSBbXG4gICAgICogICB7ICd1c2VyJzogJ2Jhcm5leScsICdhZ2UnOiAzNiwgJ2FjdGl2ZSc6IGZhbHNlIH0sXG4gICAgICogICB7ICd1c2VyJzogJ2ZyZWQnLCAgICdhZ2UnOiA0MCwgJ2FjdGl2ZSc6IGZhbHNlIH1cbiAgICAgKiBdO1xuICAgICAqXG4gICAgICogLy8gVGhlIGBfLm1hdGNoZXNgIGl0ZXJhdGVlIHNob3J0aGFuZC5cbiAgICAgKiBfLmV2ZXJ5KHVzZXJzLCB7ICd1c2VyJzogJ2Jhcm5leScsICdhY3RpdmUnOiBmYWxzZSB9KTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqXG4gICAgICogLy8gVGhlIGBfLm1hdGNoZXNQcm9wZXJ0eWAgaXRlcmF0ZWUgc2hvcnRoYW5kLlxuICAgICAqIF8uZXZlcnkodXNlcnMsIFsnYWN0aXZlJywgZmFsc2VdKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiAvLyBUaGUgYF8ucHJvcGVydHlgIGl0ZXJhdGVlIHNob3J0aGFuZC5cbiAgICAgKiBfLmV2ZXJ5KHVzZXJzLCAnYWN0aXZlJyk7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBldmVyeShjb2xsZWN0aW9uLCBwcmVkaWNhdGUsIGd1YXJkKSB7XG4gICAgICB2YXIgZnVuYyA9IGlzQXJyYXkoY29sbGVjdGlvbikgPyBhcnJheUV2ZXJ5IDogYmFzZUV2ZXJ5O1xuICAgICAgaWYgKGd1YXJkICYmIGlzSXRlcmF0ZWVDYWxsKGNvbGxlY3Rpb24sIHByZWRpY2F0ZSwgZ3VhcmQpKSB7XG4gICAgICAgIHByZWRpY2F0ZSA9IHVuZGVmaW5lZDtcbiAgICAgIH1cbiAgICAgIHJldHVybiBmdW5jKGNvbGxlY3Rpb24sIGdldEl0ZXJhdGVlKHByZWRpY2F0ZSwgMykpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEl0ZXJhdGVzIG92ZXIgZWxlbWVudHMgb2YgYGNvbGxlY3Rpb25gLCByZXR1cm5pbmcgYW4gYXJyYXkgb2YgYWxsIGVsZW1lbnRzXG4gICAgICogYHByZWRpY2F0ZWAgcmV0dXJucyB0cnV0aHkgZm9yLiBUaGUgcHJlZGljYXRlIGlzIGludm9rZWQgd2l0aCB0aHJlZVxuICAgICAqIGFyZ3VtZW50czogKHZhbHVlLCBpbmRleHxrZXksIGNvbGxlY3Rpb24pLlxuICAgICAqXG4gICAgICogKipOb3RlOioqIFVubGlrZSBgXy5yZW1vdmVgLCB0aGlzIG1ldGhvZCByZXR1cm5zIGEgbmV3IGFycmF5LlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDAuMS4wXG4gICAgICogQGNhdGVnb3J5IENvbGxlY3Rpb25cbiAgICAgKiBAcGFyYW0ge0FycmF5fE9iamVjdH0gY29sbGVjdGlvbiBUaGUgY29sbGVjdGlvbiB0byBpdGVyYXRlIG92ZXIuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW3ByZWRpY2F0ZT1fLmlkZW50aXR5XSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgbmV3IGZpbHRlcmVkIGFycmF5LlxuICAgICAqIEBzZWUgXy5yZWplY3RcbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIHVzZXJzID0gW1xuICAgICAqICAgeyAndXNlcic6ICdiYXJuZXknLCAnYWdlJzogMzYsICdhY3RpdmUnOiB0cnVlIH0sXG4gICAgICogICB7ICd1c2VyJzogJ2ZyZWQnLCAgICdhZ2UnOiA0MCwgJ2FjdGl2ZSc6IGZhbHNlIH1cbiAgICAgKiBdO1xuICAgICAqXG4gICAgICogXy5maWx0ZXIodXNlcnMsIGZ1bmN0aW9uKG8pIHsgcmV0dXJuICFvLmFjdGl2ZTsgfSk7XG4gICAgICogLy8gPT4gb2JqZWN0cyBmb3IgWydmcmVkJ11cbiAgICAgKlxuICAgICAqIC8vIFRoZSBgXy5tYXRjaGVzYCBpdGVyYXRlZSBzaG9ydGhhbmQuXG4gICAgICogXy5maWx0ZXIodXNlcnMsIHsgJ2FnZSc6IDM2LCAnYWN0aXZlJzogdHJ1ZSB9KTtcbiAgICAgKiAvLyA9PiBvYmplY3RzIGZvciBbJ2Jhcm5leSddXG4gICAgICpcbiAgICAgKiAvLyBUaGUgYF8ubWF0Y2hlc1Byb3BlcnR5YCBpdGVyYXRlZSBzaG9ydGhhbmQuXG4gICAgICogXy5maWx0ZXIodXNlcnMsIFsnYWN0aXZlJywgZmFsc2VdKTtcbiAgICAgKiAvLyA9PiBvYmplY3RzIGZvciBbJ2ZyZWQnXVxuICAgICAqXG4gICAgICogLy8gVGhlIGBfLnByb3BlcnR5YCBpdGVyYXRlZSBzaG9ydGhhbmQuXG4gICAgICogXy5maWx0ZXIodXNlcnMsICdhY3RpdmUnKTtcbiAgICAgKiAvLyA9PiBvYmplY3RzIGZvciBbJ2Jhcm5leSddXG4gICAgICpcbiAgICAgKiAvLyBDb21iaW5pbmcgc2V2ZXJhbCBwcmVkaWNhdGVzIHVzaW5nIGBfLm92ZXJFdmVyeWAgb3IgYF8ub3ZlclNvbWVgLlxuICAgICAqIF8uZmlsdGVyKHVzZXJzLCBfLm92ZXJTb21lKFt7ICdhZ2UnOiAzNiB9LCBbJ2FnZScsIDQwXV0pKTtcbiAgICAgKiAvLyA9PiBvYmplY3RzIGZvciBbJ2ZyZWQnLCAnYmFybmV5J11cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBmaWx0ZXIoY29sbGVjdGlvbiwgcHJlZGljYXRlKSB7XG4gICAgICB2YXIgZnVuYyA9IGlzQXJyYXkoY29sbGVjdGlvbikgPyBhcnJheUZpbHRlciA6IGJhc2VGaWx0ZXI7XG4gICAgICByZXR1cm4gZnVuYyhjb2xsZWN0aW9uLCBnZXRJdGVyYXRlZShwcmVkaWNhdGUsIDMpKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBJdGVyYXRlcyBvdmVyIGVsZW1lbnRzIG9mIGBjb2xsZWN0aW9uYCwgcmV0dXJuaW5nIHRoZSBmaXJzdCBlbGVtZW50XG4gICAgICogYHByZWRpY2F0ZWAgcmV0dXJucyB0cnV0aHkgZm9yLiBUaGUgcHJlZGljYXRlIGlzIGludm9rZWQgd2l0aCB0aHJlZVxuICAgICAqIGFyZ3VtZW50czogKHZhbHVlLCBpbmRleHxrZXksIGNvbGxlY3Rpb24pLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDAuMS4wXG4gICAgICogQGNhdGVnb3J5IENvbGxlY3Rpb25cbiAgICAgKiBAcGFyYW0ge0FycmF5fE9iamVjdH0gY29sbGVjdGlvbiBUaGUgY29sbGVjdGlvbiB0byBpbnNwZWN0LlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtwcmVkaWNhdGU9Xy5pZGVudGl0eV0gVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW2Zyb21JbmRleD0wXSBUaGUgaW5kZXggdG8gc2VhcmNoIGZyb20uXG4gICAgICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIG1hdGNoZWQgZWxlbWVudCwgZWxzZSBgdW5kZWZpbmVkYC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIHVzZXJzID0gW1xuICAgICAqICAgeyAndXNlcic6ICdiYXJuZXknLCAgJ2FnZSc6IDM2LCAnYWN0aXZlJzogdHJ1ZSB9LFxuICAgICAqICAgeyAndXNlcic6ICdmcmVkJywgICAgJ2FnZSc6IDQwLCAnYWN0aXZlJzogZmFsc2UgfSxcbiAgICAgKiAgIHsgJ3VzZXInOiAncGViYmxlcycsICdhZ2UnOiAxLCAgJ2FjdGl2ZSc6IHRydWUgfVxuICAgICAqIF07XG4gICAgICpcbiAgICAgKiBfLmZpbmQodXNlcnMsIGZ1bmN0aW9uKG8pIHsgcmV0dXJuIG8uYWdlIDwgNDA7IH0pO1xuICAgICAqIC8vID0+IG9iamVjdCBmb3IgJ2Jhcm5leSdcbiAgICAgKlxuICAgICAqIC8vIFRoZSBgXy5tYXRjaGVzYCBpdGVyYXRlZSBzaG9ydGhhbmQuXG4gICAgICogXy5maW5kKHVzZXJzLCB7ICdhZ2UnOiAxLCAnYWN0aXZlJzogdHJ1ZSB9KTtcbiAgICAgKiAvLyA9PiBvYmplY3QgZm9yICdwZWJibGVzJ1xuICAgICAqXG4gICAgICogLy8gVGhlIGBfLm1hdGNoZXNQcm9wZXJ0eWAgaXRlcmF0ZWUgc2hvcnRoYW5kLlxuICAgICAqIF8uZmluZCh1c2VycywgWydhY3RpdmUnLCBmYWxzZV0pO1xuICAgICAqIC8vID0+IG9iamVjdCBmb3IgJ2ZyZWQnXG4gICAgICpcbiAgICAgKiAvLyBUaGUgYF8ucHJvcGVydHlgIGl0ZXJhdGVlIHNob3J0aGFuZC5cbiAgICAgKiBfLmZpbmQodXNlcnMsICdhY3RpdmUnKTtcbiAgICAgKiAvLyA9PiBvYmplY3QgZm9yICdiYXJuZXknXG4gICAgICovXG4gICAgdmFyIGZpbmQgPSBjcmVhdGVGaW5kKGZpbmRJbmRleCk7XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCBpcyBsaWtlIGBfLmZpbmRgIGV4Y2VwdCB0aGF0IGl0IGl0ZXJhdGVzIG92ZXIgZWxlbWVudHMgb2ZcbiAgICAgKiBgY29sbGVjdGlvbmAgZnJvbSByaWdodCB0byBsZWZ0LlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDIuMC4wXG4gICAgICogQGNhdGVnb3J5IENvbGxlY3Rpb25cbiAgICAgKiBAcGFyYW0ge0FycmF5fE9iamVjdH0gY29sbGVjdGlvbiBUaGUgY29sbGVjdGlvbiB0byBpbnNwZWN0LlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtwcmVkaWNhdGU9Xy5pZGVudGl0eV0gVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW2Zyb21JbmRleD1jb2xsZWN0aW9uLmxlbmd0aC0xXSBUaGUgaW5kZXggdG8gc2VhcmNoIGZyb20uXG4gICAgICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIG1hdGNoZWQgZWxlbWVudCwgZWxzZSBgdW5kZWZpbmVkYC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5maW5kTGFzdChbMSwgMiwgMywgNF0sIGZ1bmN0aW9uKG4pIHtcbiAgICAgKiAgIHJldHVybiBuICUgMiA9PSAxO1xuICAgICAqIH0pO1xuICAgICAqIC8vID0+IDNcbiAgICAgKi9cbiAgICB2YXIgZmluZExhc3QgPSBjcmVhdGVGaW5kKGZpbmRMYXN0SW5kZXgpO1xuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGZsYXR0ZW5lZCBhcnJheSBvZiB2YWx1ZXMgYnkgcnVubmluZyBlYWNoIGVsZW1lbnQgaW4gYGNvbGxlY3Rpb25gXG4gICAgICogdGhydSBgaXRlcmF0ZWVgIGFuZCBmbGF0dGVuaW5nIHRoZSBtYXBwZWQgcmVzdWx0cy4gVGhlIGl0ZXJhdGVlIGlzIGludm9rZWRcbiAgICAgKiB3aXRoIHRocmVlIGFyZ3VtZW50czogKHZhbHVlLCBpbmRleHxrZXksIGNvbGxlY3Rpb24pLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IENvbGxlY3Rpb25cbiAgICAgKiBAcGFyYW0ge0FycmF5fE9iamVjdH0gY29sbGVjdGlvbiBUaGUgY29sbGVjdGlvbiB0byBpdGVyYXRlIG92ZXIuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2l0ZXJhdGVlPV8uaWRlbnRpdHldIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBuZXcgZmxhdHRlbmVkIGFycmF5LlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBmdW5jdGlvbiBkdXBsaWNhdGUobikge1xuICAgICAqICAgcmV0dXJuIFtuLCBuXTtcbiAgICAgKiB9XG4gICAgICpcbiAgICAgKiBfLmZsYXRNYXAoWzEsIDJdLCBkdXBsaWNhdGUpO1xuICAgICAqIC8vID0+IFsxLCAxLCAyLCAyXVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGZsYXRNYXAoY29sbGVjdGlvbiwgaXRlcmF0ZWUpIHtcbiAgICAgIHJldHVybiBiYXNlRmxhdHRlbihtYXAoY29sbGVjdGlvbiwgaXRlcmF0ZWUpLCAxKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCBpcyBsaWtlIGBfLmZsYXRNYXBgIGV4Y2VwdCB0aGF0IGl0IHJlY3Vyc2l2ZWx5IGZsYXR0ZW5zIHRoZVxuICAgICAqIG1hcHBlZCByZXN1bHRzLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuNy4wXG4gICAgICogQGNhdGVnb3J5IENvbGxlY3Rpb25cbiAgICAgKiBAcGFyYW0ge0FycmF5fE9iamVjdH0gY29sbGVjdGlvbiBUaGUgY29sbGVjdGlvbiB0byBpdGVyYXRlIG92ZXIuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2l0ZXJhdGVlPV8uaWRlbnRpdHldIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBuZXcgZmxhdHRlbmVkIGFycmF5LlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBmdW5jdGlvbiBkdXBsaWNhdGUobikge1xuICAgICAqICAgcmV0dXJuIFtbW24sIG5dXV07XG4gICAgICogfVxuICAgICAqXG4gICAgICogXy5mbGF0TWFwRGVlcChbMSwgMl0sIGR1cGxpY2F0ZSk7XG4gICAgICogLy8gPT4gWzEsIDEsIDIsIDJdXG4gICAgICovXG4gICAgZnVuY3Rpb24gZmxhdE1hcERlZXAoY29sbGVjdGlvbiwgaXRlcmF0ZWUpIHtcbiAgICAgIHJldHVybiBiYXNlRmxhdHRlbihtYXAoY29sbGVjdGlvbiwgaXRlcmF0ZWUpLCBJTkZJTklUWSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgaXMgbGlrZSBgXy5mbGF0TWFwYCBleGNlcHQgdGhhdCBpdCByZWN1cnNpdmVseSBmbGF0dGVucyB0aGVcbiAgICAgKiBtYXBwZWQgcmVzdWx0cyB1cCB0byBgZGVwdGhgIHRpbWVzLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuNy4wXG4gICAgICogQGNhdGVnb3J5IENvbGxlY3Rpb25cbiAgICAgKiBAcGFyYW0ge0FycmF5fE9iamVjdH0gY29sbGVjdGlvbiBUaGUgY29sbGVjdGlvbiB0byBpdGVyYXRlIG92ZXIuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2l0ZXJhdGVlPV8uaWRlbnRpdHldIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFtkZXB0aD0xXSBUaGUgbWF4aW11bSByZWN1cnNpb24gZGVwdGguXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBuZXcgZmxhdHRlbmVkIGFycmF5LlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBmdW5jdGlvbiBkdXBsaWNhdGUobikge1xuICAgICAqICAgcmV0dXJuIFtbW24sIG5dXV07XG4gICAgICogfVxuICAgICAqXG4gICAgICogXy5mbGF0TWFwRGVwdGgoWzEsIDJdLCBkdXBsaWNhdGUsIDIpO1xuICAgICAqIC8vID0+IFtbMSwgMV0sIFsyLCAyXV1cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBmbGF0TWFwRGVwdGgoY29sbGVjdGlvbiwgaXRlcmF0ZWUsIGRlcHRoKSB7XG4gICAgICBkZXB0aCA9IGRlcHRoID09PSB1bmRlZmluZWQgPyAxIDogdG9JbnRlZ2VyKGRlcHRoKTtcbiAgICAgIHJldHVybiBiYXNlRmxhdHRlbihtYXAoY29sbGVjdGlvbiwgaXRlcmF0ZWUpLCBkZXB0aCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogSXRlcmF0ZXMgb3ZlciBlbGVtZW50cyBvZiBgY29sbGVjdGlvbmAgYW5kIGludm9rZXMgYGl0ZXJhdGVlYCBmb3IgZWFjaCBlbGVtZW50LlxuICAgICAqIFRoZSBpdGVyYXRlZSBpcyBpbnZva2VkIHdpdGggdGhyZWUgYXJndW1lbnRzOiAodmFsdWUsIGluZGV4fGtleSwgY29sbGVjdGlvbikuXG4gICAgICogSXRlcmF0ZWUgZnVuY3Rpb25zIG1heSBleGl0IGl0ZXJhdGlvbiBlYXJseSBieSBleHBsaWNpdGx5IHJldHVybmluZyBgZmFsc2VgLlxuICAgICAqXG4gICAgICogKipOb3RlOioqIEFzIHdpdGggb3RoZXIgXCJDb2xsZWN0aW9uc1wiIG1ldGhvZHMsIG9iamVjdHMgd2l0aCBhIFwibGVuZ3RoXCJcbiAgICAgKiBwcm9wZXJ0eSBhcmUgaXRlcmF0ZWQgbGlrZSBhcnJheXMuIFRvIGF2b2lkIHRoaXMgYmVoYXZpb3IgdXNlIGBfLmZvckluYFxuICAgICAqIG9yIGBfLmZvck93bmAgZm9yIG9iamVjdCBpdGVyYXRpb24uXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAYWxpYXMgZWFjaFxuICAgICAqIEBjYXRlZ29yeSBDb2xsZWN0aW9uXG4gICAgICogQHBhcmFtIHtBcnJheXxPYmplY3R9IGNvbGxlY3Rpb24gVGhlIGNvbGxlY3Rpb24gdG8gaXRlcmF0ZSBvdmVyLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtpdGVyYXRlZT1fLmlkZW50aXR5XSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICAgICAqIEByZXR1cm5zIHtBcnJheXxPYmplY3R9IFJldHVybnMgYGNvbGxlY3Rpb25gLlxuICAgICAqIEBzZWUgXy5mb3JFYWNoUmlnaHRcbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5mb3JFYWNoKFsxLCAyXSwgZnVuY3Rpb24odmFsdWUpIHtcbiAgICAgKiAgIGNvbnNvbGUubG9nKHZhbHVlKTtcbiAgICAgKiB9KTtcbiAgICAgKiAvLyA9PiBMb2dzIGAxYCB0aGVuIGAyYC5cbiAgICAgKlxuICAgICAqIF8uZm9yRWFjaCh7ICdhJzogMSwgJ2InOiAyIH0sIGZ1bmN0aW9uKHZhbHVlLCBrZXkpIHtcbiAgICAgKiAgIGNvbnNvbGUubG9nKGtleSk7XG4gICAgICogfSk7XG4gICAgICogLy8gPT4gTG9ncyAnYScgdGhlbiAnYicgKGl0ZXJhdGlvbiBvcmRlciBpcyBub3QgZ3VhcmFudGVlZCkuXG4gICAgICovXG4gICAgZnVuY3Rpb24gZm9yRWFjaChjb2xsZWN0aW9uLCBpdGVyYXRlZSkge1xuICAgICAgdmFyIGZ1bmMgPSBpc0FycmF5KGNvbGxlY3Rpb24pID8gYXJyYXlFYWNoIDogYmFzZUVhY2g7XG4gICAgICByZXR1cm4gZnVuYyhjb2xsZWN0aW9uLCBnZXRJdGVyYXRlZShpdGVyYXRlZSwgMykpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIGlzIGxpa2UgYF8uZm9yRWFjaGAgZXhjZXB0IHRoYXQgaXQgaXRlcmF0ZXMgb3ZlciBlbGVtZW50cyBvZlxuICAgICAqIGBjb2xsZWN0aW9uYCBmcm9tIHJpZ2h0IHRvIGxlZnQuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMi4wLjBcbiAgICAgKiBAYWxpYXMgZWFjaFJpZ2h0XG4gICAgICogQGNhdGVnb3J5IENvbGxlY3Rpb25cbiAgICAgKiBAcGFyYW0ge0FycmF5fE9iamVjdH0gY29sbGVjdGlvbiBUaGUgY29sbGVjdGlvbiB0byBpdGVyYXRlIG92ZXIuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2l0ZXJhdGVlPV8uaWRlbnRpdHldIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gICAgICogQHJldHVybnMge0FycmF5fE9iamVjdH0gUmV0dXJucyBgY29sbGVjdGlvbmAuXG4gICAgICogQHNlZSBfLmZvckVhY2hcbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5mb3JFYWNoUmlnaHQoWzEsIDJdLCBmdW5jdGlvbih2YWx1ZSkge1xuICAgICAqICAgY29uc29sZS5sb2codmFsdWUpO1xuICAgICAqIH0pO1xuICAgICAqIC8vID0+IExvZ3MgYDJgIHRoZW4gYDFgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGZvckVhY2hSaWdodChjb2xsZWN0aW9uLCBpdGVyYXRlZSkge1xuICAgICAgdmFyIGZ1bmMgPSBpc0FycmF5KGNvbGxlY3Rpb24pID8gYXJyYXlFYWNoUmlnaHQgOiBiYXNlRWFjaFJpZ2h0O1xuICAgICAgcmV0dXJuIGZ1bmMoY29sbGVjdGlvbiwgZ2V0SXRlcmF0ZWUoaXRlcmF0ZWUsIDMpKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGFuIG9iamVjdCBjb21wb3NlZCBvZiBrZXlzIGdlbmVyYXRlZCBmcm9tIHRoZSByZXN1bHRzIG9mIHJ1bm5pbmdcbiAgICAgKiBlYWNoIGVsZW1lbnQgb2YgYGNvbGxlY3Rpb25gIHRocnUgYGl0ZXJhdGVlYC4gVGhlIG9yZGVyIG9mIGdyb3VwZWQgdmFsdWVzXG4gICAgICogaXMgZGV0ZXJtaW5lZCBieSB0aGUgb3JkZXIgdGhleSBvY2N1ciBpbiBgY29sbGVjdGlvbmAuIFRoZSBjb3JyZXNwb25kaW5nXG4gICAgICogdmFsdWUgb2YgZWFjaCBrZXkgaXMgYW4gYXJyYXkgb2YgZWxlbWVudHMgcmVzcG9uc2libGUgZm9yIGdlbmVyYXRpbmcgdGhlXG4gICAgICoga2V5LiBUaGUgaXRlcmF0ZWUgaXMgaW52b2tlZCB3aXRoIG9uZSBhcmd1bWVudDogKHZhbHVlKS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBjYXRlZ29yeSBDb2xsZWN0aW9uXG4gICAgICogQHBhcmFtIHtBcnJheXxPYmplY3R9IGNvbGxlY3Rpb24gVGhlIGNvbGxlY3Rpb24gdG8gaXRlcmF0ZSBvdmVyLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtpdGVyYXRlZT1fLmlkZW50aXR5XSBUaGUgaXRlcmF0ZWUgdG8gdHJhbnNmb3JtIGtleXMuXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyB0aGUgY29tcG9zZWQgYWdncmVnYXRlIG9iamVjdC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5ncm91cEJ5KFs2LjEsIDQuMiwgNi4zXSwgTWF0aC5mbG9vcik7XG4gICAgICogLy8gPT4geyAnNCc6IFs0LjJdLCAnNic6IFs2LjEsIDYuM10gfVxuICAgICAqXG4gICAgICogLy8gVGhlIGBfLnByb3BlcnR5YCBpdGVyYXRlZSBzaG9ydGhhbmQuXG4gICAgICogXy5ncm91cEJ5KFsnb25lJywgJ3R3bycsICd0aHJlZSddLCAnbGVuZ3RoJyk7XG4gICAgICogLy8gPT4geyAnMyc6IFsnb25lJywgJ3R3byddLCAnNSc6IFsndGhyZWUnXSB9XG4gICAgICovXG4gICAgdmFyIGdyb3VwQnkgPSBjcmVhdGVBZ2dyZWdhdG9yKGZ1bmN0aW9uKHJlc3VsdCwgdmFsdWUsIGtleSkge1xuICAgICAgaWYgKGhhc093blByb3BlcnR5LmNhbGwocmVzdWx0LCBrZXkpKSB7XG4gICAgICAgIHJlc3VsdFtrZXldLnB1c2godmFsdWUpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgYmFzZUFzc2lnblZhbHVlKHJlc3VsdCwga2V5LCBbdmFsdWVdKTtcbiAgICAgIH1cbiAgICB9KTtcblxuICAgIC8qKlxuICAgICAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGluIGBjb2xsZWN0aW9uYC4gSWYgYGNvbGxlY3Rpb25gIGlzIGEgc3RyaW5nLCBpdCdzXG4gICAgICogY2hlY2tlZCBmb3IgYSBzdWJzdHJpbmcgb2YgYHZhbHVlYCwgb3RoZXJ3aXNlXG4gICAgICogW2BTYW1lVmFsdWVaZXJvYF0oaHR0cDovL2VjbWEtaW50ZXJuYXRpb25hbC5vcmcvZWNtYS0yNjIvNy4wLyNzZWMtc2FtZXZhbHVlemVybylcbiAgICAgKiBpcyB1c2VkIGZvciBlcXVhbGl0eSBjb21wYXJpc29ucy4gSWYgYGZyb21JbmRleGAgaXMgbmVnYXRpdmUsIGl0J3MgdXNlZCBhc1xuICAgICAqIHRoZSBvZmZzZXQgZnJvbSB0aGUgZW5kIG9mIGBjb2xsZWN0aW9uYC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBjYXRlZ29yeSBDb2xsZWN0aW9uXG4gICAgICogQHBhcmFtIHtBcnJheXxPYmplY3R8c3RyaW5nfSBjb2xsZWN0aW9uIFRoZSBjb2xsZWN0aW9uIHRvIGluc3BlY3QuXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gc2VhcmNoIGZvci5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW2Zyb21JbmRleD0wXSBUaGUgaW5kZXggdG8gc2VhcmNoIGZyb20uXG4gICAgICogQHBhcmFtLSB7T2JqZWN0fSBbZ3VhcmRdIEVuYWJsZXMgdXNlIGFzIGFuIGl0ZXJhdGVlIGZvciBtZXRob2RzIGxpa2UgYF8ucmVkdWNlYC5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBmb3VuZCwgZWxzZSBgZmFsc2VgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmluY2x1ZGVzKFsxLCAyLCAzXSwgMSk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogXy5pbmNsdWRlcyhbMSwgMiwgM10sIDEsIDIpO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICpcbiAgICAgKiBfLmluY2x1ZGVzKHsgJ2EnOiAxLCAnYic6IDIgfSwgMSk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogXy5pbmNsdWRlcygnYWJjZCcsICdiYycpO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBpbmNsdWRlcyhjb2xsZWN0aW9uLCB2YWx1ZSwgZnJvbUluZGV4LCBndWFyZCkge1xuICAgICAgY29sbGVjdGlvbiA9IGlzQXJyYXlMaWtlKGNvbGxlY3Rpb24pID8gY29sbGVjdGlvbiA6IHZhbHVlcyhjb2xsZWN0aW9uKTtcbiAgICAgIGZyb21JbmRleCA9IChmcm9tSW5kZXggJiYgIWd1YXJkKSA/IHRvSW50ZWdlcihmcm9tSW5kZXgpIDogMDtcblxuICAgICAgdmFyIGxlbmd0aCA9IGNvbGxlY3Rpb24ubGVuZ3RoO1xuICAgICAgaWYgKGZyb21JbmRleCA8IDApIHtcbiAgICAgICAgZnJvbUluZGV4ID0gbmF0aXZlTWF4KGxlbmd0aCArIGZyb21JbmRleCwgMCk7XG4gICAgICB9XG4gICAgICByZXR1cm4gaXNTdHJpbmcoY29sbGVjdGlvbilcbiAgICAgICAgPyAoZnJvbUluZGV4IDw9IGxlbmd0aCAmJiBjb2xsZWN0aW9uLmluZGV4T2YodmFsdWUsIGZyb21JbmRleCkgPiAtMSlcbiAgICAgICAgOiAoISFsZW5ndGggJiYgYmFzZUluZGV4T2YoY29sbGVjdGlvbiwgdmFsdWUsIGZyb21JbmRleCkgPiAtMSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogSW52b2tlcyB0aGUgbWV0aG9kIGF0IGBwYXRoYCBvZiBlYWNoIGVsZW1lbnQgaW4gYGNvbGxlY3Rpb25gLCByZXR1cm5pbmdcbiAgICAgKiBhbiBhcnJheSBvZiB0aGUgcmVzdWx0cyBvZiBlYWNoIGludm9rZWQgbWV0aG9kLiBBbnkgYWRkaXRpb25hbCBhcmd1bWVudHNcbiAgICAgKiBhcmUgcHJvdmlkZWQgdG8gZWFjaCBpbnZva2VkIG1ldGhvZC4gSWYgYHBhdGhgIGlzIGEgZnVuY3Rpb24sIGl0J3MgaW52b2tlZFxuICAgICAqIGZvciwgYW5kIGB0aGlzYCBib3VuZCB0bywgZWFjaCBlbGVtZW50IGluIGBjb2xsZWN0aW9uYC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBDb2xsZWN0aW9uXG4gICAgICogQHBhcmFtIHtBcnJheXxPYmplY3R9IGNvbGxlY3Rpb24gVGhlIGNvbGxlY3Rpb24gdG8gaXRlcmF0ZSBvdmVyLlxuICAgICAqIEBwYXJhbSB7QXJyYXl8RnVuY3Rpb258c3RyaW5nfSBwYXRoIFRoZSBwYXRoIG9mIHRoZSBtZXRob2QgdG8gaW52b2tlIG9yXG4gICAgICogIHRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gICAgICogQHBhcmFtIHsuLi4qfSBbYXJnc10gVGhlIGFyZ3VtZW50cyB0byBpbnZva2UgZWFjaCBtZXRob2Qgd2l0aC5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIGFycmF5IG9mIHJlc3VsdHMuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uaW52b2tlTWFwKFtbNSwgMSwgN10sIFszLCAyLCAxXV0sICdzb3J0Jyk7XG4gICAgICogLy8gPT4gW1sxLCA1LCA3XSwgWzEsIDIsIDNdXVxuICAgICAqXG4gICAgICogXy5pbnZva2VNYXAoWzEyMywgNDU2XSwgU3RyaW5nLnByb3RvdHlwZS5zcGxpdCwgJycpO1xuICAgICAqIC8vID0+IFtbJzEnLCAnMicsICczJ10sIFsnNCcsICc1JywgJzYnXV1cbiAgICAgKi9cbiAgICB2YXIgaW52b2tlTWFwID0gYmFzZVJlc3QoZnVuY3Rpb24oY29sbGVjdGlvbiwgcGF0aCwgYXJncykge1xuICAgICAgdmFyIGluZGV4ID0gLTEsXG4gICAgICAgICAgaXNGdW5jID0gdHlwZW9mIHBhdGggPT0gJ2Z1bmN0aW9uJyxcbiAgICAgICAgICByZXN1bHQgPSBpc0FycmF5TGlrZShjb2xsZWN0aW9uKSA/IEFycmF5KGNvbGxlY3Rpb24ubGVuZ3RoKSA6IFtdO1xuXG4gICAgICBiYXNlRWFjaChjb2xsZWN0aW9uLCBmdW5jdGlvbih2YWx1ZSkge1xuICAgICAgICByZXN1bHRbKytpbmRleF0gPSBpc0Z1bmMgPyBhcHBseShwYXRoLCB2YWx1ZSwgYXJncykgOiBiYXNlSW52b2tlKHZhbHVlLCBwYXRoLCBhcmdzKTtcbiAgICAgIH0pO1xuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9KTtcblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYW4gb2JqZWN0IGNvbXBvc2VkIG9mIGtleXMgZ2VuZXJhdGVkIGZyb20gdGhlIHJlc3VsdHMgb2YgcnVubmluZ1xuICAgICAqIGVhY2ggZWxlbWVudCBvZiBgY29sbGVjdGlvbmAgdGhydSBgaXRlcmF0ZWVgLiBUaGUgY29ycmVzcG9uZGluZyB2YWx1ZSBvZlxuICAgICAqIGVhY2gga2V5IGlzIHRoZSBsYXN0IGVsZW1lbnQgcmVzcG9uc2libGUgZm9yIGdlbmVyYXRpbmcgdGhlIGtleS4gVGhlXG4gICAgICogaXRlcmF0ZWUgaXMgaW52b2tlZCB3aXRoIG9uZSBhcmd1bWVudDogKHZhbHVlKS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBDb2xsZWN0aW9uXG4gICAgICogQHBhcmFtIHtBcnJheXxPYmplY3R9IGNvbGxlY3Rpb24gVGhlIGNvbGxlY3Rpb24gdG8gaXRlcmF0ZSBvdmVyLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtpdGVyYXRlZT1fLmlkZW50aXR5XSBUaGUgaXRlcmF0ZWUgdG8gdHJhbnNmb3JtIGtleXMuXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyB0aGUgY29tcG9zZWQgYWdncmVnYXRlIG9iamVjdC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIGFycmF5ID0gW1xuICAgICAqICAgeyAnZGlyJzogJ2xlZnQnLCAnY29kZSc6IDk3IH0sXG4gICAgICogICB7ICdkaXInOiAncmlnaHQnLCAnY29kZSc6IDEwMCB9XG4gICAgICogXTtcbiAgICAgKlxuICAgICAqIF8ua2V5QnkoYXJyYXksIGZ1bmN0aW9uKG8pIHtcbiAgICAgKiAgIHJldHVybiBTdHJpbmcuZnJvbUNoYXJDb2RlKG8uY29kZSk7XG4gICAgICogfSk7XG4gICAgICogLy8gPT4geyAnYSc6IHsgJ2Rpcic6ICdsZWZ0JywgJ2NvZGUnOiA5NyB9LCAnZCc6IHsgJ2Rpcic6ICdyaWdodCcsICdjb2RlJzogMTAwIH0gfVxuICAgICAqXG4gICAgICogXy5rZXlCeShhcnJheSwgJ2RpcicpO1xuICAgICAqIC8vID0+IHsgJ2xlZnQnOiB7ICdkaXInOiAnbGVmdCcsICdjb2RlJzogOTcgfSwgJ3JpZ2h0JzogeyAnZGlyJzogJ3JpZ2h0JywgJ2NvZGUnOiAxMDAgfSB9XG4gICAgICovXG4gICAgdmFyIGtleUJ5ID0gY3JlYXRlQWdncmVnYXRvcihmdW5jdGlvbihyZXN1bHQsIHZhbHVlLCBrZXkpIHtcbiAgICAgIGJhc2VBc3NpZ25WYWx1ZShyZXN1bHQsIGtleSwgdmFsdWUpO1xuICAgIH0pO1xuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhbiBhcnJheSBvZiB2YWx1ZXMgYnkgcnVubmluZyBlYWNoIGVsZW1lbnQgaW4gYGNvbGxlY3Rpb25gIHRocnVcbiAgICAgKiBgaXRlcmF0ZWVgLiBUaGUgaXRlcmF0ZWUgaXMgaW52b2tlZCB3aXRoIHRocmVlIGFyZ3VtZW50czpcbiAgICAgKiAodmFsdWUsIGluZGV4fGtleSwgY29sbGVjdGlvbikuXG4gICAgICpcbiAgICAgKiBNYW55IGxvZGFzaCBtZXRob2RzIGFyZSBndWFyZGVkIHRvIHdvcmsgYXMgaXRlcmF0ZWVzIGZvciBtZXRob2RzIGxpa2VcbiAgICAgKiBgXy5ldmVyeWAsIGBfLmZpbHRlcmAsIGBfLm1hcGAsIGBfLm1hcFZhbHVlc2AsIGBfLnJlamVjdGAsIGFuZCBgXy5zb21lYC5cbiAgICAgKlxuICAgICAqIFRoZSBndWFyZGVkIG1ldGhvZHMgYXJlOlxuICAgICAqIGBhcnlgLCBgY2h1bmtgLCBgY3VycnlgLCBgY3VycnlSaWdodGAsIGBkcm9wYCwgYGRyb3BSaWdodGAsIGBldmVyeWAsXG4gICAgICogYGZpbGxgLCBgaW52ZXJ0YCwgYHBhcnNlSW50YCwgYHJhbmRvbWAsIGByYW5nZWAsIGByYW5nZVJpZ2h0YCwgYHJlcGVhdGAsXG4gICAgICogYHNhbXBsZVNpemVgLCBgc2xpY2VgLCBgc29tZWAsIGBzb3J0QnlgLCBgc3BsaXRgLCBgdGFrZWAsIGB0YWtlUmlnaHRgLFxuICAgICAqIGB0ZW1wbGF0ZWAsIGB0cmltYCwgYHRyaW1FbmRgLCBgdHJpbVN0YXJ0YCwgYW5kIGB3b3Jkc2BcbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBjYXRlZ29yeSBDb2xsZWN0aW9uXG4gICAgICogQHBhcmFtIHtBcnJheXxPYmplY3R9IGNvbGxlY3Rpb24gVGhlIGNvbGxlY3Rpb24gdG8gaXRlcmF0ZSBvdmVyLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtpdGVyYXRlZT1fLmlkZW50aXR5XSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgbmV3IG1hcHBlZCBhcnJheS5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogZnVuY3Rpb24gc3F1YXJlKG4pIHtcbiAgICAgKiAgIHJldHVybiBuICogbjtcbiAgICAgKiB9XG4gICAgICpcbiAgICAgKiBfLm1hcChbNCwgOF0sIHNxdWFyZSk7XG4gICAgICogLy8gPT4gWzE2LCA2NF1cbiAgICAgKlxuICAgICAqIF8ubWFwKHsgJ2EnOiA0LCAnYic6IDggfSwgc3F1YXJlKTtcbiAgICAgKiAvLyA9PiBbMTYsIDY0XSAoaXRlcmF0aW9uIG9yZGVyIGlzIG5vdCBndWFyYW50ZWVkKVxuICAgICAqXG4gICAgICogdmFyIHVzZXJzID0gW1xuICAgICAqICAgeyAndXNlcic6ICdiYXJuZXknIH0sXG4gICAgICogICB7ICd1c2VyJzogJ2ZyZWQnIH1cbiAgICAgKiBdO1xuICAgICAqXG4gICAgICogLy8gVGhlIGBfLnByb3BlcnR5YCBpdGVyYXRlZSBzaG9ydGhhbmQuXG4gICAgICogXy5tYXAodXNlcnMsICd1c2VyJyk7XG4gICAgICogLy8gPT4gWydiYXJuZXknLCAnZnJlZCddXG4gICAgICovXG4gICAgZnVuY3Rpb24gbWFwKGNvbGxlY3Rpb24sIGl0ZXJhdGVlKSB7XG4gICAgICB2YXIgZnVuYyA9IGlzQXJyYXkoY29sbGVjdGlvbikgPyBhcnJheU1hcCA6IGJhc2VNYXA7XG4gICAgICByZXR1cm4gZnVuYyhjb2xsZWN0aW9uLCBnZXRJdGVyYXRlZShpdGVyYXRlZSwgMykpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIGlzIGxpa2UgYF8uc29ydEJ5YCBleGNlcHQgdGhhdCBpdCBhbGxvd3Mgc3BlY2lmeWluZyB0aGUgc29ydFxuICAgICAqIG9yZGVycyBvZiB0aGUgaXRlcmF0ZWVzIHRvIHNvcnQgYnkuIElmIGBvcmRlcnNgIGlzIHVuc3BlY2lmaWVkLCBhbGwgdmFsdWVzXG4gICAgICogYXJlIHNvcnRlZCBpbiBhc2NlbmRpbmcgb3JkZXIuIE90aGVyd2lzZSwgc3BlY2lmeSBhbiBvcmRlciBvZiBcImRlc2NcIiBmb3JcbiAgICAgKiBkZXNjZW5kaW5nIG9yIFwiYXNjXCIgZm9yIGFzY2VuZGluZyBzb3J0IG9yZGVyIG9mIGNvcnJlc3BvbmRpbmcgdmFsdWVzLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IENvbGxlY3Rpb25cbiAgICAgKiBAcGFyYW0ge0FycmF5fE9iamVjdH0gY29sbGVjdGlvbiBUaGUgY29sbGVjdGlvbiB0byBpdGVyYXRlIG92ZXIuXG4gICAgICogQHBhcmFtIHtBcnJheVtdfEZ1bmN0aW9uW118T2JqZWN0W118c3RyaW5nW119IFtpdGVyYXRlZXM9W18uaWRlbnRpdHldXVxuICAgICAqICBUaGUgaXRlcmF0ZWVzIHRvIHNvcnQgYnkuXG4gICAgICogQHBhcmFtIHtzdHJpbmdbXX0gW29yZGVyc10gVGhlIHNvcnQgb3JkZXJzIG9mIGBpdGVyYXRlZXNgLlxuICAgICAqIEBwYXJhbS0ge09iamVjdH0gW2d1YXJkXSBFbmFibGVzIHVzZSBhcyBhbiBpdGVyYXRlZSBmb3IgbWV0aG9kcyBsaWtlIGBfLnJlZHVjZWAuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBuZXcgc29ydGVkIGFycmF5LlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgdXNlcnMgPSBbXG4gICAgICogICB7ICd1c2VyJzogJ2ZyZWQnLCAgICdhZ2UnOiA0OCB9LFxuICAgICAqICAgeyAndXNlcic6ICdiYXJuZXknLCAnYWdlJzogMzQgfSxcbiAgICAgKiAgIHsgJ3VzZXInOiAnZnJlZCcsICAgJ2FnZSc6IDQwIH0sXG4gICAgICogICB7ICd1c2VyJzogJ2Jhcm5leScsICdhZ2UnOiAzNiB9XG4gICAgICogXTtcbiAgICAgKlxuICAgICAqIC8vIFNvcnQgYnkgYHVzZXJgIGluIGFzY2VuZGluZyBvcmRlciBhbmQgYnkgYGFnZWAgaW4gZGVzY2VuZGluZyBvcmRlci5cbiAgICAgKiBfLm9yZGVyQnkodXNlcnMsIFsndXNlcicsICdhZ2UnXSwgWydhc2MnLCAnZGVzYyddKTtcbiAgICAgKiAvLyA9PiBvYmplY3RzIGZvciBbWydiYXJuZXknLCAzNl0sIFsnYmFybmV5JywgMzRdLCBbJ2ZyZWQnLCA0OF0sIFsnZnJlZCcsIDQwXV1cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBvcmRlckJ5KGNvbGxlY3Rpb24sIGl0ZXJhdGVlcywgb3JkZXJzLCBndWFyZCkge1xuICAgICAgaWYgKGNvbGxlY3Rpb24gPT0gbnVsbCkge1xuICAgICAgICByZXR1cm4gW107XG4gICAgICB9XG4gICAgICBpZiAoIWlzQXJyYXkoaXRlcmF0ZWVzKSkge1xuICAgICAgICBpdGVyYXRlZXMgPSBpdGVyYXRlZXMgPT0gbnVsbCA/IFtdIDogW2l0ZXJhdGVlc107XG4gICAgICB9XG4gICAgICBvcmRlcnMgPSBndWFyZCA/IHVuZGVmaW5lZCA6IG9yZGVycztcbiAgICAgIGlmICghaXNBcnJheShvcmRlcnMpKSB7XG4gICAgICAgIG9yZGVycyA9IG9yZGVycyA9PSBudWxsID8gW10gOiBbb3JkZXJzXTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBiYXNlT3JkZXJCeShjb2xsZWN0aW9uLCBpdGVyYXRlZXMsIG9yZGVycyk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhbiBhcnJheSBvZiBlbGVtZW50cyBzcGxpdCBpbnRvIHR3byBncm91cHMsIHRoZSBmaXJzdCBvZiB3aGljaFxuICAgICAqIGNvbnRhaW5zIGVsZW1lbnRzIGBwcmVkaWNhdGVgIHJldHVybnMgdHJ1dGh5IGZvciwgdGhlIHNlY29uZCBvZiB3aGljaFxuICAgICAqIGNvbnRhaW5zIGVsZW1lbnRzIGBwcmVkaWNhdGVgIHJldHVybnMgZmFsc2V5IGZvci4gVGhlIHByZWRpY2F0ZSBpc1xuICAgICAqIGludm9rZWQgd2l0aCBvbmUgYXJndW1lbnQ6ICh2YWx1ZSkuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMy4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgQ29sbGVjdGlvblxuICAgICAqIEBwYXJhbSB7QXJyYXl8T2JqZWN0fSBjb2xsZWN0aW9uIFRoZSBjb2xsZWN0aW9uIHRvIGl0ZXJhdGUgb3Zlci5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbcHJlZGljYXRlPV8uaWRlbnRpdHldIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBhcnJheSBvZiBncm91cGVkIGVsZW1lbnRzLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgdXNlcnMgPSBbXG4gICAgICogICB7ICd1c2VyJzogJ2Jhcm5leScsICAnYWdlJzogMzYsICdhY3RpdmUnOiBmYWxzZSB9LFxuICAgICAqICAgeyAndXNlcic6ICdmcmVkJywgICAgJ2FnZSc6IDQwLCAnYWN0aXZlJzogdHJ1ZSB9LFxuICAgICAqICAgeyAndXNlcic6ICdwZWJibGVzJywgJ2FnZSc6IDEsICAnYWN0aXZlJzogZmFsc2UgfVxuICAgICAqIF07XG4gICAgICpcbiAgICAgKiBfLnBhcnRpdGlvbih1c2VycywgZnVuY3Rpb24obykgeyByZXR1cm4gby5hY3RpdmU7IH0pO1xuICAgICAqIC8vID0+IG9iamVjdHMgZm9yIFtbJ2ZyZWQnXSwgWydiYXJuZXknLCAncGViYmxlcyddXVxuICAgICAqXG4gICAgICogLy8gVGhlIGBfLm1hdGNoZXNgIGl0ZXJhdGVlIHNob3J0aGFuZC5cbiAgICAgKiBfLnBhcnRpdGlvbih1c2VycywgeyAnYWdlJzogMSwgJ2FjdGl2ZSc6IGZhbHNlIH0pO1xuICAgICAqIC8vID0+IG9iamVjdHMgZm9yIFtbJ3BlYmJsZXMnXSwgWydiYXJuZXknLCAnZnJlZCddXVxuICAgICAqXG4gICAgICogLy8gVGhlIGBfLm1hdGNoZXNQcm9wZXJ0eWAgaXRlcmF0ZWUgc2hvcnRoYW5kLlxuICAgICAqIF8ucGFydGl0aW9uKHVzZXJzLCBbJ2FjdGl2ZScsIGZhbHNlXSk7XG4gICAgICogLy8gPT4gb2JqZWN0cyBmb3IgW1snYmFybmV5JywgJ3BlYmJsZXMnXSwgWydmcmVkJ11dXG4gICAgICpcbiAgICAgKiAvLyBUaGUgYF8ucHJvcGVydHlgIGl0ZXJhdGVlIHNob3J0aGFuZC5cbiAgICAgKiBfLnBhcnRpdGlvbih1c2VycywgJ2FjdGl2ZScpO1xuICAgICAqIC8vID0+IG9iamVjdHMgZm9yIFtbJ2ZyZWQnXSwgWydiYXJuZXknLCAncGViYmxlcyddXVxuICAgICAqL1xuICAgIHZhciBwYXJ0aXRpb24gPSBjcmVhdGVBZ2dyZWdhdG9yKGZ1bmN0aW9uKHJlc3VsdCwgdmFsdWUsIGtleSkge1xuICAgICAgcmVzdWx0W2tleSA/IDAgOiAxXS5wdXNoKHZhbHVlKTtcbiAgICB9LCBmdW5jdGlvbigpIHsgcmV0dXJuIFtbXSwgW11dOyB9KTtcblxuICAgIC8qKlxuICAgICAqIFJlZHVjZXMgYGNvbGxlY3Rpb25gIHRvIGEgdmFsdWUgd2hpY2ggaXMgdGhlIGFjY3VtdWxhdGVkIHJlc3VsdCBvZiBydW5uaW5nXG4gICAgICogZWFjaCBlbGVtZW50IGluIGBjb2xsZWN0aW9uYCB0aHJ1IGBpdGVyYXRlZWAsIHdoZXJlIGVhY2ggc3VjY2Vzc2l2ZVxuICAgICAqIGludm9jYXRpb24gaXMgc3VwcGxpZWQgdGhlIHJldHVybiB2YWx1ZSBvZiB0aGUgcHJldmlvdXMuIElmIGBhY2N1bXVsYXRvcmBcbiAgICAgKiBpcyBub3QgZ2l2ZW4sIHRoZSBmaXJzdCBlbGVtZW50IG9mIGBjb2xsZWN0aW9uYCBpcyB1c2VkIGFzIHRoZSBpbml0aWFsXG4gICAgICogdmFsdWUuIFRoZSBpdGVyYXRlZSBpcyBpbnZva2VkIHdpdGggZm91ciBhcmd1bWVudHM6XG4gICAgICogKGFjY3VtdWxhdG9yLCB2YWx1ZSwgaW5kZXh8a2V5LCBjb2xsZWN0aW9uKS5cbiAgICAgKlxuICAgICAqIE1hbnkgbG9kYXNoIG1ldGhvZHMgYXJlIGd1YXJkZWQgdG8gd29yayBhcyBpdGVyYXRlZXMgZm9yIG1ldGhvZHMgbGlrZVxuICAgICAqIGBfLnJlZHVjZWAsIGBfLnJlZHVjZVJpZ2h0YCwgYW5kIGBfLnRyYW5zZm9ybWAuXG4gICAgICpcbiAgICAgKiBUaGUgZ3VhcmRlZCBtZXRob2RzIGFyZTpcbiAgICAgKiBgYXNzaWduYCwgYGRlZmF1bHRzYCwgYGRlZmF1bHRzRGVlcGAsIGBpbmNsdWRlc2AsIGBtZXJnZWAsIGBvcmRlckJ5YCxcbiAgICAgKiBhbmQgYHNvcnRCeWBcbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBjYXRlZ29yeSBDb2xsZWN0aW9uXG4gICAgICogQHBhcmFtIHtBcnJheXxPYmplY3R9IGNvbGxlY3Rpb24gVGhlIGNvbGxlY3Rpb24gdG8gaXRlcmF0ZSBvdmVyLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtpdGVyYXRlZT1fLmlkZW50aXR5XSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICAgICAqIEBwYXJhbSB7Kn0gW2FjY3VtdWxhdG9yXSBUaGUgaW5pdGlhbCB2YWx1ZS5cbiAgICAgKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgYWNjdW11bGF0ZWQgdmFsdWUuXG4gICAgICogQHNlZSBfLnJlZHVjZVJpZ2h0XG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8ucmVkdWNlKFsxLCAyXSwgZnVuY3Rpb24oc3VtLCBuKSB7XG4gICAgICogICByZXR1cm4gc3VtICsgbjtcbiAgICAgKiB9LCAwKTtcbiAgICAgKiAvLyA9PiAzXG4gICAgICpcbiAgICAgKiBfLnJlZHVjZSh7ICdhJzogMSwgJ2InOiAyLCAnYyc6IDEgfSwgZnVuY3Rpb24ocmVzdWx0LCB2YWx1ZSwga2V5KSB7XG4gICAgICogICAocmVzdWx0W3ZhbHVlXSB8fCAocmVzdWx0W3ZhbHVlXSA9IFtdKSkucHVzaChrZXkpO1xuICAgICAqICAgcmV0dXJuIHJlc3VsdDtcbiAgICAgKiB9LCB7fSk7XG4gICAgICogLy8gPT4geyAnMSc6IFsnYScsICdjJ10sICcyJzogWydiJ10gfSAoaXRlcmF0aW9uIG9yZGVyIGlzIG5vdCBndWFyYW50ZWVkKVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHJlZHVjZShjb2xsZWN0aW9uLCBpdGVyYXRlZSwgYWNjdW11bGF0b3IpIHtcbiAgICAgIHZhciBmdW5jID0gaXNBcnJheShjb2xsZWN0aW9uKSA/IGFycmF5UmVkdWNlIDogYmFzZVJlZHVjZSxcbiAgICAgICAgICBpbml0QWNjdW0gPSBhcmd1bWVudHMubGVuZ3RoIDwgMztcblxuICAgICAgcmV0dXJuIGZ1bmMoY29sbGVjdGlvbiwgZ2V0SXRlcmF0ZWUoaXRlcmF0ZWUsIDQpLCBhY2N1bXVsYXRvciwgaW5pdEFjY3VtLCBiYXNlRWFjaCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgaXMgbGlrZSBgXy5yZWR1Y2VgIGV4Y2VwdCB0aGF0IGl0IGl0ZXJhdGVzIG92ZXIgZWxlbWVudHMgb2ZcbiAgICAgKiBgY29sbGVjdGlvbmAgZnJvbSByaWdodCB0byBsZWZ0LlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDAuMS4wXG4gICAgICogQGNhdGVnb3J5IENvbGxlY3Rpb25cbiAgICAgKiBAcGFyYW0ge0FycmF5fE9iamVjdH0gY29sbGVjdGlvbiBUaGUgY29sbGVjdGlvbiB0byBpdGVyYXRlIG92ZXIuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2l0ZXJhdGVlPV8uaWRlbnRpdHldIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gICAgICogQHBhcmFtIHsqfSBbYWNjdW11bGF0b3JdIFRoZSBpbml0aWFsIHZhbHVlLlxuICAgICAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSBhY2N1bXVsYXRlZCB2YWx1ZS5cbiAgICAgKiBAc2VlIF8ucmVkdWNlXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBhcnJheSA9IFtbMCwgMV0sIFsyLCAzXSwgWzQsIDVdXTtcbiAgICAgKlxuICAgICAqIF8ucmVkdWNlUmlnaHQoYXJyYXksIGZ1bmN0aW9uKGZsYXR0ZW5lZCwgb3RoZXIpIHtcbiAgICAgKiAgIHJldHVybiBmbGF0dGVuZWQuY29uY2F0KG90aGVyKTtcbiAgICAgKiB9LCBbXSk7XG4gICAgICogLy8gPT4gWzQsIDUsIDIsIDMsIDAsIDFdXG4gICAgICovXG4gICAgZnVuY3Rpb24gcmVkdWNlUmlnaHQoY29sbGVjdGlvbiwgaXRlcmF0ZWUsIGFjY3VtdWxhdG9yKSB7XG4gICAgICB2YXIgZnVuYyA9IGlzQXJyYXkoY29sbGVjdGlvbikgPyBhcnJheVJlZHVjZVJpZ2h0IDogYmFzZVJlZHVjZSxcbiAgICAgICAgICBpbml0QWNjdW0gPSBhcmd1bWVudHMubGVuZ3RoIDwgMztcblxuICAgICAgcmV0dXJuIGZ1bmMoY29sbGVjdGlvbiwgZ2V0SXRlcmF0ZWUoaXRlcmF0ZWUsIDQpLCBhY2N1bXVsYXRvciwgaW5pdEFjY3VtLCBiYXNlRWFjaFJpZ2h0KTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgb3Bwb3NpdGUgb2YgYF8uZmlsdGVyYDsgdGhpcyBtZXRob2QgcmV0dXJucyB0aGUgZWxlbWVudHMgb2YgYGNvbGxlY3Rpb25gXG4gICAgICogdGhhdCBgcHJlZGljYXRlYCBkb2VzICoqbm90KiogcmV0dXJuIHRydXRoeSBmb3IuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAY2F0ZWdvcnkgQ29sbGVjdGlvblxuICAgICAqIEBwYXJhbSB7QXJyYXl8T2JqZWN0fSBjb2xsZWN0aW9uIFRoZSBjb2xsZWN0aW9uIHRvIGl0ZXJhdGUgb3Zlci5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbcHJlZGljYXRlPV8uaWRlbnRpdHldIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBuZXcgZmlsdGVyZWQgYXJyYXkuXG4gICAgICogQHNlZSBfLmZpbHRlclxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgdXNlcnMgPSBbXG4gICAgICogICB7ICd1c2VyJzogJ2Jhcm5leScsICdhZ2UnOiAzNiwgJ2FjdGl2ZSc6IGZhbHNlIH0sXG4gICAgICogICB7ICd1c2VyJzogJ2ZyZWQnLCAgICdhZ2UnOiA0MCwgJ2FjdGl2ZSc6IHRydWUgfVxuICAgICAqIF07XG4gICAgICpcbiAgICAgKiBfLnJlamVjdCh1c2VycywgZnVuY3Rpb24obykgeyByZXR1cm4gIW8uYWN0aXZlOyB9KTtcbiAgICAgKiAvLyA9PiBvYmplY3RzIGZvciBbJ2ZyZWQnXVxuICAgICAqXG4gICAgICogLy8gVGhlIGBfLm1hdGNoZXNgIGl0ZXJhdGVlIHNob3J0aGFuZC5cbiAgICAgKiBfLnJlamVjdCh1c2VycywgeyAnYWdlJzogNDAsICdhY3RpdmUnOiB0cnVlIH0pO1xuICAgICAqIC8vID0+IG9iamVjdHMgZm9yIFsnYmFybmV5J11cbiAgICAgKlxuICAgICAqIC8vIFRoZSBgXy5tYXRjaGVzUHJvcGVydHlgIGl0ZXJhdGVlIHNob3J0aGFuZC5cbiAgICAgKiBfLnJlamVjdCh1c2VycywgWydhY3RpdmUnLCBmYWxzZV0pO1xuICAgICAqIC8vID0+IG9iamVjdHMgZm9yIFsnZnJlZCddXG4gICAgICpcbiAgICAgKiAvLyBUaGUgYF8ucHJvcGVydHlgIGl0ZXJhdGVlIHNob3J0aGFuZC5cbiAgICAgKiBfLnJlamVjdCh1c2VycywgJ2FjdGl2ZScpO1xuICAgICAqIC8vID0+IG9iamVjdHMgZm9yIFsnYmFybmV5J11cbiAgICAgKi9cbiAgICBmdW5jdGlvbiByZWplY3QoY29sbGVjdGlvbiwgcHJlZGljYXRlKSB7XG4gICAgICB2YXIgZnVuYyA9IGlzQXJyYXkoY29sbGVjdGlvbikgPyBhcnJheUZpbHRlciA6IGJhc2VGaWx0ZXI7XG4gICAgICByZXR1cm4gZnVuYyhjb2xsZWN0aW9uLCBuZWdhdGUoZ2V0SXRlcmF0ZWUocHJlZGljYXRlLCAzKSkpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEdldHMgYSByYW5kb20gZWxlbWVudCBmcm9tIGBjb2xsZWN0aW9uYC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAyLjAuMFxuICAgICAqIEBjYXRlZ29yeSBDb2xsZWN0aW9uXG4gICAgICogQHBhcmFtIHtBcnJheXxPYmplY3R9IGNvbGxlY3Rpb24gVGhlIGNvbGxlY3Rpb24gdG8gc2FtcGxlLlxuICAgICAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSByYW5kb20gZWxlbWVudC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5zYW1wbGUoWzEsIDIsIDMsIDRdKTtcbiAgICAgKiAvLyA9PiAyXG4gICAgICovXG4gICAgZnVuY3Rpb24gc2FtcGxlKGNvbGxlY3Rpb24pIHtcbiAgICAgIHZhciBmdW5jID0gaXNBcnJheShjb2xsZWN0aW9uKSA/IGFycmF5U2FtcGxlIDogYmFzZVNhbXBsZTtcbiAgICAgIHJldHVybiBmdW5jKGNvbGxlY3Rpb24pO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEdldHMgYG5gIHJhbmRvbSBlbGVtZW50cyBhdCB1bmlxdWUga2V5cyBmcm9tIGBjb2xsZWN0aW9uYCB1cCB0byB0aGVcbiAgICAgKiBzaXplIG9mIGBjb2xsZWN0aW9uYC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBDb2xsZWN0aW9uXG4gICAgICogQHBhcmFtIHtBcnJheXxPYmplY3R9IGNvbGxlY3Rpb24gVGhlIGNvbGxlY3Rpb24gdG8gc2FtcGxlLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbbj0xXSBUaGUgbnVtYmVyIG9mIGVsZW1lbnRzIHRvIHNhbXBsZS5cbiAgICAgKiBAcGFyYW0tIHtPYmplY3R9IFtndWFyZF0gRW5hYmxlcyB1c2UgYXMgYW4gaXRlcmF0ZWUgZm9yIG1ldGhvZHMgbGlrZSBgXy5tYXBgLlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgcmFuZG9tIGVsZW1lbnRzLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLnNhbXBsZVNpemUoWzEsIDIsIDNdLCAyKTtcbiAgICAgKiAvLyA9PiBbMywgMV1cbiAgICAgKlxuICAgICAqIF8uc2FtcGxlU2l6ZShbMSwgMiwgM10sIDQpO1xuICAgICAqIC8vID0+IFsyLCAzLCAxXVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHNhbXBsZVNpemUoY29sbGVjdGlvbiwgbiwgZ3VhcmQpIHtcbiAgICAgIGlmICgoZ3VhcmQgPyBpc0l0ZXJhdGVlQ2FsbChjb2xsZWN0aW9uLCBuLCBndWFyZCkgOiBuID09PSB1bmRlZmluZWQpKSB7XG4gICAgICAgIG4gPSAxO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgbiA9IHRvSW50ZWdlcihuKTtcbiAgICAgIH1cbiAgICAgIHZhciBmdW5jID0gaXNBcnJheShjb2xsZWN0aW9uKSA/IGFycmF5U2FtcGxlU2l6ZSA6IGJhc2VTYW1wbGVTaXplO1xuICAgICAgcmV0dXJuIGZ1bmMoY29sbGVjdGlvbiwgbik7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhbiBhcnJheSBvZiBzaHVmZmxlZCB2YWx1ZXMsIHVzaW5nIGEgdmVyc2lvbiBvZiB0aGVcbiAgICAgKiBbRmlzaGVyLVlhdGVzIHNodWZmbGVdKGh0dHBzOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL0Zpc2hlci1ZYXRlc19zaHVmZmxlKS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBjYXRlZ29yeSBDb2xsZWN0aW9uXG4gICAgICogQHBhcmFtIHtBcnJheXxPYmplY3R9IGNvbGxlY3Rpb24gVGhlIGNvbGxlY3Rpb24gdG8gc2h1ZmZsZS5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIG5ldyBzaHVmZmxlZCBhcnJheS5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5zaHVmZmxlKFsxLCAyLCAzLCA0XSk7XG4gICAgICogLy8gPT4gWzQsIDEsIDMsIDJdXG4gICAgICovXG4gICAgZnVuY3Rpb24gc2h1ZmZsZShjb2xsZWN0aW9uKSB7XG4gICAgICB2YXIgZnVuYyA9IGlzQXJyYXkoY29sbGVjdGlvbikgPyBhcnJheVNodWZmbGUgOiBiYXNlU2h1ZmZsZTtcbiAgICAgIHJldHVybiBmdW5jKGNvbGxlY3Rpb24pO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEdldHMgdGhlIHNpemUgb2YgYGNvbGxlY3Rpb25gIGJ5IHJldHVybmluZyBpdHMgbGVuZ3RoIGZvciBhcnJheS1saWtlXG4gICAgICogdmFsdWVzIG9yIHRoZSBudW1iZXIgb2Ygb3duIGVudW1lcmFibGUgc3RyaW5nIGtleWVkIHByb3BlcnRpZXMgZm9yIG9iamVjdHMuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAY2F0ZWdvcnkgQ29sbGVjdGlvblxuICAgICAqIEBwYXJhbSB7QXJyYXl8T2JqZWN0fHN0cmluZ30gY29sbGVjdGlvbiBUaGUgY29sbGVjdGlvbiB0byBpbnNwZWN0LlxuICAgICAqIEByZXR1cm5zIHtudW1iZXJ9IFJldHVybnMgdGhlIGNvbGxlY3Rpb24gc2l6ZS5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5zaXplKFsxLCAyLCAzXSk7XG4gICAgICogLy8gPT4gM1xuICAgICAqXG4gICAgICogXy5zaXplKHsgJ2EnOiAxLCAnYic6IDIgfSk7XG4gICAgICogLy8gPT4gMlxuICAgICAqXG4gICAgICogXy5zaXplKCdwZWJibGVzJyk7XG4gICAgICogLy8gPT4gN1xuICAgICAqL1xuICAgIGZ1bmN0aW9uIHNpemUoY29sbGVjdGlvbikge1xuICAgICAgaWYgKGNvbGxlY3Rpb24gPT0gbnVsbCkge1xuICAgICAgICByZXR1cm4gMDtcbiAgICAgIH1cbiAgICAgIGlmIChpc0FycmF5TGlrZShjb2xsZWN0aW9uKSkge1xuICAgICAgICByZXR1cm4gaXNTdHJpbmcoY29sbGVjdGlvbikgPyBzdHJpbmdTaXplKGNvbGxlY3Rpb24pIDogY29sbGVjdGlvbi5sZW5ndGg7XG4gICAgICB9XG4gICAgICB2YXIgdGFnID0gZ2V0VGFnKGNvbGxlY3Rpb24pO1xuICAgICAgaWYgKHRhZyA9PSBtYXBUYWcgfHwgdGFnID09IHNldFRhZykge1xuICAgICAgICByZXR1cm4gY29sbGVjdGlvbi5zaXplO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGJhc2VLZXlzKGNvbGxlY3Rpb24pLmxlbmd0aDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDaGVja3MgaWYgYHByZWRpY2F0ZWAgcmV0dXJucyB0cnV0aHkgZm9yICoqYW55KiogZWxlbWVudCBvZiBgY29sbGVjdGlvbmAuXG4gICAgICogSXRlcmF0aW9uIGlzIHN0b3BwZWQgb25jZSBgcHJlZGljYXRlYCByZXR1cm5zIHRydXRoeS4gVGhlIHByZWRpY2F0ZSBpc1xuICAgICAqIGludm9rZWQgd2l0aCB0aHJlZSBhcmd1bWVudHM6ICh2YWx1ZSwgaW5kZXh8a2V5LCBjb2xsZWN0aW9uKS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBjYXRlZ29yeSBDb2xsZWN0aW9uXG4gICAgICogQHBhcmFtIHtBcnJheXxPYmplY3R9IGNvbGxlY3Rpb24gVGhlIGNvbGxlY3Rpb24gdG8gaXRlcmF0ZSBvdmVyLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtwcmVkaWNhdGU9Xy5pZGVudGl0eV0gVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAgICAgKiBAcGFyYW0tIHtPYmplY3R9IFtndWFyZF0gRW5hYmxlcyB1c2UgYXMgYW4gaXRlcmF0ZWUgZm9yIG1ldGhvZHMgbGlrZSBgXy5tYXBgLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBhbnkgZWxlbWVudCBwYXNzZXMgdGhlIHByZWRpY2F0ZSBjaGVjayxcbiAgICAgKiAgZWxzZSBgZmFsc2VgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLnNvbWUoW251bGwsIDAsICd5ZXMnLCBmYWxzZV0sIEJvb2xlYW4pO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIHZhciB1c2VycyA9IFtcbiAgICAgKiAgIHsgJ3VzZXInOiAnYmFybmV5JywgJ2FjdGl2ZSc6IHRydWUgfSxcbiAgICAgKiAgIHsgJ3VzZXInOiAnZnJlZCcsICAgJ2FjdGl2ZSc6IGZhbHNlIH1cbiAgICAgKiBdO1xuICAgICAqXG4gICAgICogLy8gVGhlIGBfLm1hdGNoZXNgIGl0ZXJhdGVlIHNob3J0aGFuZC5cbiAgICAgKiBfLnNvbWUodXNlcnMsIHsgJ3VzZXInOiAnYmFybmV5JywgJ2FjdGl2ZSc6IGZhbHNlIH0pO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICpcbiAgICAgKiAvLyBUaGUgYF8ubWF0Y2hlc1Byb3BlcnR5YCBpdGVyYXRlZSBzaG9ydGhhbmQuXG4gICAgICogXy5zb21lKHVzZXJzLCBbJ2FjdGl2ZScsIGZhbHNlXSk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogLy8gVGhlIGBfLnByb3BlcnR5YCBpdGVyYXRlZSBzaG9ydGhhbmQuXG4gICAgICogXy5zb21lKHVzZXJzLCAnYWN0aXZlJyk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHNvbWUoY29sbGVjdGlvbiwgcHJlZGljYXRlLCBndWFyZCkge1xuICAgICAgdmFyIGZ1bmMgPSBpc0FycmF5KGNvbGxlY3Rpb24pID8gYXJyYXlTb21lIDogYmFzZVNvbWU7XG4gICAgICBpZiAoZ3VhcmQgJiYgaXNJdGVyYXRlZUNhbGwoY29sbGVjdGlvbiwgcHJlZGljYXRlLCBndWFyZCkpIHtcbiAgICAgICAgcHJlZGljYXRlID0gdW5kZWZpbmVkO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGZ1bmMoY29sbGVjdGlvbiwgZ2V0SXRlcmF0ZWUocHJlZGljYXRlLCAzKSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhbiBhcnJheSBvZiBlbGVtZW50cywgc29ydGVkIGluIGFzY2VuZGluZyBvcmRlciBieSB0aGUgcmVzdWx0cyBvZlxuICAgICAqIHJ1bm5pbmcgZWFjaCBlbGVtZW50IGluIGEgY29sbGVjdGlvbiB0aHJ1IGVhY2ggaXRlcmF0ZWUuIFRoaXMgbWV0aG9kXG4gICAgICogcGVyZm9ybXMgYSBzdGFibGUgc29ydCwgdGhhdCBpcywgaXQgcHJlc2VydmVzIHRoZSBvcmlnaW5hbCBzb3J0IG9yZGVyIG9mXG4gICAgICogZXF1YWwgZWxlbWVudHMuIFRoZSBpdGVyYXRlZXMgYXJlIGludm9rZWQgd2l0aCBvbmUgYXJndW1lbnQ6ICh2YWx1ZSkuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAY2F0ZWdvcnkgQ29sbGVjdGlvblxuICAgICAqIEBwYXJhbSB7QXJyYXl8T2JqZWN0fSBjb2xsZWN0aW9uIFRoZSBjb2xsZWN0aW9uIHRvIGl0ZXJhdGUgb3Zlci5cbiAgICAgKiBAcGFyYW0gey4uLihGdW5jdGlvbnxGdW5jdGlvbltdKX0gW2l0ZXJhdGVlcz1bXy5pZGVudGl0eV1dXG4gICAgICogIFRoZSBpdGVyYXRlZXMgdG8gc29ydCBieS5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIG5ldyBzb3J0ZWQgYXJyYXkuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciB1c2VycyA9IFtcbiAgICAgKiAgIHsgJ3VzZXInOiAnZnJlZCcsICAgJ2FnZSc6IDQ4IH0sXG4gICAgICogICB7ICd1c2VyJzogJ2Jhcm5leScsICdhZ2UnOiAzNiB9LFxuICAgICAqICAgeyAndXNlcic6ICdmcmVkJywgICAnYWdlJzogMzAgfSxcbiAgICAgKiAgIHsgJ3VzZXInOiAnYmFybmV5JywgJ2FnZSc6IDM0IH1cbiAgICAgKiBdO1xuICAgICAqXG4gICAgICogXy5zb3J0QnkodXNlcnMsIFtmdW5jdGlvbihvKSB7IHJldHVybiBvLnVzZXI7IH1dKTtcbiAgICAgKiAvLyA9PiBvYmplY3RzIGZvciBbWydiYXJuZXknLCAzNl0sIFsnYmFybmV5JywgMzRdLCBbJ2ZyZWQnLCA0OF0sIFsnZnJlZCcsIDMwXV1cbiAgICAgKlxuICAgICAqIF8uc29ydEJ5KHVzZXJzLCBbJ3VzZXInLCAnYWdlJ10pO1xuICAgICAqIC8vID0+IG9iamVjdHMgZm9yIFtbJ2Jhcm5leScsIDM0XSwgWydiYXJuZXknLCAzNl0sIFsnZnJlZCcsIDMwXSwgWydmcmVkJywgNDhdXVxuICAgICAqL1xuICAgIHZhciBzb3J0QnkgPSBiYXNlUmVzdChmdW5jdGlvbihjb2xsZWN0aW9uLCBpdGVyYXRlZXMpIHtcbiAgICAgIGlmIChjb2xsZWN0aW9uID09IG51bGwpIHtcbiAgICAgICAgcmV0dXJuIFtdO1xuICAgICAgfVxuICAgICAgdmFyIGxlbmd0aCA9IGl0ZXJhdGVlcy5sZW5ndGg7XG4gICAgICBpZiAobGVuZ3RoID4gMSAmJiBpc0l0ZXJhdGVlQ2FsbChjb2xsZWN0aW9uLCBpdGVyYXRlZXNbMF0sIGl0ZXJhdGVlc1sxXSkpIHtcbiAgICAgICAgaXRlcmF0ZWVzID0gW107XG4gICAgICB9IGVsc2UgaWYgKGxlbmd0aCA+IDIgJiYgaXNJdGVyYXRlZUNhbGwoaXRlcmF0ZWVzWzBdLCBpdGVyYXRlZXNbMV0sIGl0ZXJhdGVlc1syXSkpIHtcbiAgICAgICAgaXRlcmF0ZWVzID0gW2l0ZXJhdGVlc1swXV07XG4gICAgICB9XG4gICAgICByZXR1cm4gYmFzZU9yZGVyQnkoY29sbGVjdGlvbiwgYmFzZUZsYXR0ZW4oaXRlcmF0ZWVzLCAxKSwgW10pO1xuICAgIH0pO1xuXG4gICAgLyotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qL1xuXG4gICAgLyoqXG4gICAgICogR2V0cyB0aGUgdGltZXN0YW1wIG9mIHRoZSBudW1iZXIgb2YgbWlsbGlzZWNvbmRzIHRoYXQgaGF2ZSBlbGFwc2VkIHNpbmNlXG4gICAgICogdGhlIFVuaXggZXBvY2ggKDEgSmFudWFyeSAxOTcwIDAwOjAwOjAwIFVUQykuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMi40LjBcbiAgICAgKiBAY2F0ZWdvcnkgRGF0ZVxuICAgICAqIEByZXR1cm5zIHtudW1iZXJ9IFJldHVybnMgdGhlIHRpbWVzdGFtcC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5kZWZlcihmdW5jdGlvbihzdGFtcCkge1xuICAgICAqICAgY29uc29sZS5sb2coXy5ub3coKSAtIHN0YW1wKTtcbiAgICAgKiB9LCBfLm5vdygpKTtcbiAgICAgKiAvLyA9PiBMb2dzIHRoZSBudW1iZXIgb2YgbWlsbGlzZWNvbmRzIGl0IHRvb2sgZm9yIHRoZSBkZWZlcnJlZCBpbnZvY2F0aW9uLlxuICAgICAqL1xuICAgIHZhciBub3cgPSBjdHhOb3cgfHwgZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4gcm9vdC5EYXRlLm5vdygpO1xuICAgIH07XG5cbiAgICAvKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSovXG5cbiAgICAvKipcbiAgICAgKiBUaGUgb3Bwb3NpdGUgb2YgYF8uYmVmb3JlYDsgdGhpcyBtZXRob2QgY3JlYXRlcyBhIGZ1bmN0aW9uIHRoYXQgaW52b2tlc1xuICAgICAqIGBmdW5jYCBvbmNlIGl0J3MgY2FsbGVkIGBuYCBvciBtb3JlIHRpbWVzLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDAuMS4wXG4gICAgICogQGNhdGVnb3J5IEZ1bmN0aW9uXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IG4gVGhlIG51bWJlciBvZiBjYWxscyBiZWZvcmUgYGZ1bmNgIGlzIGludm9rZWQuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gZnVuYyBUaGUgZnVuY3Rpb24gdG8gcmVzdHJpY3QuXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgcmVzdHJpY3RlZCBmdW5jdGlvbi5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIHNhdmVzID0gWydwcm9maWxlJywgJ3NldHRpbmdzJ107XG4gICAgICpcbiAgICAgKiB2YXIgZG9uZSA9IF8uYWZ0ZXIoc2F2ZXMubGVuZ3RoLCBmdW5jdGlvbigpIHtcbiAgICAgKiAgIGNvbnNvbGUubG9nKCdkb25lIHNhdmluZyEnKTtcbiAgICAgKiB9KTtcbiAgICAgKlxuICAgICAqIF8uZm9yRWFjaChzYXZlcywgZnVuY3Rpb24odHlwZSkge1xuICAgICAqICAgYXN5bmNTYXZlKHsgJ3R5cGUnOiB0eXBlLCAnY29tcGxldGUnOiBkb25lIH0pO1xuICAgICAqIH0pO1xuICAgICAqIC8vID0+IExvZ3MgJ2RvbmUgc2F2aW5nIScgYWZ0ZXIgdGhlIHR3byBhc3luYyBzYXZlcyBoYXZlIGNvbXBsZXRlZC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBhZnRlcihuLCBmdW5jKSB7XG4gICAgICBpZiAodHlwZW9mIGZ1bmMgIT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKEZVTkNfRVJST1JfVEVYVCk7XG4gICAgICB9XG4gICAgICBuID0gdG9JbnRlZ2VyKG4pO1xuICAgICAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgICAgICBpZiAoLS1uIDwgMSkge1xuICAgICAgICAgIHJldHVybiBmdW5jLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gICAgICAgIH1cbiAgICAgIH07XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGZ1bmN0aW9uIHRoYXQgaW52b2tlcyBgZnVuY2AsIHdpdGggdXAgdG8gYG5gIGFyZ3VtZW50cyxcbiAgICAgKiBpZ25vcmluZyBhbnkgYWRkaXRpb25hbCBhcmd1bWVudHMuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMy4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgRnVuY3Rpb25cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdW5jIFRoZSBmdW5jdGlvbiB0byBjYXAgYXJndW1lbnRzIGZvci5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW249ZnVuYy5sZW5ndGhdIFRoZSBhcml0eSBjYXAuXG4gICAgICogQHBhcmFtLSB7T2JqZWN0fSBbZ3VhcmRdIEVuYWJsZXMgdXNlIGFzIGFuIGl0ZXJhdGVlIGZvciBtZXRob2RzIGxpa2UgYF8ubWFwYC5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBjYXBwZWQgZnVuY3Rpb24uXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8ubWFwKFsnNicsICc4JywgJzEwJ10sIF8uYXJ5KHBhcnNlSW50LCAxKSk7XG4gICAgICogLy8gPT4gWzYsIDgsIDEwXVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGFyeShmdW5jLCBuLCBndWFyZCkge1xuICAgICAgbiA9IGd1YXJkID8gdW5kZWZpbmVkIDogbjtcbiAgICAgIG4gPSAoZnVuYyAmJiBuID09IG51bGwpID8gZnVuYy5sZW5ndGggOiBuO1xuICAgICAgcmV0dXJuIGNyZWF0ZVdyYXAoZnVuYywgV1JBUF9BUllfRkxBRywgdW5kZWZpbmVkLCB1bmRlZmluZWQsIHVuZGVmaW5lZCwgdW5kZWZpbmVkLCBuKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgZnVuY3Rpb24gdGhhdCBpbnZva2VzIGBmdW5jYCwgd2l0aCB0aGUgYHRoaXNgIGJpbmRpbmcgYW5kIGFyZ3VtZW50c1xuICAgICAqIG9mIHRoZSBjcmVhdGVkIGZ1bmN0aW9uLCB3aGlsZSBpdCdzIGNhbGxlZCBsZXNzIHRoYW4gYG5gIHRpbWVzLiBTdWJzZXF1ZW50XG4gICAgICogY2FsbHMgdG8gdGhlIGNyZWF0ZWQgZnVuY3Rpb24gcmV0dXJuIHRoZSByZXN1bHQgb2YgdGhlIGxhc3QgYGZ1bmNgIGludm9jYXRpb24uXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMy4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgRnVuY3Rpb25cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gbiBUaGUgbnVtYmVyIG9mIGNhbGxzIGF0IHdoaWNoIGBmdW5jYCBpcyBubyBsb25nZXIgaW52b2tlZC5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdW5jIFRoZSBmdW5jdGlvbiB0byByZXN0cmljdC5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyByZXN0cmljdGVkIGZ1bmN0aW9uLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBqUXVlcnkoZWxlbWVudCkub24oJ2NsaWNrJywgXy5iZWZvcmUoNSwgYWRkQ29udGFjdFRvTGlzdCkpO1xuICAgICAqIC8vID0+IEFsbG93cyBhZGRpbmcgdXAgdG8gNCBjb250YWN0cyB0byB0aGUgbGlzdC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiZWZvcmUobiwgZnVuYykge1xuICAgICAgdmFyIHJlc3VsdDtcbiAgICAgIGlmICh0eXBlb2YgZnVuYyAhPSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoRlVOQ19FUlJPUl9URVhUKTtcbiAgICAgIH1cbiAgICAgIG4gPSB0b0ludGVnZXIobik7XG4gICAgICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgICAgIGlmICgtLW4gPiAwKSB7XG4gICAgICAgICAgcmVzdWx0ID0gZnVuYy5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChuIDw9IDEpIHtcbiAgICAgICAgICBmdW5jID0gdW5kZWZpbmVkO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICB9O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBmdW5jdGlvbiB0aGF0IGludm9rZXMgYGZ1bmNgIHdpdGggdGhlIGB0aGlzYCBiaW5kaW5nIG9mIGB0aGlzQXJnYFxuICAgICAqIGFuZCBgcGFydGlhbHNgIHByZXBlbmRlZCB0byB0aGUgYXJndW1lbnRzIGl0IHJlY2VpdmVzLlxuICAgICAqXG4gICAgICogVGhlIGBfLmJpbmQucGxhY2Vob2xkZXJgIHZhbHVlLCB3aGljaCBkZWZhdWx0cyB0byBgX2AgaW4gbW9ub2xpdGhpYyBidWlsZHMsXG4gICAgICogbWF5IGJlIHVzZWQgYXMgYSBwbGFjZWhvbGRlciBmb3IgcGFydGlhbGx5IGFwcGxpZWQgYXJndW1lbnRzLlxuICAgICAqXG4gICAgICogKipOb3RlOioqIFVubGlrZSBuYXRpdmUgYEZ1bmN0aW9uI2JpbmRgLCB0aGlzIG1ldGhvZCBkb2Vzbid0IHNldCB0aGUgXCJsZW5ndGhcIlxuICAgICAqIHByb3BlcnR5IG9mIGJvdW5kIGZ1bmN0aW9ucy5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBjYXRlZ29yeSBGdW5jdGlvblxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIGJpbmQuXG4gICAgICogQHBhcmFtIHsqfSB0aGlzQXJnIFRoZSBgdGhpc2AgYmluZGluZyBvZiBgZnVuY2AuXG4gICAgICogQHBhcmFtIHsuLi4qfSBbcGFydGlhbHNdIFRoZSBhcmd1bWVudHMgdG8gYmUgcGFydGlhbGx5IGFwcGxpZWQuXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgYm91bmQgZnVuY3Rpb24uXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIGZ1bmN0aW9uIGdyZWV0KGdyZWV0aW5nLCBwdW5jdHVhdGlvbikge1xuICAgICAqICAgcmV0dXJuIGdyZWV0aW5nICsgJyAnICsgdGhpcy51c2VyICsgcHVuY3R1YXRpb247XG4gICAgICogfVxuICAgICAqXG4gICAgICogdmFyIG9iamVjdCA9IHsgJ3VzZXInOiAnZnJlZCcgfTtcbiAgICAgKlxuICAgICAqIHZhciBib3VuZCA9IF8uYmluZChncmVldCwgb2JqZWN0LCAnaGknKTtcbiAgICAgKiBib3VuZCgnIScpO1xuICAgICAqIC8vID0+ICdoaSBmcmVkISdcbiAgICAgKlxuICAgICAqIC8vIEJvdW5kIHdpdGggcGxhY2Vob2xkZXJzLlxuICAgICAqIHZhciBib3VuZCA9IF8uYmluZChncmVldCwgb2JqZWN0LCBfLCAnIScpO1xuICAgICAqIGJvdW5kKCdoaScpO1xuICAgICAqIC8vID0+ICdoaSBmcmVkISdcbiAgICAgKi9cbiAgICB2YXIgYmluZCA9IGJhc2VSZXN0KGZ1bmN0aW9uKGZ1bmMsIHRoaXNBcmcsIHBhcnRpYWxzKSB7XG4gICAgICB2YXIgYml0bWFzayA9IFdSQVBfQklORF9GTEFHO1xuICAgICAgaWYgKHBhcnRpYWxzLmxlbmd0aCkge1xuICAgICAgICB2YXIgaG9sZGVycyA9IHJlcGxhY2VIb2xkZXJzKHBhcnRpYWxzLCBnZXRIb2xkZXIoYmluZCkpO1xuICAgICAgICBiaXRtYXNrIHw9IFdSQVBfUEFSVElBTF9GTEFHO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGNyZWF0ZVdyYXAoZnVuYywgYml0bWFzaywgdGhpc0FyZywgcGFydGlhbHMsIGhvbGRlcnMpO1xuICAgIH0pO1xuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGZ1bmN0aW9uIHRoYXQgaW52b2tlcyB0aGUgbWV0aG9kIGF0IGBvYmplY3Rba2V5XWAgd2l0aCBgcGFydGlhbHNgXG4gICAgICogcHJlcGVuZGVkIHRvIHRoZSBhcmd1bWVudHMgaXQgcmVjZWl2ZXMuXG4gICAgICpcbiAgICAgKiBUaGlzIG1ldGhvZCBkaWZmZXJzIGZyb20gYF8uYmluZGAgYnkgYWxsb3dpbmcgYm91bmQgZnVuY3Rpb25zIHRvIHJlZmVyZW5jZVxuICAgICAqIG1ldGhvZHMgdGhhdCBtYXkgYmUgcmVkZWZpbmVkIG9yIGRvbid0IHlldCBleGlzdC4gU2VlXG4gICAgICogW1BldGVyIE1pY2hhdXgncyBhcnRpY2xlXShodHRwOi8vcGV0ZXIubWljaGF1eC5jYS9hcnRpY2xlcy9sYXp5LWZ1bmN0aW9uLWRlZmluaXRpb24tcGF0dGVybilcbiAgICAgKiBmb3IgbW9yZSBkZXRhaWxzLlxuICAgICAqXG4gICAgICogVGhlIGBfLmJpbmRLZXkucGxhY2Vob2xkZXJgIHZhbHVlLCB3aGljaCBkZWZhdWx0cyB0byBgX2AgaW4gbW9ub2xpdGhpY1xuICAgICAqIGJ1aWxkcywgbWF5IGJlIHVzZWQgYXMgYSBwbGFjZWhvbGRlciBmb3IgcGFydGlhbGx5IGFwcGxpZWQgYXJndW1lbnRzLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDAuMTAuMFxuICAgICAqIEBjYXRlZ29yeSBGdW5jdGlvblxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBpbnZva2UgdGhlIG1ldGhvZCBvbi5cbiAgICAgKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIG1ldGhvZC5cbiAgICAgKiBAcGFyYW0gey4uLip9IFtwYXJ0aWFsc10gVGhlIGFyZ3VtZW50cyB0byBiZSBwYXJ0aWFsbHkgYXBwbGllZC5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBib3VuZCBmdW5jdGlvbi5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIG9iamVjdCA9IHtcbiAgICAgKiAgICd1c2VyJzogJ2ZyZWQnLFxuICAgICAqICAgJ2dyZWV0JzogZnVuY3Rpb24oZ3JlZXRpbmcsIHB1bmN0dWF0aW9uKSB7XG4gICAgICogICAgIHJldHVybiBncmVldGluZyArICcgJyArIHRoaXMudXNlciArIHB1bmN0dWF0aW9uO1xuICAgICAqICAgfVxuICAgICAqIH07XG4gICAgICpcbiAgICAgKiB2YXIgYm91bmQgPSBfLmJpbmRLZXkob2JqZWN0LCAnZ3JlZXQnLCAnaGknKTtcbiAgICAgKiBib3VuZCgnIScpO1xuICAgICAqIC8vID0+ICdoaSBmcmVkISdcbiAgICAgKlxuICAgICAqIG9iamVjdC5ncmVldCA9IGZ1bmN0aW9uKGdyZWV0aW5nLCBwdW5jdHVhdGlvbikge1xuICAgICAqICAgcmV0dXJuIGdyZWV0aW5nICsgJ3lhICcgKyB0aGlzLnVzZXIgKyBwdW5jdHVhdGlvbjtcbiAgICAgKiB9O1xuICAgICAqXG4gICAgICogYm91bmQoJyEnKTtcbiAgICAgKiAvLyA9PiAnaGl5YSBmcmVkISdcbiAgICAgKlxuICAgICAqIC8vIEJvdW5kIHdpdGggcGxhY2Vob2xkZXJzLlxuICAgICAqIHZhciBib3VuZCA9IF8uYmluZEtleShvYmplY3QsICdncmVldCcsIF8sICchJyk7XG4gICAgICogYm91bmQoJ2hpJyk7XG4gICAgICogLy8gPT4gJ2hpeWEgZnJlZCEnXG4gICAgICovXG4gICAgdmFyIGJpbmRLZXkgPSBiYXNlUmVzdChmdW5jdGlvbihvYmplY3QsIGtleSwgcGFydGlhbHMpIHtcbiAgICAgIHZhciBiaXRtYXNrID0gV1JBUF9CSU5EX0ZMQUcgfCBXUkFQX0JJTkRfS0VZX0ZMQUc7XG4gICAgICBpZiAocGFydGlhbHMubGVuZ3RoKSB7XG4gICAgICAgIHZhciBob2xkZXJzID0gcmVwbGFjZUhvbGRlcnMocGFydGlhbHMsIGdldEhvbGRlcihiaW5kS2V5KSk7XG4gICAgICAgIGJpdG1hc2sgfD0gV1JBUF9QQVJUSUFMX0ZMQUc7XG4gICAgICB9XG4gICAgICByZXR1cm4gY3JlYXRlV3JhcChrZXksIGJpdG1hc2ssIG9iamVjdCwgcGFydGlhbHMsIGhvbGRlcnMpO1xuICAgIH0pO1xuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGZ1bmN0aW9uIHRoYXQgYWNjZXB0cyBhcmd1bWVudHMgb2YgYGZ1bmNgIGFuZCBlaXRoZXIgaW52b2tlc1xuICAgICAqIGBmdW5jYCByZXR1cm5pbmcgaXRzIHJlc3VsdCwgaWYgYXQgbGVhc3QgYGFyaXR5YCBudW1iZXIgb2YgYXJndW1lbnRzIGhhdmVcbiAgICAgKiBiZWVuIHByb3ZpZGVkLCBvciByZXR1cm5zIGEgZnVuY3Rpb24gdGhhdCBhY2NlcHRzIHRoZSByZW1haW5pbmcgYGZ1bmNgXG4gICAgICogYXJndW1lbnRzLCBhbmQgc28gb24uIFRoZSBhcml0eSBvZiBgZnVuY2AgbWF5IGJlIHNwZWNpZmllZCBpZiBgZnVuYy5sZW5ndGhgXG4gICAgICogaXMgbm90IHN1ZmZpY2llbnQuXG4gICAgICpcbiAgICAgKiBUaGUgYF8uY3VycnkucGxhY2Vob2xkZXJgIHZhbHVlLCB3aGljaCBkZWZhdWx0cyB0byBgX2AgaW4gbW9ub2xpdGhpYyBidWlsZHMsXG4gICAgICogbWF5IGJlIHVzZWQgYXMgYSBwbGFjZWhvbGRlciBmb3IgcHJvdmlkZWQgYXJndW1lbnRzLlxuICAgICAqXG4gICAgICogKipOb3RlOioqIFRoaXMgbWV0aG9kIGRvZXNuJ3Qgc2V0IHRoZSBcImxlbmd0aFwiIHByb3BlcnR5IG9mIGN1cnJpZWQgZnVuY3Rpb25zLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDIuMC4wXG4gICAgICogQGNhdGVnb3J5IEZ1bmN0aW9uXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gZnVuYyBUaGUgZnVuY3Rpb24gdG8gY3VycnkuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFthcml0eT1mdW5jLmxlbmd0aF0gVGhlIGFyaXR5IG9mIGBmdW5jYC5cbiAgICAgKiBAcGFyYW0tIHtPYmplY3R9IFtndWFyZF0gRW5hYmxlcyB1c2UgYXMgYW4gaXRlcmF0ZWUgZm9yIG1ldGhvZHMgbGlrZSBgXy5tYXBgLlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IGN1cnJpZWQgZnVuY3Rpb24uXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBhYmMgPSBmdW5jdGlvbihhLCBiLCBjKSB7XG4gICAgICogICByZXR1cm4gW2EsIGIsIGNdO1xuICAgICAqIH07XG4gICAgICpcbiAgICAgKiB2YXIgY3VycmllZCA9IF8uY3VycnkoYWJjKTtcbiAgICAgKlxuICAgICAqIGN1cnJpZWQoMSkoMikoMyk7XG4gICAgICogLy8gPT4gWzEsIDIsIDNdXG4gICAgICpcbiAgICAgKiBjdXJyaWVkKDEsIDIpKDMpO1xuICAgICAqIC8vID0+IFsxLCAyLCAzXVxuICAgICAqXG4gICAgICogY3VycmllZCgxLCAyLCAzKTtcbiAgICAgKiAvLyA9PiBbMSwgMiwgM11cbiAgICAgKlxuICAgICAqIC8vIEN1cnJpZWQgd2l0aCBwbGFjZWhvbGRlcnMuXG4gICAgICogY3VycmllZCgxKShfLCAzKSgyKTtcbiAgICAgKiAvLyA9PiBbMSwgMiwgM11cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBjdXJyeShmdW5jLCBhcml0eSwgZ3VhcmQpIHtcbiAgICAgIGFyaXR5ID0gZ3VhcmQgPyB1bmRlZmluZWQgOiBhcml0eTtcbiAgICAgIHZhciByZXN1bHQgPSBjcmVhdGVXcmFwKGZ1bmMsIFdSQVBfQ1VSUllfRkxBRywgdW5kZWZpbmVkLCB1bmRlZmluZWQsIHVuZGVmaW5lZCwgdW5kZWZpbmVkLCB1bmRlZmluZWQsIGFyaXR5KTtcbiAgICAgIHJlc3VsdC5wbGFjZWhvbGRlciA9IGN1cnJ5LnBsYWNlaG9sZGVyO1xuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCBpcyBsaWtlIGBfLmN1cnJ5YCBleGNlcHQgdGhhdCBhcmd1bWVudHMgYXJlIGFwcGxpZWQgdG8gYGZ1bmNgXG4gICAgICogaW4gdGhlIG1hbm5lciBvZiBgXy5wYXJ0aWFsUmlnaHRgIGluc3RlYWQgb2YgYF8ucGFydGlhbGAuXG4gICAgICpcbiAgICAgKiBUaGUgYF8uY3VycnlSaWdodC5wbGFjZWhvbGRlcmAgdmFsdWUsIHdoaWNoIGRlZmF1bHRzIHRvIGBfYCBpbiBtb25vbGl0aGljXG4gICAgICogYnVpbGRzLCBtYXkgYmUgdXNlZCBhcyBhIHBsYWNlaG9sZGVyIGZvciBwcm92aWRlZCBhcmd1bWVudHMuXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogVGhpcyBtZXRob2QgZG9lc24ndCBzZXQgdGhlIFwibGVuZ3RoXCIgcHJvcGVydHkgb2YgY3VycmllZCBmdW5jdGlvbnMuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMy4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgRnVuY3Rpb25cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdW5jIFRoZSBmdW5jdGlvbiB0byBjdXJyeS5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW2FyaXR5PWZ1bmMubGVuZ3RoXSBUaGUgYXJpdHkgb2YgYGZ1bmNgLlxuICAgICAqIEBwYXJhbS0ge09iamVjdH0gW2d1YXJkXSBFbmFibGVzIHVzZSBhcyBhbiBpdGVyYXRlZSBmb3IgbWV0aG9kcyBsaWtlIGBfLm1hcGAuXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgY3VycmllZCBmdW5jdGlvbi5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIGFiYyA9IGZ1bmN0aW9uKGEsIGIsIGMpIHtcbiAgICAgKiAgIHJldHVybiBbYSwgYiwgY107XG4gICAgICogfTtcbiAgICAgKlxuICAgICAqIHZhciBjdXJyaWVkID0gXy5jdXJyeVJpZ2h0KGFiYyk7XG4gICAgICpcbiAgICAgKiBjdXJyaWVkKDMpKDIpKDEpO1xuICAgICAqIC8vID0+IFsxLCAyLCAzXVxuICAgICAqXG4gICAgICogY3VycmllZCgyLCAzKSgxKTtcbiAgICAgKiAvLyA9PiBbMSwgMiwgM11cbiAgICAgKlxuICAgICAqIGN1cnJpZWQoMSwgMiwgMyk7XG4gICAgICogLy8gPT4gWzEsIDIsIDNdXG4gICAgICpcbiAgICAgKiAvLyBDdXJyaWVkIHdpdGggcGxhY2Vob2xkZXJzLlxuICAgICAqIGN1cnJpZWQoMykoMSwgXykoMik7XG4gICAgICogLy8gPT4gWzEsIDIsIDNdXG4gICAgICovXG4gICAgZnVuY3Rpb24gY3VycnlSaWdodChmdW5jLCBhcml0eSwgZ3VhcmQpIHtcbiAgICAgIGFyaXR5ID0gZ3VhcmQgPyB1bmRlZmluZWQgOiBhcml0eTtcbiAgICAgIHZhciByZXN1bHQgPSBjcmVhdGVXcmFwKGZ1bmMsIFdSQVBfQ1VSUllfUklHSFRfRkxBRywgdW5kZWZpbmVkLCB1bmRlZmluZWQsIHVuZGVmaW5lZCwgdW5kZWZpbmVkLCB1bmRlZmluZWQsIGFyaXR5KTtcbiAgICAgIHJlc3VsdC5wbGFjZWhvbGRlciA9IGN1cnJ5UmlnaHQucGxhY2Vob2xkZXI7XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBkZWJvdW5jZWQgZnVuY3Rpb24gdGhhdCBkZWxheXMgaW52b2tpbmcgYGZ1bmNgIHVudGlsIGFmdGVyIGB3YWl0YFxuICAgICAqIG1pbGxpc2Vjb25kcyBoYXZlIGVsYXBzZWQgc2luY2UgdGhlIGxhc3QgdGltZSB0aGUgZGVib3VuY2VkIGZ1bmN0aW9uIHdhc1xuICAgICAqIGludm9rZWQuIFRoZSBkZWJvdW5jZWQgZnVuY3Rpb24gY29tZXMgd2l0aCBhIGBjYW5jZWxgIG1ldGhvZCB0byBjYW5jZWxcbiAgICAgKiBkZWxheWVkIGBmdW5jYCBpbnZvY2F0aW9ucyBhbmQgYSBgZmx1c2hgIG1ldGhvZCB0byBpbW1lZGlhdGVseSBpbnZva2UgdGhlbS5cbiAgICAgKiBQcm92aWRlIGBvcHRpb25zYCB0byBpbmRpY2F0ZSB3aGV0aGVyIGBmdW5jYCBzaG91bGQgYmUgaW52b2tlZCBvbiB0aGVcbiAgICAgKiBsZWFkaW5nIGFuZC9vciB0cmFpbGluZyBlZGdlIG9mIHRoZSBgd2FpdGAgdGltZW91dC4gVGhlIGBmdW5jYCBpcyBpbnZva2VkXG4gICAgICogd2l0aCB0aGUgbGFzdCBhcmd1bWVudHMgcHJvdmlkZWQgdG8gdGhlIGRlYm91bmNlZCBmdW5jdGlvbi4gU3Vic2VxdWVudFxuICAgICAqIGNhbGxzIHRvIHRoZSBkZWJvdW5jZWQgZnVuY3Rpb24gcmV0dXJuIHRoZSByZXN1bHQgb2YgdGhlIGxhc3QgYGZ1bmNgXG4gICAgICogaW52b2NhdGlvbi5cbiAgICAgKlxuICAgICAqICoqTm90ZToqKiBJZiBgbGVhZGluZ2AgYW5kIGB0cmFpbGluZ2Agb3B0aW9ucyBhcmUgYHRydWVgLCBgZnVuY2AgaXNcbiAgICAgKiBpbnZva2VkIG9uIHRoZSB0cmFpbGluZyBlZGdlIG9mIHRoZSB0aW1lb3V0IG9ubHkgaWYgdGhlIGRlYm91bmNlZCBmdW5jdGlvblxuICAgICAqIGlzIGludm9rZWQgbW9yZSB0aGFuIG9uY2UgZHVyaW5nIHRoZSBgd2FpdGAgdGltZW91dC5cbiAgICAgKlxuICAgICAqIElmIGB3YWl0YCBpcyBgMGAgYW5kIGBsZWFkaW5nYCBpcyBgZmFsc2VgLCBgZnVuY2AgaW52b2NhdGlvbiBpcyBkZWZlcnJlZFxuICAgICAqIHVudGlsIHRvIHRoZSBuZXh0IHRpY2ssIHNpbWlsYXIgdG8gYHNldFRpbWVvdXRgIHdpdGggYSB0aW1lb3V0IG9mIGAwYC5cbiAgICAgKlxuICAgICAqIFNlZSBbRGF2aWQgQ29yYmFjaG8ncyBhcnRpY2xlXShodHRwczovL2Nzcy10cmlja3MuY29tL2RlYm91bmNpbmctdGhyb3R0bGluZy1leHBsYWluZWQtZXhhbXBsZXMvKVxuICAgICAqIGZvciBkZXRhaWxzIG92ZXIgdGhlIGRpZmZlcmVuY2VzIGJldHdlZW4gYF8uZGVib3VuY2VgIGFuZCBgXy50aHJvdHRsZWAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAY2F0ZWdvcnkgRnVuY3Rpb25cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdW5jIFRoZSBmdW5jdGlvbiB0byBkZWJvdW5jZS5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW3dhaXQ9MF0gVGhlIG51bWJlciBvZiBtaWxsaXNlY29uZHMgdG8gZGVsYXkuXG4gICAgICogQHBhcmFtIHtPYmplY3R9IFtvcHRpb25zPXt9XSBUaGUgb3B0aW9ucyBvYmplY3QuXG4gICAgICogQHBhcmFtIHtib29sZWFufSBbb3B0aW9ucy5sZWFkaW5nPWZhbHNlXVxuICAgICAqICBTcGVjaWZ5IGludm9raW5nIG9uIHRoZSBsZWFkaW5nIGVkZ2Ugb2YgdGhlIHRpbWVvdXQuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFtvcHRpb25zLm1heFdhaXRdXG4gICAgICogIFRoZSBtYXhpbXVtIHRpbWUgYGZ1bmNgIGlzIGFsbG93ZWQgdG8gYmUgZGVsYXllZCBiZWZvcmUgaXQncyBpbnZva2VkLlxuICAgICAqIEBwYXJhbSB7Ym9vbGVhbn0gW29wdGlvbnMudHJhaWxpbmc9dHJ1ZV1cbiAgICAgKiAgU3BlY2lmeSBpbnZva2luZyBvbiB0aGUgdHJhaWxpbmcgZWRnZSBvZiB0aGUgdGltZW91dC5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBkZWJvdW5jZWQgZnVuY3Rpb24uXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIC8vIEF2b2lkIGNvc3RseSBjYWxjdWxhdGlvbnMgd2hpbGUgdGhlIHdpbmRvdyBzaXplIGlzIGluIGZsdXguXG4gICAgICogalF1ZXJ5KHdpbmRvdykub24oJ3Jlc2l6ZScsIF8uZGVib3VuY2UoY2FsY3VsYXRlTGF5b3V0LCAxNTApKTtcbiAgICAgKlxuICAgICAqIC8vIEludm9rZSBgc2VuZE1haWxgIHdoZW4gY2xpY2tlZCwgZGVib3VuY2luZyBzdWJzZXF1ZW50IGNhbGxzLlxuICAgICAqIGpRdWVyeShlbGVtZW50KS5vbignY2xpY2snLCBfLmRlYm91bmNlKHNlbmRNYWlsLCAzMDAsIHtcbiAgICAgKiAgICdsZWFkaW5nJzogdHJ1ZSxcbiAgICAgKiAgICd0cmFpbGluZyc6IGZhbHNlXG4gICAgICogfSkpO1xuICAgICAqXG4gICAgICogLy8gRW5zdXJlIGBiYXRjaExvZ2AgaXMgaW52b2tlZCBvbmNlIGFmdGVyIDEgc2Vjb25kIG9mIGRlYm91bmNlZCBjYWxscy5cbiAgICAgKiB2YXIgZGVib3VuY2VkID0gXy5kZWJvdW5jZShiYXRjaExvZywgMjUwLCB7ICdtYXhXYWl0JzogMTAwMCB9KTtcbiAgICAgKiB2YXIgc291cmNlID0gbmV3IEV2ZW50U291cmNlKCcvc3RyZWFtJyk7XG4gICAgICogalF1ZXJ5KHNvdXJjZSkub24oJ21lc3NhZ2UnLCBkZWJvdW5jZWQpO1xuICAgICAqXG4gICAgICogLy8gQ2FuY2VsIHRoZSB0cmFpbGluZyBkZWJvdW5jZWQgaW52b2NhdGlvbi5cbiAgICAgKiBqUXVlcnkod2luZG93KS5vbigncG9wc3RhdGUnLCBkZWJvdW5jZWQuY2FuY2VsKTtcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBkZWJvdW5jZShmdW5jLCB3YWl0LCBvcHRpb25zKSB7XG4gICAgICB2YXIgbGFzdEFyZ3MsXG4gICAgICAgICAgbGFzdFRoaXMsXG4gICAgICAgICAgbWF4V2FpdCxcbiAgICAgICAgICByZXN1bHQsXG4gICAgICAgICAgdGltZXJJZCxcbiAgICAgICAgICBsYXN0Q2FsbFRpbWUsXG4gICAgICAgICAgbGFzdEludm9rZVRpbWUgPSAwLFxuICAgICAgICAgIGxlYWRpbmcgPSBmYWxzZSxcbiAgICAgICAgICBtYXhpbmcgPSBmYWxzZSxcbiAgICAgICAgICB0cmFpbGluZyA9IHRydWU7XG5cbiAgICAgIGlmICh0eXBlb2YgZnVuYyAhPSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoRlVOQ19FUlJPUl9URVhUKTtcbiAgICAgIH1cbiAgICAgIHdhaXQgPSB0b051bWJlcih3YWl0KSB8fCAwO1xuICAgICAgaWYgKGlzT2JqZWN0KG9wdGlvbnMpKSB7XG4gICAgICAgIGxlYWRpbmcgPSAhIW9wdGlvbnMubGVhZGluZztcbiAgICAgICAgbWF4aW5nID0gJ21heFdhaXQnIGluIG9wdGlvbnM7XG4gICAgICAgIG1heFdhaXQgPSBtYXhpbmcgPyBuYXRpdmVNYXgodG9OdW1iZXIob3B0aW9ucy5tYXhXYWl0KSB8fCAwLCB3YWl0KSA6IG1heFdhaXQ7XG4gICAgICAgIHRyYWlsaW5nID0gJ3RyYWlsaW5nJyBpbiBvcHRpb25zID8gISFvcHRpb25zLnRyYWlsaW5nIDogdHJhaWxpbmc7XG4gICAgICB9XG5cbiAgICAgIGZ1bmN0aW9uIGludm9rZUZ1bmModGltZSkge1xuICAgICAgICB2YXIgYXJncyA9IGxhc3RBcmdzLFxuICAgICAgICAgICAgdGhpc0FyZyA9IGxhc3RUaGlzO1xuXG4gICAgICAgIGxhc3RBcmdzID0gbGFzdFRoaXMgPSB1bmRlZmluZWQ7XG4gICAgICAgIGxhc3RJbnZva2VUaW1lID0gdGltZTtcbiAgICAgICAgcmVzdWx0ID0gZnVuYy5hcHBseSh0aGlzQXJnLCBhcmdzKTtcbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICAgIH1cblxuICAgICAgZnVuY3Rpb24gbGVhZGluZ0VkZ2UodGltZSkge1xuICAgICAgICAvLyBSZXNldCBhbnkgYG1heFdhaXRgIHRpbWVyLlxuICAgICAgICBsYXN0SW52b2tlVGltZSA9IHRpbWU7XG4gICAgICAgIC8vIFN0YXJ0IHRoZSB0aW1lciBmb3IgdGhlIHRyYWlsaW5nIGVkZ2UuXG4gICAgICAgIHRpbWVySWQgPSBzZXRUaW1lb3V0KHRpbWVyRXhwaXJlZCwgd2FpdCk7XG4gICAgICAgIC8vIEludm9rZSB0aGUgbGVhZGluZyBlZGdlLlxuICAgICAgICByZXR1cm4gbGVhZGluZyA/IGludm9rZUZ1bmModGltZSkgOiByZXN1bHQ7XG4gICAgICB9XG5cbiAgICAgIGZ1bmN0aW9uIHJlbWFpbmluZ1dhaXQodGltZSkge1xuICAgICAgICB2YXIgdGltZVNpbmNlTGFzdENhbGwgPSB0aW1lIC0gbGFzdENhbGxUaW1lLFxuICAgICAgICAgICAgdGltZVNpbmNlTGFzdEludm9rZSA9IHRpbWUgLSBsYXN0SW52b2tlVGltZSxcbiAgICAgICAgICAgIHRpbWVXYWl0aW5nID0gd2FpdCAtIHRpbWVTaW5jZUxhc3RDYWxsO1xuXG4gICAgICAgIHJldHVybiBtYXhpbmdcbiAgICAgICAgICA/IG5hdGl2ZU1pbih0aW1lV2FpdGluZywgbWF4V2FpdCAtIHRpbWVTaW5jZUxhc3RJbnZva2UpXG4gICAgICAgICAgOiB0aW1lV2FpdGluZztcbiAgICAgIH1cblxuICAgICAgZnVuY3Rpb24gc2hvdWxkSW52b2tlKHRpbWUpIHtcbiAgICAgICAgdmFyIHRpbWVTaW5jZUxhc3RDYWxsID0gdGltZSAtIGxhc3RDYWxsVGltZSxcbiAgICAgICAgICAgIHRpbWVTaW5jZUxhc3RJbnZva2UgPSB0aW1lIC0gbGFzdEludm9rZVRpbWU7XG5cbiAgICAgICAgLy8gRWl0aGVyIHRoaXMgaXMgdGhlIGZpcnN0IGNhbGwsIGFjdGl2aXR5IGhhcyBzdG9wcGVkIGFuZCB3ZSdyZSBhdCB0aGVcbiAgICAgICAgLy8gdHJhaWxpbmcgZWRnZSwgdGhlIHN5c3RlbSB0aW1lIGhhcyBnb25lIGJhY2t3YXJkcyBhbmQgd2UncmUgdHJlYXRpbmdcbiAgICAgICAgLy8gaXQgYXMgdGhlIHRyYWlsaW5nIGVkZ2UsIG9yIHdlJ3ZlIGhpdCB0aGUgYG1heFdhaXRgIGxpbWl0LlxuICAgICAgICByZXR1cm4gKGxhc3RDYWxsVGltZSA9PT0gdW5kZWZpbmVkIHx8ICh0aW1lU2luY2VMYXN0Q2FsbCA+PSB3YWl0KSB8fFxuICAgICAgICAgICh0aW1lU2luY2VMYXN0Q2FsbCA8IDApIHx8IChtYXhpbmcgJiYgdGltZVNpbmNlTGFzdEludm9rZSA+PSBtYXhXYWl0KSk7XG4gICAgICB9XG5cbiAgICAgIGZ1bmN0aW9uIHRpbWVyRXhwaXJlZCgpIHtcbiAgICAgICAgdmFyIHRpbWUgPSBub3coKTtcbiAgICAgICAgaWYgKHNob3VsZEludm9rZSh0aW1lKSkge1xuICAgICAgICAgIHJldHVybiB0cmFpbGluZ0VkZ2UodGltZSk7XG4gICAgICAgIH1cbiAgICAgICAgLy8gUmVzdGFydCB0aGUgdGltZXIuXG4gICAgICAgIHRpbWVySWQgPSBzZXRUaW1lb3V0KHRpbWVyRXhwaXJlZCwgcmVtYWluaW5nV2FpdCh0aW1lKSk7XG4gICAgICB9XG5cbiAgICAgIGZ1bmN0aW9uIHRyYWlsaW5nRWRnZSh0aW1lKSB7XG4gICAgICAgIHRpbWVySWQgPSB1bmRlZmluZWQ7XG5cbiAgICAgICAgLy8gT25seSBpbnZva2UgaWYgd2UgaGF2ZSBgbGFzdEFyZ3NgIHdoaWNoIG1lYW5zIGBmdW5jYCBoYXMgYmVlblxuICAgICAgICAvLyBkZWJvdW5jZWQgYXQgbGVhc3Qgb25jZS5cbiAgICAgICAgaWYgKHRyYWlsaW5nICYmIGxhc3RBcmdzKSB7XG4gICAgICAgICAgcmV0dXJuIGludm9rZUZ1bmModGltZSk7XG4gICAgICAgIH1cbiAgICAgICAgbGFzdEFyZ3MgPSBsYXN0VGhpcyA9IHVuZGVmaW5lZDtcbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICAgIH1cblxuICAgICAgZnVuY3Rpb24gY2FuY2VsKCkge1xuICAgICAgICBpZiAodGltZXJJZCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgY2xlYXJUaW1lb3V0KHRpbWVySWQpO1xuICAgICAgICB9XG4gICAgICAgIGxhc3RJbnZva2VUaW1lID0gMDtcbiAgICAgICAgbGFzdEFyZ3MgPSBsYXN0Q2FsbFRpbWUgPSBsYXN0VGhpcyA9IHRpbWVySWQgPSB1bmRlZmluZWQ7XG4gICAgICB9XG5cbiAgICAgIGZ1bmN0aW9uIGZsdXNoKCkge1xuICAgICAgICByZXR1cm4gdGltZXJJZCA9PT0gdW5kZWZpbmVkID8gcmVzdWx0IDogdHJhaWxpbmdFZGdlKG5vdygpKTtcbiAgICAgIH1cblxuICAgICAgZnVuY3Rpb24gZGVib3VuY2VkKCkge1xuICAgICAgICB2YXIgdGltZSA9IG5vdygpLFxuICAgICAgICAgICAgaXNJbnZva2luZyA9IHNob3VsZEludm9rZSh0aW1lKTtcblxuICAgICAgICBsYXN0QXJncyA9IGFyZ3VtZW50cztcbiAgICAgICAgbGFzdFRoaXMgPSB0aGlzO1xuICAgICAgICBsYXN0Q2FsbFRpbWUgPSB0aW1lO1xuXG4gICAgICAgIGlmIChpc0ludm9raW5nKSB7XG4gICAgICAgICAgaWYgKHRpbWVySWQgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgcmV0dXJuIGxlYWRpbmdFZGdlKGxhc3RDYWxsVGltZSk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmIChtYXhpbmcpIHtcbiAgICAgICAgICAgIC8vIEhhbmRsZSBpbnZvY2F0aW9ucyBpbiBhIHRpZ2h0IGxvb3AuXG4gICAgICAgICAgICBjbGVhclRpbWVvdXQodGltZXJJZCk7XG4gICAgICAgICAgICB0aW1lcklkID0gc2V0VGltZW91dCh0aW1lckV4cGlyZWQsIHdhaXQpO1xuICAgICAgICAgICAgcmV0dXJuIGludm9rZUZ1bmMobGFzdENhbGxUaW1lKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRpbWVySWQgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgIHRpbWVySWQgPSBzZXRUaW1lb3V0KHRpbWVyRXhwaXJlZCwgd2FpdCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICAgIH1cbiAgICAgIGRlYm91bmNlZC5jYW5jZWwgPSBjYW5jZWw7XG4gICAgICBkZWJvdW5jZWQuZmx1c2ggPSBmbHVzaDtcbiAgICAgIHJldHVybiBkZWJvdW5jZWQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogRGVmZXJzIGludm9raW5nIHRoZSBgZnVuY2AgdW50aWwgdGhlIGN1cnJlbnQgY2FsbCBzdGFjayBoYXMgY2xlYXJlZC4gQW55XG4gICAgICogYWRkaXRpb25hbCBhcmd1bWVudHMgYXJlIHByb3ZpZGVkIHRvIGBmdW5jYCB3aGVuIGl0J3MgaW52b2tlZC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBjYXRlZ29yeSBGdW5jdGlvblxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIGRlZmVyLlxuICAgICAqIEBwYXJhbSB7Li4uKn0gW2FyZ3NdIFRoZSBhcmd1bWVudHMgdG8gaW52b2tlIGBmdW5jYCB3aXRoLlxuICAgICAqIEByZXR1cm5zIHtudW1iZXJ9IFJldHVybnMgdGhlIHRpbWVyIGlkLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmRlZmVyKGZ1bmN0aW9uKHRleHQpIHtcbiAgICAgKiAgIGNvbnNvbGUubG9nKHRleHQpO1xuICAgICAqIH0sICdkZWZlcnJlZCcpO1xuICAgICAqIC8vID0+IExvZ3MgJ2RlZmVycmVkJyBhZnRlciBvbmUgbWlsbGlzZWNvbmQuXG4gICAgICovXG4gICAgdmFyIGRlZmVyID0gYmFzZVJlc3QoZnVuY3Rpb24oZnVuYywgYXJncykge1xuICAgICAgcmV0dXJuIGJhc2VEZWxheShmdW5jLCAxLCBhcmdzKTtcbiAgICB9KTtcblxuICAgIC8qKlxuICAgICAqIEludm9rZXMgYGZ1bmNgIGFmdGVyIGB3YWl0YCBtaWxsaXNlY29uZHMuIEFueSBhZGRpdGlvbmFsIGFyZ3VtZW50cyBhcmVcbiAgICAgKiBwcm92aWRlZCB0byBgZnVuY2Agd2hlbiBpdCdzIGludm9rZWQuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAY2F0ZWdvcnkgRnVuY3Rpb25cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdW5jIFRoZSBmdW5jdGlvbiB0byBkZWxheS5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gd2FpdCBUaGUgbnVtYmVyIG9mIG1pbGxpc2Vjb25kcyB0byBkZWxheSBpbnZvY2F0aW9uLlxuICAgICAqIEBwYXJhbSB7Li4uKn0gW2FyZ3NdIFRoZSBhcmd1bWVudHMgdG8gaW52b2tlIGBmdW5jYCB3aXRoLlxuICAgICAqIEByZXR1cm5zIHtudW1iZXJ9IFJldHVybnMgdGhlIHRpbWVyIGlkLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmRlbGF5KGZ1bmN0aW9uKHRleHQpIHtcbiAgICAgKiAgIGNvbnNvbGUubG9nKHRleHQpO1xuICAgICAqIH0sIDEwMDAsICdsYXRlcicpO1xuICAgICAqIC8vID0+IExvZ3MgJ2xhdGVyJyBhZnRlciBvbmUgc2Vjb25kLlxuICAgICAqL1xuICAgIHZhciBkZWxheSA9IGJhc2VSZXN0KGZ1bmN0aW9uKGZ1bmMsIHdhaXQsIGFyZ3MpIHtcbiAgICAgIHJldHVybiBiYXNlRGVsYXkoZnVuYywgdG9OdW1iZXIod2FpdCkgfHwgMCwgYXJncyk7XG4gICAgfSk7XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgZnVuY3Rpb24gdGhhdCBpbnZva2VzIGBmdW5jYCB3aXRoIGFyZ3VtZW50cyByZXZlcnNlZC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBGdW5jdGlvblxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIGZsaXAgYXJndW1lbnRzIGZvci5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBmbGlwcGVkIGZ1bmN0aW9uLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgZmxpcHBlZCA9IF8uZmxpcChmdW5jdGlvbigpIHtcbiAgICAgKiAgIHJldHVybiBfLnRvQXJyYXkoYXJndW1lbnRzKTtcbiAgICAgKiB9KTtcbiAgICAgKlxuICAgICAqIGZsaXBwZWQoJ2EnLCAnYicsICdjJywgJ2QnKTtcbiAgICAgKiAvLyA9PiBbJ2QnLCAnYycsICdiJywgJ2EnXVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGZsaXAoZnVuYykge1xuICAgICAgcmV0dXJuIGNyZWF0ZVdyYXAoZnVuYywgV1JBUF9GTElQX0ZMQUcpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBmdW5jdGlvbiB0aGF0IG1lbW9pemVzIHRoZSByZXN1bHQgb2YgYGZ1bmNgLiBJZiBgcmVzb2x2ZXJgIGlzXG4gICAgICogcHJvdmlkZWQsIGl0IGRldGVybWluZXMgdGhlIGNhY2hlIGtleSBmb3Igc3RvcmluZyB0aGUgcmVzdWx0IGJhc2VkIG9uIHRoZVxuICAgICAqIGFyZ3VtZW50cyBwcm92aWRlZCB0byB0aGUgbWVtb2l6ZWQgZnVuY3Rpb24uIEJ5IGRlZmF1bHQsIHRoZSBmaXJzdCBhcmd1bWVudFxuICAgICAqIHByb3ZpZGVkIHRvIHRoZSBtZW1vaXplZCBmdW5jdGlvbiBpcyB1c2VkIGFzIHRoZSBtYXAgY2FjaGUga2V5LiBUaGUgYGZ1bmNgXG4gICAgICogaXMgaW52b2tlZCB3aXRoIHRoZSBgdGhpc2AgYmluZGluZyBvZiB0aGUgbWVtb2l6ZWQgZnVuY3Rpb24uXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogVGhlIGNhY2hlIGlzIGV4cG9zZWQgYXMgdGhlIGBjYWNoZWAgcHJvcGVydHkgb24gdGhlIG1lbW9pemVkXG4gICAgICogZnVuY3Rpb24uIEl0cyBjcmVhdGlvbiBtYXkgYmUgY3VzdG9taXplZCBieSByZXBsYWNpbmcgdGhlIGBfLm1lbW9pemUuQ2FjaGVgXG4gICAgICogY29uc3RydWN0b3Igd2l0aCBvbmUgd2hvc2UgaW5zdGFuY2VzIGltcGxlbWVudCB0aGVcbiAgICAgKiBbYE1hcGBdKGh0dHA6Ly9lY21hLWludGVybmF0aW9uYWwub3JnL2VjbWEtMjYyLzcuMC8jc2VjLXByb3BlcnRpZXMtb2YtdGhlLW1hcC1wcm90b3R5cGUtb2JqZWN0KVxuICAgICAqIG1ldGhvZCBpbnRlcmZhY2Ugb2YgYGNsZWFyYCwgYGRlbGV0ZWAsIGBnZXRgLCBgaGFzYCwgYW5kIGBzZXRgLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDAuMS4wXG4gICAgICogQGNhdGVnb3J5IEZ1bmN0aW9uXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gZnVuYyBUaGUgZnVuY3Rpb24gdG8gaGF2ZSBpdHMgb3V0cHV0IG1lbW9pemVkLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtyZXNvbHZlcl0gVGhlIGZ1bmN0aW9uIHRvIHJlc29sdmUgdGhlIGNhY2hlIGtleS5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBtZW1vaXplZCBmdW5jdGlvbi5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIG9iamVjdCA9IHsgJ2EnOiAxLCAnYic6IDIgfTtcbiAgICAgKiB2YXIgb3RoZXIgPSB7ICdjJzogMywgJ2QnOiA0IH07XG4gICAgICpcbiAgICAgKiB2YXIgdmFsdWVzID0gXy5tZW1vaXplKF8udmFsdWVzKTtcbiAgICAgKiB2YWx1ZXMob2JqZWN0KTtcbiAgICAgKiAvLyA9PiBbMSwgMl1cbiAgICAgKlxuICAgICAqIHZhbHVlcyhvdGhlcik7XG4gICAgICogLy8gPT4gWzMsIDRdXG4gICAgICpcbiAgICAgKiBvYmplY3QuYSA9IDI7XG4gICAgICogdmFsdWVzKG9iamVjdCk7XG4gICAgICogLy8gPT4gWzEsIDJdXG4gICAgICpcbiAgICAgKiAvLyBNb2RpZnkgdGhlIHJlc3VsdCBjYWNoZS5cbiAgICAgKiB2YWx1ZXMuY2FjaGUuc2V0KG9iamVjdCwgWydhJywgJ2InXSk7XG4gICAgICogdmFsdWVzKG9iamVjdCk7XG4gICAgICogLy8gPT4gWydhJywgJ2InXVxuICAgICAqXG4gICAgICogLy8gUmVwbGFjZSBgXy5tZW1vaXplLkNhY2hlYC5cbiAgICAgKiBfLm1lbW9pemUuQ2FjaGUgPSBXZWFrTWFwO1xuICAgICAqL1xuICAgIGZ1bmN0aW9uIG1lbW9pemUoZnVuYywgcmVzb2x2ZXIpIHtcbiAgICAgIGlmICh0eXBlb2YgZnVuYyAhPSAnZnVuY3Rpb24nIHx8IChyZXNvbHZlciAhPSBudWxsICYmIHR5cGVvZiByZXNvbHZlciAhPSAnZnVuY3Rpb24nKSkge1xuICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKEZVTkNfRVJST1JfVEVYVCk7XG4gICAgICB9XG4gICAgICB2YXIgbWVtb2l6ZWQgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgdmFyIGFyZ3MgPSBhcmd1bWVudHMsXG4gICAgICAgICAgICBrZXkgPSByZXNvbHZlciA/IHJlc29sdmVyLmFwcGx5KHRoaXMsIGFyZ3MpIDogYXJnc1swXSxcbiAgICAgICAgICAgIGNhY2hlID0gbWVtb2l6ZWQuY2FjaGU7XG5cbiAgICAgICAgaWYgKGNhY2hlLmhhcyhrZXkpKSB7XG4gICAgICAgICAgcmV0dXJuIGNhY2hlLmdldChrZXkpO1xuICAgICAgICB9XG4gICAgICAgIHZhciByZXN1bHQgPSBmdW5jLmFwcGx5KHRoaXMsIGFyZ3MpO1xuICAgICAgICBtZW1vaXplZC5jYWNoZSA9IGNhY2hlLnNldChrZXksIHJlc3VsdCkgfHwgY2FjaGU7XG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICB9O1xuICAgICAgbWVtb2l6ZWQuY2FjaGUgPSBuZXcgKG1lbW9pemUuQ2FjaGUgfHwgTWFwQ2FjaGUpO1xuICAgICAgcmV0dXJuIG1lbW9pemVkO1xuICAgIH1cblxuICAgIC8vIEV4cG9zZSBgTWFwQ2FjaGVgLlxuICAgIG1lbW9pemUuQ2FjaGUgPSBNYXBDYWNoZTtcblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBmdW5jdGlvbiB0aGF0IG5lZ2F0ZXMgdGhlIHJlc3VsdCBvZiB0aGUgcHJlZGljYXRlIGBmdW5jYC4gVGhlXG4gICAgICogYGZ1bmNgIHByZWRpY2F0ZSBpcyBpbnZva2VkIHdpdGggdGhlIGB0aGlzYCBiaW5kaW5nIGFuZCBhcmd1bWVudHMgb2YgdGhlXG4gICAgICogY3JlYXRlZCBmdW5jdGlvbi5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAzLjAuMFxuICAgICAqIEBjYXRlZ29yeSBGdW5jdGlvblxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IHByZWRpY2F0ZSBUaGUgcHJlZGljYXRlIHRvIG5lZ2F0ZS5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBuZWdhdGVkIGZ1bmN0aW9uLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBmdW5jdGlvbiBpc0V2ZW4obikge1xuICAgICAqICAgcmV0dXJuIG4gJSAyID09IDA7XG4gICAgICogfVxuICAgICAqXG4gICAgICogXy5maWx0ZXIoWzEsIDIsIDMsIDQsIDUsIDZdLCBfLm5lZ2F0ZShpc0V2ZW4pKTtcbiAgICAgKiAvLyA9PiBbMSwgMywgNV1cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBuZWdhdGUocHJlZGljYXRlKSB7XG4gICAgICBpZiAodHlwZW9mIHByZWRpY2F0ZSAhPSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoRlVOQ19FUlJPUl9URVhUKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICAgICAgdmFyIGFyZ3MgPSBhcmd1bWVudHM7XG4gICAgICAgIHN3aXRjaCAoYXJncy5sZW5ndGgpIHtcbiAgICAgICAgICBjYXNlIDA6IHJldHVybiAhcHJlZGljYXRlLmNhbGwodGhpcyk7XG4gICAgICAgICAgY2FzZSAxOiByZXR1cm4gIXByZWRpY2F0ZS5jYWxsKHRoaXMsIGFyZ3NbMF0pO1xuICAgICAgICAgIGNhc2UgMjogcmV0dXJuICFwcmVkaWNhdGUuY2FsbCh0aGlzLCBhcmdzWzBdLCBhcmdzWzFdKTtcbiAgICAgICAgICBjYXNlIDM6IHJldHVybiAhcHJlZGljYXRlLmNhbGwodGhpcywgYXJnc1swXSwgYXJnc1sxXSwgYXJnc1syXSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuICFwcmVkaWNhdGUuYXBwbHkodGhpcywgYXJncyk7XG4gICAgICB9O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBmdW5jdGlvbiB0aGF0IGlzIHJlc3RyaWN0ZWQgdG8gaW52b2tpbmcgYGZ1bmNgIG9uY2UuIFJlcGVhdCBjYWxsc1xuICAgICAqIHRvIHRoZSBmdW5jdGlvbiByZXR1cm4gdGhlIHZhbHVlIG9mIHRoZSBmaXJzdCBpbnZvY2F0aW9uLiBUaGUgYGZ1bmNgIGlzXG4gICAgICogaW52b2tlZCB3aXRoIHRoZSBgdGhpc2AgYmluZGluZyBhbmQgYXJndW1lbnRzIG9mIHRoZSBjcmVhdGVkIGZ1bmN0aW9uLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDAuMS4wXG4gICAgICogQGNhdGVnb3J5IEZ1bmN0aW9uXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gZnVuYyBUaGUgZnVuY3Rpb24gdG8gcmVzdHJpY3QuXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgcmVzdHJpY3RlZCBmdW5jdGlvbi5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIGluaXRpYWxpemUgPSBfLm9uY2UoY3JlYXRlQXBwbGljYXRpb24pO1xuICAgICAqIGluaXRpYWxpemUoKTtcbiAgICAgKiBpbml0aWFsaXplKCk7XG4gICAgICogLy8gPT4gYGNyZWF0ZUFwcGxpY2F0aW9uYCBpcyBpbnZva2VkIG9uY2VcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBvbmNlKGZ1bmMpIHtcbiAgICAgIHJldHVybiBiZWZvcmUoMiwgZnVuYyk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGZ1bmN0aW9uIHRoYXQgaW52b2tlcyBgZnVuY2Agd2l0aCBpdHMgYXJndW1lbnRzIHRyYW5zZm9ybWVkLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQGNhdGVnb3J5IEZ1bmN0aW9uXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gZnVuYyBUaGUgZnVuY3Rpb24gdG8gd3JhcC5cbiAgICAgKiBAcGFyYW0gey4uLihGdW5jdGlvbnxGdW5jdGlvbltdKX0gW3RyYW5zZm9ybXM9W18uaWRlbnRpdHldXVxuICAgICAqICBUaGUgYXJndW1lbnQgdHJhbnNmb3Jtcy5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBmdW5jdGlvbi5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogZnVuY3Rpb24gZG91YmxlZChuKSB7XG4gICAgICogICByZXR1cm4gbiAqIDI7XG4gICAgICogfVxuICAgICAqXG4gICAgICogZnVuY3Rpb24gc3F1YXJlKG4pIHtcbiAgICAgKiAgIHJldHVybiBuICogbjtcbiAgICAgKiB9XG4gICAgICpcbiAgICAgKiB2YXIgZnVuYyA9IF8ub3ZlckFyZ3MoZnVuY3Rpb24oeCwgeSkge1xuICAgICAqICAgcmV0dXJuIFt4LCB5XTtcbiAgICAgKiB9LCBbc3F1YXJlLCBkb3VibGVkXSk7XG4gICAgICpcbiAgICAgKiBmdW5jKDksIDMpO1xuICAgICAqIC8vID0+IFs4MSwgNl1cbiAgICAgKlxuICAgICAqIGZ1bmMoMTAsIDUpO1xuICAgICAqIC8vID0+IFsxMDAsIDEwXVxuICAgICAqL1xuICAgIHZhciBvdmVyQXJncyA9IGNhc3RSZXN0KGZ1bmN0aW9uKGZ1bmMsIHRyYW5zZm9ybXMpIHtcbiAgICAgIHRyYW5zZm9ybXMgPSAodHJhbnNmb3Jtcy5sZW5ndGggPT0gMSAmJiBpc0FycmF5KHRyYW5zZm9ybXNbMF0pKVxuICAgICAgICA/IGFycmF5TWFwKHRyYW5zZm9ybXNbMF0sIGJhc2VVbmFyeShnZXRJdGVyYXRlZSgpKSlcbiAgICAgICAgOiBhcnJheU1hcChiYXNlRmxhdHRlbih0cmFuc2Zvcm1zLCAxKSwgYmFzZVVuYXJ5KGdldEl0ZXJhdGVlKCkpKTtcblxuICAgICAgdmFyIGZ1bmNzTGVuZ3RoID0gdHJhbnNmb3Jtcy5sZW5ndGg7XG4gICAgICByZXR1cm4gYmFzZVJlc3QoZnVuY3Rpb24oYXJncykge1xuICAgICAgICB2YXIgaW5kZXggPSAtMSxcbiAgICAgICAgICAgIGxlbmd0aCA9IG5hdGl2ZU1pbihhcmdzLmxlbmd0aCwgZnVuY3NMZW5ndGgpO1xuXG4gICAgICAgIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgICAgICAgYXJnc1tpbmRleF0gPSB0cmFuc2Zvcm1zW2luZGV4XS5jYWxsKHRoaXMsIGFyZ3NbaW5kZXhdKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gYXBwbHkoZnVuYywgdGhpcywgYXJncyk7XG4gICAgICB9KTtcbiAgICB9KTtcblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBmdW5jdGlvbiB0aGF0IGludm9rZXMgYGZ1bmNgIHdpdGggYHBhcnRpYWxzYCBwcmVwZW5kZWQgdG8gdGhlXG4gICAgICogYXJndW1lbnRzIGl0IHJlY2VpdmVzLiBUaGlzIG1ldGhvZCBpcyBsaWtlIGBfLmJpbmRgIGV4Y2VwdCBpdCBkb2VzICoqbm90KipcbiAgICAgKiBhbHRlciB0aGUgYHRoaXNgIGJpbmRpbmcuXG4gICAgICpcbiAgICAgKiBUaGUgYF8ucGFydGlhbC5wbGFjZWhvbGRlcmAgdmFsdWUsIHdoaWNoIGRlZmF1bHRzIHRvIGBfYCBpbiBtb25vbGl0aGljXG4gICAgICogYnVpbGRzLCBtYXkgYmUgdXNlZCBhcyBhIHBsYWNlaG9sZGVyIGZvciBwYXJ0aWFsbHkgYXBwbGllZCBhcmd1bWVudHMuXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogVGhpcyBtZXRob2QgZG9lc24ndCBzZXQgdGhlIFwibGVuZ3RoXCIgcHJvcGVydHkgb2YgcGFydGlhbGx5XG4gICAgICogYXBwbGllZCBmdW5jdGlvbnMuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMC4yLjBcbiAgICAgKiBAY2F0ZWdvcnkgRnVuY3Rpb25cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdW5jIFRoZSBmdW5jdGlvbiB0byBwYXJ0aWFsbHkgYXBwbHkgYXJndW1lbnRzIHRvLlxuICAgICAqIEBwYXJhbSB7Li4uKn0gW3BhcnRpYWxzXSBUaGUgYXJndW1lbnRzIHRvIGJlIHBhcnRpYWxseSBhcHBsaWVkLlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IHBhcnRpYWxseSBhcHBsaWVkIGZ1bmN0aW9uLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBmdW5jdGlvbiBncmVldChncmVldGluZywgbmFtZSkge1xuICAgICAqICAgcmV0dXJuIGdyZWV0aW5nICsgJyAnICsgbmFtZTtcbiAgICAgKiB9XG4gICAgICpcbiAgICAgKiB2YXIgc2F5SGVsbG9UbyA9IF8ucGFydGlhbChncmVldCwgJ2hlbGxvJyk7XG4gICAgICogc2F5SGVsbG9UbygnZnJlZCcpO1xuICAgICAqIC8vID0+ICdoZWxsbyBmcmVkJ1xuICAgICAqXG4gICAgICogLy8gUGFydGlhbGx5IGFwcGxpZWQgd2l0aCBwbGFjZWhvbGRlcnMuXG4gICAgICogdmFyIGdyZWV0RnJlZCA9IF8ucGFydGlhbChncmVldCwgXywgJ2ZyZWQnKTtcbiAgICAgKiBncmVldEZyZWQoJ2hpJyk7XG4gICAgICogLy8gPT4gJ2hpIGZyZWQnXG4gICAgICovXG4gICAgdmFyIHBhcnRpYWwgPSBiYXNlUmVzdChmdW5jdGlvbihmdW5jLCBwYXJ0aWFscykge1xuICAgICAgdmFyIGhvbGRlcnMgPSByZXBsYWNlSG9sZGVycyhwYXJ0aWFscywgZ2V0SG9sZGVyKHBhcnRpYWwpKTtcbiAgICAgIHJldHVybiBjcmVhdGVXcmFwKGZ1bmMsIFdSQVBfUEFSVElBTF9GTEFHLCB1bmRlZmluZWQsIHBhcnRpYWxzLCBob2xkZXJzKTtcbiAgICB9KTtcblxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIGlzIGxpa2UgYF8ucGFydGlhbGAgZXhjZXB0IHRoYXQgcGFydGlhbGx5IGFwcGxpZWQgYXJndW1lbnRzXG4gICAgICogYXJlIGFwcGVuZGVkIHRvIHRoZSBhcmd1bWVudHMgaXQgcmVjZWl2ZXMuXG4gICAgICpcbiAgICAgKiBUaGUgYF8ucGFydGlhbFJpZ2h0LnBsYWNlaG9sZGVyYCB2YWx1ZSwgd2hpY2ggZGVmYXVsdHMgdG8gYF9gIGluIG1vbm9saXRoaWNcbiAgICAgKiBidWlsZHMsIG1heSBiZSB1c2VkIGFzIGEgcGxhY2Vob2xkZXIgZm9yIHBhcnRpYWxseSBhcHBsaWVkIGFyZ3VtZW50cy5cbiAgICAgKlxuICAgICAqICoqTm90ZToqKiBUaGlzIG1ldGhvZCBkb2Vzbid0IHNldCB0aGUgXCJsZW5ndGhcIiBwcm9wZXJ0eSBvZiBwYXJ0aWFsbHlcbiAgICAgKiBhcHBsaWVkIGZ1bmN0aW9ucy5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAxLjAuMFxuICAgICAqIEBjYXRlZ29yeSBGdW5jdGlvblxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIHBhcnRpYWxseSBhcHBseSBhcmd1bWVudHMgdG8uXG4gICAgICogQHBhcmFtIHsuLi4qfSBbcGFydGlhbHNdIFRoZSBhcmd1bWVudHMgdG8gYmUgcGFydGlhbGx5IGFwcGxpZWQuXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgcGFydGlhbGx5IGFwcGxpZWQgZnVuY3Rpb24uXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIGZ1bmN0aW9uIGdyZWV0KGdyZWV0aW5nLCBuYW1lKSB7XG4gICAgICogICByZXR1cm4gZ3JlZXRpbmcgKyAnICcgKyBuYW1lO1xuICAgICAqIH1cbiAgICAgKlxuICAgICAqIHZhciBncmVldEZyZWQgPSBfLnBhcnRpYWxSaWdodChncmVldCwgJ2ZyZWQnKTtcbiAgICAgKiBncmVldEZyZWQoJ2hpJyk7XG4gICAgICogLy8gPT4gJ2hpIGZyZWQnXG4gICAgICpcbiAgICAgKiAvLyBQYXJ0aWFsbHkgYXBwbGllZCB3aXRoIHBsYWNlaG9sZGVycy5cbiAgICAgKiB2YXIgc2F5SGVsbG9UbyA9IF8ucGFydGlhbFJpZ2h0KGdyZWV0LCAnaGVsbG8nLCBfKTtcbiAgICAgKiBzYXlIZWxsb1RvKCdmcmVkJyk7XG4gICAgICogLy8gPT4gJ2hlbGxvIGZyZWQnXG4gICAgICovXG4gICAgdmFyIHBhcnRpYWxSaWdodCA9IGJhc2VSZXN0KGZ1bmN0aW9uKGZ1bmMsIHBhcnRpYWxzKSB7XG4gICAgICB2YXIgaG9sZGVycyA9IHJlcGxhY2VIb2xkZXJzKHBhcnRpYWxzLCBnZXRIb2xkZXIocGFydGlhbFJpZ2h0KSk7XG4gICAgICByZXR1cm4gY3JlYXRlV3JhcChmdW5jLCBXUkFQX1BBUlRJQUxfUklHSFRfRkxBRywgdW5kZWZpbmVkLCBwYXJ0aWFscywgaG9sZGVycyk7XG4gICAgfSk7XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgZnVuY3Rpb24gdGhhdCBpbnZva2VzIGBmdW5jYCB3aXRoIGFyZ3VtZW50cyBhcnJhbmdlZCBhY2NvcmRpbmdcbiAgICAgKiB0byB0aGUgc3BlY2lmaWVkIGBpbmRleGVzYCB3aGVyZSB0aGUgYXJndW1lbnQgdmFsdWUgYXQgdGhlIGZpcnN0IGluZGV4IGlzXG4gICAgICogcHJvdmlkZWQgYXMgdGhlIGZpcnN0IGFyZ3VtZW50LCB0aGUgYXJndW1lbnQgdmFsdWUgYXQgdGhlIHNlY29uZCBpbmRleCBpc1xuICAgICAqIHByb3ZpZGVkIGFzIHRoZSBzZWNvbmQgYXJndW1lbnQsIGFuZCBzbyBvbi5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAzLjAuMFxuICAgICAqIEBjYXRlZ29yeSBGdW5jdGlvblxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIHJlYXJyYW5nZSBhcmd1bWVudHMgZm9yLlxuICAgICAqIEBwYXJhbSB7Li4uKG51bWJlcnxudW1iZXJbXSl9IGluZGV4ZXMgVGhlIGFycmFuZ2VkIGFyZ3VtZW50IGluZGV4ZXMuXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgZnVuY3Rpb24uXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciByZWFyZ2VkID0gXy5yZWFyZyhmdW5jdGlvbihhLCBiLCBjKSB7XG4gICAgICogICByZXR1cm4gW2EsIGIsIGNdO1xuICAgICAqIH0sIFsyLCAwLCAxXSk7XG4gICAgICpcbiAgICAgKiByZWFyZ2VkKCdiJywgJ2MnLCAnYScpXG4gICAgICogLy8gPT4gWydhJywgJ2InLCAnYyddXG4gICAgICovXG4gICAgdmFyIHJlYXJnID0gZmxhdFJlc3QoZnVuY3Rpb24oZnVuYywgaW5kZXhlcykge1xuICAgICAgcmV0dXJuIGNyZWF0ZVdyYXAoZnVuYywgV1JBUF9SRUFSR19GTEFHLCB1bmRlZmluZWQsIHVuZGVmaW5lZCwgdW5kZWZpbmVkLCBpbmRleGVzKTtcbiAgICB9KTtcblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBmdW5jdGlvbiB0aGF0IGludm9rZXMgYGZ1bmNgIHdpdGggdGhlIGB0aGlzYCBiaW5kaW5nIG9mIHRoZVxuICAgICAqIGNyZWF0ZWQgZnVuY3Rpb24gYW5kIGFyZ3VtZW50cyBmcm9tIGBzdGFydGAgYW5kIGJleW9uZCBwcm92aWRlZCBhc1xuICAgICAqIGFuIGFycmF5LlxuICAgICAqXG4gICAgICogKipOb3RlOioqIFRoaXMgbWV0aG9kIGlzIGJhc2VkIG9uIHRoZVxuICAgICAqIFtyZXN0IHBhcmFtZXRlcl0oaHR0cHM6Ly9tZG4uaW8vcmVzdF9wYXJhbWV0ZXJzKS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBGdW5jdGlvblxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIGFwcGx5IGEgcmVzdCBwYXJhbWV0ZXIgdG8uXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFtzdGFydD1mdW5jLmxlbmd0aC0xXSBUaGUgc3RhcnQgcG9zaXRpb24gb2YgdGhlIHJlc3QgcGFyYW1ldGVyLlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IGZ1bmN0aW9uLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgc2F5ID0gXy5yZXN0KGZ1bmN0aW9uKHdoYXQsIG5hbWVzKSB7XG4gICAgICogICByZXR1cm4gd2hhdCArICcgJyArIF8uaW5pdGlhbChuYW1lcykuam9pbignLCAnKSArXG4gICAgICogICAgIChfLnNpemUobmFtZXMpID4gMSA/ICcsICYgJyA6ICcnKSArIF8ubGFzdChuYW1lcyk7XG4gICAgICogfSk7XG4gICAgICpcbiAgICAgKiBzYXkoJ2hlbGxvJywgJ2ZyZWQnLCAnYmFybmV5JywgJ3BlYmJsZXMnKTtcbiAgICAgKiAvLyA9PiAnaGVsbG8gZnJlZCwgYmFybmV5LCAmIHBlYmJsZXMnXG4gICAgICovXG4gICAgZnVuY3Rpb24gcmVzdChmdW5jLCBzdGFydCkge1xuICAgICAgaWYgKHR5cGVvZiBmdW5jICE9ICdmdW5jdGlvbicpIHtcbiAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihGVU5DX0VSUk9SX1RFWFQpO1xuICAgICAgfVxuICAgICAgc3RhcnQgPSBzdGFydCA9PT0gdW5kZWZpbmVkID8gc3RhcnQgOiB0b0ludGVnZXIoc3RhcnQpO1xuICAgICAgcmV0dXJuIGJhc2VSZXN0KGZ1bmMsIHN0YXJ0KTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgZnVuY3Rpb24gdGhhdCBpbnZva2VzIGBmdW5jYCB3aXRoIHRoZSBgdGhpc2AgYmluZGluZyBvZiB0aGVcbiAgICAgKiBjcmVhdGUgZnVuY3Rpb24gYW5kIGFuIGFycmF5IG9mIGFyZ3VtZW50cyBtdWNoIGxpa2VcbiAgICAgKiBbYEZ1bmN0aW9uI2FwcGx5YF0oaHR0cDovL3d3dy5lY21hLWludGVybmF0aW9uYWwub3JnL2VjbWEtMjYyLzcuMC8jc2VjLWZ1bmN0aW9uLnByb3RvdHlwZS5hcHBseSkuXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogVGhpcyBtZXRob2QgaXMgYmFzZWQgb24gdGhlXG4gICAgICogW3NwcmVhZCBvcGVyYXRvcl0oaHR0cHM6Ly9tZG4uaW8vc3ByZWFkX29wZXJhdG9yKS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAzLjIuMFxuICAgICAqIEBjYXRlZ29yeSBGdW5jdGlvblxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIHNwcmVhZCBhcmd1bWVudHMgb3Zlci5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW3N0YXJ0PTBdIFRoZSBzdGFydCBwb3NpdGlvbiBvZiB0aGUgc3ByZWFkLlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IGZ1bmN0aW9uLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgc2F5ID0gXy5zcHJlYWQoZnVuY3Rpb24od2hvLCB3aGF0KSB7XG4gICAgICogICByZXR1cm4gd2hvICsgJyBzYXlzICcgKyB3aGF0O1xuICAgICAqIH0pO1xuICAgICAqXG4gICAgICogc2F5KFsnZnJlZCcsICdoZWxsbyddKTtcbiAgICAgKiAvLyA9PiAnZnJlZCBzYXlzIGhlbGxvJ1xuICAgICAqXG4gICAgICogdmFyIG51bWJlcnMgPSBQcm9taXNlLmFsbChbXG4gICAgICogICBQcm9taXNlLnJlc29sdmUoNDApLFxuICAgICAqICAgUHJvbWlzZS5yZXNvbHZlKDM2KVxuICAgICAqIF0pO1xuICAgICAqXG4gICAgICogbnVtYmVycy50aGVuKF8uc3ByZWFkKGZ1bmN0aW9uKHgsIHkpIHtcbiAgICAgKiAgIHJldHVybiB4ICsgeTtcbiAgICAgKiB9KSk7XG4gICAgICogLy8gPT4gYSBQcm9taXNlIG9mIDc2XG4gICAgICovXG4gICAgZnVuY3Rpb24gc3ByZWFkKGZ1bmMsIHN0YXJ0KSB7XG4gICAgICBpZiAodHlwZW9mIGZ1bmMgIT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKEZVTkNfRVJST1JfVEVYVCk7XG4gICAgICB9XG4gICAgICBzdGFydCA9IHN0YXJ0ID09IG51bGwgPyAwIDogbmF0aXZlTWF4KHRvSW50ZWdlcihzdGFydCksIDApO1xuICAgICAgcmV0dXJuIGJhc2VSZXN0KGZ1bmN0aW9uKGFyZ3MpIHtcbiAgICAgICAgdmFyIGFycmF5ID0gYXJnc1tzdGFydF0sXG4gICAgICAgICAgICBvdGhlckFyZ3MgPSBjYXN0U2xpY2UoYXJncywgMCwgc3RhcnQpO1xuXG4gICAgICAgIGlmIChhcnJheSkge1xuICAgICAgICAgIGFycmF5UHVzaChvdGhlckFyZ3MsIGFycmF5KTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gYXBwbHkoZnVuYywgdGhpcywgb3RoZXJBcmdzKTtcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSB0aHJvdHRsZWQgZnVuY3Rpb24gdGhhdCBvbmx5IGludm9rZXMgYGZ1bmNgIGF0IG1vc3Qgb25jZSBwZXJcbiAgICAgKiBldmVyeSBgd2FpdGAgbWlsbGlzZWNvbmRzLiBUaGUgdGhyb3R0bGVkIGZ1bmN0aW9uIGNvbWVzIHdpdGggYSBgY2FuY2VsYFxuICAgICAqIG1ldGhvZCB0byBjYW5jZWwgZGVsYXllZCBgZnVuY2AgaW52b2NhdGlvbnMgYW5kIGEgYGZsdXNoYCBtZXRob2QgdG9cbiAgICAgKiBpbW1lZGlhdGVseSBpbnZva2UgdGhlbS4gUHJvdmlkZSBgb3B0aW9uc2AgdG8gaW5kaWNhdGUgd2hldGhlciBgZnVuY2BcbiAgICAgKiBzaG91bGQgYmUgaW52b2tlZCBvbiB0aGUgbGVhZGluZyBhbmQvb3IgdHJhaWxpbmcgZWRnZSBvZiB0aGUgYHdhaXRgXG4gICAgICogdGltZW91dC4gVGhlIGBmdW5jYCBpcyBpbnZva2VkIHdpdGggdGhlIGxhc3QgYXJndW1lbnRzIHByb3ZpZGVkIHRvIHRoZVxuICAgICAqIHRocm90dGxlZCBmdW5jdGlvbi4gU3Vic2VxdWVudCBjYWxscyB0byB0aGUgdGhyb3R0bGVkIGZ1bmN0aW9uIHJldHVybiB0aGVcbiAgICAgKiByZXN1bHQgb2YgdGhlIGxhc3QgYGZ1bmNgIGludm9jYXRpb24uXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogSWYgYGxlYWRpbmdgIGFuZCBgdHJhaWxpbmdgIG9wdGlvbnMgYXJlIGB0cnVlYCwgYGZ1bmNgIGlzXG4gICAgICogaW52b2tlZCBvbiB0aGUgdHJhaWxpbmcgZWRnZSBvZiB0aGUgdGltZW91dCBvbmx5IGlmIHRoZSB0aHJvdHRsZWQgZnVuY3Rpb25cbiAgICAgKiBpcyBpbnZva2VkIG1vcmUgdGhhbiBvbmNlIGR1cmluZyB0aGUgYHdhaXRgIHRpbWVvdXQuXG4gICAgICpcbiAgICAgKiBJZiBgd2FpdGAgaXMgYDBgIGFuZCBgbGVhZGluZ2AgaXMgYGZhbHNlYCwgYGZ1bmNgIGludm9jYXRpb24gaXMgZGVmZXJyZWRcbiAgICAgKiB1bnRpbCB0byB0aGUgbmV4dCB0aWNrLCBzaW1pbGFyIHRvIGBzZXRUaW1lb3V0YCB3aXRoIGEgdGltZW91dCBvZiBgMGAuXG4gICAgICpcbiAgICAgKiBTZWUgW0RhdmlkIENvcmJhY2hvJ3MgYXJ0aWNsZV0oaHR0cHM6Ly9jc3MtdHJpY2tzLmNvbS9kZWJvdW5jaW5nLXRocm90dGxpbmctZXhwbGFpbmVkLWV4YW1wbGVzLylcbiAgICAgKiBmb3IgZGV0YWlscyBvdmVyIHRoZSBkaWZmZXJlbmNlcyBiZXR3ZWVuIGBfLnRocm90dGxlYCBhbmQgYF8uZGVib3VuY2VgLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDAuMS4wXG4gICAgICogQGNhdGVnb3J5IEZ1bmN0aW9uXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gZnVuYyBUaGUgZnVuY3Rpb24gdG8gdGhyb3R0bGUuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFt3YWl0PTBdIFRoZSBudW1iZXIgb2YgbWlsbGlzZWNvbmRzIHRvIHRocm90dGxlIGludm9jYXRpb25zIHRvLlxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBbb3B0aW9ucz17fV0gVGhlIG9wdGlvbnMgb2JqZWN0LlxuICAgICAqIEBwYXJhbSB7Ym9vbGVhbn0gW29wdGlvbnMubGVhZGluZz10cnVlXVxuICAgICAqICBTcGVjaWZ5IGludm9raW5nIG9uIHRoZSBsZWFkaW5nIGVkZ2Ugb2YgdGhlIHRpbWVvdXQuXG4gICAgICogQHBhcmFtIHtib29sZWFufSBbb3B0aW9ucy50cmFpbGluZz10cnVlXVxuICAgICAqICBTcGVjaWZ5IGludm9raW5nIG9uIHRoZSB0cmFpbGluZyBlZGdlIG9mIHRoZSB0aW1lb3V0LlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IHRocm90dGxlZCBmdW5jdGlvbi5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogLy8gQXZvaWQgZXhjZXNzaXZlbHkgdXBkYXRpbmcgdGhlIHBvc2l0aW9uIHdoaWxlIHNjcm9sbGluZy5cbiAgICAgKiBqUXVlcnkod2luZG93KS5vbignc2Nyb2xsJywgXy50aHJvdHRsZSh1cGRhdGVQb3NpdGlvbiwgMTAwKSk7XG4gICAgICpcbiAgICAgKiAvLyBJbnZva2UgYHJlbmV3VG9rZW5gIHdoZW4gdGhlIGNsaWNrIGV2ZW50IGlzIGZpcmVkLCBidXQgbm90IG1vcmUgdGhhbiBvbmNlIGV2ZXJ5IDUgbWludXRlcy5cbiAgICAgKiB2YXIgdGhyb3R0bGVkID0gXy50aHJvdHRsZShyZW5ld1Rva2VuLCAzMDAwMDAsIHsgJ3RyYWlsaW5nJzogZmFsc2UgfSk7XG4gICAgICogalF1ZXJ5KGVsZW1lbnQpLm9uKCdjbGljaycsIHRocm90dGxlZCk7XG4gICAgICpcbiAgICAgKiAvLyBDYW5jZWwgdGhlIHRyYWlsaW5nIHRocm90dGxlZCBpbnZvY2F0aW9uLlxuICAgICAqIGpRdWVyeSh3aW5kb3cpLm9uKCdwb3BzdGF0ZScsIHRocm90dGxlZC5jYW5jZWwpO1xuICAgICAqL1xuICAgIGZ1bmN0aW9uIHRocm90dGxlKGZ1bmMsIHdhaXQsIG9wdGlvbnMpIHtcbiAgICAgIHZhciBsZWFkaW5nID0gdHJ1ZSxcbiAgICAgICAgICB0cmFpbGluZyA9IHRydWU7XG5cbiAgICAgIGlmICh0eXBlb2YgZnVuYyAhPSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoRlVOQ19FUlJPUl9URVhUKTtcbiAgICAgIH1cbiAgICAgIGlmIChpc09iamVjdChvcHRpb25zKSkge1xuICAgICAgICBsZWFkaW5nID0gJ2xlYWRpbmcnIGluIG9wdGlvbnMgPyAhIW9wdGlvbnMubGVhZGluZyA6IGxlYWRpbmc7XG4gICAgICAgIHRyYWlsaW5nID0gJ3RyYWlsaW5nJyBpbiBvcHRpb25zID8gISFvcHRpb25zLnRyYWlsaW5nIDogdHJhaWxpbmc7XG4gICAgICB9XG4gICAgICByZXR1cm4gZGVib3VuY2UoZnVuYywgd2FpdCwge1xuICAgICAgICAnbGVhZGluZyc6IGxlYWRpbmcsXG4gICAgICAgICdtYXhXYWl0Jzogd2FpdCxcbiAgICAgICAgJ3RyYWlsaW5nJzogdHJhaWxpbmdcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBmdW5jdGlvbiB0aGF0IGFjY2VwdHMgdXAgdG8gb25lIGFyZ3VtZW50LCBpZ25vcmluZyBhbnlcbiAgICAgKiBhZGRpdGlvbmFsIGFyZ3VtZW50cy5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBGdW5jdGlvblxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIGNhcCBhcmd1bWVudHMgZm9yLlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IGNhcHBlZCBmdW5jdGlvbi5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5tYXAoWyc2JywgJzgnLCAnMTAnXSwgXy51bmFyeShwYXJzZUludCkpO1xuICAgICAqIC8vID0+IFs2LCA4LCAxMF1cbiAgICAgKi9cbiAgICBmdW5jdGlvbiB1bmFyeShmdW5jKSB7XG4gICAgICByZXR1cm4gYXJ5KGZ1bmMsIDEpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBmdW5jdGlvbiB0aGF0IHByb3ZpZGVzIGB2YWx1ZWAgdG8gYHdyYXBwZXJgIGFzIGl0cyBmaXJzdFxuICAgICAqIGFyZ3VtZW50LiBBbnkgYWRkaXRpb25hbCBhcmd1bWVudHMgcHJvdmlkZWQgdG8gdGhlIGZ1bmN0aW9uIGFyZSBhcHBlbmRlZFxuICAgICAqIHRvIHRob3NlIHByb3ZpZGVkIHRvIHRoZSBgd3JhcHBlcmAuIFRoZSB3cmFwcGVyIGlzIGludm9rZWQgd2l0aCB0aGUgYHRoaXNgXG4gICAgICogYmluZGluZyBvZiB0aGUgY3JlYXRlZCBmdW5jdGlvbi5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBjYXRlZ29yeSBGdW5jdGlvblxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIHdyYXAuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW3dyYXBwZXI9aWRlbnRpdHldIFRoZSB3cmFwcGVyIGZ1bmN0aW9uLlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IGZ1bmN0aW9uLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgcCA9IF8ud3JhcChfLmVzY2FwZSwgZnVuY3Rpb24oZnVuYywgdGV4dCkge1xuICAgICAqICAgcmV0dXJuICc8cD4nICsgZnVuYyh0ZXh0KSArICc8L3A+JztcbiAgICAgKiB9KTtcbiAgICAgKlxuICAgICAqIHAoJ2ZyZWQsIGJhcm5leSwgJiBwZWJibGVzJyk7XG4gICAgICogLy8gPT4gJzxwPmZyZWQsIGJhcm5leSwgJmFtcDsgcGViYmxlczwvcD4nXG4gICAgICovXG4gICAgZnVuY3Rpb24gd3JhcCh2YWx1ZSwgd3JhcHBlcikge1xuICAgICAgcmV0dXJuIHBhcnRpYWwoY2FzdEZ1bmN0aW9uKHdyYXBwZXIpLCB2YWx1ZSk7XG4gICAgfVxuXG4gICAgLyotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qL1xuXG4gICAgLyoqXG4gICAgICogQ2FzdHMgYHZhbHVlYCBhcyBhbiBhcnJheSBpZiBpdCdzIG5vdCBvbmUuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC40LjBcbiAgICAgKiBAY2F0ZWdvcnkgTGFuZ1xuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGluc3BlY3QuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBjYXN0IGFycmF5LlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmNhc3RBcnJheSgxKTtcbiAgICAgKiAvLyA9PiBbMV1cbiAgICAgKlxuICAgICAqIF8uY2FzdEFycmF5KHsgJ2EnOiAxIH0pO1xuICAgICAqIC8vID0+IFt7ICdhJzogMSB9XVxuICAgICAqXG4gICAgICogXy5jYXN0QXJyYXkoJ2FiYycpO1xuICAgICAqIC8vID0+IFsnYWJjJ11cbiAgICAgKlxuICAgICAqIF8uY2FzdEFycmF5KG51bGwpO1xuICAgICAqIC8vID0+IFtudWxsXVxuICAgICAqXG4gICAgICogXy5jYXN0QXJyYXkodW5kZWZpbmVkKTtcbiAgICAgKiAvLyA9PiBbdW5kZWZpbmVkXVxuICAgICAqXG4gICAgICogXy5jYXN0QXJyYXkoKTtcbiAgICAgKiAvLyA9PiBbXVxuICAgICAqXG4gICAgICogdmFyIGFycmF5ID0gWzEsIDIsIDNdO1xuICAgICAqIGNvbnNvbGUubG9nKF8uY2FzdEFycmF5KGFycmF5KSA9PT0gYXJyYXkpO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBjYXN0QXJyYXkoKSB7XG4gICAgICBpZiAoIWFyZ3VtZW50cy5sZW5ndGgpIHtcbiAgICAgICAgcmV0dXJuIFtdO1xuICAgICAgfVxuICAgICAgdmFyIHZhbHVlID0gYXJndW1lbnRzWzBdO1xuICAgICAgcmV0dXJuIGlzQXJyYXkodmFsdWUpID8gdmFsdWUgOiBbdmFsdWVdO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBzaGFsbG93IGNsb25lIG9mIGB2YWx1ZWAuXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogVGhpcyBtZXRob2QgaXMgbG9vc2VseSBiYXNlZCBvbiB0aGVcbiAgICAgKiBbc3RydWN0dXJlZCBjbG9uZSBhbGdvcml0aG1dKGh0dHBzOi8vbWRuLmlvL1N0cnVjdHVyZWRfY2xvbmVfYWxnb3JpdGhtKVxuICAgICAqIGFuZCBzdXBwb3J0cyBjbG9uaW5nIGFycmF5cywgYXJyYXkgYnVmZmVycywgYm9vbGVhbnMsIGRhdGUgb2JqZWN0cywgbWFwcyxcbiAgICAgKiBudW1iZXJzLCBgT2JqZWN0YCBvYmplY3RzLCByZWdleGVzLCBzZXRzLCBzdHJpbmdzLCBzeW1ib2xzLCBhbmQgdHlwZWRcbiAgICAgKiBhcnJheXMuIFRoZSBvd24gZW51bWVyYWJsZSBwcm9wZXJ0aWVzIG9mIGBhcmd1bWVudHNgIG9iamVjdHMgYXJlIGNsb25lZFxuICAgICAqIGFzIHBsYWluIG9iamVjdHMuIEFuIGVtcHR5IG9iamVjdCBpcyByZXR1cm5lZCBmb3IgdW5jbG9uZWFibGUgdmFsdWVzIHN1Y2hcbiAgICAgKiBhcyBlcnJvciBvYmplY3RzLCBmdW5jdGlvbnMsIERPTSBub2RlcywgYW5kIFdlYWtNYXBzLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDAuMS4wXG4gICAgICogQGNhdGVnb3J5IExhbmdcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjbG9uZS5cbiAgICAgKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgY2xvbmVkIHZhbHVlLlxuICAgICAqIEBzZWUgXy5jbG9uZURlZXBcbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIG9iamVjdHMgPSBbeyAnYSc6IDEgfSwgeyAnYic6IDIgfV07XG4gICAgICpcbiAgICAgKiB2YXIgc2hhbGxvdyA9IF8uY2xvbmUob2JqZWN0cyk7XG4gICAgICogY29uc29sZS5sb2coc2hhbGxvd1swXSA9PT0gb2JqZWN0c1swXSk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGNsb25lKHZhbHVlKSB7XG4gICAgICByZXR1cm4gYmFzZUNsb25lKHZhbHVlLCBDTE9ORV9TWU1CT0xTX0ZMQUcpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIGlzIGxpa2UgYF8uY2xvbmVgIGV4Y2VwdCB0aGF0IGl0IGFjY2VwdHMgYGN1c3RvbWl6ZXJgIHdoaWNoXG4gICAgICogaXMgaW52b2tlZCB0byBwcm9kdWNlIHRoZSBjbG9uZWQgdmFsdWUuIElmIGBjdXN0b21pemVyYCByZXR1cm5zIGB1bmRlZmluZWRgLFxuICAgICAqIGNsb25pbmcgaXMgaGFuZGxlZCBieSB0aGUgbWV0aG9kIGluc3RlYWQuIFRoZSBgY3VzdG9taXplcmAgaXMgaW52b2tlZCB3aXRoXG4gICAgICogdXAgdG8gZm91ciBhcmd1bWVudHM7ICh2YWx1ZSBbLCBpbmRleHxrZXksIG9iamVjdCwgc3RhY2tdKS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBMYW5nXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2xvbmUuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2N1c3RvbWl6ZXJdIFRoZSBmdW5jdGlvbiB0byBjdXN0b21pemUgY2xvbmluZy5cbiAgICAgKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgY2xvbmVkIHZhbHVlLlxuICAgICAqIEBzZWUgXy5jbG9uZURlZXBXaXRoXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIGZ1bmN0aW9uIGN1c3RvbWl6ZXIodmFsdWUpIHtcbiAgICAgKiAgIGlmIChfLmlzRWxlbWVudCh2YWx1ZSkpIHtcbiAgICAgKiAgICAgcmV0dXJuIHZhbHVlLmNsb25lTm9kZShmYWxzZSk7XG4gICAgICogICB9XG4gICAgICogfVxuICAgICAqXG4gICAgICogdmFyIGVsID0gXy5jbG9uZVdpdGgoZG9jdW1lbnQuYm9keSwgY3VzdG9taXplcik7XG4gICAgICpcbiAgICAgKiBjb25zb2xlLmxvZyhlbCA9PT0gZG9jdW1lbnQuYm9keSk7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKiBjb25zb2xlLmxvZyhlbC5ub2RlTmFtZSk7XG4gICAgICogLy8gPT4gJ0JPRFknXG4gICAgICogY29uc29sZS5sb2coZWwuY2hpbGROb2Rlcy5sZW5ndGgpO1xuICAgICAqIC8vID0+IDBcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBjbG9uZVdpdGgodmFsdWUsIGN1c3RvbWl6ZXIpIHtcbiAgICAgIGN1c3RvbWl6ZXIgPSB0eXBlb2YgY3VzdG9taXplciA9PSAnZnVuY3Rpb24nID8gY3VzdG9taXplciA6IHVuZGVmaW5lZDtcbiAgICAgIHJldHVybiBiYXNlQ2xvbmUodmFsdWUsIENMT05FX1NZTUJPTFNfRkxBRywgY3VzdG9taXplcik7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgaXMgbGlrZSBgXy5jbG9uZWAgZXhjZXB0IHRoYXQgaXQgcmVjdXJzaXZlbHkgY2xvbmVzIGB2YWx1ZWAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMS4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgTGFuZ1xuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIHJlY3Vyc2l2ZWx5IGNsb25lLlxuICAgICAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSBkZWVwIGNsb25lZCB2YWx1ZS5cbiAgICAgKiBAc2VlIF8uY2xvbmVcbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIG9iamVjdHMgPSBbeyAnYSc6IDEgfSwgeyAnYic6IDIgfV07XG4gICAgICpcbiAgICAgKiB2YXIgZGVlcCA9IF8uY2xvbmVEZWVwKG9iamVjdHMpO1xuICAgICAqIGNvbnNvbGUubG9nKGRlZXBbMF0gPT09IG9iamVjdHNbMF0pO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICovXG4gICAgZnVuY3Rpb24gY2xvbmVEZWVwKHZhbHVlKSB7XG4gICAgICByZXR1cm4gYmFzZUNsb25lKHZhbHVlLCBDTE9ORV9ERUVQX0ZMQUcgfCBDTE9ORV9TWU1CT0xTX0ZMQUcpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIGlzIGxpa2UgYF8uY2xvbmVXaXRoYCBleGNlcHQgdGhhdCBpdCByZWN1cnNpdmVseSBjbG9uZXMgYHZhbHVlYC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBMYW5nXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gcmVjdXJzaXZlbHkgY2xvbmUuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2N1c3RvbWl6ZXJdIFRoZSBmdW5jdGlvbiB0byBjdXN0b21pemUgY2xvbmluZy5cbiAgICAgKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgZGVlcCBjbG9uZWQgdmFsdWUuXG4gICAgICogQHNlZSBfLmNsb25lV2l0aFxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBmdW5jdGlvbiBjdXN0b21pemVyKHZhbHVlKSB7XG4gICAgICogICBpZiAoXy5pc0VsZW1lbnQodmFsdWUpKSB7XG4gICAgICogICAgIHJldHVybiB2YWx1ZS5jbG9uZU5vZGUodHJ1ZSk7XG4gICAgICogICB9XG4gICAgICogfVxuICAgICAqXG4gICAgICogdmFyIGVsID0gXy5jbG9uZURlZXBXaXRoKGRvY3VtZW50LmJvZHksIGN1c3RvbWl6ZXIpO1xuICAgICAqXG4gICAgICogY29uc29sZS5sb2coZWwgPT09IGRvY3VtZW50LmJvZHkpO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICogY29uc29sZS5sb2coZWwubm9kZU5hbWUpO1xuICAgICAqIC8vID0+ICdCT0RZJ1xuICAgICAqIGNvbnNvbGUubG9nKGVsLmNoaWxkTm9kZXMubGVuZ3RoKTtcbiAgICAgKiAvLyA9PiAyMFxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGNsb25lRGVlcFdpdGgodmFsdWUsIGN1c3RvbWl6ZXIpIHtcbiAgICAgIGN1c3RvbWl6ZXIgPSB0eXBlb2YgY3VzdG9taXplciA9PSAnZnVuY3Rpb24nID8gY3VzdG9taXplciA6IHVuZGVmaW5lZDtcbiAgICAgIHJldHVybiBiYXNlQ2xvbmUodmFsdWUsIENMT05FX0RFRVBfRkxBRyB8IENMT05FX1NZTUJPTFNfRkxBRywgY3VzdG9taXplcik7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ2hlY2tzIGlmIGBvYmplY3RgIGNvbmZvcm1zIHRvIGBzb3VyY2VgIGJ5IGludm9raW5nIHRoZSBwcmVkaWNhdGVcbiAgICAgKiBwcm9wZXJ0aWVzIG9mIGBzb3VyY2VgIHdpdGggdGhlIGNvcnJlc3BvbmRpbmcgcHJvcGVydHkgdmFsdWVzIG9mIGBvYmplY3RgLlxuICAgICAqXG4gICAgICogKipOb3RlOioqIFRoaXMgbWV0aG9kIGlzIGVxdWl2YWxlbnQgdG8gYF8uY29uZm9ybXNgIHdoZW4gYHNvdXJjZWAgaXNcbiAgICAgKiBwYXJ0aWFsbHkgYXBwbGllZC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjE0LjBcbiAgICAgKiBAY2F0ZWdvcnkgTGFuZ1xuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBpbnNwZWN0LlxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBzb3VyY2UgVGhlIG9iamVjdCBvZiBwcm9wZXJ0eSBwcmVkaWNhdGVzIHRvIGNvbmZvcm0gdG8uXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGBvYmplY3RgIGNvbmZvcm1zLCBlbHNlIGBmYWxzZWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBvYmplY3QgPSB7ICdhJzogMSwgJ2InOiAyIH07XG4gICAgICpcbiAgICAgKiBfLmNvbmZvcm1zVG8ob2JqZWN0LCB7ICdiJzogZnVuY3Rpb24obikgeyByZXR1cm4gbiA+IDE7IH0gfSk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogXy5jb25mb3Jtc1RvKG9iamVjdCwgeyAnYic6IGZ1bmN0aW9uKG4pIHsgcmV0dXJuIG4gPiAyOyB9IH0pO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICovXG4gICAgZnVuY3Rpb24gY29uZm9ybXNUbyhvYmplY3QsIHNvdXJjZSkge1xuICAgICAgcmV0dXJuIHNvdXJjZSA9PSBudWxsIHx8IGJhc2VDb25mb3Jtc1RvKG9iamVjdCwgc291cmNlLCBrZXlzKHNvdXJjZSkpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFBlcmZvcm1zIGFcbiAgICAgKiBbYFNhbWVWYWx1ZVplcm9gXShodHRwOi8vZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi83LjAvI3NlYy1zYW1ldmFsdWV6ZXJvKVxuICAgICAqIGNvbXBhcmlzb24gYmV0d2VlbiB0d28gdmFsdWVzIHRvIGRldGVybWluZSBpZiB0aGV5IGFyZSBlcXVpdmFsZW50LlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IExhbmdcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjb21wYXJlLlxuICAgICAqIEBwYXJhbSB7Kn0gb3RoZXIgVGhlIG90aGVyIHZhbHVlIHRvIGNvbXBhcmUuXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIHRoZSB2YWx1ZXMgYXJlIGVxdWl2YWxlbnQsIGVsc2UgYGZhbHNlYC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIG9iamVjdCA9IHsgJ2EnOiAxIH07XG4gICAgICogdmFyIG90aGVyID0geyAnYSc6IDEgfTtcbiAgICAgKlxuICAgICAqIF8uZXEob2JqZWN0LCBvYmplY3QpO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIF8uZXEob2JqZWN0LCBvdGhlcik7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKlxuICAgICAqIF8uZXEoJ2EnLCAnYScpO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIF8uZXEoJ2EnLCBPYmplY3QoJ2EnKSk7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKlxuICAgICAqIF8uZXEoTmFOLCBOYU4pO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBlcSh2YWx1ZSwgb3RoZXIpIHtcbiAgICAgIHJldHVybiB2YWx1ZSA9PT0gb3RoZXIgfHwgKHZhbHVlICE9PSB2YWx1ZSAmJiBvdGhlciAhPT0gb3RoZXIpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGdyZWF0ZXIgdGhhbiBgb3RoZXJgLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDMuOS4wXG4gICAgICogQGNhdGVnb3J5IExhbmdcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjb21wYXJlLlxuICAgICAqIEBwYXJhbSB7Kn0gb3RoZXIgVGhlIG90aGVyIHZhbHVlIHRvIGNvbXBhcmUuXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgZ3JlYXRlciB0aGFuIGBvdGhlcmAsXG4gICAgICogIGVsc2UgYGZhbHNlYC5cbiAgICAgKiBAc2VlIF8ubHRcbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5ndCgzLCAxKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBfLmd0KDMsIDMpO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICpcbiAgICAgKiBfLmd0KDEsIDMpO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICovXG4gICAgdmFyIGd0ID0gY3JlYXRlUmVsYXRpb25hbE9wZXJhdGlvbihiYXNlR3QpO1xuXG4gICAgLyoqXG4gICAgICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgZ3JlYXRlciB0aGFuIG9yIGVxdWFsIHRvIGBvdGhlcmAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMy45LjBcbiAgICAgKiBAY2F0ZWdvcnkgTGFuZ1xuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNvbXBhcmUuXG4gICAgICogQHBhcmFtIHsqfSBvdGhlciBUaGUgb3RoZXIgdmFsdWUgdG8gY29tcGFyZS5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBncmVhdGVyIHRoYW4gb3IgZXF1YWwgdG9cbiAgICAgKiAgYG90aGVyYCwgZWxzZSBgZmFsc2VgLlxuICAgICAqIEBzZWUgXy5sdGVcbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5ndGUoMywgMSk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogXy5ndGUoMywgMyk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogXy5ndGUoMSwgMyk7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKi9cbiAgICB2YXIgZ3RlID0gY3JlYXRlUmVsYXRpb25hbE9wZXJhdGlvbihmdW5jdGlvbih2YWx1ZSwgb3RoZXIpIHtcbiAgICAgIHJldHVybiB2YWx1ZSA+PSBvdGhlcjtcbiAgICB9KTtcblxuICAgIC8qKlxuICAgICAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGxpa2VseSBhbiBgYXJndW1lbnRzYCBvYmplY3QuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAY2F0ZWdvcnkgTGFuZ1xuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGFuIGBhcmd1bWVudHNgIG9iamVjdCxcbiAgICAgKiAgZWxzZSBgZmFsc2VgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmlzQXJndW1lbnRzKGZ1bmN0aW9uKCkgeyByZXR1cm4gYXJndW1lbnRzOyB9KCkpO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIF8uaXNBcmd1bWVudHMoWzEsIDIsIDNdKTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqL1xuICAgIHZhciBpc0FyZ3VtZW50cyA9IGJhc2VJc0FyZ3VtZW50cyhmdW5jdGlvbigpIHsgcmV0dXJuIGFyZ3VtZW50czsgfSgpKSA/IGJhc2VJc0FyZ3VtZW50cyA6IGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgICByZXR1cm4gaXNPYmplY3RMaWtlKHZhbHVlKSAmJiBoYXNPd25Qcm9wZXJ0eS5jYWxsKHZhbHVlLCAnY2FsbGVlJykgJiZcbiAgICAgICAgIXByb3BlcnR5SXNFbnVtZXJhYmxlLmNhbGwodmFsdWUsICdjYWxsZWUnKTtcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgY2xhc3NpZmllZCBhcyBhbiBgQXJyYXlgIG9iamVjdC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBjYXRlZ29yeSBMYW5nXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYW4gYXJyYXksIGVsc2UgYGZhbHNlYC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5pc0FycmF5KFsxLCAyLCAzXSk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogXy5pc0FycmF5KGRvY3VtZW50LmJvZHkuY2hpbGRyZW4pO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICpcbiAgICAgKiBfLmlzQXJyYXkoJ2FiYycpO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICpcbiAgICAgKiBfLmlzQXJyYXkoXy5ub29wKTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqL1xuICAgIHZhciBpc0FycmF5ID0gQXJyYXkuaXNBcnJheTtcblxuICAgIC8qKlxuICAgICAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGNsYXNzaWZpZWQgYXMgYW4gYEFycmF5QnVmZmVyYCBvYmplY3QuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4zLjBcbiAgICAgKiBAY2F0ZWdvcnkgTGFuZ1xuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGFuIGFycmF5IGJ1ZmZlciwgZWxzZSBgZmFsc2VgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmlzQXJyYXlCdWZmZXIobmV3IEFycmF5QnVmZmVyKDIpKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBfLmlzQXJyYXlCdWZmZXIobmV3IEFycmF5KDIpKTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqL1xuICAgIHZhciBpc0FycmF5QnVmZmVyID0gbm9kZUlzQXJyYXlCdWZmZXIgPyBiYXNlVW5hcnkobm9kZUlzQXJyYXlCdWZmZXIpIDogYmFzZUlzQXJyYXlCdWZmZXI7XG5cbiAgICAvKipcbiAgICAgKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBhcnJheS1saWtlLiBBIHZhbHVlIGlzIGNvbnNpZGVyZWQgYXJyYXktbGlrZSBpZiBpdCdzXG4gICAgICogbm90IGEgZnVuY3Rpb24gYW5kIGhhcyBhIGB2YWx1ZS5sZW5ndGhgIHRoYXQncyBhbiBpbnRlZ2VyIGdyZWF0ZXIgdGhhbiBvclxuICAgICAqIGVxdWFsIHRvIGAwYCBhbmQgbGVzcyB0aGFuIG9yIGVxdWFsIHRvIGBOdW1iZXIuTUFYX1NBRkVfSU5URUdFUmAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgTGFuZ1xuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGFycmF5LWxpa2UsIGVsc2UgYGZhbHNlYC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5pc0FycmF5TGlrZShbMSwgMiwgM10pO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIF8uaXNBcnJheUxpa2UoZG9jdW1lbnQuYm9keS5jaGlsZHJlbik7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogXy5pc0FycmF5TGlrZSgnYWJjJyk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogXy5pc0FycmF5TGlrZShfLm5vb3ApO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICovXG4gICAgZnVuY3Rpb24gaXNBcnJheUxpa2UodmFsdWUpIHtcbiAgICAgIHJldHVybiB2YWx1ZSAhPSBudWxsICYmIGlzTGVuZ3RoKHZhbHVlLmxlbmd0aCkgJiYgIWlzRnVuY3Rpb24odmFsdWUpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIGlzIGxpa2UgYF8uaXNBcnJheUxpa2VgIGV4Y2VwdCB0aGF0IGl0IGFsc28gY2hlY2tzIGlmIGB2YWx1ZWBcbiAgICAgKiBpcyBhbiBvYmplY3QuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgTGFuZ1xuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGFuIGFycmF5LWxpa2Ugb2JqZWN0LFxuICAgICAqICBlbHNlIGBmYWxzZWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uaXNBcnJheUxpa2VPYmplY3QoWzEsIDIsIDNdKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBfLmlzQXJyYXlMaWtlT2JqZWN0KGRvY3VtZW50LmJvZHkuY2hpbGRyZW4pO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIF8uaXNBcnJheUxpa2VPYmplY3QoJ2FiYycpO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICpcbiAgICAgKiBfLmlzQXJyYXlMaWtlT2JqZWN0KF8ubm9vcCk7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBpc0FycmF5TGlrZU9iamVjdCh2YWx1ZSkge1xuICAgICAgcmV0dXJuIGlzT2JqZWN0TGlrZSh2YWx1ZSkgJiYgaXNBcnJheUxpa2UodmFsdWUpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGNsYXNzaWZpZWQgYXMgYSBib29sZWFuIHByaW1pdGl2ZSBvciBvYmplY3QuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAY2F0ZWdvcnkgTGFuZ1xuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGEgYm9vbGVhbiwgZWxzZSBgZmFsc2VgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmlzQm9vbGVhbihmYWxzZSk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogXy5pc0Jvb2xlYW4obnVsbCk7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBpc0Jvb2xlYW4odmFsdWUpIHtcbiAgICAgIHJldHVybiB2YWx1ZSA9PT0gdHJ1ZSB8fCB2YWx1ZSA9PT0gZmFsc2UgfHxcbiAgICAgICAgKGlzT2JqZWN0TGlrZSh2YWx1ZSkgJiYgYmFzZUdldFRhZyh2YWx1ZSkgPT0gYm9vbFRhZyk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgYSBidWZmZXIuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4zLjBcbiAgICAgKiBAY2F0ZWdvcnkgTGFuZ1xuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGEgYnVmZmVyLCBlbHNlIGBmYWxzZWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uaXNCdWZmZXIobmV3IEJ1ZmZlcigyKSk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogXy5pc0J1ZmZlcihuZXcgVWludDhBcnJheSgyKSk7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKi9cbiAgICB2YXIgaXNCdWZmZXIgPSBuYXRpdmVJc0J1ZmZlciB8fCBzdHViRmFsc2U7XG5cbiAgICAvKipcbiAgICAgKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBjbGFzc2lmaWVkIGFzIGEgYERhdGVgIG9iamVjdC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBjYXRlZ29yeSBMYW5nXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYSBkYXRlIG9iamVjdCwgZWxzZSBgZmFsc2VgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmlzRGF0ZShuZXcgRGF0ZSk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogXy5pc0RhdGUoJ01vbiBBcHJpbCAyMyAyMDEyJyk7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKi9cbiAgICB2YXIgaXNEYXRlID0gbm9kZUlzRGF0ZSA/IGJhc2VVbmFyeShub2RlSXNEYXRlKSA6IGJhc2VJc0RhdGU7XG5cbiAgICAvKipcbiAgICAgKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBsaWtlbHkgYSBET00gZWxlbWVudC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBjYXRlZ29yeSBMYW5nXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYSBET00gZWxlbWVudCwgZWxzZSBgZmFsc2VgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmlzRWxlbWVudChkb2N1bWVudC5ib2R5KTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBfLmlzRWxlbWVudCgnPGJvZHk+Jyk7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBpc0VsZW1lbnQodmFsdWUpIHtcbiAgICAgIHJldHVybiBpc09iamVjdExpa2UodmFsdWUpICYmIHZhbHVlLm5vZGVUeXBlID09PSAxICYmICFpc1BsYWluT2JqZWN0KHZhbHVlKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBhbiBlbXB0eSBvYmplY3QsIGNvbGxlY3Rpb24sIG1hcCwgb3Igc2V0LlxuICAgICAqXG4gICAgICogT2JqZWN0cyBhcmUgY29uc2lkZXJlZCBlbXB0eSBpZiB0aGV5IGhhdmUgbm8gb3duIGVudW1lcmFibGUgc3RyaW5nIGtleWVkXG4gICAgICogcHJvcGVydGllcy5cbiAgICAgKlxuICAgICAqIEFycmF5LWxpa2UgdmFsdWVzIHN1Y2ggYXMgYGFyZ3VtZW50c2Agb2JqZWN0cywgYXJyYXlzLCBidWZmZXJzLCBzdHJpbmdzLCBvclxuICAgICAqIGpRdWVyeS1saWtlIGNvbGxlY3Rpb25zIGFyZSBjb25zaWRlcmVkIGVtcHR5IGlmIHRoZXkgaGF2ZSBhIGBsZW5ndGhgIG9mIGAwYC5cbiAgICAgKiBTaW1pbGFybHksIG1hcHMgYW5kIHNldHMgYXJlIGNvbnNpZGVyZWQgZW1wdHkgaWYgdGhleSBoYXZlIGEgYHNpemVgIG9mIGAwYC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBjYXRlZ29yeSBMYW5nXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgZW1wdHksIGVsc2UgYGZhbHNlYC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5pc0VtcHR5KG51bGwpO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIF8uaXNFbXB0eSh0cnVlKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBfLmlzRW1wdHkoMSk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogXy5pc0VtcHR5KFsxLCAyLCAzXSk7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKlxuICAgICAqIF8uaXNFbXB0eSh7ICdhJzogMSB9KTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGlzRW1wdHkodmFsdWUpIHtcbiAgICAgIGlmICh2YWx1ZSA9PSBudWxsKSB7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgfVxuICAgICAgaWYgKGlzQXJyYXlMaWtlKHZhbHVlKSAmJlxuICAgICAgICAgIChpc0FycmF5KHZhbHVlKSB8fCB0eXBlb2YgdmFsdWUgPT0gJ3N0cmluZycgfHwgdHlwZW9mIHZhbHVlLnNwbGljZSA9PSAnZnVuY3Rpb24nIHx8XG4gICAgICAgICAgICBpc0J1ZmZlcih2YWx1ZSkgfHwgaXNUeXBlZEFycmF5KHZhbHVlKSB8fCBpc0FyZ3VtZW50cyh2YWx1ZSkpKSB7XG4gICAgICAgIHJldHVybiAhdmFsdWUubGVuZ3RoO1xuICAgICAgfVxuICAgICAgdmFyIHRhZyA9IGdldFRhZyh2YWx1ZSk7XG4gICAgICBpZiAodGFnID09IG1hcFRhZyB8fCB0YWcgPT0gc2V0VGFnKSB7XG4gICAgICAgIHJldHVybiAhdmFsdWUuc2l6ZTtcbiAgICAgIH1cbiAgICAgIGlmIChpc1Byb3RvdHlwZSh2YWx1ZSkpIHtcbiAgICAgICAgcmV0dXJuICFiYXNlS2V5cyh2YWx1ZSkubGVuZ3RoO1xuICAgICAgfVxuICAgICAgZm9yICh2YXIga2V5IGluIHZhbHVlKSB7XG4gICAgICAgIGlmIChoYXNPd25Qcm9wZXJ0eS5jYWxsKHZhbHVlLCBrZXkpKSB7XG4gICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBQZXJmb3JtcyBhIGRlZXAgY29tcGFyaXNvbiBiZXR3ZWVuIHR3byB2YWx1ZXMgdG8gZGV0ZXJtaW5lIGlmIHRoZXkgYXJlXG4gICAgICogZXF1aXZhbGVudC5cbiAgICAgKlxuICAgICAqICoqTm90ZToqKiBUaGlzIG1ldGhvZCBzdXBwb3J0cyBjb21wYXJpbmcgYXJyYXlzLCBhcnJheSBidWZmZXJzLCBib29sZWFucyxcbiAgICAgKiBkYXRlIG9iamVjdHMsIGVycm9yIG9iamVjdHMsIG1hcHMsIG51bWJlcnMsIGBPYmplY3RgIG9iamVjdHMsIHJlZ2V4ZXMsXG4gICAgICogc2V0cywgc3RyaW5ncywgc3ltYm9scywgYW5kIHR5cGVkIGFycmF5cy4gYE9iamVjdGAgb2JqZWN0cyBhcmUgY29tcGFyZWRcbiAgICAgKiBieSB0aGVpciBvd24sIG5vdCBpbmhlcml0ZWQsIGVudW1lcmFibGUgcHJvcGVydGllcy4gRnVuY3Rpb25zIGFuZCBET01cbiAgICAgKiBub2RlcyBhcmUgY29tcGFyZWQgYnkgc3RyaWN0IGVxdWFsaXR5LCBpLmUuIGA9PT1gLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDAuMS4wXG4gICAgICogQGNhdGVnb3J5IExhbmdcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjb21wYXJlLlxuICAgICAqIEBwYXJhbSB7Kn0gb3RoZXIgVGhlIG90aGVyIHZhbHVlIHRvIGNvbXBhcmUuXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIHRoZSB2YWx1ZXMgYXJlIGVxdWl2YWxlbnQsIGVsc2UgYGZhbHNlYC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIG9iamVjdCA9IHsgJ2EnOiAxIH07XG4gICAgICogdmFyIG90aGVyID0geyAnYSc6IDEgfTtcbiAgICAgKlxuICAgICAqIF8uaXNFcXVhbChvYmplY3QsIG90aGVyKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBvYmplY3QgPT09IG90aGVyO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICovXG4gICAgZnVuY3Rpb24gaXNFcXVhbCh2YWx1ZSwgb3RoZXIpIHtcbiAgICAgIHJldHVybiBiYXNlSXNFcXVhbCh2YWx1ZSwgb3RoZXIpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIGlzIGxpa2UgYF8uaXNFcXVhbGAgZXhjZXB0IHRoYXQgaXQgYWNjZXB0cyBgY3VzdG9taXplcmAgd2hpY2hcbiAgICAgKiBpcyBpbnZva2VkIHRvIGNvbXBhcmUgdmFsdWVzLiBJZiBgY3VzdG9taXplcmAgcmV0dXJucyBgdW5kZWZpbmVkYCwgY29tcGFyaXNvbnNcbiAgICAgKiBhcmUgaGFuZGxlZCBieSB0aGUgbWV0aG9kIGluc3RlYWQuIFRoZSBgY3VzdG9taXplcmAgaXMgaW52b2tlZCB3aXRoIHVwIHRvXG4gICAgICogc2l4IGFyZ3VtZW50czogKG9ialZhbHVlLCBvdGhWYWx1ZSBbLCBpbmRleHxrZXksIG9iamVjdCwgb3RoZXIsIHN0YWNrXSkuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgTGFuZ1xuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNvbXBhcmUuXG4gICAgICogQHBhcmFtIHsqfSBvdGhlciBUaGUgb3RoZXIgdmFsdWUgdG8gY29tcGFyZS5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbY3VzdG9taXplcl0gVGhlIGZ1bmN0aW9uIHRvIGN1c3RvbWl6ZSBjb21wYXJpc29ucy5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgdGhlIHZhbHVlcyBhcmUgZXF1aXZhbGVudCwgZWxzZSBgZmFsc2VgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBmdW5jdGlvbiBpc0dyZWV0aW5nKHZhbHVlKSB7XG4gICAgICogICByZXR1cm4gL15oKD86aXxlbGxvKSQvLnRlc3QodmFsdWUpO1xuICAgICAqIH1cbiAgICAgKlxuICAgICAqIGZ1bmN0aW9uIGN1c3RvbWl6ZXIob2JqVmFsdWUsIG90aFZhbHVlKSB7XG4gICAgICogICBpZiAoaXNHcmVldGluZyhvYmpWYWx1ZSkgJiYgaXNHcmVldGluZyhvdGhWYWx1ZSkpIHtcbiAgICAgKiAgICAgcmV0dXJuIHRydWU7XG4gICAgICogICB9XG4gICAgICogfVxuICAgICAqXG4gICAgICogdmFyIGFycmF5ID0gWydoZWxsbycsICdnb29kYnllJ107XG4gICAgICogdmFyIG90aGVyID0gWydoaScsICdnb29kYnllJ107XG4gICAgICpcbiAgICAgKiBfLmlzRXF1YWxXaXRoKGFycmF5LCBvdGhlciwgY3VzdG9taXplcik7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGlzRXF1YWxXaXRoKHZhbHVlLCBvdGhlciwgY3VzdG9taXplcikge1xuICAgICAgY3VzdG9taXplciA9IHR5cGVvZiBjdXN0b21pemVyID09ICdmdW5jdGlvbicgPyBjdXN0b21pemVyIDogdW5kZWZpbmVkO1xuICAgICAgdmFyIHJlc3VsdCA9IGN1c3RvbWl6ZXIgPyBjdXN0b21pemVyKHZhbHVlLCBvdGhlcikgOiB1bmRlZmluZWQ7XG4gICAgICByZXR1cm4gcmVzdWx0ID09PSB1bmRlZmluZWQgPyBiYXNlSXNFcXVhbCh2YWx1ZSwgb3RoZXIsIHVuZGVmaW5lZCwgY3VzdG9taXplcikgOiAhIXJlc3VsdDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBhbiBgRXJyb3JgLCBgRXZhbEVycm9yYCwgYFJhbmdlRXJyb3JgLCBgUmVmZXJlbmNlRXJyb3JgLFxuICAgICAqIGBTeW50YXhFcnJvcmAsIGBUeXBlRXJyb3JgLCBvciBgVVJJRXJyb3JgIG9iamVjdC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAzLjAuMFxuICAgICAqIEBjYXRlZ29yeSBMYW5nXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYW4gZXJyb3Igb2JqZWN0LCBlbHNlIGBmYWxzZWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uaXNFcnJvcihuZXcgRXJyb3IpO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIF8uaXNFcnJvcihFcnJvcik7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBpc0Vycm9yKHZhbHVlKSB7XG4gICAgICBpZiAoIWlzT2JqZWN0TGlrZSh2YWx1ZSkpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuICAgICAgdmFyIHRhZyA9IGJhc2VHZXRUYWcodmFsdWUpO1xuICAgICAgcmV0dXJuIHRhZyA9PSBlcnJvclRhZyB8fCB0YWcgPT0gZG9tRXhjVGFnIHx8XG4gICAgICAgICh0eXBlb2YgdmFsdWUubWVzc2FnZSA9PSAnc3RyaW5nJyAmJiB0eXBlb2YgdmFsdWUubmFtZSA9PSAnc3RyaW5nJyAmJiAhaXNQbGFpbk9iamVjdCh2YWx1ZSkpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGEgZmluaXRlIHByaW1pdGl2ZSBudW1iZXIuXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogVGhpcyBtZXRob2QgaXMgYmFzZWQgb25cbiAgICAgKiBbYE51bWJlci5pc0Zpbml0ZWBdKGh0dHBzOi8vbWRuLmlvL051bWJlci9pc0Zpbml0ZSkuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAY2F0ZWdvcnkgTGFuZ1xuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGEgZmluaXRlIG51bWJlciwgZWxzZSBgZmFsc2VgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmlzRmluaXRlKDMpO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIF8uaXNGaW5pdGUoTnVtYmVyLk1JTl9WQUxVRSk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogXy5pc0Zpbml0ZShJbmZpbml0eSk7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKlxuICAgICAqIF8uaXNGaW5pdGUoJzMnKTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGlzRmluaXRlKHZhbHVlKSB7XG4gICAgICByZXR1cm4gdHlwZW9mIHZhbHVlID09ICdudW1iZXInICYmIG5hdGl2ZUlzRmluaXRlKHZhbHVlKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBjbGFzc2lmaWVkIGFzIGEgYEZ1bmN0aW9uYCBvYmplY3QuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAY2F0ZWdvcnkgTGFuZ1xuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGEgZnVuY3Rpb24sIGVsc2UgYGZhbHNlYC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5pc0Z1bmN0aW9uKF8pO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIF8uaXNGdW5jdGlvbigvYWJjLyk7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBpc0Z1bmN0aW9uKHZhbHVlKSB7XG4gICAgICBpZiAoIWlzT2JqZWN0KHZhbHVlKSkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG4gICAgICAvLyBUaGUgdXNlIG9mIGBPYmplY3QjdG9TdHJpbmdgIGF2b2lkcyBpc3N1ZXMgd2l0aCB0aGUgYHR5cGVvZmAgb3BlcmF0b3JcbiAgICAgIC8vIGluIFNhZmFyaSA5IHdoaWNoIHJldHVybnMgJ29iamVjdCcgZm9yIHR5cGVkIGFycmF5cyBhbmQgb3RoZXIgY29uc3RydWN0b3JzLlxuICAgICAgdmFyIHRhZyA9IGJhc2VHZXRUYWcodmFsdWUpO1xuICAgICAgcmV0dXJuIHRhZyA9PSBmdW5jVGFnIHx8IHRhZyA9PSBnZW5UYWcgfHwgdGFnID09IGFzeW5jVGFnIHx8IHRhZyA9PSBwcm94eVRhZztcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBhbiBpbnRlZ2VyLlxuICAgICAqXG4gICAgICogKipOb3RlOioqIFRoaXMgbWV0aG9kIGlzIGJhc2VkIG9uXG4gICAgICogW2BOdW1iZXIuaXNJbnRlZ2VyYF0oaHR0cHM6Ly9tZG4uaW8vTnVtYmVyL2lzSW50ZWdlcikuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgTGFuZ1xuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGFuIGludGVnZXIsIGVsc2UgYGZhbHNlYC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5pc0ludGVnZXIoMyk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogXy5pc0ludGVnZXIoTnVtYmVyLk1JTl9WQUxVRSk7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKlxuICAgICAqIF8uaXNJbnRlZ2VyKEluZmluaXR5KTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqXG4gICAgICogXy5pc0ludGVnZXIoJzMnKTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGlzSW50ZWdlcih2YWx1ZSkge1xuICAgICAgcmV0dXJuIHR5cGVvZiB2YWx1ZSA9PSAnbnVtYmVyJyAmJiB2YWx1ZSA9PSB0b0ludGVnZXIodmFsdWUpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGEgdmFsaWQgYXJyYXktbGlrZSBsZW5ndGguXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogVGhpcyBtZXRob2QgaXMgbG9vc2VseSBiYXNlZCBvblxuICAgICAqIFtgVG9MZW5ndGhgXShodHRwOi8vZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi83LjAvI3NlYy10b2xlbmd0aCkuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgTGFuZ1xuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGEgdmFsaWQgbGVuZ3RoLCBlbHNlIGBmYWxzZWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uaXNMZW5ndGgoMyk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogXy5pc0xlbmd0aChOdW1iZXIuTUlOX1ZBTFVFKTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqXG4gICAgICogXy5pc0xlbmd0aChJbmZpbml0eSk7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKlxuICAgICAqIF8uaXNMZW5ndGgoJzMnKTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGlzTGVuZ3RoKHZhbHVlKSB7XG4gICAgICByZXR1cm4gdHlwZW9mIHZhbHVlID09ICdudW1iZXInICYmXG4gICAgICAgIHZhbHVlID4gLTEgJiYgdmFsdWUgJSAxID09IDAgJiYgdmFsdWUgPD0gTUFYX1NBRkVfSU5URUdFUjtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDaGVja3MgaWYgYHZhbHVlYCBpcyB0aGVcbiAgICAgKiBbbGFuZ3VhZ2UgdHlwZV0oaHR0cDovL3d3dy5lY21hLWludGVybmF0aW9uYWwub3JnL2VjbWEtMjYyLzcuMC8jc2VjLWVjbWFzY3JpcHQtbGFuZ3VhZ2UtdHlwZXMpXG4gICAgICogb2YgYE9iamVjdGAuIChlLmcuIGFycmF5cywgZnVuY3Rpb25zLCBvYmplY3RzLCByZWdleGVzLCBgbmV3IE51bWJlcigwKWAsIGFuZCBgbmV3IFN0cmluZygnJylgKVxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDAuMS4wXG4gICAgICogQGNhdGVnb3J5IExhbmdcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhbiBvYmplY3QsIGVsc2UgYGZhbHNlYC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5pc09iamVjdCh7fSk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogXy5pc09iamVjdChbMSwgMiwgM10pO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIF8uaXNPYmplY3QoXy5ub29wKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBfLmlzT2JqZWN0KG51bGwpO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICovXG4gICAgZnVuY3Rpb24gaXNPYmplY3QodmFsdWUpIHtcbiAgICAgIHZhciB0eXBlID0gdHlwZW9mIHZhbHVlO1xuICAgICAgcmV0dXJuIHZhbHVlICE9IG51bGwgJiYgKHR5cGUgPT0gJ29iamVjdCcgfHwgdHlwZSA9PSAnZnVuY3Rpb24nKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBvYmplY3QtbGlrZS4gQSB2YWx1ZSBpcyBvYmplY3QtbGlrZSBpZiBpdCdzIG5vdCBgbnVsbGBcbiAgICAgKiBhbmQgaGFzIGEgYHR5cGVvZmAgcmVzdWx0IG9mIFwib2JqZWN0XCIuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgTGFuZ1xuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIG9iamVjdC1saWtlLCBlbHNlIGBmYWxzZWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uaXNPYmplY3RMaWtlKHt9KTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBfLmlzT2JqZWN0TGlrZShbMSwgMiwgM10pO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIF8uaXNPYmplY3RMaWtlKF8ubm9vcCk7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKlxuICAgICAqIF8uaXNPYmplY3RMaWtlKG51bGwpO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICovXG4gICAgZnVuY3Rpb24gaXNPYmplY3RMaWtlKHZhbHVlKSB7XG4gICAgICByZXR1cm4gdmFsdWUgIT0gbnVsbCAmJiB0eXBlb2YgdmFsdWUgPT0gJ29iamVjdCc7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgY2xhc3NpZmllZCBhcyBhIGBNYXBgIG9iamVjdC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjMuMFxuICAgICAqIEBjYXRlZ29yeSBMYW5nXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYSBtYXAsIGVsc2UgYGZhbHNlYC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5pc01hcChuZXcgTWFwKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBfLmlzTWFwKG5ldyBXZWFrTWFwKTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqL1xuICAgIHZhciBpc01hcCA9IG5vZGVJc01hcCA/IGJhc2VVbmFyeShub2RlSXNNYXApIDogYmFzZUlzTWFwO1xuXG4gICAgLyoqXG4gICAgICogUGVyZm9ybXMgYSBwYXJ0aWFsIGRlZXAgY29tcGFyaXNvbiBiZXR3ZWVuIGBvYmplY3RgIGFuZCBgc291cmNlYCB0b1xuICAgICAqIGRldGVybWluZSBpZiBgb2JqZWN0YCBjb250YWlucyBlcXVpdmFsZW50IHByb3BlcnR5IHZhbHVlcy5cbiAgICAgKlxuICAgICAqICoqTm90ZToqKiBUaGlzIG1ldGhvZCBpcyBlcXVpdmFsZW50IHRvIGBfLm1hdGNoZXNgIHdoZW4gYHNvdXJjZWAgaXNcbiAgICAgKiBwYXJ0aWFsbHkgYXBwbGllZC5cbiAgICAgKlxuICAgICAqIFBhcnRpYWwgY29tcGFyaXNvbnMgd2lsbCBtYXRjaCBlbXB0eSBhcnJheSBhbmQgZW1wdHkgb2JqZWN0IGBzb3VyY2VgXG4gICAgICogdmFsdWVzIGFnYWluc3QgYW55IGFycmF5IG9yIG9iamVjdCB2YWx1ZSwgcmVzcGVjdGl2ZWx5LiBTZWUgYF8uaXNFcXVhbGBcbiAgICAgKiBmb3IgYSBsaXN0IG9mIHN1cHBvcnRlZCB2YWx1ZSBjb21wYXJpc29ucy5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAzLjAuMFxuICAgICAqIEBjYXRlZ29yeSBMYW5nXG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIGluc3BlY3QuXG4gICAgICogQHBhcmFtIHtPYmplY3R9IHNvdXJjZSBUaGUgb2JqZWN0IG9mIHByb3BlcnR5IHZhbHVlcyB0byBtYXRjaC5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYG9iamVjdGAgaXMgYSBtYXRjaCwgZWxzZSBgZmFsc2VgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgb2JqZWN0ID0geyAnYSc6IDEsICdiJzogMiB9O1xuICAgICAqXG4gICAgICogXy5pc01hdGNoKG9iamVjdCwgeyAnYic6IDIgfSk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogXy5pc01hdGNoKG9iamVjdCwgeyAnYic6IDEgfSk7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBpc01hdGNoKG9iamVjdCwgc291cmNlKSB7XG4gICAgICByZXR1cm4gb2JqZWN0ID09PSBzb3VyY2UgfHwgYmFzZUlzTWF0Y2gob2JqZWN0LCBzb3VyY2UsIGdldE1hdGNoRGF0YShzb3VyY2UpKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCBpcyBsaWtlIGBfLmlzTWF0Y2hgIGV4Y2VwdCB0aGF0IGl0IGFjY2VwdHMgYGN1c3RvbWl6ZXJgIHdoaWNoXG4gICAgICogaXMgaW52b2tlZCB0byBjb21wYXJlIHZhbHVlcy4gSWYgYGN1c3RvbWl6ZXJgIHJldHVybnMgYHVuZGVmaW5lZGAsIGNvbXBhcmlzb25zXG4gICAgICogYXJlIGhhbmRsZWQgYnkgdGhlIG1ldGhvZCBpbnN0ZWFkLiBUaGUgYGN1c3RvbWl6ZXJgIGlzIGludm9rZWQgd2l0aCBmaXZlXG4gICAgICogYXJndW1lbnRzOiAob2JqVmFsdWUsIHNyY1ZhbHVlLCBpbmRleHxrZXksIG9iamVjdCwgc291cmNlKS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBMYW5nXG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIGluc3BlY3QuXG4gICAgICogQHBhcmFtIHtPYmplY3R9IHNvdXJjZSBUaGUgb2JqZWN0IG9mIHByb3BlcnR5IHZhbHVlcyB0byBtYXRjaC5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbY3VzdG9taXplcl0gVGhlIGZ1bmN0aW9uIHRvIGN1c3RvbWl6ZSBjb21wYXJpc29ucy5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYG9iamVjdGAgaXMgYSBtYXRjaCwgZWxzZSBgZmFsc2VgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBmdW5jdGlvbiBpc0dyZWV0aW5nKHZhbHVlKSB7XG4gICAgICogICByZXR1cm4gL15oKD86aXxlbGxvKSQvLnRlc3QodmFsdWUpO1xuICAgICAqIH1cbiAgICAgKlxuICAgICAqIGZ1bmN0aW9uIGN1c3RvbWl6ZXIob2JqVmFsdWUsIHNyY1ZhbHVlKSB7XG4gICAgICogICBpZiAoaXNHcmVldGluZyhvYmpWYWx1ZSkgJiYgaXNHcmVldGluZyhzcmNWYWx1ZSkpIHtcbiAgICAgKiAgICAgcmV0dXJuIHRydWU7XG4gICAgICogICB9XG4gICAgICogfVxuICAgICAqXG4gICAgICogdmFyIG9iamVjdCA9IHsgJ2dyZWV0aW5nJzogJ2hlbGxvJyB9O1xuICAgICAqIHZhciBzb3VyY2UgPSB7ICdncmVldGluZyc6ICdoaScgfTtcbiAgICAgKlxuICAgICAqIF8uaXNNYXRjaFdpdGgob2JqZWN0LCBzb3VyY2UsIGN1c3RvbWl6ZXIpO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBpc01hdGNoV2l0aChvYmplY3QsIHNvdXJjZSwgY3VzdG9taXplcikge1xuICAgICAgY3VzdG9taXplciA9IHR5cGVvZiBjdXN0b21pemVyID09ICdmdW5jdGlvbicgPyBjdXN0b21pemVyIDogdW5kZWZpbmVkO1xuICAgICAgcmV0dXJuIGJhc2VJc01hdGNoKG9iamVjdCwgc291cmNlLCBnZXRNYXRjaERhdGEoc291cmNlKSwgY3VzdG9taXplcik7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgYE5hTmAuXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogVGhpcyBtZXRob2QgaXMgYmFzZWQgb25cbiAgICAgKiBbYE51bWJlci5pc05hTmBdKGh0dHBzOi8vbWRuLmlvL051bWJlci9pc05hTikgYW5kIGlzIG5vdCB0aGUgc2FtZSBhc1xuICAgICAqIGdsb2JhbCBbYGlzTmFOYF0oaHR0cHM6Ly9tZG4uaW8vaXNOYU4pIHdoaWNoIHJldHVybnMgYHRydWVgIGZvclxuICAgICAqIGB1bmRlZmluZWRgIGFuZCBvdGhlciBub24tbnVtYmVyIHZhbHVlcy5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBjYXRlZ29yeSBMYW5nXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYE5hTmAsIGVsc2UgYGZhbHNlYC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5pc05hTihOYU4pO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIF8uaXNOYU4obmV3IE51bWJlcihOYU4pKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBpc05hTih1bmRlZmluZWQpO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIF8uaXNOYU4odW5kZWZpbmVkKTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGlzTmFOKHZhbHVlKSB7XG4gICAgICAvLyBBbiBgTmFOYCBwcmltaXRpdmUgaXMgdGhlIG9ubHkgdmFsdWUgdGhhdCBpcyBub3QgZXF1YWwgdG8gaXRzZWxmLlxuICAgICAgLy8gUGVyZm9ybSB0aGUgYHRvU3RyaW5nVGFnYCBjaGVjayBmaXJzdCB0byBhdm9pZCBlcnJvcnMgd2l0aCBzb21lXG4gICAgICAvLyBBY3RpdmVYIG9iamVjdHMgaW4gSUUuXG4gICAgICByZXR1cm4gaXNOdW1iZXIodmFsdWUpICYmIHZhbHVlICE9ICt2YWx1ZTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBhIHByaXN0aW5lIG5hdGl2ZSBmdW5jdGlvbi5cbiAgICAgKlxuICAgICAqICoqTm90ZToqKiBUaGlzIG1ldGhvZCBjYW4ndCByZWxpYWJseSBkZXRlY3QgbmF0aXZlIGZ1bmN0aW9ucyBpbiB0aGUgcHJlc2VuY2VcbiAgICAgKiBvZiB0aGUgY29yZS1qcyBwYWNrYWdlIGJlY2F1c2UgY29yZS1qcyBjaXJjdW12ZW50cyB0aGlzIGtpbmQgb2YgZGV0ZWN0aW9uLlxuICAgICAqIERlc3BpdGUgbXVsdGlwbGUgcmVxdWVzdHMsIHRoZSBjb3JlLWpzIG1haW50YWluZXIgaGFzIG1hZGUgaXQgY2xlYXI6IGFueVxuICAgICAqIGF0dGVtcHQgdG8gZml4IHRoZSBkZXRlY3Rpb24gd2lsbCBiZSBvYnN0cnVjdGVkLiBBcyBhIHJlc3VsdCwgd2UncmUgbGVmdFxuICAgICAqIHdpdGggbGl0dGxlIGNob2ljZSBidXQgdG8gdGhyb3cgYW4gZXJyb3IuIFVuZm9ydHVuYXRlbHksIHRoaXMgYWxzbyBhZmZlY3RzXG4gICAgICogcGFja2FnZXMsIGxpa2UgW2JhYmVsLXBvbHlmaWxsXShodHRwczovL3d3dy5ucG1qcy5jb20vcGFja2FnZS9iYWJlbC1wb2x5ZmlsbCksXG4gICAgICogd2hpY2ggcmVseSBvbiBjb3JlLWpzLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDMuMC4wXG4gICAgICogQGNhdGVnb3J5IExhbmdcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhIG5hdGl2ZSBmdW5jdGlvbixcbiAgICAgKiAgZWxzZSBgZmFsc2VgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmlzTmF0aXZlKEFycmF5LnByb3RvdHlwZS5wdXNoKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBfLmlzTmF0aXZlKF8pO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICovXG4gICAgZnVuY3Rpb24gaXNOYXRpdmUodmFsdWUpIHtcbiAgICAgIGlmIChpc01hc2thYmxlKHZhbHVlKSkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoQ09SRV9FUlJPUl9URVhUKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBiYXNlSXNOYXRpdmUodmFsdWUpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGBudWxsYC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBjYXRlZ29yeSBMYW5nXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYG51bGxgLCBlbHNlIGBmYWxzZWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uaXNOdWxsKG51bGwpO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIF8uaXNOdWxsKHZvaWQgMCk7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBpc051bGwodmFsdWUpIHtcbiAgICAgIHJldHVybiB2YWx1ZSA9PT0gbnVsbDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBgbnVsbGAgb3IgYHVuZGVmaW5lZGAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgTGFuZ1xuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIG51bGxpc2gsIGVsc2UgYGZhbHNlYC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5pc05pbChudWxsKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBfLmlzTmlsKHZvaWQgMCk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogXy5pc05pbChOYU4pO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICovXG4gICAgZnVuY3Rpb24gaXNOaWwodmFsdWUpIHtcbiAgICAgIHJldHVybiB2YWx1ZSA9PSBudWxsO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGNsYXNzaWZpZWQgYXMgYSBgTnVtYmVyYCBwcmltaXRpdmUgb3Igb2JqZWN0LlxuICAgICAqXG4gICAgICogKipOb3RlOioqIFRvIGV4Y2x1ZGUgYEluZmluaXR5YCwgYC1JbmZpbml0eWAsIGFuZCBgTmFOYCwgd2hpY2ggYXJlXG4gICAgICogY2xhc3NpZmllZCBhcyBudW1iZXJzLCB1c2UgdGhlIGBfLmlzRmluaXRlYCBtZXRob2QuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAY2F0ZWdvcnkgTGFuZ1xuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGEgbnVtYmVyLCBlbHNlIGBmYWxzZWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uaXNOdW1iZXIoMyk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogXy5pc051bWJlcihOdW1iZXIuTUlOX1ZBTFVFKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBfLmlzTnVtYmVyKEluZmluaXR5KTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBfLmlzTnVtYmVyKCczJyk7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBpc051bWJlcih2YWx1ZSkge1xuICAgICAgcmV0dXJuIHR5cGVvZiB2YWx1ZSA9PSAnbnVtYmVyJyB8fFxuICAgICAgICAoaXNPYmplY3RMaWtlKHZhbHVlKSAmJiBiYXNlR2V0VGFnKHZhbHVlKSA9PSBudW1iZXJUYWcpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGEgcGxhaW4gb2JqZWN0LCB0aGF0IGlzLCBhbiBvYmplY3QgY3JlYXRlZCBieSB0aGVcbiAgICAgKiBgT2JqZWN0YCBjb25zdHJ1Y3RvciBvciBvbmUgd2l0aCBhIGBbW1Byb3RvdHlwZV1dYCBvZiBgbnVsbGAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMC44LjBcbiAgICAgKiBAY2F0ZWdvcnkgTGFuZ1xuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGEgcGxhaW4gb2JqZWN0LCBlbHNlIGBmYWxzZWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIGZ1bmN0aW9uIEZvbygpIHtcbiAgICAgKiAgIHRoaXMuYSA9IDE7XG4gICAgICogfVxuICAgICAqXG4gICAgICogXy5pc1BsYWluT2JqZWN0KG5ldyBGb28pO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICpcbiAgICAgKiBfLmlzUGxhaW5PYmplY3QoWzEsIDIsIDNdKTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqXG4gICAgICogXy5pc1BsYWluT2JqZWN0KHsgJ3gnOiAwLCAneSc6IDAgfSk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogXy5pc1BsYWluT2JqZWN0KE9iamVjdC5jcmVhdGUobnVsbCkpO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBpc1BsYWluT2JqZWN0KHZhbHVlKSB7XG4gICAgICBpZiAoIWlzT2JqZWN0TGlrZSh2YWx1ZSkgfHwgYmFzZUdldFRhZyh2YWx1ZSkgIT0gb2JqZWN0VGFnKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cbiAgICAgIHZhciBwcm90byA9IGdldFByb3RvdHlwZSh2YWx1ZSk7XG4gICAgICBpZiAocHJvdG8gPT09IG51bGwpIHtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICB9XG4gICAgICB2YXIgQ3RvciA9IGhhc093blByb3BlcnR5LmNhbGwocHJvdG8sICdjb25zdHJ1Y3RvcicpICYmIHByb3RvLmNvbnN0cnVjdG9yO1xuICAgICAgcmV0dXJuIHR5cGVvZiBDdG9yID09ICdmdW5jdGlvbicgJiYgQ3RvciBpbnN0YW5jZW9mIEN0b3IgJiZcbiAgICAgICAgZnVuY1RvU3RyaW5nLmNhbGwoQ3RvcikgPT0gb2JqZWN0Q3RvclN0cmluZztcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBjbGFzc2lmaWVkIGFzIGEgYFJlZ0V4cGAgb2JqZWN0LlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDAuMS4wXG4gICAgICogQGNhdGVnb3J5IExhbmdcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhIHJlZ2V4cCwgZWxzZSBgZmFsc2VgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmlzUmVnRXhwKC9hYmMvKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBfLmlzUmVnRXhwKCcvYWJjLycpO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICovXG4gICAgdmFyIGlzUmVnRXhwID0gbm9kZUlzUmVnRXhwID8gYmFzZVVuYXJ5KG5vZGVJc1JlZ0V4cCkgOiBiYXNlSXNSZWdFeHA7XG5cbiAgICAvKipcbiAgICAgKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBhIHNhZmUgaW50ZWdlci4gQW4gaW50ZWdlciBpcyBzYWZlIGlmIGl0J3MgYW4gSUVFRS03NTRcbiAgICAgKiBkb3VibGUgcHJlY2lzaW9uIG51bWJlciB3aGljaCBpc24ndCB0aGUgcmVzdWx0IG9mIGEgcm91bmRlZCB1bnNhZmUgaW50ZWdlci5cbiAgICAgKlxuICAgICAqICoqTm90ZToqKiBUaGlzIG1ldGhvZCBpcyBiYXNlZCBvblxuICAgICAqIFtgTnVtYmVyLmlzU2FmZUludGVnZXJgXShodHRwczovL21kbi5pby9OdW1iZXIvaXNTYWZlSW50ZWdlcikuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgTGFuZ1xuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGEgc2FmZSBpbnRlZ2VyLCBlbHNlIGBmYWxzZWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uaXNTYWZlSW50ZWdlcigzKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBfLmlzU2FmZUludGVnZXIoTnVtYmVyLk1JTl9WQUxVRSk7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKlxuICAgICAqIF8uaXNTYWZlSW50ZWdlcihJbmZpbml0eSk7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKlxuICAgICAqIF8uaXNTYWZlSW50ZWdlcignMycpO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICovXG4gICAgZnVuY3Rpb24gaXNTYWZlSW50ZWdlcih2YWx1ZSkge1xuICAgICAgcmV0dXJuIGlzSW50ZWdlcih2YWx1ZSkgJiYgdmFsdWUgPj0gLU1BWF9TQUZFX0lOVEVHRVIgJiYgdmFsdWUgPD0gTUFYX1NBRkVfSU5URUdFUjtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBjbGFzc2lmaWVkIGFzIGEgYFNldGAgb2JqZWN0LlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMy4wXG4gICAgICogQGNhdGVnb3J5IExhbmdcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhIHNldCwgZWxzZSBgZmFsc2VgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmlzU2V0KG5ldyBTZXQpO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIF8uaXNTZXQobmV3IFdlYWtTZXQpO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICovXG4gICAgdmFyIGlzU2V0ID0gbm9kZUlzU2V0ID8gYmFzZVVuYXJ5KG5vZGVJc1NldCkgOiBiYXNlSXNTZXQ7XG5cbiAgICAvKipcbiAgICAgKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBjbGFzc2lmaWVkIGFzIGEgYFN0cmluZ2AgcHJpbWl0aXZlIG9yIG9iamVjdC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBjYXRlZ29yeSBMYW5nXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYSBzdHJpbmcsIGVsc2UgYGZhbHNlYC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5pc1N0cmluZygnYWJjJyk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogXy5pc1N0cmluZygxKTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGlzU3RyaW5nKHZhbHVlKSB7XG4gICAgICByZXR1cm4gdHlwZW9mIHZhbHVlID09ICdzdHJpbmcnIHx8XG4gICAgICAgICghaXNBcnJheSh2YWx1ZSkgJiYgaXNPYmplY3RMaWtlKHZhbHVlKSAmJiBiYXNlR2V0VGFnKHZhbHVlKSA9PSBzdHJpbmdUYWcpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGNsYXNzaWZpZWQgYXMgYSBgU3ltYm9sYCBwcmltaXRpdmUgb3Igb2JqZWN0LlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IExhbmdcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhIHN5bWJvbCwgZWxzZSBgZmFsc2VgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmlzU3ltYm9sKFN5bWJvbC5pdGVyYXRvcik7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogXy5pc1N5bWJvbCgnYWJjJyk7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBpc1N5bWJvbCh2YWx1ZSkge1xuICAgICAgcmV0dXJuIHR5cGVvZiB2YWx1ZSA9PSAnc3ltYm9sJyB8fFxuICAgICAgICAoaXNPYmplY3RMaWtlKHZhbHVlKSAmJiBiYXNlR2V0VGFnKHZhbHVlKSA9PSBzeW1ib2xUYWcpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGNsYXNzaWZpZWQgYXMgYSB0eXBlZCBhcnJheS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAzLjAuMFxuICAgICAqIEBjYXRlZ29yeSBMYW5nXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYSB0eXBlZCBhcnJheSwgZWxzZSBgZmFsc2VgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmlzVHlwZWRBcnJheShuZXcgVWludDhBcnJheSk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogXy5pc1R5cGVkQXJyYXkoW10pO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICovXG4gICAgdmFyIGlzVHlwZWRBcnJheSA9IG5vZGVJc1R5cGVkQXJyYXkgPyBiYXNlVW5hcnkobm9kZUlzVHlwZWRBcnJheSkgOiBiYXNlSXNUeXBlZEFycmF5O1xuXG4gICAgLyoqXG4gICAgICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgYHVuZGVmaW5lZGAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQHNpbmNlIDAuMS4wXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAY2F0ZWdvcnkgTGFuZ1xuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGB1bmRlZmluZWRgLCBlbHNlIGBmYWxzZWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uaXNVbmRlZmluZWQodm9pZCAwKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBfLmlzVW5kZWZpbmVkKG51bGwpO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICovXG4gICAgZnVuY3Rpb24gaXNVbmRlZmluZWQodmFsdWUpIHtcbiAgICAgIHJldHVybiB2YWx1ZSA9PT0gdW5kZWZpbmVkO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGNsYXNzaWZpZWQgYXMgYSBgV2Vha01hcGAgb2JqZWN0LlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMy4wXG4gICAgICogQGNhdGVnb3J5IExhbmdcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhIHdlYWsgbWFwLCBlbHNlIGBmYWxzZWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uaXNXZWFrTWFwKG5ldyBXZWFrTWFwKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBfLmlzV2Vha01hcChuZXcgTWFwKTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGlzV2Vha01hcCh2YWx1ZSkge1xuICAgICAgcmV0dXJuIGlzT2JqZWN0TGlrZSh2YWx1ZSkgJiYgZ2V0VGFnKHZhbHVlKSA9PSB3ZWFrTWFwVGFnO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGNsYXNzaWZpZWQgYXMgYSBgV2Vha1NldGAgb2JqZWN0LlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMy4wXG4gICAgICogQGNhdGVnb3J5IExhbmdcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhIHdlYWsgc2V0LCBlbHNlIGBmYWxzZWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uaXNXZWFrU2V0KG5ldyBXZWFrU2V0KTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBfLmlzV2Vha1NldChuZXcgU2V0KTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGlzV2Vha1NldCh2YWx1ZSkge1xuICAgICAgcmV0dXJuIGlzT2JqZWN0TGlrZSh2YWx1ZSkgJiYgYmFzZUdldFRhZyh2YWx1ZSkgPT0gd2Vha1NldFRhZztcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBsZXNzIHRoYW4gYG90aGVyYC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAzLjkuMFxuICAgICAqIEBjYXRlZ29yeSBMYW5nXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY29tcGFyZS5cbiAgICAgKiBAcGFyYW0geyp9IG90aGVyIFRoZSBvdGhlciB2YWx1ZSB0byBjb21wYXJlLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGxlc3MgdGhhbiBgb3RoZXJgLFxuICAgICAqICBlbHNlIGBmYWxzZWAuXG4gICAgICogQHNlZSBfLmd0XG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8ubHQoMSwgMyk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogXy5sdCgzLCAzKTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqXG4gICAgICogXy5sdCgzLCAxKTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqL1xuICAgIHZhciBsdCA9IGNyZWF0ZVJlbGF0aW9uYWxPcGVyYXRpb24oYmFzZUx0KTtcblxuICAgIC8qKlxuICAgICAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGxlc3MgdGhhbiBvciBlcXVhbCB0byBgb3RoZXJgLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDMuOS4wXG4gICAgICogQGNhdGVnb3J5IExhbmdcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjb21wYXJlLlxuICAgICAqIEBwYXJhbSB7Kn0gb3RoZXIgVGhlIG90aGVyIHZhbHVlIHRvIGNvbXBhcmUuXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgbGVzcyB0aGFuIG9yIGVxdWFsIHRvXG4gICAgICogIGBvdGhlcmAsIGVsc2UgYGZhbHNlYC5cbiAgICAgKiBAc2VlIF8uZ3RlXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8ubHRlKDEsIDMpO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIF8ubHRlKDMsIDMpO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIF8ubHRlKDMsIDEpO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICovXG4gICAgdmFyIGx0ZSA9IGNyZWF0ZVJlbGF0aW9uYWxPcGVyYXRpb24oZnVuY3Rpb24odmFsdWUsIG90aGVyKSB7XG4gICAgICByZXR1cm4gdmFsdWUgPD0gb3RoZXI7XG4gICAgfSk7XG5cbiAgICAvKipcbiAgICAgKiBDb252ZXJ0cyBgdmFsdWVgIHRvIGFuIGFycmF5LlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQGNhdGVnb3J5IExhbmdcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjb252ZXJ0LlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgY29udmVydGVkIGFycmF5LlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLnRvQXJyYXkoeyAnYSc6IDEsICdiJzogMiB9KTtcbiAgICAgKiAvLyA9PiBbMSwgMl1cbiAgICAgKlxuICAgICAqIF8udG9BcnJheSgnYWJjJyk7XG4gICAgICogLy8gPT4gWydhJywgJ2InLCAnYyddXG4gICAgICpcbiAgICAgKiBfLnRvQXJyYXkoMSk7XG4gICAgICogLy8gPT4gW11cbiAgICAgKlxuICAgICAqIF8udG9BcnJheShudWxsKTtcbiAgICAgKiAvLyA9PiBbXVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHRvQXJyYXkodmFsdWUpIHtcbiAgICAgIGlmICghdmFsdWUpIHtcbiAgICAgICAgcmV0dXJuIFtdO1xuICAgICAgfVxuICAgICAgaWYgKGlzQXJyYXlMaWtlKHZhbHVlKSkge1xuICAgICAgICByZXR1cm4gaXNTdHJpbmcodmFsdWUpID8gc3RyaW5nVG9BcnJheSh2YWx1ZSkgOiBjb3B5QXJyYXkodmFsdWUpO1xuICAgICAgfVxuICAgICAgaWYgKHN5bUl0ZXJhdG9yICYmIHZhbHVlW3N5bUl0ZXJhdG9yXSkge1xuICAgICAgICByZXR1cm4gaXRlcmF0b3JUb0FycmF5KHZhbHVlW3N5bUl0ZXJhdG9yXSgpKTtcbiAgICAgIH1cbiAgICAgIHZhciB0YWcgPSBnZXRUYWcodmFsdWUpLFxuICAgICAgICAgIGZ1bmMgPSB0YWcgPT0gbWFwVGFnID8gbWFwVG9BcnJheSA6ICh0YWcgPT0gc2V0VGFnID8gc2V0VG9BcnJheSA6IHZhbHVlcyk7XG5cbiAgICAgIHJldHVybiBmdW5jKHZhbHVlKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDb252ZXJ0cyBgdmFsdWVgIHRvIGEgZmluaXRlIG51bWJlci5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjEyLjBcbiAgICAgKiBAY2F0ZWdvcnkgTGFuZ1xuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNvbnZlcnQuXG4gICAgICogQHJldHVybnMge251bWJlcn0gUmV0dXJucyB0aGUgY29udmVydGVkIG51bWJlci5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy50b0Zpbml0ZSgzLjIpO1xuICAgICAqIC8vID0+IDMuMlxuICAgICAqXG4gICAgICogXy50b0Zpbml0ZShOdW1iZXIuTUlOX1ZBTFVFKTtcbiAgICAgKiAvLyA9PiA1ZS0zMjRcbiAgICAgKlxuICAgICAqIF8udG9GaW5pdGUoSW5maW5pdHkpO1xuICAgICAqIC8vID0+IDEuNzk3NjkzMTM0ODYyMzE1N2UrMzA4XG4gICAgICpcbiAgICAgKiBfLnRvRmluaXRlKCczLjInKTtcbiAgICAgKiAvLyA9PiAzLjJcbiAgICAgKi9cbiAgICBmdW5jdGlvbiB0b0Zpbml0ZSh2YWx1ZSkge1xuICAgICAgaWYgKCF2YWx1ZSkge1xuICAgICAgICByZXR1cm4gdmFsdWUgPT09IDAgPyB2YWx1ZSA6IDA7XG4gICAgICB9XG4gICAgICB2YWx1ZSA9IHRvTnVtYmVyKHZhbHVlKTtcbiAgICAgIGlmICh2YWx1ZSA9PT0gSU5GSU5JVFkgfHwgdmFsdWUgPT09IC1JTkZJTklUWSkge1xuICAgICAgICB2YXIgc2lnbiA9ICh2YWx1ZSA8IDAgPyAtMSA6IDEpO1xuICAgICAgICByZXR1cm4gc2lnbiAqIE1BWF9JTlRFR0VSO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHZhbHVlID09PSB2YWx1ZSA/IHZhbHVlIDogMDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDb252ZXJ0cyBgdmFsdWVgIHRvIGFuIGludGVnZXIuXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogVGhpcyBtZXRob2QgaXMgbG9vc2VseSBiYXNlZCBvblxuICAgICAqIFtgVG9JbnRlZ2VyYF0oaHR0cDovL3d3dy5lY21hLWludGVybmF0aW9uYWwub3JnL2VjbWEtMjYyLzcuMC8jc2VjLXRvaW50ZWdlcikuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgTGFuZ1xuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNvbnZlcnQuXG4gICAgICogQHJldHVybnMge251bWJlcn0gUmV0dXJucyB0aGUgY29udmVydGVkIGludGVnZXIuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8udG9JbnRlZ2VyKDMuMik7XG4gICAgICogLy8gPT4gM1xuICAgICAqXG4gICAgICogXy50b0ludGVnZXIoTnVtYmVyLk1JTl9WQUxVRSk7XG4gICAgICogLy8gPT4gMFxuICAgICAqXG4gICAgICogXy50b0ludGVnZXIoSW5maW5pdHkpO1xuICAgICAqIC8vID0+IDEuNzk3NjkzMTM0ODYyMzE1N2UrMzA4XG4gICAgICpcbiAgICAgKiBfLnRvSW50ZWdlcignMy4yJyk7XG4gICAgICogLy8gPT4gM1xuICAgICAqL1xuICAgIGZ1bmN0aW9uIHRvSW50ZWdlcih2YWx1ZSkge1xuICAgICAgdmFyIHJlc3VsdCA9IHRvRmluaXRlKHZhbHVlKSxcbiAgICAgICAgICByZW1haW5kZXIgPSByZXN1bHQgJSAxO1xuXG4gICAgICByZXR1cm4gcmVzdWx0ID09PSByZXN1bHQgPyAocmVtYWluZGVyID8gcmVzdWx0IC0gcmVtYWluZGVyIDogcmVzdWx0KSA6IDA7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ29udmVydHMgYHZhbHVlYCB0byBhbiBpbnRlZ2VyIHN1aXRhYmxlIGZvciB1c2UgYXMgdGhlIGxlbmd0aCBvZiBhblxuICAgICAqIGFycmF5LWxpa2Ugb2JqZWN0LlxuICAgICAqXG4gICAgICogKipOb3RlOioqIFRoaXMgbWV0aG9kIGlzIGJhc2VkIG9uXG4gICAgICogW2BUb0xlbmd0aGBdKGh0dHA6Ly9lY21hLWludGVybmF0aW9uYWwub3JnL2VjbWEtMjYyLzcuMC8jc2VjLXRvbGVuZ3RoKS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBMYW5nXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY29udmVydC5cbiAgICAgKiBAcmV0dXJucyB7bnVtYmVyfSBSZXR1cm5zIHRoZSBjb252ZXJ0ZWQgaW50ZWdlci5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy50b0xlbmd0aCgzLjIpO1xuICAgICAqIC8vID0+IDNcbiAgICAgKlxuICAgICAqIF8udG9MZW5ndGgoTnVtYmVyLk1JTl9WQUxVRSk7XG4gICAgICogLy8gPT4gMFxuICAgICAqXG4gICAgICogXy50b0xlbmd0aChJbmZpbml0eSk7XG4gICAgICogLy8gPT4gNDI5NDk2NzI5NVxuICAgICAqXG4gICAgICogXy50b0xlbmd0aCgnMy4yJyk7XG4gICAgICogLy8gPT4gM1xuICAgICAqL1xuICAgIGZ1bmN0aW9uIHRvTGVuZ3RoKHZhbHVlKSB7XG4gICAgICByZXR1cm4gdmFsdWUgPyBiYXNlQ2xhbXAodG9JbnRlZ2VyKHZhbHVlKSwgMCwgTUFYX0FSUkFZX0xFTkdUSCkgOiAwO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENvbnZlcnRzIGB2YWx1ZWAgdG8gYSBudW1iZXIuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgTGFuZ1xuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIHByb2Nlc3MuXG4gICAgICogQHJldHVybnMge251bWJlcn0gUmV0dXJucyB0aGUgbnVtYmVyLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLnRvTnVtYmVyKDMuMik7XG4gICAgICogLy8gPT4gMy4yXG4gICAgICpcbiAgICAgKiBfLnRvTnVtYmVyKE51bWJlci5NSU5fVkFMVUUpO1xuICAgICAqIC8vID0+IDVlLTMyNFxuICAgICAqXG4gICAgICogXy50b051bWJlcihJbmZpbml0eSk7XG4gICAgICogLy8gPT4gSW5maW5pdHlcbiAgICAgKlxuICAgICAqIF8udG9OdW1iZXIoJzMuMicpO1xuICAgICAqIC8vID0+IDMuMlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHRvTnVtYmVyKHZhbHVlKSB7XG4gICAgICBpZiAodHlwZW9mIHZhbHVlID09ICdudW1iZXInKSB7XG4gICAgICAgIHJldHVybiB2YWx1ZTtcbiAgICAgIH1cbiAgICAgIGlmIChpc1N5bWJvbCh2YWx1ZSkpIHtcbiAgICAgICAgcmV0dXJuIE5BTjtcbiAgICAgIH1cbiAgICAgIGlmIChpc09iamVjdCh2YWx1ZSkpIHtcbiAgICAgICAgdmFyIG90aGVyID0gdHlwZW9mIHZhbHVlLnZhbHVlT2YgPT0gJ2Z1bmN0aW9uJyA/IHZhbHVlLnZhbHVlT2YoKSA6IHZhbHVlO1xuICAgICAgICB2YWx1ZSA9IGlzT2JqZWN0KG90aGVyKSA/IChvdGhlciArICcnKSA6IG90aGVyO1xuICAgICAgfVxuICAgICAgaWYgKHR5cGVvZiB2YWx1ZSAhPSAnc3RyaW5nJykge1xuICAgICAgICByZXR1cm4gdmFsdWUgPT09IDAgPyB2YWx1ZSA6ICt2YWx1ZTtcbiAgICAgIH1cbiAgICAgIHZhbHVlID0gYmFzZVRyaW0odmFsdWUpO1xuICAgICAgdmFyIGlzQmluYXJ5ID0gcmVJc0JpbmFyeS50ZXN0KHZhbHVlKTtcbiAgICAgIHJldHVybiAoaXNCaW5hcnkgfHwgcmVJc09jdGFsLnRlc3QodmFsdWUpKVxuICAgICAgICA/IGZyZWVQYXJzZUludCh2YWx1ZS5zbGljZSgyKSwgaXNCaW5hcnkgPyAyIDogOClcbiAgICAgICAgOiAocmVJc0JhZEhleC50ZXN0KHZhbHVlKSA/IE5BTiA6ICt2YWx1ZSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ29udmVydHMgYHZhbHVlYCB0byBhIHBsYWluIG9iamVjdCBmbGF0dGVuaW5nIGluaGVyaXRlZCBlbnVtZXJhYmxlIHN0cmluZ1xuICAgICAqIGtleWVkIHByb3BlcnRpZXMgb2YgYHZhbHVlYCB0byBvd24gcHJvcGVydGllcyBvZiB0aGUgcGxhaW4gb2JqZWN0LlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDMuMC4wXG4gICAgICogQGNhdGVnb3J5IExhbmdcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjb252ZXJ0LlxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgdGhlIGNvbnZlcnRlZCBwbGFpbiBvYmplY3QuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIGZ1bmN0aW9uIEZvbygpIHtcbiAgICAgKiAgIHRoaXMuYiA9IDI7XG4gICAgICogfVxuICAgICAqXG4gICAgICogRm9vLnByb3RvdHlwZS5jID0gMztcbiAgICAgKlxuICAgICAqIF8uYXNzaWduKHsgJ2EnOiAxIH0sIG5ldyBGb28pO1xuICAgICAqIC8vID0+IHsgJ2EnOiAxLCAnYic6IDIgfVxuICAgICAqXG4gICAgICogXy5hc3NpZ24oeyAnYSc6IDEgfSwgXy50b1BsYWluT2JqZWN0KG5ldyBGb28pKTtcbiAgICAgKiAvLyA9PiB7ICdhJzogMSwgJ2InOiAyLCAnYyc6IDMgfVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHRvUGxhaW5PYmplY3QodmFsdWUpIHtcbiAgICAgIHJldHVybiBjb3B5T2JqZWN0KHZhbHVlLCBrZXlzSW4odmFsdWUpKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDb252ZXJ0cyBgdmFsdWVgIHRvIGEgc2FmZSBpbnRlZ2VyLiBBIHNhZmUgaW50ZWdlciBjYW4gYmUgY29tcGFyZWQgYW5kXG4gICAgICogcmVwcmVzZW50ZWQgY29ycmVjdGx5LlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IExhbmdcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjb252ZXJ0LlxuICAgICAqIEByZXR1cm5zIHtudW1iZXJ9IFJldHVybnMgdGhlIGNvbnZlcnRlZCBpbnRlZ2VyLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLnRvU2FmZUludGVnZXIoMy4yKTtcbiAgICAgKiAvLyA9PiAzXG4gICAgICpcbiAgICAgKiBfLnRvU2FmZUludGVnZXIoTnVtYmVyLk1JTl9WQUxVRSk7XG4gICAgICogLy8gPT4gMFxuICAgICAqXG4gICAgICogXy50b1NhZmVJbnRlZ2VyKEluZmluaXR5KTtcbiAgICAgKiAvLyA9PiA5MDA3MTk5MjU0NzQwOTkxXG4gICAgICpcbiAgICAgKiBfLnRvU2FmZUludGVnZXIoJzMuMicpO1xuICAgICAqIC8vID0+IDNcbiAgICAgKi9cbiAgICBmdW5jdGlvbiB0b1NhZmVJbnRlZ2VyKHZhbHVlKSB7XG4gICAgICByZXR1cm4gdmFsdWVcbiAgICAgICAgPyBiYXNlQ2xhbXAodG9JbnRlZ2VyKHZhbHVlKSwgLU1BWF9TQUZFX0lOVEVHRVIsIE1BWF9TQUZFX0lOVEVHRVIpXG4gICAgICAgIDogKHZhbHVlID09PSAwID8gdmFsdWUgOiAwKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDb252ZXJ0cyBgdmFsdWVgIHRvIGEgc3RyaW5nLiBBbiBlbXB0eSBzdHJpbmcgaXMgcmV0dXJuZWQgZm9yIGBudWxsYFxuICAgICAqIGFuZCBgdW5kZWZpbmVkYCB2YWx1ZXMuIFRoZSBzaWduIG9mIGAtMGAgaXMgcHJlc2VydmVkLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IExhbmdcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjb252ZXJ0LlxuICAgICAqIEByZXR1cm5zIHtzdHJpbmd9IFJldHVybnMgdGhlIGNvbnZlcnRlZCBzdHJpbmcuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8udG9TdHJpbmcobnVsbCk7XG4gICAgICogLy8gPT4gJydcbiAgICAgKlxuICAgICAqIF8udG9TdHJpbmcoLTApO1xuICAgICAqIC8vID0+ICctMCdcbiAgICAgKlxuICAgICAqIF8udG9TdHJpbmcoWzEsIDIsIDNdKTtcbiAgICAgKiAvLyA9PiAnMSwyLDMnXG4gICAgICovXG4gICAgZnVuY3Rpb24gdG9TdHJpbmcodmFsdWUpIHtcbiAgICAgIHJldHVybiB2YWx1ZSA9PSBudWxsID8gJycgOiBiYXNlVG9TdHJpbmcodmFsdWUpO1xuICAgIH1cblxuICAgIC8qLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKi9cblxuICAgIC8qKlxuICAgICAqIEFzc2lnbnMgb3duIGVudW1lcmFibGUgc3RyaW5nIGtleWVkIHByb3BlcnRpZXMgb2Ygc291cmNlIG9iamVjdHMgdG8gdGhlXG4gICAgICogZGVzdGluYXRpb24gb2JqZWN0LiBTb3VyY2Ugb2JqZWN0cyBhcmUgYXBwbGllZCBmcm9tIGxlZnQgdG8gcmlnaHQuXG4gICAgICogU3Vic2VxdWVudCBzb3VyY2VzIG92ZXJ3cml0ZSBwcm9wZXJ0eSBhc3NpZ25tZW50cyBvZiBwcmV2aW91cyBzb3VyY2VzLlxuICAgICAqXG4gICAgICogKipOb3RlOioqIFRoaXMgbWV0aG9kIG11dGF0ZXMgYG9iamVjdGAgYW5kIGlzIGxvb3NlbHkgYmFzZWQgb25cbiAgICAgKiBbYE9iamVjdC5hc3NpZ25gXShodHRwczovL21kbi5pby9PYmplY3QvYXNzaWduKS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAwLjEwLjBcbiAgICAgKiBAY2F0ZWdvcnkgT2JqZWN0XG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgZGVzdGluYXRpb24gb2JqZWN0LlxuICAgICAqIEBwYXJhbSB7Li4uT2JqZWN0fSBbc291cmNlc10gVGhlIHNvdXJjZSBvYmplY3RzLlxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgYG9iamVjdGAuXG4gICAgICogQHNlZSBfLmFzc2lnbkluXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIGZ1bmN0aW9uIEZvbygpIHtcbiAgICAgKiAgIHRoaXMuYSA9IDE7XG4gICAgICogfVxuICAgICAqXG4gICAgICogZnVuY3Rpb24gQmFyKCkge1xuICAgICAqICAgdGhpcy5jID0gMztcbiAgICAgKiB9XG4gICAgICpcbiAgICAgKiBGb28ucHJvdG90eXBlLmIgPSAyO1xuICAgICAqIEJhci5wcm90b3R5cGUuZCA9IDQ7XG4gICAgICpcbiAgICAgKiBfLmFzc2lnbih7ICdhJzogMCB9LCBuZXcgRm9vLCBuZXcgQmFyKTtcbiAgICAgKiAvLyA9PiB7ICdhJzogMSwgJ2MnOiAzIH1cbiAgICAgKi9cbiAgICB2YXIgYXNzaWduID0gY3JlYXRlQXNzaWduZXIoZnVuY3Rpb24ob2JqZWN0LCBzb3VyY2UpIHtcbiAgICAgIGlmIChpc1Byb3RvdHlwZShzb3VyY2UpIHx8IGlzQXJyYXlMaWtlKHNvdXJjZSkpIHtcbiAgICAgICAgY29weU9iamVjdChzb3VyY2UsIGtleXMoc291cmNlKSwgb2JqZWN0KTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgZm9yICh2YXIga2V5IGluIHNvdXJjZSkge1xuICAgICAgICBpZiAoaGFzT3duUHJvcGVydHkuY2FsbChzb3VyY2UsIGtleSkpIHtcbiAgICAgICAgICBhc3NpZ25WYWx1ZShvYmplY3QsIGtleSwgc291cmNlW2tleV0pO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSk7XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCBpcyBsaWtlIGBfLmFzc2lnbmAgZXhjZXB0IHRoYXQgaXQgaXRlcmF0ZXMgb3ZlciBvd24gYW5kXG4gICAgICogaW5oZXJpdGVkIHNvdXJjZSBwcm9wZXJ0aWVzLlxuICAgICAqXG4gICAgICogKipOb3RlOioqIFRoaXMgbWV0aG9kIG11dGF0ZXMgYG9iamVjdGAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAYWxpYXMgZXh0ZW5kXG4gICAgICogQGNhdGVnb3J5IE9iamVjdFxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIGRlc3RpbmF0aW9uIG9iamVjdC5cbiAgICAgKiBAcGFyYW0gey4uLk9iamVjdH0gW3NvdXJjZXNdIFRoZSBzb3VyY2Ugb2JqZWN0cy5cbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIGBvYmplY3RgLlxuICAgICAqIEBzZWUgXy5hc3NpZ25cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogZnVuY3Rpb24gRm9vKCkge1xuICAgICAqICAgdGhpcy5hID0gMTtcbiAgICAgKiB9XG4gICAgICpcbiAgICAgKiBmdW5jdGlvbiBCYXIoKSB7XG4gICAgICogICB0aGlzLmMgPSAzO1xuICAgICAqIH1cbiAgICAgKlxuICAgICAqIEZvby5wcm90b3R5cGUuYiA9IDI7XG4gICAgICogQmFyLnByb3RvdHlwZS5kID0gNDtcbiAgICAgKlxuICAgICAqIF8uYXNzaWduSW4oeyAnYSc6IDAgfSwgbmV3IEZvbywgbmV3IEJhcik7XG4gICAgICogLy8gPT4geyAnYSc6IDEsICdiJzogMiwgJ2MnOiAzLCAnZCc6IDQgfVxuICAgICAqL1xuICAgIHZhciBhc3NpZ25JbiA9IGNyZWF0ZUFzc2lnbmVyKGZ1bmN0aW9uKG9iamVjdCwgc291cmNlKSB7XG4gICAgICBjb3B5T2JqZWN0KHNvdXJjZSwga2V5c0luKHNvdXJjZSksIG9iamVjdCk7XG4gICAgfSk7XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCBpcyBsaWtlIGBfLmFzc2lnbkluYCBleGNlcHQgdGhhdCBpdCBhY2NlcHRzIGBjdXN0b21pemVyYFxuICAgICAqIHdoaWNoIGlzIGludm9rZWQgdG8gcHJvZHVjZSB0aGUgYXNzaWduZWQgdmFsdWVzLiBJZiBgY3VzdG9taXplcmAgcmV0dXJuc1xuICAgICAqIGB1bmRlZmluZWRgLCBhc3NpZ25tZW50IGlzIGhhbmRsZWQgYnkgdGhlIG1ldGhvZCBpbnN0ZWFkLiBUaGUgYGN1c3RvbWl6ZXJgXG4gICAgICogaXMgaW52b2tlZCB3aXRoIGZpdmUgYXJndW1lbnRzOiAob2JqVmFsdWUsIHNyY1ZhbHVlLCBrZXksIG9iamVjdCwgc291cmNlKS5cbiAgICAgKlxuICAgICAqICoqTm90ZToqKiBUaGlzIG1ldGhvZCBtdXRhdGVzIGBvYmplY3RgLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGFsaWFzIGV4dGVuZFdpdGhcbiAgICAgKiBAY2F0ZWdvcnkgT2JqZWN0XG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgZGVzdGluYXRpb24gb2JqZWN0LlxuICAgICAqIEBwYXJhbSB7Li4uT2JqZWN0fSBzb3VyY2VzIFRoZSBzb3VyY2Ugb2JqZWN0cy5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbY3VzdG9taXplcl0gVGhlIGZ1bmN0aW9uIHRvIGN1c3RvbWl6ZSBhc3NpZ25lZCB2YWx1ZXMuXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyBgb2JqZWN0YC5cbiAgICAgKiBAc2VlIF8uYXNzaWduV2l0aFxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBmdW5jdGlvbiBjdXN0b21pemVyKG9ialZhbHVlLCBzcmNWYWx1ZSkge1xuICAgICAqICAgcmV0dXJuIF8uaXNVbmRlZmluZWQob2JqVmFsdWUpID8gc3JjVmFsdWUgOiBvYmpWYWx1ZTtcbiAgICAgKiB9XG4gICAgICpcbiAgICAgKiB2YXIgZGVmYXVsdHMgPSBfLnBhcnRpYWxSaWdodChfLmFzc2lnbkluV2l0aCwgY3VzdG9taXplcik7XG4gICAgICpcbiAgICAgKiBkZWZhdWx0cyh7ICdhJzogMSB9LCB7ICdiJzogMiB9LCB7ICdhJzogMyB9KTtcbiAgICAgKiAvLyA9PiB7ICdhJzogMSwgJ2InOiAyIH1cbiAgICAgKi9cbiAgICB2YXIgYXNzaWduSW5XaXRoID0gY3JlYXRlQXNzaWduZXIoZnVuY3Rpb24ob2JqZWN0LCBzb3VyY2UsIHNyY0luZGV4LCBjdXN0b21pemVyKSB7XG4gICAgICBjb3B5T2JqZWN0KHNvdXJjZSwga2V5c0luKHNvdXJjZSksIG9iamVjdCwgY3VzdG9taXplcik7XG4gICAgfSk7XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCBpcyBsaWtlIGBfLmFzc2lnbmAgZXhjZXB0IHRoYXQgaXQgYWNjZXB0cyBgY3VzdG9taXplcmBcbiAgICAgKiB3aGljaCBpcyBpbnZva2VkIHRvIHByb2R1Y2UgdGhlIGFzc2lnbmVkIHZhbHVlcy4gSWYgYGN1c3RvbWl6ZXJgIHJldHVybnNcbiAgICAgKiBgdW5kZWZpbmVkYCwgYXNzaWdubWVudCBpcyBoYW5kbGVkIGJ5IHRoZSBtZXRob2QgaW5zdGVhZC4gVGhlIGBjdXN0b21pemVyYFxuICAgICAqIGlzIGludm9rZWQgd2l0aCBmaXZlIGFyZ3VtZW50czogKG9ialZhbHVlLCBzcmNWYWx1ZSwga2V5LCBvYmplY3QsIHNvdXJjZSkuXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogVGhpcyBtZXRob2QgbXV0YXRlcyBgb2JqZWN0YC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBPYmplY3RcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBkZXN0aW5hdGlvbiBvYmplY3QuXG4gICAgICogQHBhcmFtIHsuLi5PYmplY3R9IHNvdXJjZXMgVGhlIHNvdXJjZSBvYmplY3RzLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtjdXN0b21pemVyXSBUaGUgZnVuY3Rpb24gdG8gY3VzdG9taXplIGFzc2lnbmVkIHZhbHVlcy5cbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIGBvYmplY3RgLlxuICAgICAqIEBzZWUgXy5hc3NpZ25JbldpdGhcbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogZnVuY3Rpb24gY3VzdG9taXplcihvYmpWYWx1ZSwgc3JjVmFsdWUpIHtcbiAgICAgKiAgIHJldHVybiBfLmlzVW5kZWZpbmVkKG9ialZhbHVlKSA/IHNyY1ZhbHVlIDogb2JqVmFsdWU7XG4gICAgICogfVxuICAgICAqXG4gICAgICogdmFyIGRlZmF1bHRzID0gXy5wYXJ0aWFsUmlnaHQoXy5hc3NpZ25XaXRoLCBjdXN0b21pemVyKTtcbiAgICAgKlxuICAgICAqIGRlZmF1bHRzKHsgJ2EnOiAxIH0sIHsgJ2InOiAyIH0sIHsgJ2EnOiAzIH0pO1xuICAgICAqIC8vID0+IHsgJ2EnOiAxLCAnYic6IDIgfVxuICAgICAqL1xuICAgIHZhciBhc3NpZ25XaXRoID0gY3JlYXRlQXNzaWduZXIoZnVuY3Rpb24ob2JqZWN0LCBzb3VyY2UsIHNyY0luZGV4LCBjdXN0b21pemVyKSB7XG4gICAgICBjb3B5T2JqZWN0KHNvdXJjZSwga2V5cyhzb3VyY2UpLCBvYmplY3QsIGN1c3RvbWl6ZXIpO1xuICAgIH0pO1xuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhbiBhcnJheSBvZiB2YWx1ZXMgY29ycmVzcG9uZGluZyB0byBgcGF0aHNgIG9mIGBvYmplY3RgLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDEuMC4wXG4gICAgICogQGNhdGVnb3J5IE9iamVjdFxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBpdGVyYXRlIG92ZXIuXG4gICAgICogQHBhcmFtIHsuLi4oc3RyaW5nfHN0cmluZ1tdKX0gW3BhdGhzXSBUaGUgcHJvcGVydHkgcGF0aHMgdG8gcGljay5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIHBpY2tlZCB2YWx1ZXMuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBvYmplY3QgPSB7ICdhJzogW3sgJ2InOiB7ICdjJzogMyB9IH0sIDRdIH07XG4gICAgICpcbiAgICAgKiBfLmF0KG9iamVjdCwgWydhWzBdLmIuYycsICdhWzFdJ10pO1xuICAgICAqIC8vID0+IFszLCA0XVxuICAgICAqL1xuICAgIHZhciBhdCA9IGZsYXRSZXN0KGJhc2VBdCk7XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGFuIG9iamVjdCB0aGF0IGluaGVyaXRzIGZyb20gdGhlIGBwcm90b3R5cGVgIG9iamVjdC4gSWYgYVxuICAgICAqIGBwcm9wZXJ0aWVzYCBvYmplY3QgaXMgZ2l2ZW4sIGl0cyBvd24gZW51bWVyYWJsZSBzdHJpbmcga2V5ZWQgcHJvcGVydGllc1xuICAgICAqIGFyZSBhc3NpZ25lZCB0byB0aGUgY3JlYXRlZCBvYmplY3QuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMi4zLjBcbiAgICAgKiBAY2F0ZWdvcnkgT2JqZWN0XG4gICAgICogQHBhcmFtIHtPYmplY3R9IHByb3RvdHlwZSBUaGUgb2JqZWN0IHRvIGluaGVyaXQgZnJvbS5cbiAgICAgKiBAcGFyYW0ge09iamVjdH0gW3Byb3BlcnRpZXNdIFRoZSBwcm9wZXJ0aWVzIHRvIGFzc2lnbiB0byB0aGUgb2JqZWN0LlxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgdGhlIG5ldyBvYmplY3QuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIGZ1bmN0aW9uIFNoYXBlKCkge1xuICAgICAqICAgdGhpcy54ID0gMDtcbiAgICAgKiAgIHRoaXMueSA9IDA7XG4gICAgICogfVxuICAgICAqXG4gICAgICogZnVuY3Rpb24gQ2lyY2xlKCkge1xuICAgICAqICAgU2hhcGUuY2FsbCh0aGlzKTtcbiAgICAgKiB9XG4gICAgICpcbiAgICAgKiBDaXJjbGUucHJvdG90eXBlID0gXy5jcmVhdGUoU2hhcGUucHJvdG90eXBlLCB7XG4gICAgICogICAnY29uc3RydWN0b3InOiBDaXJjbGVcbiAgICAgKiB9KTtcbiAgICAgKlxuICAgICAqIHZhciBjaXJjbGUgPSBuZXcgQ2lyY2xlO1xuICAgICAqIGNpcmNsZSBpbnN0YW5jZW9mIENpcmNsZTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBjaXJjbGUgaW5zdGFuY2VvZiBTaGFwZTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICovXG4gICAgZnVuY3Rpb24gY3JlYXRlKHByb3RvdHlwZSwgcHJvcGVydGllcykge1xuICAgICAgdmFyIHJlc3VsdCA9IGJhc2VDcmVhdGUocHJvdG90eXBlKTtcbiAgICAgIHJldHVybiBwcm9wZXJ0aWVzID09IG51bGwgPyByZXN1bHQgOiBiYXNlQXNzaWduKHJlc3VsdCwgcHJvcGVydGllcyk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQXNzaWducyBvd24gYW5kIGluaGVyaXRlZCBlbnVtZXJhYmxlIHN0cmluZyBrZXllZCBwcm9wZXJ0aWVzIG9mIHNvdXJjZVxuICAgICAqIG9iamVjdHMgdG8gdGhlIGRlc3RpbmF0aW9uIG9iamVjdCBmb3IgYWxsIGRlc3RpbmF0aW9uIHByb3BlcnRpZXMgdGhhdFxuICAgICAqIHJlc29sdmUgdG8gYHVuZGVmaW5lZGAuIFNvdXJjZSBvYmplY3RzIGFyZSBhcHBsaWVkIGZyb20gbGVmdCB0byByaWdodC5cbiAgICAgKiBPbmNlIGEgcHJvcGVydHkgaXMgc2V0LCBhZGRpdGlvbmFsIHZhbHVlcyBvZiB0aGUgc2FtZSBwcm9wZXJ0eSBhcmUgaWdub3JlZC5cbiAgICAgKlxuICAgICAqICoqTm90ZToqKiBUaGlzIG1ldGhvZCBtdXRhdGVzIGBvYmplY3RgLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQGNhdGVnb3J5IE9iamVjdFxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIGRlc3RpbmF0aW9uIG9iamVjdC5cbiAgICAgKiBAcGFyYW0gey4uLk9iamVjdH0gW3NvdXJjZXNdIFRoZSBzb3VyY2Ugb2JqZWN0cy5cbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIGBvYmplY3RgLlxuICAgICAqIEBzZWUgXy5kZWZhdWx0c0RlZXBcbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5kZWZhdWx0cyh7ICdhJzogMSB9LCB7ICdiJzogMiB9LCB7ICdhJzogMyB9KTtcbiAgICAgKiAvLyA9PiB7ICdhJzogMSwgJ2InOiAyIH1cbiAgICAgKi9cbiAgICB2YXIgZGVmYXVsdHMgPSBiYXNlUmVzdChmdW5jdGlvbihvYmplY3QsIHNvdXJjZXMpIHtcbiAgICAgIG9iamVjdCA9IE9iamVjdChvYmplY3QpO1xuXG4gICAgICB2YXIgaW5kZXggPSAtMTtcbiAgICAgIHZhciBsZW5ndGggPSBzb3VyY2VzLmxlbmd0aDtcbiAgICAgIHZhciBndWFyZCA9IGxlbmd0aCA+IDIgPyBzb3VyY2VzWzJdIDogdW5kZWZpbmVkO1xuXG4gICAgICBpZiAoZ3VhcmQgJiYgaXNJdGVyYXRlZUNhbGwoc291cmNlc1swXSwgc291cmNlc1sxXSwgZ3VhcmQpKSB7XG4gICAgICAgIGxlbmd0aCA9IDE7XG4gICAgICB9XG5cbiAgICAgIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgICAgIHZhciBzb3VyY2UgPSBzb3VyY2VzW2luZGV4XTtcbiAgICAgICAgdmFyIHByb3BzID0ga2V5c0luKHNvdXJjZSk7XG4gICAgICAgIHZhciBwcm9wc0luZGV4ID0gLTE7XG4gICAgICAgIHZhciBwcm9wc0xlbmd0aCA9IHByb3BzLmxlbmd0aDtcblxuICAgICAgICB3aGlsZSAoKytwcm9wc0luZGV4IDwgcHJvcHNMZW5ndGgpIHtcbiAgICAgICAgICB2YXIga2V5ID0gcHJvcHNbcHJvcHNJbmRleF07XG4gICAgICAgICAgdmFyIHZhbHVlID0gb2JqZWN0W2tleV07XG5cbiAgICAgICAgICBpZiAodmFsdWUgPT09IHVuZGVmaW5lZCB8fFxuICAgICAgICAgICAgICAoZXEodmFsdWUsIG9iamVjdFByb3RvW2tleV0pICYmICFoYXNPd25Qcm9wZXJ0eS5jYWxsKG9iamVjdCwga2V5KSkpIHtcbiAgICAgICAgICAgIG9iamVjdFtrZXldID0gc291cmNlW2tleV07XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBvYmplY3Q7XG4gICAgfSk7XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCBpcyBsaWtlIGBfLmRlZmF1bHRzYCBleGNlcHQgdGhhdCBpdCByZWN1cnNpdmVseSBhc3NpZ25zXG4gICAgICogZGVmYXVsdCBwcm9wZXJ0aWVzLlxuICAgICAqXG4gICAgICogKipOb3RlOioqIFRoaXMgbWV0aG9kIG11dGF0ZXMgYG9iamVjdGAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMy4xMC4wXG4gICAgICogQGNhdGVnb3J5IE9iamVjdFxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIGRlc3RpbmF0aW9uIG9iamVjdC5cbiAgICAgKiBAcGFyYW0gey4uLk9iamVjdH0gW3NvdXJjZXNdIFRoZSBzb3VyY2Ugb2JqZWN0cy5cbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIGBvYmplY3RgLlxuICAgICAqIEBzZWUgXy5kZWZhdWx0c1xuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmRlZmF1bHRzRGVlcCh7ICdhJzogeyAnYic6IDIgfSB9LCB7ICdhJzogeyAnYic6IDEsICdjJzogMyB9IH0pO1xuICAgICAqIC8vID0+IHsgJ2EnOiB7ICdiJzogMiwgJ2MnOiAzIH0gfVxuICAgICAqL1xuICAgIHZhciBkZWZhdWx0c0RlZXAgPSBiYXNlUmVzdChmdW5jdGlvbihhcmdzKSB7XG4gICAgICBhcmdzLnB1c2godW5kZWZpbmVkLCBjdXN0b21EZWZhdWx0c01lcmdlKTtcbiAgICAgIHJldHVybiBhcHBseShtZXJnZVdpdGgsIHVuZGVmaW5lZCwgYXJncyk7XG4gICAgfSk7XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCBpcyBsaWtlIGBfLmZpbmRgIGV4Y2VwdCB0aGF0IGl0IHJldHVybnMgdGhlIGtleSBvZiB0aGUgZmlyc3RcbiAgICAgKiBlbGVtZW50IGBwcmVkaWNhdGVgIHJldHVybnMgdHJ1dGh5IGZvciBpbnN0ZWFkIG9mIHRoZSBlbGVtZW50IGl0c2VsZi5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAxLjEuMFxuICAgICAqIEBjYXRlZ29yeSBPYmplY3RcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gaW5zcGVjdC5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbcHJlZGljYXRlPV8uaWRlbnRpdHldIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gICAgICogQHJldHVybnMge3N0cmluZ3x1bmRlZmluZWR9IFJldHVybnMgdGhlIGtleSBvZiB0aGUgbWF0Y2hlZCBlbGVtZW50LFxuICAgICAqICBlbHNlIGB1bmRlZmluZWRgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgdXNlcnMgPSB7XG4gICAgICogICAnYmFybmV5JzogIHsgJ2FnZSc6IDM2LCAnYWN0aXZlJzogdHJ1ZSB9LFxuICAgICAqICAgJ2ZyZWQnOiAgICB7ICdhZ2UnOiA0MCwgJ2FjdGl2ZSc6IGZhbHNlIH0sXG4gICAgICogICAncGViYmxlcyc6IHsgJ2FnZSc6IDEsICAnYWN0aXZlJzogdHJ1ZSB9XG4gICAgICogfTtcbiAgICAgKlxuICAgICAqIF8uZmluZEtleSh1c2VycywgZnVuY3Rpb24obykgeyByZXR1cm4gby5hZ2UgPCA0MDsgfSk7XG4gICAgICogLy8gPT4gJ2Jhcm5leScgKGl0ZXJhdGlvbiBvcmRlciBpcyBub3QgZ3VhcmFudGVlZClcbiAgICAgKlxuICAgICAqIC8vIFRoZSBgXy5tYXRjaGVzYCBpdGVyYXRlZSBzaG9ydGhhbmQuXG4gICAgICogXy5maW5kS2V5KHVzZXJzLCB7ICdhZ2UnOiAxLCAnYWN0aXZlJzogdHJ1ZSB9KTtcbiAgICAgKiAvLyA9PiAncGViYmxlcydcbiAgICAgKlxuICAgICAqIC8vIFRoZSBgXy5tYXRjaGVzUHJvcGVydHlgIGl0ZXJhdGVlIHNob3J0aGFuZC5cbiAgICAgKiBfLmZpbmRLZXkodXNlcnMsIFsnYWN0aXZlJywgZmFsc2VdKTtcbiAgICAgKiAvLyA9PiAnZnJlZCdcbiAgICAgKlxuICAgICAqIC8vIFRoZSBgXy5wcm9wZXJ0eWAgaXRlcmF0ZWUgc2hvcnRoYW5kLlxuICAgICAqIF8uZmluZEtleSh1c2VycywgJ2FjdGl2ZScpO1xuICAgICAqIC8vID0+ICdiYXJuZXknXG4gICAgICovXG4gICAgZnVuY3Rpb24gZmluZEtleShvYmplY3QsIHByZWRpY2F0ZSkge1xuICAgICAgcmV0dXJuIGJhc2VGaW5kS2V5KG9iamVjdCwgZ2V0SXRlcmF0ZWUocHJlZGljYXRlLCAzKSwgYmFzZUZvck93bik7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgaXMgbGlrZSBgXy5maW5kS2V5YCBleGNlcHQgdGhhdCBpdCBpdGVyYXRlcyBvdmVyIGVsZW1lbnRzIG9mXG4gICAgICogYSBjb2xsZWN0aW9uIGluIHRoZSBvcHBvc2l0ZSBvcmRlci5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAyLjAuMFxuICAgICAqIEBjYXRlZ29yeSBPYmplY3RcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gaW5zcGVjdC5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbcHJlZGljYXRlPV8uaWRlbnRpdHldIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gICAgICogQHJldHVybnMge3N0cmluZ3x1bmRlZmluZWR9IFJldHVybnMgdGhlIGtleSBvZiB0aGUgbWF0Y2hlZCBlbGVtZW50LFxuICAgICAqICBlbHNlIGB1bmRlZmluZWRgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgdXNlcnMgPSB7XG4gICAgICogICAnYmFybmV5JzogIHsgJ2FnZSc6IDM2LCAnYWN0aXZlJzogdHJ1ZSB9LFxuICAgICAqICAgJ2ZyZWQnOiAgICB7ICdhZ2UnOiA0MCwgJ2FjdGl2ZSc6IGZhbHNlIH0sXG4gICAgICogICAncGViYmxlcyc6IHsgJ2FnZSc6IDEsICAnYWN0aXZlJzogdHJ1ZSB9XG4gICAgICogfTtcbiAgICAgKlxuICAgICAqIF8uZmluZExhc3RLZXkodXNlcnMsIGZ1bmN0aW9uKG8pIHsgcmV0dXJuIG8uYWdlIDwgNDA7IH0pO1xuICAgICAqIC8vID0+IHJldHVybnMgJ3BlYmJsZXMnIGFzc3VtaW5nIGBfLmZpbmRLZXlgIHJldHVybnMgJ2Jhcm5leSdcbiAgICAgKlxuICAgICAqIC8vIFRoZSBgXy5tYXRjaGVzYCBpdGVyYXRlZSBzaG9ydGhhbmQuXG4gICAgICogXy5maW5kTGFzdEtleSh1c2VycywgeyAnYWdlJzogMzYsICdhY3RpdmUnOiB0cnVlIH0pO1xuICAgICAqIC8vID0+ICdiYXJuZXknXG4gICAgICpcbiAgICAgKiAvLyBUaGUgYF8ubWF0Y2hlc1Byb3BlcnR5YCBpdGVyYXRlZSBzaG9ydGhhbmQuXG4gICAgICogXy5maW5kTGFzdEtleSh1c2VycywgWydhY3RpdmUnLCBmYWxzZV0pO1xuICAgICAqIC8vID0+ICdmcmVkJ1xuICAgICAqXG4gICAgICogLy8gVGhlIGBfLnByb3BlcnR5YCBpdGVyYXRlZSBzaG9ydGhhbmQuXG4gICAgICogXy5maW5kTGFzdEtleSh1c2VycywgJ2FjdGl2ZScpO1xuICAgICAqIC8vID0+ICdwZWJibGVzJ1xuICAgICAqL1xuICAgIGZ1bmN0aW9uIGZpbmRMYXN0S2V5KG9iamVjdCwgcHJlZGljYXRlKSB7XG4gICAgICByZXR1cm4gYmFzZUZpbmRLZXkob2JqZWN0LCBnZXRJdGVyYXRlZShwcmVkaWNhdGUsIDMpLCBiYXNlRm9yT3duUmlnaHQpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEl0ZXJhdGVzIG92ZXIgb3duIGFuZCBpbmhlcml0ZWQgZW51bWVyYWJsZSBzdHJpbmcga2V5ZWQgcHJvcGVydGllcyBvZiBhblxuICAgICAqIG9iamVjdCBhbmQgaW52b2tlcyBgaXRlcmF0ZWVgIGZvciBlYWNoIHByb3BlcnR5LiBUaGUgaXRlcmF0ZWUgaXMgaW52b2tlZFxuICAgICAqIHdpdGggdGhyZWUgYXJndW1lbnRzOiAodmFsdWUsIGtleSwgb2JqZWN0KS4gSXRlcmF0ZWUgZnVuY3Rpb25zIG1heSBleGl0XG4gICAgICogaXRlcmF0aW9uIGVhcmx5IGJ5IGV4cGxpY2l0bHkgcmV0dXJuaW5nIGBmYWxzZWAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMC4zLjBcbiAgICAgKiBAY2F0ZWdvcnkgT2JqZWN0XG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIGl0ZXJhdGUgb3Zlci5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbaXRlcmF0ZWU9Xy5pZGVudGl0eV0gVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIGBvYmplY3RgLlxuICAgICAqIEBzZWUgXy5mb3JJblJpZ2h0XG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIGZ1bmN0aW9uIEZvbygpIHtcbiAgICAgKiAgIHRoaXMuYSA9IDE7XG4gICAgICogICB0aGlzLmIgPSAyO1xuICAgICAqIH1cbiAgICAgKlxuICAgICAqIEZvby5wcm90b3R5cGUuYyA9IDM7XG4gICAgICpcbiAgICAgKiBfLmZvckluKG5ldyBGb28sIGZ1bmN0aW9uKHZhbHVlLCBrZXkpIHtcbiAgICAgKiAgIGNvbnNvbGUubG9nKGtleSk7XG4gICAgICogfSk7XG4gICAgICogLy8gPT4gTG9ncyAnYScsICdiJywgdGhlbiAnYycgKGl0ZXJhdGlvbiBvcmRlciBpcyBub3QgZ3VhcmFudGVlZCkuXG4gICAgICovXG4gICAgZnVuY3Rpb24gZm9ySW4ob2JqZWN0LCBpdGVyYXRlZSkge1xuICAgICAgcmV0dXJuIG9iamVjdCA9PSBudWxsXG4gICAgICAgID8gb2JqZWN0XG4gICAgICAgIDogYmFzZUZvcihvYmplY3QsIGdldEl0ZXJhdGVlKGl0ZXJhdGVlLCAzKSwga2V5c0luKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCBpcyBsaWtlIGBfLmZvckluYCBleGNlcHQgdGhhdCBpdCBpdGVyYXRlcyBvdmVyIHByb3BlcnRpZXMgb2ZcbiAgICAgKiBgb2JqZWN0YCBpbiB0aGUgb3Bwb3NpdGUgb3JkZXIuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMi4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgT2JqZWN0XG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIGl0ZXJhdGUgb3Zlci5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbaXRlcmF0ZWU9Xy5pZGVudGl0eV0gVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIGBvYmplY3RgLlxuICAgICAqIEBzZWUgXy5mb3JJblxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBmdW5jdGlvbiBGb28oKSB7XG4gICAgICogICB0aGlzLmEgPSAxO1xuICAgICAqICAgdGhpcy5iID0gMjtcbiAgICAgKiB9XG4gICAgICpcbiAgICAgKiBGb28ucHJvdG90eXBlLmMgPSAzO1xuICAgICAqXG4gICAgICogXy5mb3JJblJpZ2h0KG5ldyBGb28sIGZ1bmN0aW9uKHZhbHVlLCBrZXkpIHtcbiAgICAgKiAgIGNvbnNvbGUubG9nKGtleSk7XG4gICAgICogfSk7XG4gICAgICogLy8gPT4gTG9ncyAnYycsICdiJywgdGhlbiAnYScgYXNzdW1pbmcgYF8uZm9ySW5gIGxvZ3MgJ2EnLCAnYicsIHRoZW4gJ2MnLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGZvckluUmlnaHQob2JqZWN0LCBpdGVyYXRlZSkge1xuICAgICAgcmV0dXJuIG9iamVjdCA9PSBudWxsXG4gICAgICAgID8gb2JqZWN0XG4gICAgICAgIDogYmFzZUZvclJpZ2h0KG9iamVjdCwgZ2V0SXRlcmF0ZWUoaXRlcmF0ZWUsIDMpLCBrZXlzSW4pO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEl0ZXJhdGVzIG92ZXIgb3duIGVudW1lcmFibGUgc3RyaW5nIGtleWVkIHByb3BlcnRpZXMgb2YgYW4gb2JqZWN0IGFuZFxuICAgICAqIGludm9rZXMgYGl0ZXJhdGVlYCBmb3IgZWFjaCBwcm9wZXJ0eS4gVGhlIGl0ZXJhdGVlIGlzIGludm9rZWQgd2l0aCB0aHJlZVxuICAgICAqIGFyZ3VtZW50czogKHZhbHVlLCBrZXksIG9iamVjdCkuIEl0ZXJhdGVlIGZ1bmN0aW9ucyBtYXkgZXhpdCBpdGVyYXRpb25cbiAgICAgKiBlYXJseSBieSBleHBsaWNpdGx5IHJldHVybmluZyBgZmFsc2VgLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDAuMy4wXG4gICAgICogQGNhdGVnb3J5IE9iamVjdFxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBpdGVyYXRlIG92ZXIuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2l0ZXJhdGVlPV8uaWRlbnRpdHldIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyBgb2JqZWN0YC5cbiAgICAgKiBAc2VlIF8uZm9yT3duUmlnaHRcbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogZnVuY3Rpb24gRm9vKCkge1xuICAgICAqICAgdGhpcy5hID0gMTtcbiAgICAgKiAgIHRoaXMuYiA9IDI7XG4gICAgICogfVxuICAgICAqXG4gICAgICogRm9vLnByb3RvdHlwZS5jID0gMztcbiAgICAgKlxuICAgICAqIF8uZm9yT3duKG5ldyBGb28sIGZ1bmN0aW9uKHZhbHVlLCBrZXkpIHtcbiAgICAgKiAgIGNvbnNvbGUubG9nKGtleSk7XG4gICAgICogfSk7XG4gICAgICogLy8gPT4gTG9ncyAnYScgdGhlbiAnYicgKGl0ZXJhdGlvbiBvcmRlciBpcyBub3QgZ3VhcmFudGVlZCkuXG4gICAgICovXG4gICAgZnVuY3Rpb24gZm9yT3duKG9iamVjdCwgaXRlcmF0ZWUpIHtcbiAgICAgIHJldHVybiBvYmplY3QgJiYgYmFzZUZvck93bihvYmplY3QsIGdldEl0ZXJhdGVlKGl0ZXJhdGVlLCAzKSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgaXMgbGlrZSBgXy5mb3JPd25gIGV4Y2VwdCB0aGF0IGl0IGl0ZXJhdGVzIG92ZXIgcHJvcGVydGllcyBvZlxuICAgICAqIGBvYmplY3RgIGluIHRoZSBvcHBvc2l0ZSBvcmRlci5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAyLjAuMFxuICAgICAqIEBjYXRlZ29yeSBPYmplY3RcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gaXRlcmF0ZSBvdmVyLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtpdGVyYXRlZT1fLmlkZW50aXR5XSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgYG9iamVjdGAuXG4gICAgICogQHNlZSBfLmZvck93blxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBmdW5jdGlvbiBGb28oKSB7XG4gICAgICogICB0aGlzLmEgPSAxO1xuICAgICAqICAgdGhpcy5iID0gMjtcbiAgICAgKiB9XG4gICAgICpcbiAgICAgKiBGb28ucHJvdG90eXBlLmMgPSAzO1xuICAgICAqXG4gICAgICogXy5mb3JPd25SaWdodChuZXcgRm9vLCBmdW5jdGlvbih2YWx1ZSwga2V5KSB7XG4gICAgICogICBjb25zb2xlLmxvZyhrZXkpO1xuICAgICAqIH0pO1xuICAgICAqIC8vID0+IExvZ3MgJ2InIHRoZW4gJ2EnIGFzc3VtaW5nIGBfLmZvck93bmAgbG9ncyAnYScgdGhlbiAnYicuXG4gICAgICovXG4gICAgZnVuY3Rpb24gZm9yT3duUmlnaHQob2JqZWN0LCBpdGVyYXRlZSkge1xuICAgICAgcmV0dXJuIG9iamVjdCAmJiBiYXNlRm9yT3duUmlnaHQob2JqZWN0LCBnZXRJdGVyYXRlZShpdGVyYXRlZSwgMykpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYW4gYXJyYXkgb2YgZnVuY3Rpb24gcHJvcGVydHkgbmFtZXMgZnJvbSBvd24gZW51bWVyYWJsZSBwcm9wZXJ0aWVzXG4gICAgICogb2YgYG9iamVjdGAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQHNpbmNlIDAuMS4wXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAY2F0ZWdvcnkgT2JqZWN0XG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIGluc3BlY3QuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBmdW5jdGlvbiBuYW1lcy5cbiAgICAgKiBAc2VlIF8uZnVuY3Rpb25zSW5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogZnVuY3Rpb24gRm9vKCkge1xuICAgICAqICAgdGhpcy5hID0gXy5jb25zdGFudCgnYScpO1xuICAgICAqICAgdGhpcy5iID0gXy5jb25zdGFudCgnYicpO1xuICAgICAqIH1cbiAgICAgKlxuICAgICAqIEZvby5wcm90b3R5cGUuYyA9IF8uY29uc3RhbnQoJ2MnKTtcbiAgICAgKlxuICAgICAqIF8uZnVuY3Rpb25zKG5ldyBGb28pO1xuICAgICAqIC8vID0+IFsnYScsICdiJ11cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBmdW5jdGlvbnMob2JqZWN0KSB7XG4gICAgICByZXR1cm4gb2JqZWN0ID09IG51bGwgPyBbXSA6IGJhc2VGdW5jdGlvbnMob2JqZWN0LCBrZXlzKG9iamVjdCkpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYW4gYXJyYXkgb2YgZnVuY3Rpb24gcHJvcGVydHkgbmFtZXMgZnJvbSBvd24gYW5kIGluaGVyaXRlZFxuICAgICAqIGVudW1lcmFibGUgcHJvcGVydGllcyBvZiBgb2JqZWN0YC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBPYmplY3RcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gaW5zcGVjdC5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIGZ1bmN0aW9uIG5hbWVzLlxuICAgICAqIEBzZWUgXy5mdW5jdGlvbnNcbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogZnVuY3Rpb24gRm9vKCkge1xuICAgICAqICAgdGhpcy5hID0gXy5jb25zdGFudCgnYScpO1xuICAgICAqICAgdGhpcy5iID0gXy5jb25zdGFudCgnYicpO1xuICAgICAqIH1cbiAgICAgKlxuICAgICAqIEZvby5wcm90b3R5cGUuYyA9IF8uY29uc3RhbnQoJ2MnKTtcbiAgICAgKlxuICAgICAqIF8uZnVuY3Rpb25zSW4obmV3IEZvbyk7XG4gICAgICogLy8gPT4gWydhJywgJ2InLCAnYyddXG4gICAgICovXG4gICAgZnVuY3Rpb24gZnVuY3Rpb25zSW4ob2JqZWN0KSB7XG4gICAgICByZXR1cm4gb2JqZWN0ID09IG51bGwgPyBbXSA6IGJhc2VGdW5jdGlvbnMob2JqZWN0LCBrZXlzSW4ob2JqZWN0KSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogR2V0cyB0aGUgdmFsdWUgYXQgYHBhdGhgIG9mIGBvYmplY3RgLiBJZiB0aGUgcmVzb2x2ZWQgdmFsdWUgaXNcbiAgICAgKiBgdW5kZWZpbmVkYCwgdGhlIGBkZWZhdWx0VmFsdWVgIGlzIHJldHVybmVkIGluIGl0cyBwbGFjZS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAzLjcuMFxuICAgICAqIEBjYXRlZ29yeSBPYmplY3RcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gcXVlcnkuXG4gICAgICogQHBhcmFtIHtBcnJheXxzdHJpbmd9IHBhdGggVGhlIHBhdGggb2YgdGhlIHByb3BlcnR5IHRvIGdldC5cbiAgICAgKiBAcGFyYW0geyp9IFtkZWZhdWx0VmFsdWVdIFRoZSB2YWx1ZSByZXR1cm5lZCBmb3IgYHVuZGVmaW5lZGAgcmVzb2x2ZWQgdmFsdWVzLlxuICAgICAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSByZXNvbHZlZCB2YWx1ZS5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIG9iamVjdCA9IHsgJ2EnOiBbeyAnYic6IHsgJ2MnOiAzIH0gfV0gfTtcbiAgICAgKlxuICAgICAqIF8uZ2V0KG9iamVjdCwgJ2FbMF0uYi5jJyk7XG4gICAgICogLy8gPT4gM1xuICAgICAqXG4gICAgICogXy5nZXQob2JqZWN0LCBbJ2EnLCAnMCcsICdiJywgJ2MnXSk7XG4gICAgICogLy8gPT4gM1xuICAgICAqXG4gICAgICogXy5nZXQob2JqZWN0LCAnYS5iLmMnLCAnZGVmYXVsdCcpO1xuICAgICAqIC8vID0+ICdkZWZhdWx0J1xuICAgICAqL1xuICAgIGZ1bmN0aW9uIGdldChvYmplY3QsIHBhdGgsIGRlZmF1bHRWYWx1ZSkge1xuICAgICAgdmFyIHJlc3VsdCA9IG9iamVjdCA9PSBudWxsID8gdW5kZWZpbmVkIDogYmFzZUdldChvYmplY3QsIHBhdGgpO1xuICAgICAgcmV0dXJuIHJlc3VsdCA9PT0gdW5kZWZpbmVkID8gZGVmYXVsdFZhbHVlIDogcmVzdWx0O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENoZWNrcyBpZiBgcGF0aGAgaXMgYSBkaXJlY3QgcHJvcGVydHkgb2YgYG9iamVjdGAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQHNpbmNlIDAuMS4wXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAY2F0ZWdvcnkgT2JqZWN0XG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIHF1ZXJ5LlxuICAgICAqIEBwYXJhbSB7QXJyYXl8c3RyaW5nfSBwYXRoIFRoZSBwYXRoIHRvIGNoZWNrLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgcGF0aGAgZXhpc3RzLCBlbHNlIGBmYWxzZWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBvYmplY3QgPSB7ICdhJzogeyAnYic6IDIgfSB9O1xuICAgICAqIHZhciBvdGhlciA9IF8uY3JlYXRlKHsgJ2EnOiBfLmNyZWF0ZSh7ICdiJzogMiB9KSB9KTtcbiAgICAgKlxuICAgICAqIF8uaGFzKG9iamVjdCwgJ2EnKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBfLmhhcyhvYmplY3QsICdhLmInKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBfLmhhcyhvYmplY3QsIFsnYScsICdiJ10pO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIF8uaGFzKG90aGVyLCAnYScpO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICovXG4gICAgZnVuY3Rpb24gaGFzKG9iamVjdCwgcGF0aCkge1xuICAgICAgcmV0dXJuIG9iamVjdCAhPSBudWxsICYmIGhhc1BhdGgob2JqZWN0LCBwYXRoLCBiYXNlSGFzKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDaGVja3MgaWYgYHBhdGhgIGlzIGEgZGlyZWN0IG9yIGluaGVyaXRlZCBwcm9wZXJ0eSBvZiBgb2JqZWN0YC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBPYmplY3RcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gcXVlcnkuXG4gICAgICogQHBhcmFtIHtBcnJheXxzdHJpbmd9IHBhdGggVGhlIHBhdGggdG8gY2hlY2suXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGBwYXRoYCBleGlzdHMsIGVsc2UgYGZhbHNlYC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIG9iamVjdCA9IF8uY3JlYXRlKHsgJ2EnOiBfLmNyZWF0ZSh7ICdiJzogMiB9KSB9KTtcbiAgICAgKlxuICAgICAqIF8uaGFzSW4ob2JqZWN0LCAnYScpO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIF8uaGFzSW4ob2JqZWN0LCAnYS5iJyk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogXy5oYXNJbihvYmplY3QsIFsnYScsICdiJ10pO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIF8uaGFzSW4ob2JqZWN0LCAnYicpO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICovXG4gICAgZnVuY3Rpb24gaGFzSW4ob2JqZWN0LCBwYXRoKSB7XG4gICAgICByZXR1cm4gb2JqZWN0ICE9IG51bGwgJiYgaGFzUGF0aChvYmplY3QsIHBhdGgsIGJhc2VIYXNJbik7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhbiBvYmplY3QgY29tcG9zZWQgb2YgdGhlIGludmVydGVkIGtleXMgYW5kIHZhbHVlcyBvZiBgb2JqZWN0YC5cbiAgICAgKiBJZiBgb2JqZWN0YCBjb250YWlucyBkdXBsaWNhdGUgdmFsdWVzLCBzdWJzZXF1ZW50IHZhbHVlcyBvdmVyd3JpdGVcbiAgICAgKiBwcm9wZXJ0eSBhc3NpZ25tZW50cyBvZiBwcmV2aW91cyB2YWx1ZXMuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMC43LjBcbiAgICAgKiBAY2F0ZWdvcnkgT2JqZWN0XG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIGludmVydC5cbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIHRoZSBuZXcgaW52ZXJ0ZWQgb2JqZWN0LlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgb2JqZWN0ID0geyAnYSc6IDEsICdiJzogMiwgJ2MnOiAxIH07XG4gICAgICpcbiAgICAgKiBfLmludmVydChvYmplY3QpO1xuICAgICAqIC8vID0+IHsgJzEnOiAnYycsICcyJzogJ2InIH1cbiAgICAgKi9cbiAgICB2YXIgaW52ZXJ0ID0gY3JlYXRlSW52ZXJ0ZXIoZnVuY3Rpb24ocmVzdWx0LCB2YWx1ZSwga2V5KSB7XG4gICAgICBpZiAodmFsdWUgIT0gbnVsbCAmJlxuICAgICAgICAgIHR5cGVvZiB2YWx1ZS50b1N0cmluZyAhPSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIHZhbHVlID0gbmF0aXZlT2JqZWN0VG9TdHJpbmcuY2FsbCh2YWx1ZSk7XG4gICAgICB9XG5cbiAgICAgIHJlc3VsdFt2YWx1ZV0gPSBrZXk7XG4gICAgfSwgY29uc3RhbnQoaWRlbnRpdHkpKTtcblxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIGlzIGxpa2UgYF8uaW52ZXJ0YCBleGNlcHQgdGhhdCB0aGUgaW52ZXJ0ZWQgb2JqZWN0IGlzIGdlbmVyYXRlZFxuICAgICAqIGZyb20gdGhlIHJlc3VsdHMgb2YgcnVubmluZyBlYWNoIGVsZW1lbnQgb2YgYG9iamVjdGAgdGhydSBgaXRlcmF0ZWVgLiBUaGVcbiAgICAgKiBjb3JyZXNwb25kaW5nIGludmVydGVkIHZhbHVlIG9mIGVhY2ggaW52ZXJ0ZWQga2V5IGlzIGFuIGFycmF5IG9mIGtleXNcbiAgICAgKiByZXNwb25zaWJsZSBmb3IgZ2VuZXJhdGluZyB0aGUgaW52ZXJ0ZWQgdmFsdWUuIFRoZSBpdGVyYXRlZSBpcyBpbnZva2VkXG4gICAgICogd2l0aCBvbmUgYXJndW1lbnQ6ICh2YWx1ZSkuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4xLjBcbiAgICAgKiBAY2F0ZWdvcnkgT2JqZWN0XG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIGludmVydC5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbaXRlcmF0ZWU9Xy5pZGVudGl0eV0gVGhlIGl0ZXJhdGVlIGludm9rZWQgcGVyIGVsZW1lbnQuXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyB0aGUgbmV3IGludmVydGVkIG9iamVjdC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIG9iamVjdCA9IHsgJ2EnOiAxLCAnYic6IDIsICdjJzogMSB9O1xuICAgICAqXG4gICAgICogXy5pbnZlcnRCeShvYmplY3QpO1xuICAgICAqIC8vID0+IHsgJzEnOiBbJ2EnLCAnYyddLCAnMic6IFsnYiddIH1cbiAgICAgKlxuICAgICAqIF8uaW52ZXJ0Qnkob2JqZWN0LCBmdW5jdGlvbih2YWx1ZSkge1xuICAgICAqICAgcmV0dXJuICdncm91cCcgKyB2YWx1ZTtcbiAgICAgKiB9KTtcbiAgICAgKiAvLyA9PiB7ICdncm91cDEnOiBbJ2EnLCAnYyddLCAnZ3JvdXAyJzogWydiJ10gfVxuICAgICAqL1xuICAgIHZhciBpbnZlcnRCeSA9IGNyZWF0ZUludmVydGVyKGZ1bmN0aW9uKHJlc3VsdCwgdmFsdWUsIGtleSkge1xuICAgICAgaWYgKHZhbHVlICE9IG51bGwgJiZcbiAgICAgICAgICB0eXBlb2YgdmFsdWUudG9TdHJpbmcgIT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICB2YWx1ZSA9IG5hdGl2ZU9iamVjdFRvU3RyaW5nLmNhbGwodmFsdWUpO1xuICAgICAgfVxuXG4gICAgICBpZiAoaGFzT3duUHJvcGVydHkuY2FsbChyZXN1bHQsIHZhbHVlKSkge1xuICAgICAgICByZXN1bHRbdmFsdWVdLnB1c2goa2V5KTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJlc3VsdFt2YWx1ZV0gPSBba2V5XTtcbiAgICAgIH1cbiAgICB9LCBnZXRJdGVyYXRlZSk7XG5cbiAgICAvKipcbiAgICAgKiBJbnZva2VzIHRoZSBtZXRob2QgYXQgYHBhdGhgIG9mIGBvYmplY3RgLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IE9iamVjdFxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBxdWVyeS5cbiAgICAgKiBAcGFyYW0ge0FycmF5fHN0cmluZ30gcGF0aCBUaGUgcGF0aCBvZiB0aGUgbWV0aG9kIHRvIGludm9rZS5cbiAgICAgKiBAcGFyYW0gey4uLip9IFthcmdzXSBUaGUgYXJndW1lbnRzIHRvIGludm9rZSB0aGUgbWV0aG9kIHdpdGguXG4gICAgICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIHJlc3VsdCBvZiB0aGUgaW52b2tlZCBtZXRob2QuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBvYmplY3QgPSB7ICdhJzogW3sgJ2InOiB7ICdjJzogWzEsIDIsIDMsIDRdIH0gfV0gfTtcbiAgICAgKlxuICAgICAqIF8uaW52b2tlKG9iamVjdCwgJ2FbMF0uYi5jLnNsaWNlJywgMSwgMyk7XG4gICAgICogLy8gPT4gWzIsIDNdXG4gICAgICovXG4gICAgdmFyIGludm9rZSA9IGJhc2VSZXN0KGJhc2VJbnZva2UpO1xuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhbiBhcnJheSBvZiB0aGUgb3duIGVudW1lcmFibGUgcHJvcGVydHkgbmFtZXMgb2YgYG9iamVjdGAuXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogTm9uLW9iamVjdCB2YWx1ZXMgYXJlIGNvZXJjZWQgdG8gb2JqZWN0cy4gU2VlIHRoZVxuICAgICAqIFtFUyBzcGVjXShodHRwOi8vZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi83LjAvI3NlYy1vYmplY3Qua2V5cylcbiAgICAgKiBmb3IgbW9yZSBkZXRhaWxzLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQGNhdGVnb3J5IE9iamVjdFxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBxdWVyeS5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIGFycmF5IG9mIHByb3BlcnR5IG5hbWVzLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBmdW5jdGlvbiBGb28oKSB7XG4gICAgICogICB0aGlzLmEgPSAxO1xuICAgICAqICAgdGhpcy5iID0gMjtcbiAgICAgKiB9XG4gICAgICpcbiAgICAgKiBGb28ucHJvdG90eXBlLmMgPSAzO1xuICAgICAqXG4gICAgICogXy5rZXlzKG5ldyBGb28pO1xuICAgICAqIC8vID0+IFsnYScsICdiJ10gKGl0ZXJhdGlvbiBvcmRlciBpcyBub3QgZ3VhcmFudGVlZClcbiAgICAgKlxuICAgICAqIF8ua2V5cygnaGknKTtcbiAgICAgKiAvLyA9PiBbJzAnLCAnMSddXG4gICAgICovXG4gICAgZnVuY3Rpb24ga2V5cyhvYmplY3QpIHtcbiAgICAgIHJldHVybiBpc0FycmF5TGlrZShvYmplY3QpID8gYXJyYXlMaWtlS2V5cyhvYmplY3QpIDogYmFzZUtleXMob2JqZWN0KTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGFuIGFycmF5IG9mIHRoZSBvd24gYW5kIGluaGVyaXRlZCBlbnVtZXJhYmxlIHByb3BlcnR5IG5hbWVzIG9mIGBvYmplY3RgLlxuICAgICAqXG4gICAgICogKipOb3RlOioqIE5vbi1vYmplY3QgdmFsdWVzIGFyZSBjb2VyY2VkIHRvIG9iamVjdHMuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMy4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgT2JqZWN0XG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIHF1ZXJ5LlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgYXJyYXkgb2YgcHJvcGVydHkgbmFtZXMuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIGZ1bmN0aW9uIEZvbygpIHtcbiAgICAgKiAgIHRoaXMuYSA9IDE7XG4gICAgICogICB0aGlzLmIgPSAyO1xuICAgICAqIH1cbiAgICAgKlxuICAgICAqIEZvby5wcm90b3R5cGUuYyA9IDM7XG4gICAgICpcbiAgICAgKiBfLmtleXNJbihuZXcgRm9vKTtcbiAgICAgKiAvLyA9PiBbJ2EnLCAnYicsICdjJ10gKGl0ZXJhdGlvbiBvcmRlciBpcyBub3QgZ3VhcmFudGVlZClcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBrZXlzSW4ob2JqZWN0KSB7XG4gICAgICByZXR1cm4gaXNBcnJheUxpa2Uob2JqZWN0KSA/IGFycmF5TGlrZUtleXMob2JqZWN0LCB0cnVlKSA6IGJhc2VLZXlzSW4ob2JqZWN0KTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgb3Bwb3NpdGUgb2YgYF8ubWFwVmFsdWVzYDsgdGhpcyBtZXRob2QgY3JlYXRlcyBhbiBvYmplY3Qgd2l0aCB0aGVcbiAgICAgKiBzYW1lIHZhbHVlcyBhcyBgb2JqZWN0YCBhbmQga2V5cyBnZW5lcmF0ZWQgYnkgcnVubmluZyBlYWNoIG93biBlbnVtZXJhYmxlXG4gICAgICogc3RyaW5nIGtleWVkIHByb3BlcnR5IG9mIGBvYmplY3RgIHRocnUgYGl0ZXJhdGVlYC4gVGhlIGl0ZXJhdGVlIGlzIGludm9rZWRcbiAgICAgKiB3aXRoIHRocmVlIGFyZ3VtZW50czogKHZhbHVlLCBrZXksIG9iamVjdCkuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMy44LjBcbiAgICAgKiBAY2F0ZWdvcnkgT2JqZWN0XG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIGl0ZXJhdGUgb3Zlci5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbaXRlcmF0ZWU9Xy5pZGVudGl0eV0gVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIHRoZSBuZXcgbWFwcGVkIG9iamVjdC5cbiAgICAgKiBAc2VlIF8ubWFwVmFsdWVzXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8ubWFwS2V5cyh7ICdhJzogMSwgJ2InOiAyIH0sIGZ1bmN0aW9uKHZhbHVlLCBrZXkpIHtcbiAgICAgKiAgIHJldHVybiBrZXkgKyB2YWx1ZTtcbiAgICAgKiB9KTtcbiAgICAgKiAvLyA9PiB7ICdhMSc6IDEsICdiMic6IDIgfVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIG1hcEtleXMob2JqZWN0LCBpdGVyYXRlZSkge1xuICAgICAgdmFyIHJlc3VsdCA9IHt9O1xuICAgICAgaXRlcmF0ZWUgPSBnZXRJdGVyYXRlZShpdGVyYXRlZSwgMyk7XG5cbiAgICAgIGJhc2VGb3JPd24ob2JqZWN0LCBmdW5jdGlvbih2YWx1ZSwga2V5LCBvYmplY3QpIHtcbiAgICAgICAgYmFzZUFzc2lnblZhbHVlKHJlc3VsdCwgaXRlcmF0ZWUodmFsdWUsIGtleSwgb2JqZWN0KSwgdmFsdWUpO1xuICAgICAgfSk7XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYW4gb2JqZWN0IHdpdGggdGhlIHNhbWUga2V5cyBhcyBgb2JqZWN0YCBhbmQgdmFsdWVzIGdlbmVyYXRlZFxuICAgICAqIGJ5IHJ1bm5pbmcgZWFjaCBvd24gZW51bWVyYWJsZSBzdHJpbmcga2V5ZWQgcHJvcGVydHkgb2YgYG9iamVjdGAgdGhydVxuICAgICAqIGBpdGVyYXRlZWAuIFRoZSBpdGVyYXRlZSBpcyBpbnZva2VkIHdpdGggdGhyZWUgYXJndW1lbnRzOlxuICAgICAqICh2YWx1ZSwga2V5LCBvYmplY3QpLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDIuNC4wXG4gICAgICogQGNhdGVnb3J5IE9iamVjdFxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBpdGVyYXRlIG92ZXIuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2l0ZXJhdGVlPV8uaWRlbnRpdHldIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyB0aGUgbmV3IG1hcHBlZCBvYmplY3QuXG4gICAgICogQHNlZSBfLm1hcEtleXNcbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIHVzZXJzID0ge1xuICAgICAqICAgJ2ZyZWQnOiAgICB7ICd1c2VyJzogJ2ZyZWQnLCAgICAnYWdlJzogNDAgfSxcbiAgICAgKiAgICdwZWJibGVzJzogeyAndXNlcic6ICdwZWJibGVzJywgJ2FnZSc6IDEgfVxuICAgICAqIH07XG4gICAgICpcbiAgICAgKiBfLm1hcFZhbHVlcyh1c2VycywgZnVuY3Rpb24obykgeyByZXR1cm4gby5hZ2U7IH0pO1xuICAgICAqIC8vID0+IHsgJ2ZyZWQnOiA0MCwgJ3BlYmJsZXMnOiAxIH0gKGl0ZXJhdGlvbiBvcmRlciBpcyBub3QgZ3VhcmFudGVlZClcbiAgICAgKlxuICAgICAqIC8vIFRoZSBgXy5wcm9wZXJ0eWAgaXRlcmF0ZWUgc2hvcnRoYW5kLlxuICAgICAqIF8ubWFwVmFsdWVzKHVzZXJzLCAnYWdlJyk7XG4gICAgICogLy8gPT4geyAnZnJlZCc6IDQwLCAncGViYmxlcyc6IDEgfSAoaXRlcmF0aW9uIG9yZGVyIGlzIG5vdCBndWFyYW50ZWVkKVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIG1hcFZhbHVlcyhvYmplY3QsIGl0ZXJhdGVlKSB7XG4gICAgICB2YXIgcmVzdWx0ID0ge307XG4gICAgICBpdGVyYXRlZSA9IGdldEl0ZXJhdGVlKGl0ZXJhdGVlLCAzKTtcblxuICAgICAgYmFzZUZvck93bihvYmplY3QsIGZ1bmN0aW9uKHZhbHVlLCBrZXksIG9iamVjdCkge1xuICAgICAgICBiYXNlQXNzaWduVmFsdWUocmVzdWx0LCBrZXksIGl0ZXJhdGVlKHZhbHVlLCBrZXksIG9iamVjdCkpO1xuICAgICAgfSk7XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIGlzIGxpa2UgYF8uYXNzaWduYCBleGNlcHQgdGhhdCBpdCByZWN1cnNpdmVseSBtZXJnZXMgb3duIGFuZFxuICAgICAqIGluaGVyaXRlZCBlbnVtZXJhYmxlIHN0cmluZyBrZXllZCBwcm9wZXJ0aWVzIG9mIHNvdXJjZSBvYmplY3RzIGludG8gdGhlXG4gICAgICogZGVzdGluYXRpb24gb2JqZWN0LiBTb3VyY2UgcHJvcGVydGllcyB0aGF0IHJlc29sdmUgdG8gYHVuZGVmaW5lZGAgYXJlXG4gICAgICogc2tpcHBlZCBpZiBhIGRlc3RpbmF0aW9uIHZhbHVlIGV4aXN0cy4gQXJyYXkgYW5kIHBsYWluIG9iamVjdCBwcm9wZXJ0aWVzXG4gICAgICogYXJlIG1lcmdlZCByZWN1cnNpdmVseS4gT3RoZXIgb2JqZWN0cyBhbmQgdmFsdWUgdHlwZXMgYXJlIG92ZXJyaWRkZW4gYnlcbiAgICAgKiBhc3NpZ25tZW50LiBTb3VyY2Ugb2JqZWN0cyBhcmUgYXBwbGllZCBmcm9tIGxlZnQgdG8gcmlnaHQuIFN1YnNlcXVlbnRcbiAgICAgKiBzb3VyY2VzIG92ZXJ3cml0ZSBwcm9wZXJ0eSBhc3NpZ25tZW50cyBvZiBwcmV2aW91cyBzb3VyY2VzLlxuICAgICAqXG4gICAgICogKipOb3RlOioqIFRoaXMgbWV0aG9kIG11dGF0ZXMgYG9iamVjdGAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMC41LjBcbiAgICAgKiBAY2F0ZWdvcnkgT2JqZWN0XG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgZGVzdGluYXRpb24gb2JqZWN0LlxuICAgICAqIEBwYXJhbSB7Li4uT2JqZWN0fSBbc291cmNlc10gVGhlIHNvdXJjZSBvYmplY3RzLlxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgYG9iamVjdGAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBvYmplY3QgPSB7XG4gICAgICogICAnYSc6IFt7ICdiJzogMiB9LCB7ICdkJzogNCB9XVxuICAgICAqIH07XG4gICAgICpcbiAgICAgKiB2YXIgb3RoZXIgPSB7XG4gICAgICogICAnYSc6IFt7ICdjJzogMyB9LCB7ICdlJzogNSB9XVxuICAgICAqIH07XG4gICAgICpcbiAgICAgKiBfLm1lcmdlKG9iamVjdCwgb3RoZXIpO1xuICAgICAqIC8vID0+IHsgJ2EnOiBbeyAnYic6IDIsICdjJzogMyB9LCB7ICdkJzogNCwgJ2UnOiA1IH1dIH1cbiAgICAgKi9cbiAgICB2YXIgbWVyZ2UgPSBjcmVhdGVBc3NpZ25lcihmdW5jdGlvbihvYmplY3QsIHNvdXJjZSwgc3JjSW5kZXgpIHtcbiAgICAgIGJhc2VNZXJnZShvYmplY3QsIHNvdXJjZSwgc3JjSW5kZXgpO1xuICAgIH0pO1xuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgaXMgbGlrZSBgXy5tZXJnZWAgZXhjZXB0IHRoYXQgaXQgYWNjZXB0cyBgY3VzdG9taXplcmAgd2hpY2hcbiAgICAgKiBpcyBpbnZva2VkIHRvIHByb2R1Y2UgdGhlIG1lcmdlZCB2YWx1ZXMgb2YgdGhlIGRlc3RpbmF0aW9uIGFuZCBzb3VyY2VcbiAgICAgKiBwcm9wZXJ0aWVzLiBJZiBgY3VzdG9taXplcmAgcmV0dXJucyBgdW5kZWZpbmVkYCwgbWVyZ2luZyBpcyBoYW5kbGVkIGJ5IHRoZVxuICAgICAqIG1ldGhvZCBpbnN0ZWFkLiBUaGUgYGN1c3RvbWl6ZXJgIGlzIGludm9rZWQgd2l0aCBzaXggYXJndW1lbnRzOlxuICAgICAqIChvYmpWYWx1ZSwgc3JjVmFsdWUsIGtleSwgb2JqZWN0LCBzb3VyY2UsIHN0YWNrKS5cbiAgICAgKlxuICAgICAqICoqTm90ZToqKiBUaGlzIG1ldGhvZCBtdXRhdGVzIGBvYmplY3RgLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IE9iamVjdFxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIGRlc3RpbmF0aW9uIG9iamVjdC5cbiAgICAgKiBAcGFyYW0gey4uLk9iamVjdH0gc291cmNlcyBUaGUgc291cmNlIG9iamVjdHMuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gY3VzdG9taXplciBUaGUgZnVuY3Rpb24gdG8gY3VzdG9taXplIGFzc2lnbmVkIHZhbHVlcy5cbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIGBvYmplY3RgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBmdW5jdGlvbiBjdXN0b21pemVyKG9ialZhbHVlLCBzcmNWYWx1ZSkge1xuICAgICAqICAgaWYgKF8uaXNBcnJheShvYmpWYWx1ZSkpIHtcbiAgICAgKiAgICAgcmV0dXJuIG9ialZhbHVlLmNvbmNhdChzcmNWYWx1ZSk7XG4gICAgICogICB9XG4gICAgICogfVxuICAgICAqXG4gICAgICogdmFyIG9iamVjdCA9IHsgJ2EnOiBbMV0sICdiJzogWzJdIH07XG4gICAgICogdmFyIG90aGVyID0geyAnYSc6IFszXSwgJ2InOiBbNF0gfTtcbiAgICAgKlxuICAgICAqIF8ubWVyZ2VXaXRoKG9iamVjdCwgb3RoZXIsIGN1c3RvbWl6ZXIpO1xuICAgICAqIC8vID0+IHsgJ2EnOiBbMSwgM10sICdiJzogWzIsIDRdIH1cbiAgICAgKi9cbiAgICB2YXIgbWVyZ2VXaXRoID0gY3JlYXRlQXNzaWduZXIoZnVuY3Rpb24ob2JqZWN0LCBzb3VyY2UsIHNyY0luZGV4LCBjdXN0b21pemVyKSB7XG4gICAgICBiYXNlTWVyZ2Uob2JqZWN0LCBzb3VyY2UsIHNyY0luZGV4LCBjdXN0b21pemVyKTtcbiAgICB9KTtcblxuICAgIC8qKlxuICAgICAqIFRoZSBvcHBvc2l0ZSBvZiBgXy5waWNrYDsgdGhpcyBtZXRob2QgY3JlYXRlcyBhbiBvYmplY3QgY29tcG9zZWQgb2YgdGhlXG4gICAgICogb3duIGFuZCBpbmhlcml0ZWQgZW51bWVyYWJsZSBwcm9wZXJ0eSBwYXRocyBvZiBgb2JqZWN0YCB0aGF0IGFyZSBub3Qgb21pdHRlZC5cbiAgICAgKlxuICAgICAqICoqTm90ZToqKiBUaGlzIG1ldGhvZCBpcyBjb25zaWRlcmFibHkgc2xvd2VyIHRoYW4gYF8ucGlja2AuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQHNpbmNlIDAuMS4wXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAY2F0ZWdvcnkgT2JqZWN0XG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgc291cmNlIG9iamVjdC5cbiAgICAgKiBAcGFyYW0gey4uLihzdHJpbmd8c3RyaW5nW10pfSBbcGF0aHNdIFRoZSBwcm9wZXJ0eSBwYXRocyB0byBvbWl0LlxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgdGhlIG5ldyBvYmplY3QuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBvYmplY3QgPSB7ICdhJzogMSwgJ2InOiAnMicsICdjJzogMyB9O1xuICAgICAqXG4gICAgICogXy5vbWl0KG9iamVjdCwgWydhJywgJ2MnXSk7XG4gICAgICogLy8gPT4geyAnYic6ICcyJyB9XG4gICAgICovXG4gICAgdmFyIG9taXQgPSBmbGF0UmVzdChmdW5jdGlvbihvYmplY3QsIHBhdGhzKSB7XG4gICAgICB2YXIgcmVzdWx0ID0ge307XG4gICAgICBpZiAob2JqZWN0ID09IG51bGwpIHtcbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICAgIH1cbiAgICAgIHZhciBpc0RlZXAgPSBmYWxzZTtcbiAgICAgIHBhdGhzID0gYXJyYXlNYXAocGF0aHMsIGZ1bmN0aW9uKHBhdGgpIHtcbiAgICAgICAgcGF0aCA9IGNhc3RQYXRoKHBhdGgsIG9iamVjdCk7XG4gICAgICAgIGlzRGVlcCB8fCAoaXNEZWVwID0gcGF0aC5sZW5ndGggPiAxKTtcbiAgICAgICAgcmV0dXJuIHBhdGg7XG4gICAgICB9KTtcbiAgICAgIGNvcHlPYmplY3Qob2JqZWN0LCBnZXRBbGxLZXlzSW4ob2JqZWN0KSwgcmVzdWx0KTtcbiAgICAgIGlmIChpc0RlZXApIHtcbiAgICAgICAgcmVzdWx0ID0gYmFzZUNsb25lKHJlc3VsdCwgQ0xPTkVfREVFUF9GTEFHIHwgQ0xPTkVfRkxBVF9GTEFHIHwgQ0xPTkVfU1lNQk9MU19GTEFHLCBjdXN0b21PbWl0Q2xvbmUpO1xuICAgICAgfVxuICAgICAgdmFyIGxlbmd0aCA9IHBhdGhzLmxlbmd0aDtcbiAgICAgIHdoaWxlIChsZW5ndGgtLSkge1xuICAgICAgICBiYXNlVW5zZXQocmVzdWx0LCBwYXRoc1tsZW5ndGhdKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfSk7XG5cbiAgICAvKipcbiAgICAgKiBUaGUgb3Bwb3NpdGUgb2YgYF8ucGlja0J5YDsgdGhpcyBtZXRob2QgY3JlYXRlcyBhbiBvYmplY3QgY29tcG9zZWQgb2ZcbiAgICAgKiB0aGUgb3duIGFuZCBpbmhlcml0ZWQgZW51bWVyYWJsZSBzdHJpbmcga2V5ZWQgcHJvcGVydGllcyBvZiBgb2JqZWN0YCB0aGF0XG4gICAgICogYHByZWRpY2F0ZWAgZG9lc24ndCByZXR1cm4gdHJ1dGh5IGZvci4gVGhlIHByZWRpY2F0ZSBpcyBpbnZva2VkIHdpdGggdHdvXG4gICAgICogYXJndW1lbnRzOiAodmFsdWUsIGtleSkuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgT2JqZWN0XG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgc291cmNlIG9iamVjdC5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbcHJlZGljYXRlPV8uaWRlbnRpdHldIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBwcm9wZXJ0eS5cbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIHRoZSBuZXcgb2JqZWN0LlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgb2JqZWN0ID0geyAnYSc6IDEsICdiJzogJzInLCAnYyc6IDMgfTtcbiAgICAgKlxuICAgICAqIF8ub21pdEJ5KG9iamVjdCwgXy5pc051bWJlcik7XG4gICAgICogLy8gPT4geyAnYic6ICcyJyB9XG4gICAgICovXG4gICAgZnVuY3Rpb24gb21pdEJ5KG9iamVjdCwgcHJlZGljYXRlKSB7XG4gICAgICByZXR1cm4gcGlja0J5KG9iamVjdCwgbmVnYXRlKGdldEl0ZXJhdGVlKHByZWRpY2F0ZSkpKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGFuIG9iamVjdCBjb21wb3NlZCBvZiB0aGUgcGlja2VkIGBvYmplY3RgIHByb3BlcnRpZXMuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQHNpbmNlIDAuMS4wXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAY2F0ZWdvcnkgT2JqZWN0XG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgc291cmNlIG9iamVjdC5cbiAgICAgKiBAcGFyYW0gey4uLihzdHJpbmd8c3RyaW5nW10pfSBbcGF0aHNdIFRoZSBwcm9wZXJ0eSBwYXRocyB0byBwaWNrLlxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgdGhlIG5ldyBvYmplY3QuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBvYmplY3QgPSB7ICdhJzogMSwgJ2InOiAnMicsICdjJzogMyB9O1xuICAgICAqXG4gICAgICogXy5waWNrKG9iamVjdCwgWydhJywgJ2MnXSk7XG4gICAgICogLy8gPT4geyAnYSc6IDEsICdjJzogMyB9XG4gICAgICovXG4gICAgdmFyIHBpY2sgPSBmbGF0UmVzdChmdW5jdGlvbihvYmplY3QsIHBhdGhzKSB7XG4gICAgICByZXR1cm4gb2JqZWN0ID09IG51bGwgPyB7fSA6IGJhc2VQaWNrKG9iamVjdCwgcGF0aHMpO1xuICAgIH0pO1xuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhbiBvYmplY3QgY29tcG9zZWQgb2YgdGhlIGBvYmplY3RgIHByb3BlcnRpZXMgYHByZWRpY2F0ZWAgcmV0dXJuc1xuICAgICAqIHRydXRoeSBmb3IuIFRoZSBwcmVkaWNhdGUgaXMgaW52b2tlZCB3aXRoIHR3byBhcmd1bWVudHM6ICh2YWx1ZSwga2V5KS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBPYmplY3RcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBzb3VyY2Ugb2JqZWN0LlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtwcmVkaWNhdGU9Xy5pZGVudGl0eV0gVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIHByb3BlcnR5LlxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgdGhlIG5ldyBvYmplY3QuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBvYmplY3QgPSB7ICdhJzogMSwgJ2InOiAnMicsICdjJzogMyB9O1xuICAgICAqXG4gICAgICogXy5waWNrQnkob2JqZWN0LCBfLmlzTnVtYmVyKTtcbiAgICAgKiAvLyA9PiB7ICdhJzogMSwgJ2MnOiAzIH1cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBwaWNrQnkob2JqZWN0LCBwcmVkaWNhdGUpIHtcbiAgICAgIGlmIChvYmplY3QgPT0gbnVsbCkge1xuICAgICAgICByZXR1cm4ge307XG4gICAgICB9XG4gICAgICB2YXIgcHJvcHMgPSBhcnJheU1hcChnZXRBbGxLZXlzSW4ob2JqZWN0KSwgZnVuY3Rpb24ocHJvcCkge1xuICAgICAgICByZXR1cm4gW3Byb3BdO1xuICAgICAgfSk7XG4gICAgICBwcmVkaWNhdGUgPSBnZXRJdGVyYXRlZShwcmVkaWNhdGUpO1xuICAgICAgcmV0dXJuIGJhc2VQaWNrQnkob2JqZWN0LCBwcm9wcywgZnVuY3Rpb24odmFsdWUsIHBhdGgpIHtcbiAgICAgICAgcmV0dXJuIHByZWRpY2F0ZSh2YWx1ZSwgcGF0aFswXSk7XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCBpcyBsaWtlIGBfLmdldGAgZXhjZXB0IHRoYXQgaWYgdGhlIHJlc29sdmVkIHZhbHVlIGlzIGFcbiAgICAgKiBmdW5jdGlvbiBpdCdzIGludm9rZWQgd2l0aCB0aGUgYHRoaXNgIGJpbmRpbmcgb2YgaXRzIHBhcmVudCBvYmplY3QgYW5kXG4gICAgICogaXRzIHJlc3VsdCBpcyByZXR1cm5lZC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBjYXRlZ29yeSBPYmplY3RcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gcXVlcnkuXG4gICAgICogQHBhcmFtIHtBcnJheXxzdHJpbmd9IHBhdGggVGhlIHBhdGggb2YgdGhlIHByb3BlcnR5IHRvIHJlc29sdmUuXG4gICAgICogQHBhcmFtIHsqfSBbZGVmYXVsdFZhbHVlXSBUaGUgdmFsdWUgcmV0dXJuZWQgZm9yIGB1bmRlZmluZWRgIHJlc29sdmVkIHZhbHVlcy5cbiAgICAgKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgcmVzb2x2ZWQgdmFsdWUuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBvYmplY3QgPSB7ICdhJzogW3sgJ2InOiB7ICdjMSc6IDMsICdjMic6IF8uY29uc3RhbnQoNCkgfSB9XSB9O1xuICAgICAqXG4gICAgICogXy5yZXN1bHQob2JqZWN0LCAnYVswXS5iLmMxJyk7XG4gICAgICogLy8gPT4gM1xuICAgICAqXG4gICAgICogXy5yZXN1bHQob2JqZWN0LCAnYVswXS5iLmMyJyk7XG4gICAgICogLy8gPT4gNFxuICAgICAqXG4gICAgICogXy5yZXN1bHQob2JqZWN0LCAnYVswXS5iLmMzJywgJ2RlZmF1bHQnKTtcbiAgICAgKiAvLyA9PiAnZGVmYXVsdCdcbiAgICAgKlxuICAgICAqIF8ucmVzdWx0KG9iamVjdCwgJ2FbMF0uYi5jMycsIF8uY29uc3RhbnQoJ2RlZmF1bHQnKSk7XG4gICAgICogLy8gPT4gJ2RlZmF1bHQnXG4gICAgICovXG4gICAgZnVuY3Rpb24gcmVzdWx0KG9iamVjdCwgcGF0aCwgZGVmYXVsdFZhbHVlKSB7XG4gICAgICBwYXRoID0gY2FzdFBhdGgocGF0aCwgb2JqZWN0KTtcblxuICAgICAgdmFyIGluZGV4ID0gLTEsXG4gICAgICAgICAgbGVuZ3RoID0gcGF0aC5sZW5ndGg7XG5cbiAgICAgIC8vIEVuc3VyZSB0aGUgbG9vcCBpcyBlbnRlcmVkIHdoZW4gcGF0aCBpcyBlbXB0eS5cbiAgICAgIGlmICghbGVuZ3RoKSB7XG4gICAgICAgIGxlbmd0aCA9IDE7XG4gICAgICAgIG9iamVjdCA9IHVuZGVmaW5lZDtcbiAgICAgIH1cbiAgICAgIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgICAgIHZhciB2YWx1ZSA9IG9iamVjdCA9PSBudWxsID8gdW5kZWZpbmVkIDogb2JqZWN0W3RvS2V5KHBhdGhbaW5kZXhdKV07XG4gICAgICAgIGlmICh2YWx1ZSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgaW5kZXggPSBsZW5ndGg7XG4gICAgICAgICAgdmFsdWUgPSBkZWZhdWx0VmFsdWU7XG4gICAgICAgIH1cbiAgICAgICAgb2JqZWN0ID0gaXNGdW5jdGlvbih2YWx1ZSkgPyB2YWx1ZS5jYWxsKG9iamVjdCkgOiB2YWx1ZTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBvYmplY3Q7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogU2V0cyB0aGUgdmFsdWUgYXQgYHBhdGhgIG9mIGBvYmplY3RgLiBJZiBhIHBvcnRpb24gb2YgYHBhdGhgIGRvZXNuJ3QgZXhpc3QsXG4gICAgICogaXQncyBjcmVhdGVkLiBBcnJheXMgYXJlIGNyZWF0ZWQgZm9yIG1pc3NpbmcgaW5kZXggcHJvcGVydGllcyB3aGlsZSBvYmplY3RzXG4gICAgICogYXJlIGNyZWF0ZWQgZm9yIGFsbCBvdGhlciBtaXNzaW5nIHByb3BlcnRpZXMuIFVzZSBgXy5zZXRXaXRoYCB0byBjdXN0b21pemVcbiAgICAgKiBgcGF0aGAgY3JlYXRpb24uXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogVGhpcyBtZXRob2QgbXV0YXRlcyBgb2JqZWN0YC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAzLjcuMFxuICAgICAqIEBjYXRlZ29yeSBPYmplY3RcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gbW9kaWZ5LlxuICAgICAqIEBwYXJhbSB7QXJyYXl8c3RyaW5nfSBwYXRoIFRoZSBwYXRoIG9mIHRoZSBwcm9wZXJ0eSB0byBzZXQuXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gc2V0LlxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgYG9iamVjdGAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBvYmplY3QgPSB7ICdhJzogW3sgJ2InOiB7ICdjJzogMyB9IH1dIH07XG4gICAgICpcbiAgICAgKiBfLnNldChvYmplY3QsICdhWzBdLmIuYycsIDQpO1xuICAgICAqIGNvbnNvbGUubG9nKG9iamVjdC5hWzBdLmIuYyk7XG4gICAgICogLy8gPT4gNFxuICAgICAqXG4gICAgICogXy5zZXQob2JqZWN0LCBbJ3gnLCAnMCcsICd5JywgJ3onXSwgNSk7XG4gICAgICogY29uc29sZS5sb2cob2JqZWN0LnhbMF0ueS56KTtcbiAgICAgKiAvLyA9PiA1XG4gICAgICovXG4gICAgZnVuY3Rpb24gc2V0KG9iamVjdCwgcGF0aCwgdmFsdWUpIHtcbiAgICAgIHJldHVybiBvYmplY3QgPT0gbnVsbCA/IG9iamVjdCA6IGJhc2VTZXQob2JqZWN0LCBwYXRoLCB2YWx1ZSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgaXMgbGlrZSBgXy5zZXRgIGV4Y2VwdCB0aGF0IGl0IGFjY2VwdHMgYGN1c3RvbWl6ZXJgIHdoaWNoIGlzXG4gICAgICogaW52b2tlZCB0byBwcm9kdWNlIHRoZSBvYmplY3RzIG9mIGBwYXRoYC4gIElmIGBjdXN0b21pemVyYCByZXR1cm5zIGB1bmRlZmluZWRgXG4gICAgICogcGF0aCBjcmVhdGlvbiBpcyBoYW5kbGVkIGJ5IHRoZSBtZXRob2QgaW5zdGVhZC4gVGhlIGBjdXN0b21pemVyYCBpcyBpbnZva2VkXG4gICAgICogd2l0aCB0aHJlZSBhcmd1bWVudHM6IChuc1ZhbHVlLCBrZXksIG5zT2JqZWN0KS5cbiAgICAgKlxuICAgICAqICoqTm90ZToqKiBUaGlzIG1ldGhvZCBtdXRhdGVzIGBvYmplY3RgLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IE9iamVjdFxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBtb2RpZnkuXG4gICAgICogQHBhcmFtIHtBcnJheXxzdHJpbmd9IHBhdGggVGhlIHBhdGggb2YgdGhlIHByb3BlcnR5IHRvIHNldC5cbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBzZXQuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2N1c3RvbWl6ZXJdIFRoZSBmdW5jdGlvbiB0byBjdXN0b21pemUgYXNzaWduZWQgdmFsdWVzLlxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgYG9iamVjdGAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBvYmplY3QgPSB7fTtcbiAgICAgKlxuICAgICAqIF8uc2V0V2l0aChvYmplY3QsICdbMF1bMV0nLCAnYScsIE9iamVjdCk7XG4gICAgICogLy8gPT4geyAnMCc6IHsgJzEnOiAnYScgfSB9XG4gICAgICovXG4gICAgZnVuY3Rpb24gc2V0V2l0aChvYmplY3QsIHBhdGgsIHZhbHVlLCBjdXN0b21pemVyKSB7XG4gICAgICBjdXN0b21pemVyID0gdHlwZW9mIGN1c3RvbWl6ZXIgPT0gJ2Z1bmN0aW9uJyA/IGN1c3RvbWl6ZXIgOiB1bmRlZmluZWQ7XG4gICAgICByZXR1cm4gb2JqZWN0ID09IG51bGwgPyBvYmplY3QgOiBiYXNlU2V0KG9iamVjdCwgcGF0aCwgdmFsdWUsIGN1c3RvbWl6ZXIpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYW4gYXJyYXkgb2Ygb3duIGVudW1lcmFibGUgc3RyaW5nIGtleWVkLXZhbHVlIHBhaXJzIGZvciBgb2JqZWN0YFxuICAgICAqIHdoaWNoIGNhbiBiZSBjb25zdW1lZCBieSBgXy5mcm9tUGFpcnNgLiBJZiBgb2JqZWN0YCBpcyBhIG1hcCBvciBzZXQsIGl0c1xuICAgICAqIGVudHJpZXMgYXJlIHJldHVybmVkLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGFsaWFzIGVudHJpZXNcbiAgICAgKiBAY2F0ZWdvcnkgT2JqZWN0XG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIHF1ZXJ5LlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUga2V5LXZhbHVlIHBhaXJzLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBmdW5jdGlvbiBGb28oKSB7XG4gICAgICogICB0aGlzLmEgPSAxO1xuICAgICAqICAgdGhpcy5iID0gMjtcbiAgICAgKiB9XG4gICAgICpcbiAgICAgKiBGb28ucHJvdG90eXBlLmMgPSAzO1xuICAgICAqXG4gICAgICogXy50b1BhaXJzKG5ldyBGb28pO1xuICAgICAqIC8vID0+IFtbJ2EnLCAxXSwgWydiJywgMl1dIChpdGVyYXRpb24gb3JkZXIgaXMgbm90IGd1YXJhbnRlZWQpXG4gICAgICovXG4gICAgdmFyIHRvUGFpcnMgPSBjcmVhdGVUb1BhaXJzKGtleXMpO1xuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhbiBhcnJheSBvZiBvd24gYW5kIGluaGVyaXRlZCBlbnVtZXJhYmxlIHN0cmluZyBrZXllZC12YWx1ZSBwYWlyc1xuICAgICAqIGZvciBgb2JqZWN0YCB3aGljaCBjYW4gYmUgY29uc3VtZWQgYnkgYF8uZnJvbVBhaXJzYC4gSWYgYG9iamVjdGAgaXMgYSBtYXBcbiAgICAgKiBvciBzZXQsIGl0cyBlbnRyaWVzIGFyZSByZXR1cm5lZC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBhbGlhcyBlbnRyaWVzSW5cbiAgICAgKiBAY2F0ZWdvcnkgT2JqZWN0XG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIHF1ZXJ5LlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUga2V5LXZhbHVlIHBhaXJzLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBmdW5jdGlvbiBGb28oKSB7XG4gICAgICogICB0aGlzLmEgPSAxO1xuICAgICAqICAgdGhpcy5iID0gMjtcbiAgICAgKiB9XG4gICAgICpcbiAgICAgKiBGb28ucHJvdG90eXBlLmMgPSAzO1xuICAgICAqXG4gICAgICogXy50b1BhaXJzSW4obmV3IEZvbyk7XG4gICAgICogLy8gPT4gW1snYScsIDFdLCBbJ2InLCAyXSwgWydjJywgM11dIChpdGVyYXRpb24gb3JkZXIgaXMgbm90IGd1YXJhbnRlZWQpXG4gICAgICovXG4gICAgdmFyIHRvUGFpcnNJbiA9IGNyZWF0ZVRvUGFpcnMoa2V5c0luKTtcblxuICAgIC8qKlxuICAgICAqIEFuIGFsdGVybmF0aXZlIHRvIGBfLnJlZHVjZWA7IHRoaXMgbWV0aG9kIHRyYW5zZm9ybXMgYG9iamVjdGAgdG8gYSBuZXdcbiAgICAgKiBgYWNjdW11bGF0b3JgIG9iamVjdCB3aGljaCBpcyB0aGUgcmVzdWx0IG9mIHJ1bm5pbmcgZWFjaCBvZiBpdHMgb3duXG4gICAgICogZW51bWVyYWJsZSBzdHJpbmcga2V5ZWQgcHJvcGVydGllcyB0aHJ1IGBpdGVyYXRlZWAsIHdpdGggZWFjaCBpbnZvY2F0aW9uXG4gICAgICogcG90ZW50aWFsbHkgbXV0YXRpbmcgdGhlIGBhY2N1bXVsYXRvcmAgb2JqZWN0LiBJZiBgYWNjdW11bGF0b3JgIGlzIG5vdFxuICAgICAqIHByb3ZpZGVkLCBhIG5ldyBvYmplY3Qgd2l0aCB0aGUgc2FtZSBgW1tQcm90b3R5cGVdXWAgd2lsbCBiZSB1c2VkLiBUaGVcbiAgICAgKiBpdGVyYXRlZSBpcyBpbnZva2VkIHdpdGggZm91ciBhcmd1bWVudHM6IChhY2N1bXVsYXRvciwgdmFsdWUsIGtleSwgb2JqZWN0KS5cbiAgICAgKiBJdGVyYXRlZSBmdW5jdGlvbnMgbWF5IGV4aXQgaXRlcmF0aW9uIGVhcmx5IGJ5IGV4cGxpY2l0bHkgcmV0dXJuaW5nIGBmYWxzZWAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMS4zLjBcbiAgICAgKiBAY2F0ZWdvcnkgT2JqZWN0XG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIGl0ZXJhdGUgb3Zlci5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbaXRlcmF0ZWU9Xy5pZGVudGl0eV0gVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAgICAgKiBAcGFyYW0geyp9IFthY2N1bXVsYXRvcl0gVGhlIGN1c3RvbSBhY2N1bXVsYXRvciB2YWx1ZS5cbiAgICAgKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgYWNjdW11bGF0ZWQgdmFsdWUuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8udHJhbnNmb3JtKFsyLCAzLCA0XSwgZnVuY3Rpb24ocmVzdWx0LCBuKSB7XG4gICAgICogICByZXN1bHQucHVzaChuICo9IG4pO1xuICAgICAqICAgcmV0dXJuIG4gJSAyID09IDA7XG4gICAgICogfSwgW10pO1xuICAgICAqIC8vID0+IFs0LCA5XVxuICAgICAqXG4gICAgICogXy50cmFuc2Zvcm0oeyAnYSc6IDEsICdiJzogMiwgJ2MnOiAxIH0sIGZ1bmN0aW9uKHJlc3VsdCwgdmFsdWUsIGtleSkge1xuICAgICAqICAgKHJlc3VsdFt2YWx1ZV0gfHwgKHJlc3VsdFt2YWx1ZV0gPSBbXSkpLnB1c2goa2V5KTtcbiAgICAgKiB9LCB7fSk7XG4gICAgICogLy8gPT4geyAnMSc6IFsnYScsICdjJ10sICcyJzogWydiJ10gfVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHRyYW5zZm9ybShvYmplY3QsIGl0ZXJhdGVlLCBhY2N1bXVsYXRvcikge1xuICAgICAgdmFyIGlzQXJyID0gaXNBcnJheShvYmplY3QpLFxuICAgICAgICAgIGlzQXJyTGlrZSA9IGlzQXJyIHx8IGlzQnVmZmVyKG9iamVjdCkgfHwgaXNUeXBlZEFycmF5KG9iamVjdCk7XG5cbiAgICAgIGl0ZXJhdGVlID0gZ2V0SXRlcmF0ZWUoaXRlcmF0ZWUsIDQpO1xuICAgICAgaWYgKGFjY3VtdWxhdG9yID09IG51bGwpIHtcbiAgICAgICAgdmFyIEN0b3IgPSBvYmplY3QgJiYgb2JqZWN0LmNvbnN0cnVjdG9yO1xuICAgICAgICBpZiAoaXNBcnJMaWtlKSB7XG4gICAgICAgICAgYWNjdW11bGF0b3IgPSBpc0FyciA/IG5ldyBDdG9yIDogW107XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoaXNPYmplY3Qob2JqZWN0KSkge1xuICAgICAgICAgIGFjY3VtdWxhdG9yID0gaXNGdW5jdGlvbihDdG9yKSA/IGJhc2VDcmVhdGUoZ2V0UHJvdG90eXBlKG9iamVjdCkpIDoge307XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgYWNjdW11bGF0b3IgPSB7fTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgKGlzQXJyTGlrZSA/IGFycmF5RWFjaCA6IGJhc2VGb3JPd24pKG9iamVjdCwgZnVuY3Rpb24odmFsdWUsIGluZGV4LCBvYmplY3QpIHtcbiAgICAgICAgcmV0dXJuIGl0ZXJhdGVlKGFjY3VtdWxhdG9yLCB2YWx1ZSwgaW5kZXgsIG9iamVjdCk7XG4gICAgICB9KTtcbiAgICAgIHJldHVybiBhY2N1bXVsYXRvcjtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBSZW1vdmVzIHRoZSBwcm9wZXJ0eSBhdCBgcGF0aGAgb2YgYG9iamVjdGAuXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogVGhpcyBtZXRob2QgbXV0YXRlcyBgb2JqZWN0YC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBPYmplY3RcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gbW9kaWZ5LlxuICAgICAqIEBwYXJhbSB7QXJyYXl8c3RyaW5nfSBwYXRoIFRoZSBwYXRoIG9mIHRoZSBwcm9wZXJ0eSB0byB1bnNldC5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgdGhlIHByb3BlcnR5IGlzIGRlbGV0ZWQsIGVsc2UgYGZhbHNlYC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIG9iamVjdCA9IHsgJ2EnOiBbeyAnYic6IHsgJ2MnOiA3IH0gfV0gfTtcbiAgICAgKiBfLnVuc2V0KG9iamVjdCwgJ2FbMF0uYi5jJyk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogY29uc29sZS5sb2cob2JqZWN0KTtcbiAgICAgKiAvLyA9PiB7ICdhJzogW3sgJ2InOiB7fSB9XSB9O1xuICAgICAqXG4gICAgICogXy51bnNldChvYmplY3QsIFsnYScsICcwJywgJ2InLCAnYyddKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBjb25zb2xlLmxvZyhvYmplY3QpO1xuICAgICAqIC8vID0+IHsgJ2EnOiBbeyAnYic6IHt9IH1dIH07XG4gICAgICovXG4gICAgZnVuY3Rpb24gdW5zZXQob2JqZWN0LCBwYXRoKSB7XG4gICAgICByZXR1cm4gb2JqZWN0ID09IG51bGwgPyB0cnVlIDogYmFzZVVuc2V0KG9iamVjdCwgcGF0aCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgaXMgbGlrZSBgXy5zZXRgIGV4Y2VwdCB0aGF0IGFjY2VwdHMgYHVwZGF0ZXJgIHRvIHByb2R1Y2UgdGhlXG4gICAgICogdmFsdWUgdG8gc2V0LiBVc2UgYF8udXBkYXRlV2l0aGAgdG8gY3VzdG9taXplIGBwYXRoYCBjcmVhdGlvbi4gVGhlIGB1cGRhdGVyYFxuICAgICAqIGlzIGludm9rZWQgd2l0aCBvbmUgYXJndW1lbnQ6ICh2YWx1ZSkuXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogVGhpcyBtZXRob2QgbXV0YXRlcyBgb2JqZWN0YC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjYuMFxuICAgICAqIEBjYXRlZ29yeSBPYmplY3RcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gbW9kaWZ5LlxuICAgICAqIEBwYXJhbSB7QXJyYXl8c3RyaW5nfSBwYXRoIFRoZSBwYXRoIG9mIHRoZSBwcm9wZXJ0eSB0byBzZXQuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gdXBkYXRlciBUaGUgZnVuY3Rpb24gdG8gcHJvZHVjZSB0aGUgdXBkYXRlZCB2YWx1ZS5cbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIGBvYmplY3RgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgb2JqZWN0ID0geyAnYSc6IFt7ICdiJzogeyAnYyc6IDMgfSB9XSB9O1xuICAgICAqXG4gICAgICogXy51cGRhdGUob2JqZWN0LCAnYVswXS5iLmMnLCBmdW5jdGlvbihuKSB7IHJldHVybiBuICogbjsgfSk7XG4gICAgICogY29uc29sZS5sb2cob2JqZWN0LmFbMF0uYi5jKTtcbiAgICAgKiAvLyA9PiA5XG4gICAgICpcbiAgICAgKiBfLnVwZGF0ZShvYmplY3QsICd4WzBdLnkueicsIGZ1bmN0aW9uKG4pIHsgcmV0dXJuIG4gPyBuICsgMSA6IDA7IH0pO1xuICAgICAqIGNvbnNvbGUubG9nKG9iamVjdC54WzBdLnkueik7XG4gICAgICogLy8gPT4gMFxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHVwZGF0ZShvYmplY3QsIHBhdGgsIHVwZGF0ZXIpIHtcbiAgICAgIHJldHVybiBvYmplY3QgPT0gbnVsbCA/IG9iamVjdCA6IGJhc2VVcGRhdGUob2JqZWN0LCBwYXRoLCBjYXN0RnVuY3Rpb24odXBkYXRlcikpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIGlzIGxpa2UgYF8udXBkYXRlYCBleGNlcHQgdGhhdCBpdCBhY2NlcHRzIGBjdXN0b21pemVyYCB3aGljaCBpc1xuICAgICAqIGludm9rZWQgdG8gcHJvZHVjZSB0aGUgb2JqZWN0cyBvZiBgcGF0aGAuICBJZiBgY3VzdG9taXplcmAgcmV0dXJucyBgdW5kZWZpbmVkYFxuICAgICAqIHBhdGggY3JlYXRpb24gaXMgaGFuZGxlZCBieSB0aGUgbWV0aG9kIGluc3RlYWQuIFRoZSBgY3VzdG9taXplcmAgaXMgaW52b2tlZFxuICAgICAqIHdpdGggdGhyZWUgYXJndW1lbnRzOiAobnNWYWx1ZSwga2V5LCBuc09iamVjdCkuXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogVGhpcyBtZXRob2QgbXV0YXRlcyBgb2JqZWN0YC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjYuMFxuICAgICAqIEBjYXRlZ29yeSBPYmplY3RcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gbW9kaWZ5LlxuICAgICAqIEBwYXJhbSB7QXJyYXl8c3RyaW5nfSBwYXRoIFRoZSBwYXRoIG9mIHRoZSBwcm9wZXJ0eSB0byBzZXQuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gdXBkYXRlciBUaGUgZnVuY3Rpb24gdG8gcHJvZHVjZSB0aGUgdXBkYXRlZCB2YWx1ZS5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbY3VzdG9taXplcl0gVGhlIGZ1bmN0aW9uIHRvIGN1c3RvbWl6ZSBhc3NpZ25lZCB2YWx1ZXMuXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyBgb2JqZWN0YC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIG9iamVjdCA9IHt9O1xuICAgICAqXG4gICAgICogXy51cGRhdGVXaXRoKG9iamVjdCwgJ1swXVsxXScsIF8uY29uc3RhbnQoJ2EnKSwgT2JqZWN0KTtcbiAgICAgKiAvLyA9PiB7ICcwJzogeyAnMSc6ICdhJyB9IH1cbiAgICAgKi9cbiAgICBmdW5jdGlvbiB1cGRhdGVXaXRoKG9iamVjdCwgcGF0aCwgdXBkYXRlciwgY3VzdG9taXplcikge1xuICAgICAgY3VzdG9taXplciA9IHR5cGVvZiBjdXN0b21pemVyID09ICdmdW5jdGlvbicgPyBjdXN0b21pemVyIDogdW5kZWZpbmVkO1xuICAgICAgcmV0dXJuIG9iamVjdCA9PSBudWxsID8gb2JqZWN0IDogYmFzZVVwZGF0ZShvYmplY3QsIHBhdGgsIGNhc3RGdW5jdGlvbih1cGRhdGVyKSwgY3VzdG9taXplcik7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhbiBhcnJheSBvZiB0aGUgb3duIGVudW1lcmFibGUgc3RyaW5nIGtleWVkIHByb3BlcnR5IHZhbHVlcyBvZiBgb2JqZWN0YC5cbiAgICAgKlxuICAgICAqICoqTm90ZToqKiBOb24tb2JqZWN0IHZhbHVlcyBhcmUgY29lcmNlZCB0byBvYmplY3RzLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQGNhdGVnb3J5IE9iamVjdFxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBxdWVyeS5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIGFycmF5IG9mIHByb3BlcnR5IHZhbHVlcy5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogZnVuY3Rpb24gRm9vKCkge1xuICAgICAqICAgdGhpcy5hID0gMTtcbiAgICAgKiAgIHRoaXMuYiA9IDI7XG4gICAgICogfVxuICAgICAqXG4gICAgICogRm9vLnByb3RvdHlwZS5jID0gMztcbiAgICAgKlxuICAgICAqIF8udmFsdWVzKG5ldyBGb28pO1xuICAgICAqIC8vID0+IFsxLCAyXSAoaXRlcmF0aW9uIG9yZGVyIGlzIG5vdCBndWFyYW50ZWVkKVxuICAgICAqXG4gICAgICogXy52YWx1ZXMoJ2hpJyk7XG4gICAgICogLy8gPT4gWydoJywgJ2knXVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHZhbHVlcyhvYmplY3QpIHtcbiAgICAgIHJldHVybiBvYmplY3QgPT0gbnVsbCA/IFtdIDogYmFzZVZhbHVlcyhvYmplY3QsIGtleXMob2JqZWN0KSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhbiBhcnJheSBvZiB0aGUgb3duIGFuZCBpbmhlcml0ZWQgZW51bWVyYWJsZSBzdHJpbmcga2V5ZWQgcHJvcGVydHlcbiAgICAgKiB2YWx1ZXMgb2YgYG9iamVjdGAuXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogTm9uLW9iamVjdCB2YWx1ZXMgYXJlIGNvZXJjZWQgdG8gb2JqZWN0cy5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAzLjAuMFxuICAgICAqIEBjYXRlZ29yeSBPYmplY3RcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gcXVlcnkuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBhcnJheSBvZiBwcm9wZXJ0eSB2YWx1ZXMuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIGZ1bmN0aW9uIEZvbygpIHtcbiAgICAgKiAgIHRoaXMuYSA9IDE7XG4gICAgICogICB0aGlzLmIgPSAyO1xuICAgICAqIH1cbiAgICAgKlxuICAgICAqIEZvby5wcm90b3R5cGUuYyA9IDM7XG4gICAgICpcbiAgICAgKiBfLnZhbHVlc0luKG5ldyBGb28pO1xuICAgICAqIC8vID0+IFsxLCAyLCAzXSAoaXRlcmF0aW9uIG9yZGVyIGlzIG5vdCBndWFyYW50ZWVkKVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHZhbHVlc0luKG9iamVjdCkge1xuICAgICAgcmV0dXJuIG9iamVjdCA9PSBudWxsID8gW10gOiBiYXNlVmFsdWVzKG9iamVjdCwga2V5c0luKG9iamVjdCkpO1xuICAgIH1cblxuICAgIC8qLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKi9cblxuICAgIC8qKlxuICAgICAqIENsYW1wcyBgbnVtYmVyYCB3aXRoaW4gdGhlIGluY2x1c2l2ZSBgbG93ZXJgIGFuZCBgdXBwZXJgIGJvdW5kcy5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBOdW1iZXJcbiAgICAgKiBAcGFyYW0ge251bWJlcn0gbnVtYmVyIFRoZSBudW1iZXIgdG8gY2xhbXAuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFtsb3dlcl0gVGhlIGxvd2VyIGJvdW5kLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSB1cHBlciBUaGUgdXBwZXIgYm91bmQuXG4gICAgICogQHJldHVybnMge251bWJlcn0gUmV0dXJucyB0aGUgY2xhbXBlZCBudW1iZXIuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uY2xhbXAoLTEwLCAtNSwgNSk7XG4gICAgICogLy8gPT4gLTVcbiAgICAgKlxuICAgICAqIF8uY2xhbXAoMTAsIC01LCA1KTtcbiAgICAgKiAvLyA9PiA1XG4gICAgICovXG4gICAgZnVuY3Rpb24gY2xhbXAobnVtYmVyLCBsb3dlciwgdXBwZXIpIHtcbiAgICAgIGlmICh1cHBlciA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIHVwcGVyID0gbG93ZXI7XG4gICAgICAgIGxvd2VyID0gdW5kZWZpbmVkO1xuICAgICAgfVxuICAgICAgaWYgKHVwcGVyICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgdXBwZXIgPSB0b051bWJlcih1cHBlcik7XG4gICAgICAgIHVwcGVyID0gdXBwZXIgPT09IHVwcGVyID8gdXBwZXIgOiAwO1xuICAgICAgfVxuICAgICAgaWYgKGxvd2VyICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgbG93ZXIgPSB0b051bWJlcihsb3dlcik7XG4gICAgICAgIGxvd2VyID0gbG93ZXIgPT09IGxvd2VyID8gbG93ZXIgOiAwO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGJhc2VDbGFtcCh0b051bWJlcihudW1iZXIpLCBsb3dlciwgdXBwZXIpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENoZWNrcyBpZiBgbmAgaXMgYmV0d2VlbiBgc3RhcnRgIGFuZCB1cCB0bywgYnV0IG5vdCBpbmNsdWRpbmcsIGBlbmRgLiBJZlxuICAgICAqIGBlbmRgIGlzIG5vdCBzcGVjaWZpZWQsIGl0J3Mgc2V0IHRvIGBzdGFydGAgd2l0aCBgc3RhcnRgIHRoZW4gc2V0IHRvIGAwYC5cbiAgICAgKiBJZiBgc3RhcnRgIGlzIGdyZWF0ZXIgdGhhbiBgZW5kYCB0aGUgcGFyYW1zIGFyZSBzd2FwcGVkIHRvIHN1cHBvcnRcbiAgICAgKiBuZWdhdGl2ZSByYW5nZXMuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMy4zLjBcbiAgICAgKiBAY2F0ZWdvcnkgTnVtYmVyXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IG51bWJlciBUaGUgbnVtYmVyIHRvIGNoZWNrLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbc3RhcnQ9MF0gVGhlIHN0YXJ0IG9mIHRoZSByYW5nZS5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gZW5kIFRoZSBlbmQgb2YgdGhlIHJhbmdlLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgbnVtYmVyYCBpcyBpbiB0aGUgcmFuZ2UsIGVsc2UgYGZhbHNlYC5cbiAgICAgKiBAc2VlIF8ucmFuZ2UsIF8ucmFuZ2VSaWdodFxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmluUmFuZ2UoMywgMiwgNCk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogXy5pblJhbmdlKDQsIDgpO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIF8uaW5SYW5nZSg0LCAyKTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqXG4gICAgICogXy5pblJhbmdlKDIsIDIpO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICpcbiAgICAgKiBfLmluUmFuZ2UoMS4yLCAyKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBfLmluUmFuZ2UoNS4yLCA0KTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqXG4gICAgICogXy5pblJhbmdlKC0zLCAtMiwgLTYpO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBpblJhbmdlKG51bWJlciwgc3RhcnQsIGVuZCkge1xuICAgICAgc3RhcnQgPSB0b0Zpbml0ZShzdGFydCk7XG4gICAgICBpZiAoZW5kID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgZW5kID0gc3RhcnQ7XG4gICAgICAgIHN0YXJ0ID0gMDtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGVuZCA9IHRvRmluaXRlKGVuZCk7XG4gICAgICB9XG4gICAgICBudW1iZXIgPSB0b051bWJlcihudW1iZXIpO1xuICAgICAgcmV0dXJuIGJhc2VJblJhbmdlKG51bWJlciwgc3RhcnQsIGVuZCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUHJvZHVjZXMgYSByYW5kb20gbnVtYmVyIGJldHdlZW4gdGhlIGluY2x1c2l2ZSBgbG93ZXJgIGFuZCBgdXBwZXJgIGJvdW5kcy5cbiAgICAgKiBJZiBvbmx5IG9uZSBhcmd1bWVudCBpcyBwcm92aWRlZCBhIG51bWJlciBiZXR3ZWVuIGAwYCBhbmQgdGhlIGdpdmVuIG51bWJlclxuICAgICAqIGlzIHJldHVybmVkLiBJZiBgZmxvYXRpbmdgIGlzIGB0cnVlYCwgb3IgZWl0aGVyIGBsb3dlcmAgb3IgYHVwcGVyYCBhcmVcbiAgICAgKiBmbG9hdHMsIGEgZmxvYXRpbmctcG9pbnQgbnVtYmVyIGlzIHJldHVybmVkIGluc3RlYWQgb2YgYW4gaW50ZWdlci5cbiAgICAgKlxuICAgICAqICoqTm90ZToqKiBKYXZhU2NyaXB0IGZvbGxvd3MgdGhlIElFRUUtNzU0IHN0YW5kYXJkIGZvciByZXNvbHZpbmdcbiAgICAgKiBmbG9hdGluZy1wb2ludCB2YWx1ZXMgd2hpY2ggY2FuIHByb2R1Y2UgdW5leHBlY3RlZCByZXN1bHRzLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDAuNy4wXG4gICAgICogQGNhdGVnb3J5IE51bWJlclxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbbG93ZXI9MF0gVGhlIGxvd2VyIGJvdW5kLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbdXBwZXI9MV0gVGhlIHVwcGVyIGJvdW5kLlxuICAgICAqIEBwYXJhbSB7Ym9vbGVhbn0gW2Zsb2F0aW5nXSBTcGVjaWZ5IHJldHVybmluZyBhIGZsb2F0aW5nLXBvaW50IG51bWJlci5cbiAgICAgKiBAcmV0dXJucyB7bnVtYmVyfSBSZXR1cm5zIHRoZSByYW5kb20gbnVtYmVyLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLnJhbmRvbSgwLCA1KTtcbiAgICAgKiAvLyA9PiBhbiBpbnRlZ2VyIGJldHdlZW4gMCBhbmQgNVxuICAgICAqXG4gICAgICogXy5yYW5kb20oNSk7XG4gICAgICogLy8gPT4gYWxzbyBhbiBpbnRlZ2VyIGJldHdlZW4gMCBhbmQgNVxuICAgICAqXG4gICAgICogXy5yYW5kb20oNSwgdHJ1ZSk7XG4gICAgICogLy8gPT4gYSBmbG9hdGluZy1wb2ludCBudW1iZXIgYmV0d2VlbiAwIGFuZCA1XG4gICAgICpcbiAgICAgKiBfLnJhbmRvbSgxLjIsIDUuMik7XG4gICAgICogLy8gPT4gYSBmbG9hdGluZy1wb2ludCBudW1iZXIgYmV0d2VlbiAxLjIgYW5kIDUuMlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHJhbmRvbShsb3dlciwgdXBwZXIsIGZsb2F0aW5nKSB7XG4gICAgICBpZiAoZmxvYXRpbmcgJiYgdHlwZW9mIGZsb2F0aW5nICE9ICdib29sZWFuJyAmJiBpc0l0ZXJhdGVlQ2FsbChsb3dlciwgdXBwZXIsIGZsb2F0aW5nKSkge1xuICAgICAgICB1cHBlciA9IGZsb2F0aW5nID0gdW5kZWZpbmVkO1xuICAgICAgfVxuICAgICAgaWYgKGZsb2F0aW5nID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgaWYgKHR5cGVvZiB1cHBlciA9PSAnYm9vbGVhbicpIHtcbiAgICAgICAgICBmbG9hdGluZyA9IHVwcGVyO1xuICAgICAgICAgIHVwcGVyID0gdW5kZWZpbmVkO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKHR5cGVvZiBsb3dlciA9PSAnYm9vbGVhbicpIHtcbiAgICAgICAgICBmbG9hdGluZyA9IGxvd2VyO1xuICAgICAgICAgIGxvd2VyID0gdW5kZWZpbmVkO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBpZiAobG93ZXIgPT09IHVuZGVmaW5lZCAmJiB1cHBlciA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIGxvd2VyID0gMDtcbiAgICAgICAgdXBwZXIgPSAxO1xuICAgICAgfVxuICAgICAgZWxzZSB7XG4gICAgICAgIGxvd2VyID0gdG9GaW5pdGUobG93ZXIpO1xuICAgICAgICBpZiAodXBwZXIgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgIHVwcGVyID0gbG93ZXI7XG4gICAgICAgICAgbG93ZXIgPSAwO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHVwcGVyID0gdG9GaW5pdGUodXBwZXIpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBpZiAobG93ZXIgPiB1cHBlcikge1xuICAgICAgICB2YXIgdGVtcCA9IGxvd2VyO1xuICAgICAgICBsb3dlciA9IHVwcGVyO1xuICAgICAgICB1cHBlciA9IHRlbXA7XG4gICAgICB9XG4gICAgICBpZiAoZmxvYXRpbmcgfHwgbG93ZXIgJSAxIHx8IHVwcGVyICUgMSkge1xuICAgICAgICB2YXIgcmFuZCA9IG5hdGl2ZVJhbmRvbSgpO1xuICAgICAgICByZXR1cm4gbmF0aXZlTWluKGxvd2VyICsgKHJhbmQgKiAodXBwZXIgLSBsb3dlciArIGZyZWVQYXJzZUZsb2F0KCcxZS0nICsgKChyYW5kICsgJycpLmxlbmd0aCAtIDEpKSkpLCB1cHBlcik7XG4gICAgICB9XG4gICAgICByZXR1cm4gYmFzZVJhbmRvbShsb3dlciwgdXBwZXIpO1xuICAgIH1cblxuICAgIC8qLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKi9cblxuICAgIC8qKlxuICAgICAqIENvbnZlcnRzIGBzdHJpbmdgIHRvIFtjYW1lbCBjYXNlXShodHRwczovL2VuLndpa2lwZWRpYS5vcmcvd2lraS9DYW1lbENhc2UpLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDMuMC4wXG4gICAgICogQGNhdGVnb3J5IFN0cmluZ1xuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBbc3RyaW5nPScnXSBUaGUgc3RyaW5nIHRvIGNvbnZlcnQuXG4gICAgICogQHJldHVybnMge3N0cmluZ30gUmV0dXJucyB0aGUgY2FtZWwgY2FzZWQgc3RyaW5nLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmNhbWVsQ2FzZSgnRm9vIEJhcicpO1xuICAgICAqIC8vID0+ICdmb29CYXInXG4gICAgICpcbiAgICAgKiBfLmNhbWVsQ2FzZSgnLS1mb28tYmFyLS0nKTtcbiAgICAgKiAvLyA9PiAnZm9vQmFyJ1xuICAgICAqXG4gICAgICogXy5jYW1lbENhc2UoJ19fRk9PX0JBUl9fJyk7XG4gICAgICogLy8gPT4gJ2Zvb0JhcidcbiAgICAgKi9cbiAgICB2YXIgY2FtZWxDYXNlID0gY3JlYXRlQ29tcG91bmRlcihmdW5jdGlvbihyZXN1bHQsIHdvcmQsIGluZGV4KSB7XG4gICAgICB3b3JkID0gd29yZC50b0xvd2VyQ2FzZSgpO1xuICAgICAgcmV0dXJuIHJlc3VsdCArIChpbmRleCA/IGNhcGl0YWxpemUod29yZCkgOiB3b3JkKTtcbiAgICB9KTtcblxuICAgIC8qKlxuICAgICAqIENvbnZlcnRzIHRoZSBmaXJzdCBjaGFyYWN0ZXIgb2YgYHN0cmluZ2AgdG8gdXBwZXIgY2FzZSBhbmQgdGhlIHJlbWFpbmluZ1xuICAgICAqIHRvIGxvd2VyIGNhc2UuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMy4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgU3RyaW5nXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IFtzdHJpbmc9JyddIFRoZSBzdHJpbmcgdG8gY2FwaXRhbGl6ZS5cbiAgICAgKiBAcmV0dXJucyB7c3RyaW5nfSBSZXR1cm5zIHRoZSBjYXBpdGFsaXplZCBzdHJpbmcuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uY2FwaXRhbGl6ZSgnRlJFRCcpO1xuICAgICAqIC8vID0+ICdGcmVkJ1xuICAgICAqL1xuICAgIGZ1bmN0aW9uIGNhcGl0YWxpemUoc3RyaW5nKSB7XG4gICAgICByZXR1cm4gdXBwZXJGaXJzdCh0b1N0cmluZyhzdHJpbmcpLnRvTG93ZXJDYXNlKCkpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIERlYnVycnMgYHN0cmluZ2AgYnkgY29udmVydGluZ1xuICAgICAqIFtMYXRpbi0xIFN1cHBsZW1lbnRdKGh0dHBzOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL0xhdGluLTFfU3VwcGxlbWVudF8oVW5pY29kZV9ibG9jaykjQ2hhcmFjdGVyX3RhYmxlKVxuICAgICAqIGFuZCBbTGF0aW4gRXh0ZW5kZWQtQV0oaHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvTGF0aW5fRXh0ZW5kZWQtQSlcbiAgICAgKiBsZXR0ZXJzIHRvIGJhc2ljIExhdGluIGxldHRlcnMgYW5kIHJlbW92aW5nXG4gICAgICogW2NvbWJpbmluZyBkaWFjcml0aWNhbCBtYXJrc10oaHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvQ29tYmluaW5nX0RpYWNyaXRpY2FsX01hcmtzKS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAzLjAuMFxuICAgICAqIEBjYXRlZ29yeSBTdHJpbmdcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gW3N0cmluZz0nJ10gVGhlIHN0cmluZyB0byBkZWJ1cnIuXG4gICAgICogQHJldHVybnMge3N0cmluZ30gUmV0dXJucyB0aGUgZGVidXJyZWQgc3RyaW5nLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmRlYnVycignZMOpasOgIHZ1Jyk7XG4gICAgICogLy8gPT4gJ2RlamEgdnUnXG4gICAgICovXG4gICAgZnVuY3Rpb24gZGVidXJyKHN0cmluZykge1xuICAgICAgc3RyaW5nID0gdG9TdHJpbmcoc3RyaW5nKTtcbiAgICAgIHJldHVybiBzdHJpbmcgJiYgc3RyaW5nLnJlcGxhY2UocmVMYXRpbiwgZGVidXJyTGV0dGVyKS5yZXBsYWNlKHJlQ29tYm9NYXJrLCAnJyk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ2hlY2tzIGlmIGBzdHJpbmdgIGVuZHMgd2l0aCB0aGUgZ2l2ZW4gdGFyZ2V0IHN0cmluZy5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAzLjAuMFxuICAgICAqIEBjYXRlZ29yeSBTdHJpbmdcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gW3N0cmluZz0nJ10gVGhlIHN0cmluZyB0byBpbnNwZWN0LlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBbdGFyZ2V0XSBUaGUgc3RyaW5nIHRvIHNlYXJjaCBmb3IuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFtwb3NpdGlvbj1zdHJpbmcubGVuZ3RoXSBUaGUgcG9zaXRpb24gdG8gc2VhcmNoIHVwIHRvLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgc3RyaW5nYCBlbmRzIHdpdGggYHRhcmdldGAsXG4gICAgICogIGVsc2UgYGZhbHNlYC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5lbmRzV2l0aCgnYWJjJywgJ2MnKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBfLmVuZHNXaXRoKCdhYmMnLCAnYicpO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICpcbiAgICAgKiBfLmVuZHNXaXRoKCdhYmMnLCAnYicsIDIpO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBlbmRzV2l0aChzdHJpbmcsIHRhcmdldCwgcG9zaXRpb24pIHtcbiAgICAgIHN0cmluZyA9IHRvU3RyaW5nKHN0cmluZyk7XG4gICAgICB0YXJnZXQgPSBiYXNlVG9TdHJpbmcodGFyZ2V0KTtcblxuICAgICAgdmFyIGxlbmd0aCA9IHN0cmluZy5sZW5ndGg7XG4gICAgICBwb3NpdGlvbiA9IHBvc2l0aW9uID09PSB1bmRlZmluZWRcbiAgICAgICAgPyBsZW5ndGhcbiAgICAgICAgOiBiYXNlQ2xhbXAodG9JbnRlZ2VyKHBvc2l0aW9uKSwgMCwgbGVuZ3RoKTtcblxuICAgICAgdmFyIGVuZCA9IHBvc2l0aW9uO1xuICAgICAgcG9zaXRpb24gLT0gdGFyZ2V0Lmxlbmd0aDtcbiAgICAgIHJldHVybiBwb3NpdGlvbiA+PSAwICYmIHN0cmluZy5zbGljZShwb3NpdGlvbiwgZW5kKSA9PSB0YXJnZXQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ29udmVydHMgdGhlIGNoYXJhY3RlcnMgXCImXCIsIFwiPFwiLCBcIj5cIiwgJ1wiJywgYW5kIFwiJ1wiIGluIGBzdHJpbmdgIHRvIHRoZWlyXG4gICAgICogY29ycmVzcG9uZGluZyBIVE1MIGVudGl0aWVzLlxuICAgICAqXG4gICAgICogKipOb3RlOioqIE5vIG90aGVyIGNoYXJhY3RlcnMgYXJlIGVzY2FwZWQuIFRvIGVzY2FwZSBhZGRpdGlvbmFsXG4gICAgICogY2hhcmFjdGVycyB1c2UgYSB0aGlyZC1wYXJ0eSBsaWJyYXJ5IGxpa2UgW19oZV9dKGh0dHBzOi8vbXRocy5iZS9oZSkuXG4gICAgICpcbiAgICAgKiBUaG91Z2ggdGhlIFwiPlwiIGNoYXJhY3RlciBpcyBlc2NhcGVkIGZvciBzeW1tZXRyeSwgY2hhcmFjdGVycyBsaWtlXG4gICAgICogXCI+XCIgYW5kIFwiL1wiIGRvbid0IG5lZWQgZXNjYXBpbmcgaW4gSFRNTCBhbmQgaGF2ZSBubyBzcGVjaWFsIG1lYW5pbmdcbiAgICAgKiB1bmxlc3MgdGhleSdyZSBwYXJ0IG9mIGEgdGFnIG9yIHVucXVvdGVkIGF0dHJpYnV0ZSB2YWx1ZS4gU2VlXG4gICAgICogW01hdGhpYXMgQnluZW5zJ3MgYXJ0aWNsZV0oaHR0cHM6Ly9tYXRoaWFzYnluZW5zLmJlL25vdGVzL2FtYmlndW91cy1hbXBlcnNhbmRzKVxuICAgICAqICh1bmRlciBcInNlbWktcmVsYXRlZCBmdW4gZmFjdFwiKSBmb3IgbW9yZSBkZXRhaWxzLlxuICAgICAqXG4gICAgICogV2hlbiB3b3JraW5nIHdpdGggSFRNTCB5b3Ugc2hvdWxkIGFsd2F5c1xuICAgICAqIFtxdW90ZSBhdHRyaWJ1dGUgdmFsdWVzXShodHRwOi8vd29ua28uY29tL3Bvc3QvaHRtbC1lc2NhcGluZykgdG8gcmVkdWNlXG4gICAgICogWFNTIHZlY3RvcnMuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQHNpbmNlIDAuMS4wXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAY2F0ZWdvcnkgU3RyaW5nXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IFtzdHJpbmc9JyddIFRoZSBzdHJpbmcgdG8gZXNjYXBlLlxuICAgICAqIEByZXR1cm5zIHtzdHJpbmd9IFJldHVybnMgdGhlIGVzY2FwZWQgc3RyaW5nLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmVzY2FwZSgnZnJlZCwgYmFybmV5LCAmIHBlYmJsZXMnKTtcbiAgICAgKiAvLyA9PiAnZnJlZCwgYmFybmV5LCAmYW1wOyBwZWJibGVzJ1xuICAgICAqL1xuICAgIGZ1bmN0aW9uIGVzY2FwZShzdHJpbmcpIHtcbiAgICAgIHN0cmluZyA9IHRvU3RyaW5nKHN0cmluZyk7XG4gICAgICByZXR1cm4gKHN0cmluZyAmJiByZUhhc1VuZXNjYXBlZEh0bWwudGVzdChzdHJpbmcpKVxuICAgICAgICA/IHN0cmluZy5yZXBsYWNlKHJlVW5lc2NhcGVkSHRtbCwgZXNjYXBlSHRtbENoYXIpXG4gICAgICAgIDogc3RyaW5nO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEVzY2FwZXMgdGhlIGBSZWdFeHBgIHNwZWNpYWwgY2hhcmFjdGVycyBcIl5cIiwgXCIkXCIsIFwiXFxcIiwgXCIuXCIsIFwiKlwiLCBcIitcIixcbiAgICAgKiBcIj9cIiwgXCIoXCIsIFwiKVwiLCBcIltcIiwgXCJdXCIsIFwie1wiLCBcIn1cIiwgYW5kIFwifFwiIGluIGBzdHJpbmdgLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDMuMC4wXG4gICAgICogQGNhdGVnb3J5IFN0cmluZ1xuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBbc3RyaW5nPScnXSBUaGUgc3RyaW5nIHRvIGVzY2FwZS5cbiAgICAgKiBAcmV0dXJucyB7c3RyaW5nfSBSZXR1cm5zIHRoZSBlc2NhcGVkIHN0cmluZy5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5lc2NhcGVSZWdFeHAoJ1tsb2Rhc2hdKGh0dHBzOi8vbG9kYXNoLmNvbS8pJyk7XG4gICAgICogLy8gPT4gJ1xcW2xvZGFzaFxcXVxcKGh0dHBzOi8vbG9kYXNoXFwuY29tL1xcKSdcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBlc2NhcGVSZWdFeHAoc3RyaW5nKSB7XG4gICAgICBzdHJpbmcgPSB0b1N0cmluZyhzdHJpbmcpO1xuICAgICAgcmV0dXJuIChzdHJpbmcgJiYgcmVIYXNSZWdFeHBDaGFyLnRlc3Qoc3RyaW5nKSlcbiAgICAgICAgPyBzdHJpbmcucmVwbGFjZShyZVJlZ0V4cENoYXIsICdcXFxcJCYnKVxuICAgICAgICA6IHN0cmluZztcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDb252ZXJ0cyBgc3RyaW5nYCB0b1xuICAgICAqIFtrZWJhYiBjYXNlXShodHRwczovL2VuLndpa2lwZWRpYS5vcmcvd2lraS9MZXR0ZXJfY2FzZSNTcGVjaWFsX2Nhc2Vfc3R5bGVzKS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAzLjAuMFxuICAgICAqIEBjYXRlZ29yeSBTdHJpbmdcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gW3N0cmluZz0nJ10gVGhlIHN0cmluZyB0byBjb252ZXJ0LlxuICAgICAqIEByZXR1cm5zIHtzdHJpbmd9IFJldHVybnMgdGhlIGtlYmFiIGNhc2VkIHN0cmluZy5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5rZWJhYkNhc2UoJ0ZvbyBCYXInKTtcbiAgICAgKiAvLyA9PiAnZm9vLWJhcidcbiAgICAgKlxuICAgICAqIF8ua2ViYWJDYXNlKCdmb29CYXInKTtcbiAgICAgKiAvLyA9PiAnZm9vLWJhcidcbiAgICAgKlxuICAgICAqIF8ua2ViYWJDYXNlKCdfX0ZPT19CQVJfXycpO1xuICAgICAqIC8vID0+ICdmb28tYmFyJ1xuICAgICAqL1xuICAgIHZhciBrZWJhYkNhc2UgPSBjcmVhdGVDb21wb3VuZGVyKGZ1bmN0aW9uKHJlc3VsdCwgd29yZCwgaW5kZXgpIHtcbiAgICAgIHJldHVybiByZXN1bHQgKyAoaW5kZXggPyAnLScgOiAnJykgKyB3b3JkLnRvTG93ZXJDYXNlKCk7XG4gICAgfSk7XG5cbiAgICAvKipcbiAgICAgKiBDb252ZXJ0cyBgc3RyaW5nYCwgYXMgc3BhY2Ugc2VwYXJhdGVkIHdvcmRzLCB0byBsb3dlciBjYXNlLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IFN0cmluZ1xuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBbc3RyaW5nPScnXSBUaGUgc3RyaW5nIHRvIGNvbnZlcnQuXG4gICAgICogQHJldHVybnMge3N0cmluZ30gUmV0dXJucyB0aGUgbG93ZXIgY2FzZWQgc3RyaW5nLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmxvd2VyQ2FzZSgnLS1Gb28tQmFyLS0nKTtcbiAgICAgKiAvLyA9PiAnZm9vIGJhcidcbiAgICAgKlxuICAgICAqIF8ubG93ZXJDYXNlKCdmb29CYXInKTtcbiAgICAgKiAvLyA9PiAnZm9vIGJhcidcbiAgICAgKlxuICAgICAqIF8ubG93ZXJDYXNlKCdfX0ZPT19CQVJfXycpO1xuICAgICAqIC8vID0+ICdmb28gYmFyJ1xuICAgICAqL1xuICAgIHZhciBsb3dlckNhc2UgPSBjcmVhdGVDb21wb3VuZGVyKGZ1bmN0aW9uKHJlc3VsdCwgd29yZCwgaW5kZXgpIHtcbiAgICAgIHJldHVybiByZXN1bHQgKyAoaW5kZXggPyAnICcgOiAnJykgKyB3b3JkLnRvTG93ZXJDYXNlKCk7XG4gICAgfSk7XG5cbiAgICAvKipcbiAgICAgKiBDb252ZXJ0cyB0aGUgZmlyc3QgY2hhcmFjdGVyIG9mIGBzdHJpbmdgIHRvIGxvd2VyIGNhc2UuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgU3RyaW5nXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IFtzdHJpbmc9JyddIFRoZSBzdHJpbmcgdG8gY29udmVydC5cbiAgICAgKiBAcmV0dXJucyB7c3RyaW5nfSBSZXR1cm5zIHRoZSBjb252ZXJ0ZWQgc3RyaW5nLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmxvd2VyRmlyc3QoJ0ZyZWQnKTtcbiAgICAgKiAvLyA9PiAnZnJlZCdcbiAgICAgKlxuICAgICAqIF8ubG93ZXJGaXJzdCgnRlJFRCcpO1xuICAgICAqIC8vID0+ICdmUkVEJ1xuICAgICAqL1xuICAgIHZhciBsb3dlckZpcnN0ID0gY3JlYXRlQ2FzZUZpcnN0KCd0b0xvd2VyQ2FzZScpO1xuXG4gICAgLyoqXG4gICAgICogUGFkcyBgc3RyaW5nYCBvbiB0aGUgbGVmdCBhbmQgcmlnaHQgc2lkZXMgaWYgaXQncyBzaG9ydGVyIHRoYW4gYGxlbmd0aGAuXG4gICAgICogUGFkZGluZyBjaGFyYWN0ZXJzIGFyZSB0cnVuY2F0ZWQgaWYgdGhleSBjYW4ndCBiZSBldmVubHkgZGl2aWRlZCBieSBgbGVuZ3RoYC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAzLjAuMFxuICAgICAqIEBjYXRlZ29yeSBTdHJpbmdcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gW3N0cmluZz0nJ10gVGhlIHN0cmluZyB0byBwYWQuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFtsZW5ndGg9MF0gVGhlIHBhZGRpbmcgbGVuZ3RoLlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBbY2hhcnM9JyAnXSBUaGUgc3RyaW5nIHVzZWQgYXMgcGFkZGluZy5cbiAgICAgKiBAcmV0dXJucyB7c3RyaW5nfSBSZXR1cm5zIHRoZSBwYWRkZWQgc3RyaW5nLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLnBhZCgnYWJjJywgOCk7XG4gICAgICogLy8gPT4gJyAgYWJjICAgJ1xuICAgICAqXG4gICAgICogXy5wYWQoJ2FiYycsIDgsICdfLScpO1xuICAgICAqIC8vID0+ICdfLWFiY18tXydcbiAgICAgKlxuICAgICAqIF8ucGFkKCdhYmMnLCAzKTtcbiAgICAgKiAvLyA9PiAnYWJjJ1xuICAgICAqL1xuICAgIGZ1bmN0aW9uIHBhZChzdHJpbmcsIGxlbmd0aCwgY2hhcnMpIHtcbiAgICAgIHN0cmluZyA9IHRvU3RyaW5nKHN0cmluZyk7XG4gICAgICBsZW5ndGggPSB0b0ludGVnZXIobGVuZ3RoKTtcblxuICAgICAgdmFyIHN0ckxlbmd0aCA9IGxlbmd0aCA/IHN0cmluZ1NpemUoc3RyaW5nKSA6IDA7XG4gICAgICBpZiAoIWxlbmd0aCB8fCBzdHJMZW5ndGggPj0gbGVuZ3RoKSB7XG4gICAgICAgIHJldHVybiBzdHJpbmc7XG4gICAgICB9XG4gICAgICB2YXIgbWlkID0gKGxlbmd0aCAtIHN0ckxlbmd0aCkgLyAyO1xuICAgICAgcmV0dXJuIChcbiAgICAgICAgY3JlYXRlUGFkZGluZyhuYXRpdmVGbG9vcihtaWQpLCBjaGFycykgK1xuICAgICAgICBzdHJpbmcgK1xuICAgICAgICBjcmVhdGVQYWRkaW5nKG5hdGl2ZUNlaWwobWlkKSwgY2hhcnMpXG4gICAgICApO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFBhZHMgYHN0cmluZ2Agb24gdGhlIHJpZ2h0IHNpZGUgaWYgaXQncyBzaG9ydGVyIHRoYW4gYGxlbmd0aGAuIFBhZGRpbmdcbiAgICAgKiBjaGFyYWN0ZXJzIGFyZSB0cnVuY2F0ZWQgaWYgdGhleSBleGNlZWQgYGxlbmd0aGAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgU3RyaW5nXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IFtzdHJpbmc9JyddIFRoZSBzdHJpbmcgdG8gcGFkLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbbGVuZ3RoPTBdIFRoZSBwYWRkaW5nIGxlbmd0aC5cbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gW2NoYXJzPScgJ10gVGhlIHN0cmluZyB1c2VkIGFzIHBhZGRpbmcuXG4gICAgICogQHJldHVybnMge3N0cmluZ30gUmV0dXJucyB0aGUgcGFkZGVkIHN0cmluZy5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5wYWRFbmQoJ2FiYycsIDYpO1xuICAgICAqIC8vID0+ICdhYmMgICAnXG4gICAgICpcbiAgICAgKiBfLnBhZEVuZCgnYWJjJywgNiwgJ18tJyk7XG4gICAgICogLy8gPT4gJ2FiY18tXydcbiAgICAgKlxuICAgICAqIF8ucGFkRW5kKCdhYmMnLCAzKTtcbiAgICAgKiAvLyA9PiAnYWJjJ1xuICAgICAqL1xuICAgIGZ1bmN0aW9uIHBhZEVuZChzdHJpbmcsIGxlbmd0aCwgY2hhcnMpIHtcbiAgICAgIHN0cmluZyA9IHRvU3RyaW5nKHN0cmluZyk7XG4gICAgICBsZW5ndGggPSB0b0ludGVnZXIobGVuZ3RoKTtcblxuICAgICAgdmFyIHN0ckxlbmd0aCA9IGxlbmd0aCA/IHN0cmluZ1NpemUoc3RyaW5nKSA6IDA7XG4gICAgICByZXR1cm4gKGxlbmd0aCAmJiBzdHJMZW5ndGggPCBsZW5ndGgpXG4gICAgICAgID8gKHN0cmluZyArIGNyZWF0ZVBhZGRpbmcobGVuZ3RoIC0gc3RyTGVuZ3RoLCBjaGFycykpXG4gICAgICAgIDogc3RyaW5nO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFBhZHMgYHN0cmluZ2Agb24gdGhlIGxlZnQgc2lkZSBpZiBpdCdzIHNob3J0ZXIgdGhhbiBgbGVuZ3RoYC4gUGFkZGluZ1xuICAgICAqIGNoYXJhY3RlcnMgYXJlIHRydW5jYXRlZCBpZiB0aGV5IGV4Y2VlZCBgbGVuZ3RoYC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBTdHJpbmdcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gW3N0cmluZz0nJ10gVGhlIHN0cmluZyB0byBwYWQuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFtsZW5ndGg9MF0gVGhlIHBhZGRpbmcgbGVuZ3RoLlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBbY2hhcnM9JyAnXSBUaGUgc3RyaW5nIHVzZWQgYXMgcGFkZGluZy5cbiAgICAgKiBAcmV0dXJucyB7c3RyaW5nfSBSZXR1cm5zIHRoZSBwYWRkZWQgc3RyaW5nLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLnBhZFN0YXJ0KCdhYmMnLCA2KTtcbiAgICAgKiAvLyA9PiAnICAgYWJjJ1xuICAgICAqXG4gICAgICogXy5wYWRTdGFydCgnYWJjJywgNiwgJ18tJyk7XG4gICAgICogLy8gPT4gJ18tX2FiYydcbiAgICAgKlxuICAgICAqIF8ucGFkU3RhcnQoJ2FiYycsIDMpO1xuICAgICAqIC8vID0+ICdhYmMnXG4gICAgICovXG4gICAgZnVuY3Rpb24gcGFkU3RhcnQoc3RyaW5nLCBsZW5ndGgsIGNoYXJzKSB7XG4gICAgICBzdHJpbmcgPSB0b1N0cmluZyhzdHJpbmcpO1xuICAgICAgbGVuZ3RoID0gdG9JbnRlZ2VyKGxlbmd0aCk7XG5cbiAgICAgIHZhciBzdHJMZW5ndGggPSBsZW5ndGggPyBzdHJpbmdTaXplKHN0cmluZykgOiAwO1xuICAgICAgcmV0dXJuIChsZW5ndGggJiYgc3RyTGVuZ3RoIDwgbGVuZ3RoKVxuICAgICAgICA/IChjcmVhdGVQYWRkaW5nKGxlbmd0aCAtIHN0ckxlbmd0aCwgY2hhcnMpICsgc3RyaW5nKVxuICAgICAgICA6IHN0cmluZztcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDb252ZXJ0cyBgc3RyaW5nYCB0byBhbiBpbnRlZ2VyIG9mIHRoZSBzcGVjaWZpZWQgcmFkaXguIElmIGByYWRpeGAgaXNcbiAgICAgKiBgdW5kZWZpbmVkYCBvciBgMGAsIGEgYHJhZGl4YCBvZiBgMTBgIGlzIHVzZWQgdW5sZXNzIGB2YWx1ZWAgaXMgYVxuICAgICAqIGhleGFkZWNpbWFsLCBpbiB3aGljaCBjYXNlIGEgYHJhZGl4YCBvZiBgMTZgIGlzIHVzZWQuXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogVGhpcyBtZXRob2QgYWxpZ25zIHdpdGggdGhlXG4gICAgICogW0VTNSBpbXBsZW1lbnRhdGlvbl0oaHR0cHM6Ly9lczUuZ2l0aHViLmlvLyN4MTUuMS4yLjIpIG9mIGBwYXJzZUludGAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMS4xLjBcbiAgICAgKiBAY2F0ZWdvcnkgU3RyaW5nXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IHN0cmluZyBUaGUgc3RyaW5nIHRvIGNvbnZlcnQuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFtyYWRpeD0xMF0gVGhlIHJhZGl4IHRvIGludGVycHJldCBgdmFsdWVgIGJ5LlxuICAgICAqIEBwYXJhbS0ge09iamVjdH0gW2d1YXJkXSBFbmFibGVzIHVzZSBhcyBhbiBpdGVyYXRlZSBmb3IgbWV0aG9kcyBsaWtlIGBfLm1hcGAuXG4gICAgICogQHJldHVybnMge251bWJlcn0gUmV0dXJucyB0aGUgY29udmVydGVkIGludGVnZXIuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8ucGFyc2VJbnQoJzA4Jyk7XG4gICAgICogLy8gPT4gOFxuICAgICAqXG4gICAgICogXy5tYXAoWyc2JywgJzA4JywgJzEwJ10sIF8ucGFyc2VJbnQpO1xuICAgICAqIC8vID0+IFs2LCA4LCAxMF1cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBwYXJzZUludChzdHJpbmcsIHJhZGl4LCBndWFyZCkge1xuICAgICAgaWYgKGd1YXJkIHx8IHJhZGl4ID09IG51bGwpIHtcbiAgICAgICAgcmFkaXggPSAwO1xuICAgICAgfSBlbHNlIGlmIChyYWRpeCkge1xuICAgICAgICByYWRpeCA9ICtyYWRpeDtcbiAgICAgIH1cbiAgICAgIHJldHVybiBuYXRpdmVQYXJzZUludCh0b1N0cmluZyhzdHJpbmcpLnJlcGxhY2UocmVUcmltU3RhcnQsICcnKSwgcmFkaXggfHwgMCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUmVwZWF0cyB0aGUgZ2l2ZW4gc3RyaW5nIGBuYCB0aW1lcy5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAzLjAuMFxuICAgICAqIEBjYXRlZ29yeSBTdHJpbmdcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gW3N0cmluZz0nJ10gVGhlIHN0cmluZyB0byByZXBlYXQuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFtuPTFdIFRoZSBudW1iZXIgb2YgdGltZXMgdG8gcmVwZWF0IHRoZSBzdHJpbmcuXG4gICAgICogQHBhcmFtLSB7T2JqZWN0fSBbZ3VhcmRdIEVuYWJsZXMgdXNlIGFzIGFuIGl0ZXJhdGVlIGZvciBtZXRob2RzIGxpa2UgYF8ubWFwYC5cbiAgICAgKiBAcmV0dXJucyB7c3RyaW5nfSBSZXR1cm5zIHRoZSByZXBlYXRlZCBzdHJpbmcuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8ucmVwZWF0KCcqJywgMyk7XG4gICAgICogLy8gPT4gJyoqKidcbiAgICAgKlxuICAgICAqIF8ucmVwZWF0KCdhYmMnLCAyKTtcbiAgICAgKiAvLyA9PiAnYWJjYWJjJ1xuICAgICAqXG4gICAgICogXy5yZXBlYXQoJ2FiYycsIDApO1xuICAgICAqIC8vID0+ICcnXG4gICAgICovXG4gICAgZnVuY3Rpb24gcmVwZWF0KHN0cmluZywgbiwgZ3VhcmQpIHtcbiAgICAgIGlmICgoZ3VhcmQgPyBpc0l0ZXJhdGVlQ2FsbChzdHJpbmcsIG4sIGd1YXJkKSA6IG4gPT09IHVuZGVmaW5lZCkpIHtcbiAgICAgICAgbiA9IDE7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBuID0gdG9JbnRlZ2VyKG4pO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGJhc2VSZXBlYXQodG9TdHJpbmcoc3RyaW5nKSwgbik7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUmVwbGFjZXMgbWF0Y2hlcyBmb3IgYHBhdHRlcm5gIGluIGBzdHJpbmdgIHdpdGggYHJlcGxhY2VtZW50YC5cbiAgICAgKlxuICAgICAqICoqTm90ZToqKiBUaGlzIG1ldGhvZCBpcyBiYXNlZCBvblxuICAgICAqIFtgU3RyaW5nI3JlcGxhY2VgXShodHRwczovL21kbi5pby9TdHJpbmcvcmVwbGFjZSkuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgU3RyaW5nXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IFtzdHJpbmc9JyddIFRoZSBzdHJpbmcgdG8gbW9kaWZ5LlxuICAgICAqIEBwYXJhbSB7UmVnRXhwfHN0cmluZ30gcGF0dGVybiBUaGUgcGF0dGVybiB0byByZXBsYWNlLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb258c3RyaW5nfSByZXBsYWNlbWVudCBUaGUgbWF0Y2ggcmVwbGFjZW1lbnQuXG4gICAgICogQHJldHVybnMge3N0cmluZ30gUmV0dXJucyB0aGUgbW9kaWZpZWQgc3RyaW5nLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLnJlcGxhY2UoJ0hpIEZyZWQnLCAnRnJlZCcsICdCYXJuZXknKTtcbiAgICAgKiAvLyA9PiAnSGkgQmFybmV5J1xuICAgICAqL1xuICAgIGZ1bmN0aW9uIHJlcGxhY2UoKSB7XG4gICAgICB2YXIgYXJncyA9IGFyZ3VtZW50cyxcbiAgICAgICAgICBzdHJpbmcgPSB0b1N0cmluZyhhcmdzWzBdKTtcblxuICAgICAgcmV0dXJuIGFyZ3MubGVuZ3RoIDwgMyA/IHN0cmluZyA6IHN0cmluZy5yZXBsYWNlKGFyZ3NbMV0sIGFyZ3NbMl0pO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENvbnZlcnRzIGBzdHJpbmdgIHRvXG4gICAgICogW3NuYWtlIGNhc2VdKGh0dHBzOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL1NuYWtlX2Nhc2UpLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDMuMC4wXG4gICAgICogQGNhdGVnb3J5IFN0cmluZ1xuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBbc3RyaW5nPScnXSBUaGUgc3RyaW5nIHRvIGNvbnZlcnQuXG4gICAgICogQHJldHVybnMge3N0cmluZ30gUmV0dXJucyB0aGUgc25ha2UgY2FzZWQgc3RyaW5nLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLnNuYWtlQ2FzZSgnRm9vIEJhcicpO1xuICAgICAqIC8vID0+ICdmb29fYmFyJ1xuICAgICAqXG4gICAgICogXy5zbmFrZUNhc2UoJ2Zvb0JhcicpO1xuICAgICAqIC8vID0+ICdmb29fYmFyJ1xuICAgICAqXG4gICAgICogXy5zbmFrZUNhc2UoJy0tRk9PLUJBUi0tJyk7XG4gICAgICogLy8gPT4gJ2Zvb19iYXInXG4gICAgICovXG4gICAgdmFyIHNuYWtlQ2FzZSA9IGNyZWF0ZUNvbXBvdW5kZXIoZnVuY3Rpb24ocmVzdWx0LCB3b3JkLCBpbmRleCkge1xuICAgICAgcmV0dXJuIHJlc3VsdCArIChpbmRleCA/ICdfJyA6ICcnKSArIHdvcmQudG9Mb3dlckNhc2UoKTtcbiAgICB9KTtcblxuICAgIC8qKlxuICAgICAqIFNwbGl0cyBgc3RyaW5nYCBieSBgc2VwYXJhdG9yYC5cbiAgICAgKlxuICAgICAqICoqTm90ZToqKiBUaGlzIG1ldGhvZCBpcyBiYXNlZCBvblxuICAgICAqIFtgU3RyaW5nI3NwbGl0YF0oaHR0cHM6Ly9tZG4uaW8vU3RyaW5nL3NwbGl0KS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBTdHJpbmdcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gW3N0cmluZz0nJ10gVGhlIHN0cmluZyB0byBzcGxpdC5cbiAgICAgKiBAcGFyYW0ge1JlZ0V4cHxzdHJpbmd9IHNlcGFyYXRvciBUaGUgc2VwYXJhdG9yIHBhdHRlcm4gdG8gc3BsaXQgYnkuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFtsaW1pdF0gVGhlIGxlbmd0aCB0byB0cnVuY2F0ZSByZXN1bHRzIHRvLlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgc3RyaW5nIHNlZ21lbnRzLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLnNwbGl0KCdhLWItYycsICctJywgMik7XG4gICAgICogLy8gPT4gWydhJywgJ2InXVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHNwbGl0KHN0cmluZywgc2VwYXJhdG9yLCBsaW1pdCkge1xuICAgICAgaWYgKGxpbWl0ICYmIHR5cGVvZiBsaW1pdCAhPSAnbnVtYmVyJyAmJiBpc0l0ZXJhdGVlQ2FsbChzdHJpbmcsIHNlcGFyYXRvciwgbGltaXQpKSB7XG4gICAgICAgIHNlcGFyYXRvciA9IGxpbWl0ID0gdW5kZWZpbmVkO1xuICAgICAgfVxuICAgICAgbGltaXQgPSBsaW1pdCA9PT0gdW5kZWZpbmVkID8gTUFYX0FSUkFZX0xFTkdUSCA6IGxpbWl0ID4+PiAwO1xuICAgICAgaWYgKCFsaW1pdCkge1xuICAgICAgICByZXR1cm4gW107XG4gICAgICB9XG4gICAgICBzdHJpbmcgPSB0b1N0cmluZyhzdHJpbmcpO1xuICAgICAgaWYgKHN0cmluZyAmJiAoXG4gICAgICAgICAgICB0eXBlb2Ygc2VwYXJhdG9yID09ICdzdHJpbmcnIHx8XG4gICAgICAgICAgICAoc2VwYXJhdG9yICE9IG51bGwgJiYgIWlzUmVnRXhwKHNlcGFyYXRvcikpXG4gICAgICAgICAgKSkge1xuICAgICAgICBzZXBhcmF0b3IgPSBiYXNlVG9TdHJpbmcoc2VwYXJhdG9yKTtcbiAgICAgICAgaWYgKCFzZXBhcmF0b3IgJiYgaGFzVW5pY29kZShzdHJpbmcpKSB7XG4gICAgICAgICAgcmV0dXJuIGNhc3RTbGljZShzdHJpbmdUb0FycmF5KHN0cmluZyksIDAsIGxpbWl0KTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIHN0cmluZy5zcGxpdChzZXBhcmF0b3IsIGxpbWl0KTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDb252ZXJ0cyBgc3RyaW5nYCB0b1xuICAgICAqIFtzdGFydCBjYXNlXShodHRwczovL2VuLndpa2lwZWRpYS5vcmcvd2lraS9MZXR0ZXJfY2FzZSNTdHlsaXN0aWNfb3Jfc3BlY2lhbGlzZWRfdXNhZ2UpLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDMuMS4wXG4gICAgICogQGNhdGVnb3J5IFN0cmluZ1xuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBbc3RyaW5nPScnXSBUaGUgc3RyaW5nIHRvIGNvbnZlcnQuXG4gICAgICogQHJldHVybnMge3N0cmluZ30gUmV0dXJucyB0aGUgc3RhcnQgY2FzZWQgc3RyaW5nLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLnN0YXJ0Q2FzZSgnLS1mb28tYmFyLS0nKTtcbiAgICAgKiAvLyA9PiAnRm9vIEJhcidcbiAgICAgKlxuICAgICAqIF8uc3RhcnRDYXNlKCdmb29CYXInKTtcbiAgICAgKiAvLyA9PiAnRm9vIEJhcidcbiAgICAgKlxuICAgICAqIF8uc3RhcnRDYXNlKCdfX0ZPT19CQVJfXycpO1xuICAgICAqIC8vID0+ICdGT08gQkFSJ1xuICAgICAqL1xuICAgIHZhciBzdGFydENhc2UgPSBjcmVhdGVDb21wb3VuZGVyKGZ1bmN0aW9uKHJlc3VsdCwgd29yZCwgaW5kZXgpIHtcbiAgICAgIHJldHVybiByZXN1bHQgKyAoaW5kZXggPyAnICcgOiAnJykgKyB1cHBlckZpcnN0KHdvcmQpO1xuICAgIH0pO1xuXG4gICAgLyoqXG4gICAgICogQ2hlY2tzIGlmIGBzdHJpbmdgIHN0YXJ0cyB3aXRoIHRoZSBnaXZlbiB0YXJnZXQgc3RyaW5nLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDMuMC4wXG4gICAgICogQGNhdGVnb3J5IFN0cmluZ1xuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBbc3RyaW5nPScnXSBUaGUgc3RyaW5nIHRvIGluc3BlY3QuXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IFt0YXJnZXRdIFRoZSBzdHJpbmcgdG8gc2VhcmNoIGZvci5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW3Bvc2l0aW9uPTBdIFRoZSBwb3NpdGlvbiB0byBzZWFyY2ggZnJvbS5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHN0cmluZ2Agc3RhcnRzIHdpdGggYHRhcmdldGAsXG4gICAgICogIGVsc2UgYGZhbHNlYC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5zdGFydHNXaXRoKCdhYmMnLCAnYScpO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIF8uc3RhcnRzV2l0aCgnYWJjJywgJ2InKTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqXG4gICAgICogXy5zdGFydHNXaXRoKCdhYmMnLCAnYicsIDEpO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBzdGFydHNXaXRoKHN0cmluZywgdGFyZ2V0LCBwb3NpdGlvbikge1xuICAgICAgc3RyaW5nID0gdG9TdHJpbmcoc3RyaW5nKTtcbiAgICAgIHBvc2l0aW9uID0gcG9zaXRpb24gPT0gbnVsbFxuICAgICAgICA/IDBcbiAgICAgICAgOiBiYXNlQ2xhbXAodG9JbnRlZ2VyKHBvc2l0aW9uKSwgMCwgc3RyaW5nLmxlbmd0aCk7XG5cbiAgICAgIHRhcmdldCA9IGJhc2VUb1N0cmluZyh0YXJnZXQpO1xuICAgICAgcmV0dXJuIHN0cmluZy5zbGljZShwb3NpdGlvbiwgcG9zaXRpb24gKyB0YXJnZXQubGVuZ3RoKSA9PSB0YXJnZXQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGNvbXBpbGVkIHRlbXBsYXRlIGZ1bmN0aW9uIHRoYXQgY2FuIGludGVycG9sYXRlIGRhdGEgcHJvcGVydGllc1xuICAgICAqIGluIFwiaW50ZXJwb2xhdGVcIiBkZWxpbWl0ZXJzLCBIVE1MLWVzY2FwZSBpbnRlcnBvbGF0ZWQgZGF0YSBwcm9wZXJ0aWVzIGluXG4gICAgICogXCJlc2NhcGVcIiBkZWxpbWl0ZXJzLCBhbmQgZXhlY3V0ZSBKYXZhU2NyaXB0IGluIFwiZXZhbHVhdGVcIiBkZWxpbWl0ZXJzLiBEYXRhXG4gICAgICogcHJvcGVydGllcyBtYXkgYmUgYWNjZXNzZWQgYXMgZnJlZSB2YXJpYWJsZXMgaW4gdGhlIHRlbXBsYXRlLiBJZiBhIHNldHRpbmdcbiAgICAgKiBvYmplY3QgaXMgZ2l2ZW4sIGl0IHRha2VzIHByZWNlZGVuY2Ugb3ZlciBgXy50ZW1wbGF0ZVNldHRpbmdzYCB2YWx1ZXMuXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogSW4gdGhlIGRldmVsb3BtZW50IGJ1aWxkIGBfLnRlbXBsYXRlYCB1dGlsaXplc1xuICAgICAqIFtzb3VyY2VVUkxzXShodHRwOi8vd3d3Lmh0bWw1cm9ja3MuY29tL2VuL3R1dG9yaWFscy9kZXZlbG9wZXJ0b29scy9zb3VyY2VtYXBzLyN0b2Mtc291cmNldXJsKVxuICAgICAqIGZvciBlYXNpZXIgZGVidWdnaW5nLlxuICAgICAqXG4gICAgICogRm9yIG1vcmUgaW5mb3JtYXRpb24gb24gcHJlY29tcGlsaW5nIHRlbXBsYXRlcyBzZWVcbiAgICAgKiBbbG9kYXNoJ3MgY3VzdG9tIGJ1aWxkcyBkb2N1bWVudGF0aW9uXShodHRwczovL2xvZGFzaC5jb20vY3VzdG9tLWJ1aWxkcykuXG4gICAgICpcbiAgICAgKiBGb3IgbW9yZSBpbmZvcm1hdGlvbiBvbiBDaHJvbWUgZXh0ZW5zaW9uIHNhbmRib3hlcyBzZWVcbiAgICAgKiBbQ2hyb21lJ3MgZXh0ZW5zaW9ucyBkb2N1bWVudGF0aW9uXShodHRwczovL2RldmVsb3Blci5jaHJvbWUuY29tL2V4dGVuc2lvbnMvc2FuZGJveGluZ0V2YWwpLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQGNhdGVnb3J5IFN0cmluZ1xuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBbc3RyaW5nPScnXSBUaGUgdGVtcGxhdGUgc3RyaW5nLlxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBbb3B0aW9ucz17fV0gVGhlIG9wdGlvbnMgb2JqZWN0LlxuICAgICAqIEBwYXJhbSB7UmVnRXhwfSBbb3B0aW9ucy5lc2NhcGU9Xy50ZW1wbGF0ZVNldHRpbmdzLmVzY2FwZV1cbiAgICAgKiAgVGhlIEhUTUwgXCJlc2NhcGVcIiBkZWxpbWl0ZXIuXG4gICAgICogQHBhcmFtIHtSZWdFeHB9IFtvcHRpb25zLmV2YWx1YXRlPV8udGVtcGxhdGVTZXR0aW5ncy5ldmFsdWF0ZV1cbiAgICAgKiAgVGhlIFwiZXZhbHVhdGVcIiBkZWxpbWl0ZXIuXG4gICAgICogQHBhcmFtIHtPYmplY3R9IFtvcHRpb25zLmltcG9ydHM9Xy50ZW1wbGF0ZVNldHRpbmdzLmltcG9ydHNdXG4gICAgICogIEFuIG9iamVjdCB0byBpbXBvcnQgaW50byB0aGUgdGVtcGxhdGUgYXMgZnJlZSB2YXJpYWJsZXMuXG4gICAgICogQHBhcmFtIHtSZWdFeHB9IFtvcHRpb25zLmludGVycG9sYXRlPV8udGVtcGxhdGVTZXR0aW5ncy5pbnRlcnBvbGF0ZV1cbiAgICAgKiAgVGhlIFwiaW50ZXJwb2xhdGVcIiBkZWxpbWl0ZXIuXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IFtvcHRpb25zLnNvdXJjZVVSTD0nbG9kYXNoLnRlbXBsYXRlU291cmNlc1tuXSddXG4gICAgICogIFRoZSBzb3VyY2VVUkwgb2YgdGhlIGNvbXBpbGVkIHRlbXBsYXRlLlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBbb3B0aW9ucy52YXJpYWJsZT0nb2JqJ11cbiAgICAgKiAgVGhlIGRhdGEgb2JqZWN0IHZhcmlhYmxlIG5hbWUuXG4gICAgICogQHBhcmFtLSB7T2JqZWN0fSBbZ3VhcmRdIEVuYWJsZXMgdXNlIGFzIGFuIGl0ZXJhdGVlIGZvciBtZXRob2RzIGxpa2UgYF8ubWFwYC5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIGNvbXBpbGVkIHRlbXBsYXRlIGZ1bmN0aW9uLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiAvLyBVc2UgdGhlIFwiaW50ZXJwb2xhdGVcIiBkZWxpbWl0ZXIgdG8gY3JlYXRlIGEgY29tcGlsZWQgdGVtcGxhdGUuXG4gICAgICogdmFyIGNvbXBpbGVkID0gXy50ZW1wbGF0ZSgnaGVsbG8gPCU9IHVzZXIgJT4hJyk7XG4gICAgICogY29tcGlsZWQoeyAndXNlcic6ICdmcmVkJyB9KTtcbiAgICAgKiAvLyA9PiAnaGVsbG8gZnJlZCEnXG4gICAgICpcbiAgICAgKiAvLyBVc2UgdGhlIEhUTUwgXCJlc2NhcGVcIiBkZWxpbWl0ZXIgdG8gZXNjYXBlIGRhdGEgcHJvcGVydHkgdmFsdWVzLlxuICAgICAqIHZhciBjb21waWxlZCA9IF8udGVtcGxhdGUoJzxiPjwlLSB2YWx1ZSAlPjwvYj4nKTtcbiAgICAgKiBjb21waWxlZCh7ICd2YWx1ZSc6ICc8c2NyaXB0PicgfSk7XG4gICAgICogLy8gPT4gJzxiPiZsdDtzY3JpcHQmZ3Q7PC9iPidcbiAgICAgKlxuICAgICAqIC8vIFVzZSB0aGUgXCJldmFsdWF0ZVwiIGRlbGltaXRlciB0byBleGVjdXRlIEphdmFTY3JpcHQgYW5kIGdlbmVyYXRlIEhUTUwuXG4gICAgICogdmFyIGNvbXBpbGVkID0gXy50ZW1wbGF0ZSgnPCUgXy5mb3JFYWNoKHVzZXJzLCBmdW5jdGlvbih1c2VyKSB7ICU+PGxpPjwlLSB1c2VyICU+PC9saT48JSB9KTsgJT4nKTtcbiAgICAgKiBjb21waWxlZCh7ICd1c2Vycyc6IFsnZnJlZCcsICdiYXJuZXknXSB9KTtcbiAgICAgKiAvLyA9PiAnPGxpPmZyZWQ8L2xpPjxsaT5iYXJuZXk8L2xpPidcbiAgICAgKlxuICAgICAqIC8vIFVzZSB0aGUgaW50ZXJuYWwgYHByaW50YCBmdW5jdGlvbiBpbiBcImV2YWx1YXRlXCIgZGVsaW1pdGVycy5cbiAgICAgKiB2YXIgY29tcGlsZWQgPSBfLnRlbXBsYXRlKCc8JSBwcmludChcImhlbGxvIFwiICsgdXNlcik7ICU+IScpO1xuICAgICAqIGNvbXBpbGVkKHsgJ3VzZXInOiAnYmFybmV5JyB9KTtcbiAgICAgKiAvLyA9PiAnaGVsbG8gYmFybmV5ISdcbiAgICAgKlxuICAgICAqIC8vIFVzZSB0aGUgRVMgdGVtcGxhdGUgbGl0ZXJhbCBkZWxpbWl0ZXIgYXMgYW4gXCJpbnRlcnBvbGF0ZVwiIGRlbGltaXRlci5cbiAgICAgKiAvLyBEaXNhYmxlIHN1cHBvcnQgYnkgcmVwbGFjaW5nIHRoZSBcImludGVycG9sYXRlXCIgZGVsaW1pdGVyLlxuICAgICAqIHZhciBjb21waWxlZCA9IF8udGVtcGxhdGUoJ2hlbGxvICR7IHVzZXIgfSEnKTtcbiAgICAgKiBjb21waWxlZCh7ICd1c2VyJzogJ3BlYmJsZXMnIH0pO1xuICAgICAqIC8vID0+ICdoZWxsbyBwZWJibGVzISdcbiAgICAgKlxuICAgICAqIC8vIFVzZSBiYWNrc2xhc2hlcyB0byB0cmVhdCBkZWxpbWl0ZXJzIGFzIHBsYWluIHRleHQuXG4gICAgICogdmFyIGNvbXBpbGVkID0gXy50ZW1wbGF0ZSgnPCU9IFwiXFxcXDwlLSB2YWx1ZSAlXFxcXD5cIiAlPicpO1xuICAgICAqIGNvbXBpbGVkKHsgJ3ZhbHVlJzogJ2lnbm9yZWQnIH0pO1xuICAgICAqIC8vID0+ICc8JS0gdmFsdWUgJT4nXG4gICAgICpcbiAgICAgKiAvLyBVc2UgdGhlIGBpbXBvcnRzYCBvcHRpb24gdG8gaW1wb3J0IGBqUXVlcnlgIGFzIGBqcWAuXG4gICAgICogdmFyIHRleHQgPSAnPCUganEuZWFjaCh1c2VycywgZnVuY3Rpb24odXNlcikgeyAlPjxsaT48JS0gdXNlciAlPjwvbGk+PCUgfSk7ICU+JztcbiAgICAgKiB2YXIgY29tcGlsZWQgPSBfLnRlbXBsYXRlKHRleHQsIHsgJ2ltcG9ydHMnOiB7ICdqcSc6IGpRdWVyeSB9IH0pO1xuICAgICAqIGNvbXBpbGVkKHsgJ3VzZXJzJzogWydmcmVkJywgJ2Jhcm5leSddIH0pO1xuICAgICAqIC8vID0+ICc8bGk+ZnJlZDwvbGk+PGxpPmJhcm5leTwvbGk+J1xuICAgICAqXG4gICAgICogLy8gVXNlIHRoZSBgc291cmNlVVJMYCBvcHRpb24gdG8gc3BlY2lmeSBhIGN1c3RvbSBzb3VyY2VVUkwgZm9yIHRoZSB0ZW1wbGF0ZS5cbiAgICAgKiB2YXIgY29tcGlsZWQgPSBfLnRlbXBsYXRlKCdoZWxsbyA8JT0gdXNlciAlPiEnLCB7ICdzb3VyY2VVUkwnOiAnL2Jhc2ljL2dyZWV0aW5nLmpzdCcgfSk7XG4gICAgICogY29tcGlsZWQoZGF0YSk7XG4gICAgICogLy8gPT4gRmluZCB0aGUgc291cmNlIG9mIFwiZ3JlZXRpbmcuanN0XCIgdW5kZXIgdGhlIFNvdXJjZXMgdGFiIG9yIFJlc291cmNlcyBwYW5lbCBvZiB0aGUgd2ViIGluc3BlY3Rvci5cbiAgICAgKlxuICAgICAqIC8vIFVzZSB0aGUgYHZhcmlhYmxlYCBvcHRpb24gdG8gZW5zdXJlIGEgd2l0aC1zdGF0ZW1lbnQgaXNuJ3QgdXNlZCBpbiB0aGUgY29tcGlsZWQgdGVtcGxhdGUuXG4gICAgICogdmFyIGNvbXBpbGVkID0gXy50ZW1wbGF0ZSgnaGkgPCU9IGRhdGEudXNlciAlPiEnLCB7ICd2YXJpYWJsZSc6ICdkYXRhJyB9KTtcbiAgICAgKiBjb21waWxlZC5zb3VyY2U7XG4gICAgICogLy8gPT4gZnVuY3Rpb24oZGF0YSkge1xuICAgICAqIC8vICAgdmFyIF9fdCwgX19wID0gJyc7XG4gICAgICogLy8gICBfX3AgKz0gJ2hpICcgKyAoKF9fdCA9ICggZGF0YS51c2VyICkpID09IG51bGwgPyAnJyA6IF9fdCkgKyAnISc7XG4gICAgICogLy8gICByZXR1cm4gX19wO1xuICAgICAqIC8vIH1cbiAgICAgKlxuICAgICAqIC8vIFVzZSBjdXN0b20gdGVtcGxhdGUgZGVsaW1pdGVycy5cbiAgICAgKiBfLnRlbXBsYXRlU2V0dGluZ3MuaW50ZXJwb2xhdGUgPSAve3soW1xcc1xcU10rPyl9fS9nO1xuICAgICAqIHZhciBjb21waWxlZCA9IF8udGVtcGxhdGUoJ2hlbGxvIHt7IHVzZXIgfX0hJyk7XG4gICAgICogY29tcGlsZWQoeyAndXNlcic6ICdtdXN0YWNoZScgfSk7XG4gICAgICogLy8gPT4gJ2hlbGxvIG11c3RhY2hlISdcbiAgICAgKlxuICAgICAqIC8vIFVzZSB0aGUgYHNvdXJjZWAgcHJvcGVydHkgdG8gaW5saW5lIGNvbXBpbGVkIHRlbXBsYXRlcyBmb3IgbWVhbmluZ2Z1bFxuICAgICAqIC8vIGxpbmUgbnVtYmVycyBpbiBlcnJvciBtZXNzYWdlcyBhbmQgc3RhY2sgdHJhY2VzLlxuICAgICAqIGZzLndyaXRlRmlsZVN5bmMocGF0aC5qb2luKHByb2Nlc3MuY3dkKCksICdqc3QuanMnKSwgJ1xcXG4gICAgICogICB2YXIgSlNUID0ge1xcXG4gICAgICogICAgIFwibWFpblwiOiAnICsgXy50ZW1wbGF0ZShtYWluVGV4dCkuc291cmNlICsgJ1xcXG4gICAgICogICB9O1xcXG4gICAgICogJyk7XG4gICAgICovXG4gICAgZnVuY3Rpb24gdGVtcGxhdGUoc3RyaW5nLCBvcHRpb25zLCBndWFyZCkge1xuICAgICAgLy8gQmFzZWQgb24gSm9obiBSZXNpZydzIGB0bXBsYCBpbXBsZW1lbnRhdGlvblxuICAgICAgLy8gKGh0dHA6Ly9lam9obi5vcmcvYmxvZy9qYXZhc2NyaXB0LW1pY3JvLXRlbXBsYXRpbmcvKVxuICAgICAgLy8gYW5kIExhdXJhIERva3Rvcm92YSdzIGRvVC5qcyAoaHR0cHM6Ly9naXRodWIuY29tL29sYWRvL2RvVCkuXG4gICAgICB2YXIgc2V0dGluZ3MgPSBsb2Rhc2gudGVtcGxhdGVTZXR0aW5ncztcblxuICAgICAgaWYgKGd1YXJkICYmIGlzSXRlcmF0ZWVDYWxsKHN0cmluZywgb3B0aW9ucywgZ3VhcmQpKSB7XG4gICAgICAgIG9wdGlvbnMgPSB1bmRlZmluZWQ7XG4gICAgICB9XG4gICAgICBzdHJpbmcgPSB0b1N0cmluZyhzdHJpbmcpO1xuICAgICAgb3B0aW9ucyA9IGFzc2lnbkluV2l0aCh7fSwgb3B0aW9ucywgc2V0dGluZ3MsIGN1c3RvbURlZmF1bHRzQXNzaWduSW4pO1xuXG4gICAgICB2YXIgaW1wb3J0cyA9IGFzc2lnbkluV2l0aCh7fSwgb3B0aW9ucy5pbXBvcnRzLCBzZXR0aW5ncy5pbXBvcnRzLCBjdXN0b21EZWZhdWx0c0Fzc2lnbkluKSxcbiAgICAgICAgICBpbXBvcnRzS2V5cyA9IGtleXMoaW1wb3J0cyksXG4gICAgICAgICAgaW1wb3J0c1ZhbHVlcyA9IGJhc2VWYWx1ZXMoaW1wb3J0cywgaW1wb3J0c0tleXMpO1xuXG4gICAgICB2YXIgaXNFc2NhcGluZyxcbiAgICAgICAgICBpc0V2YWx1YXRpbmcsXG4gICAgICAgICAgaW5kZXggPSAwLFxuICAgICAgICAgIGludGVycG9sYXRlID0gb3B0aW9ucy5pbnRlcnBvbGF0ZSB8fCByZU5vTWF0Y2gsXG4gICAgICAgICAgc291cmNlID0gXCJfX3AgKz0gJ1wiO1xuXG4gICAgICAvLyBDb21waWxlIHRoZSByZWdleHAgdG8gbWF0Y2ggZWFjaCBkZWxpbWl0ZXIuXG4gICAgICB2YXIgcmVEZWxpbWl0ZXJzID0gUmVnRXhwKFxuICAgICAgICAob3B0aW9ucy5lc2NhcGUgfHwgcmVOb01hdGNoKS5zb3VyY2UgKyAnfCcgK1xuICAgICAgICBpbnRlcnBvbGF0ZS5zb3VyY2UgKyAnfCcgK1xuICAgICAgICAoaW50ZXJwb2xhdGUgPT09IHJlSW50ZXJwb2xhdGUgPyByZUVzVGVtcGxhdGUgOiByZU5vTWF0Y2gpLnNvdXJjZSArICd8JyArXG4gICAgICAgIChvcHRpb25zLmV2YWx1YXRlIHx8IHJlTm9NYXRjaCkuc291cmNlICsgJ3wkJ1xuICAgICAgLCAnZycpO1xuXG4gICAgICAvLyBVc2UgYSBzb3VyY2VVUkwgZm9yIGVhc2llciBkZWJ1Z2dpbmcuXG4gICAgICAvLyBUaGUgc291cmNlVVJMIGdldHMgaW5qZWN0ZWQgaW50byB0aGUgc291cmNlIHRoYXQncyBldmFsLWVkLCBzbyBiZSBjYXJlZnVsXG4gICAgICAvLyB0byBub3JtYWxpemUgYWxsIGtpbmRzIG9mIHdoaXRlc3BhY2UsIHNvIGUuZy4gbmV3bGluZXMgKGFuZCB1bmljb2RlIHZlcnNpb25zIG9mIGl0KSBjYW4ndCBzbmVhayBpblxuICAgICAgLy8gYW5kIGVzY2FwZSB0aGUgY29tbWVudCwgdGh1cyBpbmplY3RpbmcgY29kZSB0aGF0IGdldHMgZXZhbGVkLlxuICAgICAgdmFyIHNvdXJjZVVSTCA9ICcvLyMgc291cmNlVVJMPScgK1xuICAgICAgICAoaGFzT3duUHJvcGVydHkuY2FsbChvcHRpb25zLCAnc291cmNlVVJMJylcbiAgICAgICAgICA/IChvcHRpb25zLnNvdXJjZVVSTCArICcnKS5yZXBsYWNlKC9cXHMvZywgJyAnKVxuICAgICAgICAgIDogKCdsb2Rhc2gudGVtcGxhdGVTb3VyY2VzWycgKyAoKyt0ZW1wbGF0ZUNvdW50ZXIpICsgJ10nKVxuICAgICAgICApICsgJ1xcbic7XG5cbiAgICAgIHN0cmluZy5yZXBsYWNlKHJlRGVsaW1pdGVycywgZnVuY3Rpb24obWF0Y2gsIGVzY2FwZVZhbHVlLCBpbnRlcnBvbGF0ZVZhbHVlLCBlc1RlbXBsYXRlVmFsdWUsIGV2YWx1YXRlVmFsdWUsIG9mZnNldCkge1xuICAgICAgICBpbnRlcnBvbGF0ZVZhbHVlIHx8IChpbnRlcnBvbGF0ZVZhbHVlID0gZXNUZW1wbGF0ZVZhbHVlKTtcblxuICAgICAgICAvLyBFc2NhcGUgY2hhcmFjdGVycyB0aGF0IGNhbid0IGJlIGluY2x1ZGVkIGluIHN0cmluZyBsaXRlcmFscy5cbiAgICAgICAgc291cmNlICs9IHN0cmluZy5zbGljZShpbmRleCwgb2Zmc2V0KS5yZXBsYWNlKHJlVW5lc2NhcGVkU3RyaW5nLCBlc2NhcGVTdHJpbmdDaGFyKTtcblxuICAgICAgICAvLyBSZXBsYWNlIGRlbGltaXRlcnMgd2l0aCBzbmlwcGV0cy5cbiAgICAgICAgaWYgKGVzY2FwZVZhbHVlKSB7XG4gICAgICAgICAgaXNFc2NhcGluZyA9IHRydWU7XG4gICAgICAgICAgc291cmNlICs9IFwiJyArXFxuX19lKFwiICsgZXNjYXBlVmFsdWUgKyBcIikgK1xcbidcIjtcbiAgICAgICAgfVxuICAgICAgICBpZiAoZXZhbHVhdGVWYWx1ZSkge1xuICAgICAgICAgIGlzRXZhbHVhdGluZyA9IHRydWU7XG4gICAgICAgICAgc291cmNlICs9IFwiJztcXG5cIiArIGV2YWx1YXRlVmFsdWUgKyBcIjtcXG5fX3AgKz0gJ1wiO1xuICAgICAgICB9XG4gICAgICAgIGlmIChpbnRlcnBvbGF0ZVZhbHVlKSB7XG4gICAgICAgICAgc291cmNlICs9IFwiJyArXFxuKChfX3QgPSAoXCIgKyBpbnRlcnBvbGF0ZVZhbHVlICsgXCIpKSA9PSBudWxsID8gJycgOiBfX3QpICtcXG4nXCI7XG4gICAgICAgIH1cbiAgICAgICAgaW5kZXggPSBvZmZzZXQgKyBtYXRjaC5sZW5ndGg7XG5cbiAgICAgICAgLy8gVGhlIEpTIGVuZ2luZSBlbWJlZGRlZCBpbiBBZG9iZSBwcm9kdWN0cyBuZWVkcyBgbWF0Y2hgIHJldHVybmVkIGluXG4gICAgICAgIC8vIG9yZGVyIHRvIHByb2R1Y2UgdGhlIGNvcnJlY3QgYG9mZnNldGAgdmFsdWUuXG4gICAgICAgIHJldHVybiBtYXRjaDtcbiAgICAgIH0pO1xuXG4gICAgICBzb3VyY2UgKz0gXCInO1xcblwiO1xuXG4gICAgICAvLyBJZiBgdmFyaWFibGVgIGlzIG5vdCBzcGVjaWZpZWQgd3JhcCBhIHdpdGgtc3RhdGVtZW50IGFyb3VuZCB0aGUgZ2VuZXJhdGVkXG4gICAgICAvLyBjb2RlIHRvIGFkZCB0aGUgZGF0YSBvYmplY3QgdG8gdGhlIHRvcCBvZiB0aGUgc2NvcGUgY2hhaW4uXG4gICAgICB2YXIgdmFyaWFibGUgPSBoYXNPd25Qcm9wZXJ0eS5jYWxsKG9wdGlvbnMsICd2YXJpYWJsZScpICYmIG9wdGlvbnMudmFyaWFibGU7XG4gICAgICBpZiAoIXZhcmlhYmxlKSB7XG4gICAgICAgIHNvdXJjZSA9ICd3aXRoIChvYmopIHtcXG4nICsgc291cmNlICsgJ1xcbn1cXG4nO1xuICAgICAgfVxuICAgICAgLy8gVGhyb3cgYW4gZXJyb3IgaWYgYSBmb3JiaWRkZW4gY2hhcmFjdGVyIHdhcyBmb3VuZCBpbiBgdmFyaWFibGVgLCB0byBwcmV2ZW50XG4gICAgICAvLyBwb3RlbnRpYWwgY29tbWFuZCBpbmplY3Rpb24gYXR0YWNrcy5cbiAgICAgIGVsc2UgaWYgKHJlRm9yYmlkZGVuSWRlbnRpZmllckNoYXJzLnRlc3QodmFyaWFibGUpKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihJTlZBTElEX1RFTVBMX1ZBUl9FUlJPUl9URVhUKTtcbiAgICAgIH1cblxuICAgICAgLy8gQ2xlYW51cCBjb2RlIGJ5IHN0cmlwcGluZyBlbXB0eSBzdHJpbmdzLlxuICAgICAgc291cmNlID0gKGlzRXZhbHVhdGluZyA/IHNvdXJjZS5yZXBsYWNlKHJlRW1wdHlTdHJpbmdMZWFkaW5nLCAnJykgOiBzb3VyY2UpXG4gICAgICAgIC5yZXBsYWNlKHJlRW1wdHlTdHJpbmdNaWRkbGUsICckMScpXG4gICAgICAgIC5yZXBsYWNlKHJlRW1wdHlTdHJpbmdUcmFpbGluZywgJyQxOycpO1xuXG4gICAgICAvLyBGcmFtZSBjb2RlIGFzIHRoZSBmdW5jdGlvbiBib2R5LlxuICAgICAgc291cmNlID0gJ2Z1bmN0aW9uKCcgKyAodmFyaWFibGUgfHwgJ29iaicpICsgJykge1xcbicgK1xuICAgICAgICAodmFyaWFibGVcbiAgICAgICAgICA/ICcnXG4gICAgICAgICAgOiAnb2JqIHx8IChvYmogPSB7fSk7XFxuJ1xuICAgICAgICApICtcbiAgICAgICAgXCJ2YXIgX190LCBfX3AgPSAnJ1wiICtcbiAgICAgICAgKGlzRXNjYXBpbmdcbiAgICAgICAgICAgPyAnLCBfX2UgPSBfLmVzY2FwZSdcbiAgICAgICAgICAgOiAnJ1xuICAgICAgICApICtcbiAgICAgICAgKGlzRXZhbHVhdGluZ1xuICAgICAgICAgID8gJywgX19qID0gQXJyYXkucHJvdG90eXBlLmpvaW47XFxuJyArXG4gICAgICAgICAgICBcImZ1bmN0aW9uIHByaW50KCkgeyBfX3AgKz0gX19qLmNhbGwoYXJndW1lbnRzLCAnJykgfVxcblwiXG4gICAgICAgICAgOiAnO1xcbidcbiAgICAgICAgKSArXG4gICAgICAgIHNvdXJjZSArXG4gICAgICAgICdyZXR1cm4gX19wXFxufSc7XG5cbiAgICAgIHZhciByZXN1bHQgPSBhdHRlbXB0KGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gRnVuY3Rpb24oaW1wb3J0c0tleXMsIHNvdXJjZVVSTCArICdyZXR1cm4gJyArIHNvdXJjZSlcbiAgICAgICAgICAuYXBwbHkodW5kZWZpbmVkLCBpbXBvcnRzVmFsdWVzKTtcbiAgICAgIH0pO1xuXG4gICAgICAvLyBQcm92aWRlIHRoZSBjb21waWxlZCBmdW5jdGlvbidzIHNvdXJjZSBieSBpdHMgYHRvU3RyaW5nYCBtZXRob2Qgb3JcbiAgICAgIC8vIHRoZSBgc291cmNlYCBwcm9wZXJ0eSBhcyBhIGNvbnZlbmllbmNlIGZvciBpbmxpbmluZyBjb21waWxlZCB0ZW1wbGF0ZXMuXG4gICAgICByZXN1bHQuc291cmNlID0gc291cmNlO1xuICAgICAgaWYgKGlzRXJyb3IocmVzdWx0KSkge1xuICAgICAgICB0aHJvdyByZXN1bHQ7XG4gICAgICB9XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENvbnZlcnRzIGBzdHJpbmdgLCBhcyBhIHdob2xlLCB0byBsb3dlciBjYXNlIGp1c3QgbGlrZVxuICAgICAqIFtTdHJpbmcjdG9Mb3dlckNhc2VdKGh0dHBzOi8vbWRuLmlvL3RvTG93ZXJDYXNlKS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBTdHJpbmdcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gW3N0cmluZz0nJ10gVGhlIHN0cmluZyB0byBjb252ZXJ0LlxuICAgICAqIEByZXR1cm5zIHtzdHJpbmd9IFJldHVybnMgdGhlIGxvd2VyIGNhc2VkIHN0cmluZy5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy50b0xvd2VyKCctLUZvby1CYXItLScpO1xuICAgICAqIC8vID0+ICctLWZvby1iYXItLSdcbiAgICAgKlxuICAgICAqIF8udG9Mb3dlcignZm9vQmFyJyk7XG4gICAgICogLy8gPT4gJ2Zvb2JhcidcbiAgICAgKlxuICAgICAqIF8udG9Mb3dlcignX19GT09fQkFSX18nKTtcbiAgICAgKiAvLyA9PiAnX19mb29fYmFyX18nXG4gICAgICovXG4gICAgZnVuY3Rpb24gdG9Mb3dlcih2YWx1ZSkge1xuICAgICAgcmV0dXJuIHRvU3RyaW5nKHZhbHVlKS50b0xvd2VyQ2FzZSgpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENvbnZlcnRzIGBzdHJpbmdgLCBhcyBhIHdob2xlLCB0byB1cHBlciBjYXNlIGp1c3QgbGlrZVxuICAgICAqIFtTdHJpbmcjdG9VcHBlckNhc2VdKGh0dHBzOi8vbWRuLmlvL3RvVXBwZXJDYXNlKS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBTdHJpbmdcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gW3N0cmluZz0nJ10gVGhlIHN0cmluZyB0byBjb252ZXJ0LlxuICAgICAqIEByZXR1cm5zIHtzdHJpbmd9IFJldHVybnMgdGhlIHVwcGVyIGNhc2VkIHN0cmluZy5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy50b1VwcGVyKCctLWZvby1iYXItLScpO1xuICAgICAqIC8vID0+ICctLUZPTy1CQVItLSdcbiAgICAgKlxuICAgICAqIF8udG9VcHBlcignZm9vQmFyJyk7XG4gICAgICogLy8gPT4gJ0ZPT0JBUidcbiAgICAgKlxuICAgICAqIF8udG9VcHBlcignX19mb29fYmFyX18nKTtcbiAgICAgKiAvLyA9PiAnX19GT09fQkFSX18nXG4gICAgICovXG4gICAgZnVuY3Rpb24gdG9VcHBlcih2YWx1ZSkge1xuICAgICAgcmV0dXJuIHRvU3RyaW5nKHZhbHVlKS50b1VwcGVyQ2FzZSgpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFJlbW92ZXMgbGVhZGluZyBhbmQgdHJhaWxpbmcgd2hpdGVzcGFjZSBvciBzcGVjaWZpZWQgY2hhcmFjdGVycyBmcm9tIGBzdHJpbmdgLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDMuMC4wXG4gICAgICogQGNhdGVnb3J5IFN0cmluZ1xuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBbc3RyaW5nPScnXSBUaGUgc3RyaW5nIHRvIHRyaW0uXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IFtjaGFycz13aGl0ZXNwYWNlXSBUaGUgY2hhcmFjdGVycyB0byB0cmltLlxuICAgICAqIEBwYXJhbS0ge09iamVjdH0gW2d1YXJkXSBFbmFibGVzIHVzZSBhcyBhbiBpdGVyYXRlZSBmb3IgbWV0aG9kcyBsaWtlIGBfLm1hcGAuXG4gICAgICogQHJldHVybnMge3N0cmluZ30gUmV0dXJucyB0aGUgdHJpbW1lZCBzdHJpbmcuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8udHJpbSgnICBhYmMgICcpO1xuICAgICAqIC8vID0+ICdhYmMnXG4gICAgICpcbiAgICAgKiBfLnRyaW0oJy1fLWFiYy1fLScsICdfLScpO1xuICAgICAqIC8vID0+ICdhYmMnXG4gICAgICpcbiAgICAgKiBfLm1hcChbJyAgZm9vICAnLCAnICBiYXIgICddLCBfLnRyaW0pO1xuICAgICAqIC8vID0+IFsnZm9vJywgJ2JhciddXG4gICAgICovXG4gICAgZnVuY3Rpb24gdHJpbShzdHJpbmcsIGNoYXJzLCBndWFyZCkge1xuICAgICAgc3RyaW5nID0gdG9TdHJpbmcoc3RyaW5nKTtcbiAgICAgIGlmIChzdHJpbmcgJiYgKGd1YXJkIHx8IGNoYXJzID09PSB1bmRlZmluZWQpKSB7XG4gICAgICAgIHJldHVybiBiYXNlVHJpbShzdHJpbmcpO1xuICAgICAgfVxuICAgICAgaWYgKCFzdHJpbmcgfHwgIShjaGFycyA9IGJhc2VUb1N0cmluZyhjaGFycykpKSB7XG4gICAgICAgIHJldHVybiBzdHJpbmc7XG4gICAgICB9XG4gICAgICB2YXIgc3RyU3ltYm9scyA9IHN0cmluZ1RvQXJyYXkoc3RyaW5nKSxcbiAgICAgICAgICBjaHJTeW1ib2xzID0gc3RyaW5nVG9BcnJheShjaGFycyksXG4gICAgICAgICAgc3RhcnQgPSBjaGFyc1N0YXJ0SW5kZXgoc3RyU3ltYm9scywgY2hyU3ltYm9scyksXG4gICAgICAgICAgZW5kID0gY2hhcnNFbmRJbmRleChzdHJTeW1ib2xzLCBjaHJTeW1ib2xzKSArIDE7XG5cbiAgICAgIHJldHVybiBjYXN0U2xpY2Uoc3RyU3ltYm9scywgc3RhcnQsIGVuZCkuam9pbignJyk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUmVtb3ZlcyB0cmFpbGluZyB3aGl0ZXNwYWNlIG9yIHNwZWNpZmllZCBjaGFyYWN0ZXJzIGZyb20gYHN0cmluZ2AuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgU3RyaW5nXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IFtzdHJpbmc9JyddIFRoZSBzdHJpbmcgdG8gdHJpbS5cbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gW2NoYXJzPXdoaXRlc3BhY2VdIFRoZSBjaGFyYWN0ZXJzIHRvIHRyaW0uXG4gICAgICogQHBhcmFtLSB7T2JqZWN0fSBbZ3VhcmRdIEVuYWJsZXMgdXNlIGFzIGFuIGl0ZXJhdGVlIGZvciBtZXRob2RzIGxpa2UgYF8ubWFwYC5cbiAgICAgKiBAcmV0dXJucyB7c3RyaW5nfSBSZXR1cm5zIHRoZSB0cmltbWVkIHN0cmluZy5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy50cmltRW5kKCcgIGFiYyAgJyk7XG4gICAgICogLy8gPT4gJyAgYWJjJ1xuICAgICAqXG4gICAgICogXy50cmltRW5kKCctXy1hYmMtXy0nLCAnXy0nKTtcbiAgICAgKiAvLyA9PiAnLV8tYWJjJ1xuICAgICAqL1xuICAgIGZ1bmN0aW9uIHRyaW1FbmQoc3RyaW5nLCBjaGFycywgZ3VhcmQpIHtcbiAgICAgIHN0cmluZyA9IHRvU3RyaW5nKHN0cmluZyk7XG4gICAgICBpZiAoc3RyaW5nICYmIChndWFyZCB8fCBjaGFycyA9PT0gdW5kZWZpbmVkKSkge1xuICAgICAgICByZXR1cm4gc3RyaW5nLnNsaWNlKDAsIHRyaW1tZWRFbmRJbmRleChzdHJpbmcpICsgMSk7XG4gICAgICB9XG4gICAgICBpZiAoIXN0cmluZyB8fCAhKGNoYXJzID0gYmFzZVRvU3RyaW5nKGNoYXJzKSkpIHtcbiAgICAgICAgcmV0dXJuIHN0cmluZztcbiAgICAgIH1cbiAgICAgIHZhciBzdHJTeW1ib2xzID0gc3RyaW5nVG9BcnJheShzdHJpbmcpLFxuICAgICAgICAgIGVuZCA9IGNoYXJzRW5kSW5kZXgoc3RyU3ltYm9scywgc3RyaW5nVG9BcnJheShjaGFycykpICsgMTtcblxuICAgICAgcmV0dXJuIGNhc3RTbGljZShzdHJTeW1ib2xzLCAwLCBlbmQpLmpvaW4oJycpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFJlbW92ZXMgbGVhZGluZyB3aGl0ZXNwYWNlIG9yIHNwZWNpZmllZCBjaGFyYWN0ZXJzIGZyb20gYHN0cmluZ2AuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgU3RyaW5nXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IFtzdHJpbmc9JyddIFRoZSBzdHJpbmcgdG8gdHJpbS5cbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gW2NoYXJzPXdoaXRlc3BhY2VdIFRoZSBjaGFyYWN0ZXJzIHRvIHRyaW0uXG4gICAgICogQHBhcmFtLSB7T2JqZWN0fSBbZ3VhcmRdIEVuYWJsZXMgdXNlIGFzIGFuIGl0ZXJhdGVlIGZvciBtZXRob2RzIGxpa2UgYF8ubWFwYC5cbiAgICAgKiBAcmV0dXJucyB7c3RyaW5nfSBSZXR1cm5zIHRoZSB0cmltbWVkIHN0cmluZy5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy50cmltU3RhcnQoJyAgYWJjICAnKTtcbiAgICAgKiAvLyA9PiAnYWJjICAnXG4gICAgICpcbiAgICAgKiBfLnRyaW1TdGFydCgnLV8tYWJjLV8tJywgJ18tJyk7XG4gICAgICogLy8gPT4gJ2FiYy1fLSdcbiAgICAgKi9cbiAgICBmdW5jdGlvbiB0cmltU3RhcnQoc3RyaW5nLCBjaGFycywgZ3VhcmQpIHtcbiAgICAgIHN0cmluZyA9IHRvU3RyaW5nKHN0cmluZyk7XG4gICAgICBpZiAoc3RyaW5nICYmIChndWFyZCB8fCBjaGFycyA9PT0gdW5kZWZpbmVkKSkge1xuICAgICAgICByZXR1cm4gc3RyaW5nLnJlcGxhY2UocmVUcmltU3RhcnQsICcnKTtcbiAgICAgIH1cbiAgICAgIGlmICghc3RyaW5nIHx8ICEoY2hhcnMgPSBiYXNlVG9TdHJpbmcoY2hhcnMpKSkge1xuICAgICAgICByZXR1cm4gc3RyaW5nO1xuICAgICAgfVxuICAgICAgdmFyIHN0clN5bWJvbHMgPSBzdHJpbmdUb0FycmF5KHN0cmluZyksXG4gICAgICAgICAgc3RhcnQgPSBjaGFyc1N0YXJ0SW5kZXgoc3RyU3ltYm9scywgc3RyaW5nVG9BcnJheShjaGFycykpO1xuXG4gICAgICByZXR1cm4gY2FzdFNsaWNlKHN0clN5bWJvbHMsIHN0YXJ0KS5qb2luKCcnKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUcnVuY2F0ZXMgYHN0cmluZ2AgaWYgaXQncyBsb25nZXIgdGhhbiB0aGUgZ2l2ZW4gbWF4aW11bSBzdHJpbmcgbGVuZ3RoLlxuICAgICAqIFRoZSBsYXN0IGNoYXJhY3RlcnMgb2YgdGhlIHRydW5jYXRlZCBzdHJpbmcgYXJlIHJlcGxhY2VkIHdpdGggdGhlIG9taXNzaW9uXG4gICAgICogc3RyaW5nIHdoaWNoIGRlZmF1bHRzIHRvIFwiLi4uXCIuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgU3RyaW5nXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IFtzdHJpbmc9JyddIFRoZSBzdHJpbmcgdG8gdHJ1bmNhdGUuXG4gICAgICogQHBhcmFtIHtPYmplY3R9IFtvcHRpb25zPXt9XSBUaGUgb3B0aW9ucyBvYmplY3QuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFtvcHRpb25zLmxlbmd0aD0zMF0gVGhlIG1heGltdW0gc3RyaW5nIGxlbmd0aC5cbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gW29wdGlvbnMub21pc3Npb249Jy4uLiddIFRoZSBzdHJpbmcgdG8gaW5kaWNhdGUgdGV4dCBpcyBvbWl0dGVkLlxuICAgICAqIEBwYXJhbSB7UmVnRXhwfHN0cmluZ30gW29wdGlvbnMuc2VwYXJhdG9yXSBUaGUgc2VwYXJhdG9yIHBhdHRlcm4gdG8gdHJ1bmNhdGUgdG8uXG4gICAgICogQHJldHVybnMge3N0cmluZ30gUmV0dXJucyB0aGUgdHJ1bmNhdGVkIHN0cmluZy5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy50cnVuY2F0ZSgnaGktZGlkZGx5LWhvIHRoZXJlLCBuZWlnaGJvcmlubycpO1xuICAgICAqIC8vID0+ICdoaS1kaWRkbHktaG8gdGhlcmUsIG5laWdoYm8uLi4nXG4gICAgICpcbiAgICAgKiBfLnRydW5jYXRlKCdoaS1kaWRkbHktaG8gdGhlcmUsIG5laWdoYm9yaW5vJywge1xuICAgICAqICAgJ2xlbmd0aCc6IDI0LFxuICAgICAqICAgJ3NlcGFyYXRvcic6ICcgJ1xuICAgICAqIH0pO1xuICAgICAqIC8vID0+ICdoaS1kaWRkbHktaG8gdGhlcmUsLi4uJ1xuICAgICAqXG4gICAgICogXy50cnVuY2F0ZSgnaGktZGlkZGx5LWhvIHRoZXJlLCBuZWlnaGJvcmlubycsIHtcbiAgICAgKiAgICdsZW5ndGgnOiAyNCxcbiAgICAgKiAgICdzZXBhcmF0b3InOiAvLD8gKy9cbiAgICAgKiB9KTtcbiAgICAgKiAvLyA9PiAnaGktZGlkZGx5LWhvIHRoZXJlLi4uJ1xuICAgICAqXG4gICAgICogXy50cnVuY2F0ZSgnaGktZGlkZGx5LWhvIHRoZXJlLCBuZWlnaGJvcmlubycsIHtcbiAgICAgKiAgICdvbWlzc2lvbic6ICcgWy4uLl0nXG4gICAgICogfSk7XG4gICAgICogLy8gPT4gJ2hpLWRpZGRseS1obyB0aGVyZSwgbmVpZyBbLi4uXSdcbiAgICAgKi9cbiAgICBmdW5jdGlvbiB0cnVuY2F0ZShzdHJpbmcsIG9wdGlvbnMpIHtcbiAgICAgIHZhciBsZW5ndGggPSBERUZBVUxUX1RSVU5DX0xFTkdUSCxcbiAgICAgICAgICBvbWlzc2lvbiA9IERFRkFVTFRfVFJVTkNfT01JU1NJT047XG5cbiAgICAgIGlmIChpc09iamVjdChvcHRpb25zKSkge1xuICAgICAgICB2YXIgc2VwYXJhdG9yID0gJ3NlcGFyYXRvcicgaW4gb3B0aW9ucyA/IG9wdGlvbnMuc2VwYXJhdG9yIDogc2VwYXJhdG9yO1xuICAgICAgICBsZW5ndGggPSAnbGVuZ3RoJyBpbiBvcHRpb25zID8gdG9JbnRlZ2VyKG9wdGlvbnMubGVuZ3RoKSA6IGxlbmd0aDtcbiAgICAgICAgb21pc3Npb24gPSAnb21pc3Npb24nIGluIG9wdGlvbnMgPyBiYXNlVG9TdHJpbmcob3B0aW9ucy5vbWlzc2lvbikgOiBvbWlzc2lvbjtcbiAgICAgIH1cbiAgICAgIHN0cmluZyA9IHRvU3RyaW5nKHN0cmluZyk7XG5cbiAgICAgIHZhciBzdHJMZW5ndGggPSBzdHJpbmcubGVuZ3RoO1xuICAgICAgaWYgKGhhc1VuaWNvZGUoc3RyaW5nKSkge1xuICAgICAgICB2YXIgc3RyU3ltYm9scyA9IHN0cmluZ1RvQXJyYXkoc3RyaW5nKTtcbiAgICAgICAgc3RyTGVuZ3RoID0gc3RyU3ltYm9scy5sZW5ndGg7XG4gICAgICB9XG4gICAgICBpZiAobGVuZ3RoID49IHN0ckxlbmd0aCkge1xuICAgICAgICByZXR1cm4gc3RyaW5nO1xuICAgICAgfVxuICAgICAgdmFyIGVuZCA9IGxlbmd0aCAtIHN0cmluZ1NpemUob21pc3Npb24pO1xuICAgICAgaWYgKGVuZCA8IDEpIHtcbiAgICAgICAgcmV0dXJuIG9taXNzaW9uO1xuICAgICAgfVxuICAgICAgdmFyIHJlc3VsdCA9IHN0clN5bWJvbHNcbiAgICAgICAgPyBjYXN0U2xpY2Uoc3RyU3ltYm9scywgMCwgZW5kKS5qb2luKCcnKVxuICAgICAgICA6IHN0cmluZy5zbGljZSgwLCBlbmQpO1xuXG4gICAgICBpZiAoc2VwYXJhdG9yID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgcmV0dXJuIHJlc3VsdCArIG9taXNzaW9uO1xuICAgICAgfVxuICAgICAgaWYgKHN0clN5bWJvbHMpIHtcbiAgICAgICAgZW5kICs9IChyZXN1bHQubGVuZ3RoIC0gZW5kKTtcbiAgICAgIH1cbiAgICAgIGlmIChpc1JlZ0V4cChzZXBhcmF0b3IpKSB7XG4gICAgICAgIGlmIChzdHJpbmcuc2xpY2UoZW5kKS5zZWFyY2goc2VwYXJhdG9yKSkge1xuICAgICAgICAgIHZhciBtYXRjaCxcbiAgICAgICAgICAgICAgc3Vic3RyaW5nID0gcmVzdWx0O1xuXG4gICAgICAgICAgaWYgKCFzZXBhcmF0b3IuZ2xvYmFsKSB7XG4gICAgICAgICAgICBzZXBhcmF0b3IgPSBSZWdFeHAoc2VwYXJhdG9yLnNvdXJjZSwgdG9TdHJpbmcocmVGbGFncy5leGVjKHNlcGFyYXRvcikpICsgJ2cnKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgc2VwYXJhdG9yLmxhc3RJbmRleCA9IDA7XG4gICAgICAgICAgd2hpbGUgKChtYXRjaCA9IHNlcGFyYXRvci5leGVjKHN1YnN0cmluZykpKSB7XG4gICAgICAgICAgICB2YXIgbmV3RW5kID0gbWF0Y2guaW5kZXg7XG4gICAgICAgICAgfVxuICAgICAgICAgIHJlc3VsdCA9IHJlc3VsdC5zbGljZSgwLCBuZXdFbmQgPT09IHVuZGVmaW5lZCA/IGVuZCA6IG5ld0VuZCk7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSBpZiAoc3RyaW5nLmluZGV4T2YoYmFzZVRvU3RyaW5nKHNlcGFyYXRvciksIGVuZCkgIT0gZW5kKSB7XG4gICAgICAgIHZhciBpbmRleCA9IHJlc3VsdC5sYXN0SW5kZXhPZihzZXBhcmF0b3IpO1xuICAgICAgICBpZiAoaW5kZXggPiAtMSkge1xuICAgICAgICAgIHJlc3VsdCA9IHJlc3VsdC5zbGljZSgwLCBpbmRleCk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiByZXN1bHQgKyBvbWlzc2lvbjtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgaW52ZXJzZSBvZiBgXy5lc2NhcGVgOyB0aGlzIG1ldGhvZCBjb252ZXJ0cyB0aGUgSFRNTCBlbnRpdGllc1xuICAgICAqIGAmYW1wO2AsIGAmbHQ7YCwgYCZndDtgLCBgJnF1b3Q7YCwgYW5kIGAmIzM5O2AgaW4gYHN0cmluZ2AgdG9cbiAgICAgKiB0aGVpciBjb3JyZXNwb25kaW5nIGNoYXJhY3RlcnMuXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogTm8gb3RoZXIgSFRNTCBlbnRpdGllcyBhcmUgdW5lc2NhcGVkLiBUbyB1bmVzY2FwZSBhZGRpdGlvbmFsXG4gICAgICogSFRNTCBlbnRpdGllcyB1c2UgYSB0aGlyZC1wYXJ0eSBsaWJyYXJ5IGxpa2UgW19oZV9dKGh0dHBzOi8vbXRocy5iZS9oZSkuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMC42LjBcbiAgICAgKiBAY2F0ZWdvcnkgU3RyaW5nXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IFtzdHJpbmc9JyddIFRoZSBzdHJpbmcgdG8gdW5lc2NhcGUuXG4gICAgICogQHJldHVybnMge3N0cmluZ30gUmV0dXJucyB0aGUgdW5lc2NhcGVkIHN0cmluZy5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy51bmVzY2FwZSgnZnJlZCwgYmFybmV5LCAmYW1wOyBwZWJibGVzJyk7XG4gICAgICogLy8gPT4gJ2ZyZWQsIGJhcm5leSwgJiBwZWJibGVzJ1xuICAgICAqL1xuICAgIGZ1bmN0aW9uIHVuZXNjYXBlKHN0cmluZykge1xuICAgICAgc3RyaW5nID0gdG9TdHJpbmcoc3RyaW5nKTtcbiAgICAgIHJldHVybiAoc3RyaW5nICYmIHJlSGFzRXNjYXBlZEh0bWwudGVzdChzdHJpbmcpKVxuICAgICAgICA/IHN0cmluZy5yZXBsYWNlKHJlRXNjYXBlZEh0bWwsIHVuZXNjYXBlSHRtbENoYXIpXG4gICAgICAgIDogc3RyaW5nO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENvbnZlcnRzIGBzdHJpbmdgLCBhcyBzcGFjZSBzZXBhcmF0ZWQgd29yZHMsIHRvIHVwcGVyIGNhc2UuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgU3RyaW5nXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IFtzdHJpbmc9JyddIFRoZSBzdHJpbmcgdG8gY29udmVydC5cbiAgICAgKiBAcmV0dXJucyB7c3RyaW5nfSBSZXR1cm5zIHRoZSB1cHBlciBjYXNlZCBzdHJpbmcuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8udXBwZXJDYXNlKCctLWZvby1iYXInKTtcbiAgICAgKiAvLyA9PiAnRk9PIEJBUidcbiAgICAgKlxuICAgICAqIF8udXBwZXJDYXNlKCdmb29CYXInKTtcbiAgICAgKiAvLyA9PiAnRk9PIEJBUidcbiAgICAgKlxuICAgICAqIF8udXBwZXJDYXNlKCdfX2Zvb19iYXJfXycpO1xuICAgICAqIC8vID0+ICdGT08gQkFSJ1xuICAgICAqL1xuICAgIHZhciB1cHBlckNhc2UgPSBjcmVhdGVDb21wb3VuZGVyKGZ1bmN0aW9uKHJlc3VsdCwgd29yZCwgaW5kZXgpIHtcbiAgICAgIHJldHVybiByZXN1bHQgKyAoaW5kZXggPyAnICcgOiAnJykgKyB3b3JkLnRvVXBwZXJDYXNlKCk7XG4gICAgfSk7XG5cbiAgICAvKipcbiAgICAgKiBDb252ZXJ0cyB0aGUgZmlyc3QgY2hhcmFjdGVyIG9mIGBzdHJpbmdgIHRvIHVwcGVyIGNhc2UuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgU3RyaW5nXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IFtzdHJpbmc9JyddIFRoZSBzdHJpbmcgdG8gY29udmVydC5cbiAgICAgKiBAcmV0dXJucyB7c3RyaW5nfSBSZXR1cm5zIHRoZSBjb252ZXJ0ZWQgc3RyaW5nLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLnVwcGVyRmlyc3QoJ2ZyZWQnKTtcbiAgICAgKiAvLyA9PiAnRnJlZCdcbiAgICAgKlxuICAgICAqIF8udXBwZXJGaXJzdCgnRlJFRCcpO1xuICAgICAqIC8vID0+ICdGUkVEJ1xuICAgICAqL1xuICAgIHZhciB1cHBlckZpcnN0ID0gY3JlYXRlQ2FzZUZpcnN0KCd0b1VwcGVyQ2FzZScpO1xuXG4gICAgLyoqXG4gICAgICogU3BsaXRzIGBzdHJpbmdgIGludG8gYW4gYXJyYXkgb2YgaXRzIHdvcmRzLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDMuMC4wXG4gICAgICogQGNhdGVnb3J5IFN0cmluZ1xuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBbc3RyaW5nPScnXSBUaGUgc3RyaW5nIHRvIGluc3BlY3QuXG4gICAgICogQHBhcmFtIHtSZWdFeHB8c3RyaW5nfSBbcGF0dGVybl0gVGhlIHBhdHRlcm4gdG8gbWF0Y2ggd29yZHMuXG4gICAgICogQHBhcmFtLSB7T2JqZWN0fSBbZ3VhcmRdIEVuYWJsZXMgdXNlIGFzIGFuIGl0ZXJhdGVlIGZvciBtZXRob2RzIGxpa2UgYF8ubWFwYC5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIHdvcmRzIG9mIGBzdHJpbmdgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLndvcmRzKCdmcmVkLCBiYXJuZXksICYgcGViYmxlcycpO1xuICAgICAqIC8vID0+IFsnZnJlZCcsICdiYXJuZXknLCAncGViYmxlcyddXG4gICAgICpcbiAgICAgKiBfLndvcmRzKCdmcmVkLCBiYXJuZXksICYgcGViYmxlcycsIC9bXiwgXSsvZyk7XG4gICAgICogLy8gPT4gWydmcmVkJywgJ2Jhcm5leScsICcmJywgJ3BlYmJsZXMnXVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHdvcmRzKHN0cmluZywgcGF0dGVybiwgZ3VhcmQpIHtcbiAgICAgIHN0cmluZyA9IHRvU3RyaW5nKHN0cmluZyk7XG4gICAgICBwYXR0ZXJuID0gZ3VhcmQgPyB1bmRlZmluZWQgOiBwYXR0ZXJuO1xuXG4gICAgICBpZiAocGF0dGVybiA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIHJldHVybiBoYXNVbmljb2RlV29yZChzdHJpbmcpID8gdW5pY29kZVdvcmRzKHN0cmluZykgOiBhc2NpaVdvcmRzKHN0cmluZyk7XG4gICAgICB9XG4gICAgICByZXR1cm4gc3RyaW5nLm1hdGNoKHBhdHRlcm4pIHx8IFtdO1xuICAgIH1cblxuICAgIC8qLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKi9cblxuICAgIC8qKlxuICAgICAqIEF0dGVtcHRzIHRvIGludm9rZSBgZnVuY2AsIHJldHVybmluZyBlaXRoZXIgdGhlIHJlc3VsdCBvciB0aGUgY2F1Z2h0IGVycm9yXG4gICAgICogb2JqZWN0LiBBbnkgYWRkaXRpb25hbCBhcmd1bWVudHMgYXJlIHByb3ZpZGVkIHRvIGBmdW5jYCB3aGVuIGl0J3MgaW52b2tlZC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAzLjAuMFxuICAgICAqIEBjYXRlZ29yeSBVdGlsXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gZnVuYyBUaGUgZnVuY3Rpb24gdG8gYXR0ZW1wdC5cbiAgICAgKiBAcGFyYW0gey4uLip9IFthcmdzXSBUaGUgYXJndW1lbnRzIHRvIGludm9rZSBgZnVuY2Agd2l0aC5cbiAgICAgKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgYGZ1bmNgIHJlc3VsdCBvciBlcnJvciBvYmplY3QuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIC8vIEF2b2lkIHRocm93aW5nIGVycm9ycyBmb3IgaW52YWxpZCBzZWxlY3RvcnMuXG4gICAgICogdmFyIGVsZW1lbnRzID0gXy5hdHRlbXB0KGZ1bmN0aW9uKHNlbGVjdG9yKSB7XG4gICAgICogICByZXR1cm4gZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbChzZWxlY3Rvcik7XG4gICAgICogfSwgJz5fPicpO1xuICAgICAqXG4gICAgICogaWYgKF8uaXNFcnJvcihlbGVtZW50cykpIHtcbiAgICAgKiAgIGVsZW1lbnRzID0gW107XG4gICAgICogfVxuICAgICAqL1xuICAgIHZhciBhdHRlbXB0ID0gYmFzZVJlc3QoZnVuY3Rpb24oZnVuYywgYXJncykge1xuICAgICAgdHJ5IHtcbiAgICAgICAgcmV0dXJuIGFwcGx5KGZ1bmMsIHVuZGVmaW5lZCwgYXJncyk7XG4gICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIHJldHVybiBpc0Vycm9yKGUpID8gZSA6IG5ldyBFcnJvcihlKTtcbiAgICAgIH1cbiAgICB9KTtcblxuICAgIC8qKlxuICAgICAqIEJpbmRzIG1ldGhvZHMgb2YgYW4gb2JqZWN0IHRvIHRoZSBvYmplY3QgaXRzZWxmLCBvdmVyd3JpdGluZyB0aGUgZXhpc3RpbmdcbiAgICAgKiBtZXRob2QuXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogVGhpcyBtZXRob2QgZG9lc24ndCBzZXQgdGhlIFwibGVuZ3RoXCIgcHJvcGVydHkgb2YgYm91bmQgZnVuY3Rpb25zLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQGNhdGVnb3J5IFV0aWxcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gYmluZCBhbmQgYXNzaWduIHRoZSBib3VuZCBtZXRob2RzIHRvLlxuICAgICAqIEBwYXJhbSB7Li4uKHN0cmluZ3xzdHJpbmdbXSl9IG1ldGhvZE5hbWVzIFRoZSBvYmplY3QgbWV0aG9kIG5hbWVzIHRvIGJpbmQuXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyBgb2JqZWN0YC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIHZpZXcgPSB7XG4gICAgICogICAnbGFiZWwnOiAnZG9jcycsXG4gICAgICogICAnY2xpY2snOiBmdW5jdGlvbigpIHtcbiAgICAgKiAgICAgY29uc29sZS5sb2coJ2NsaWNrZWQgJyArIHRoaXMubGFiZWwpO1xuICAgICAqICAgfVxuICAgICAqIH07XG4gICAgICpcbiAgICAgKiBfLmJpbmRBbGwodmlldywgWydjbGljayddKTtcbiAgICAgKiBqUXVlcnkoZWxlbWVudCkub24oJ2NsaWNrJywgdmlldy5jbGljayk7XG4gICAgICogLy8gPT4gTG9ncyAnY2xpY2tlZCBkb2NzJyB3aGVuIGNsaWNrZWQuXG4gICAgICovXG4gICAgdmFyIGJpbmRBbGwgPSBmbGF0UmVzdChmdW5jdGlvbihvYmplY3QsIG1ldGhvZE5hbWVzKSB7XG4gICAgICBhcnJheUVhY2gobWV0aG9kTmFtZXMsIGZ1bmN0aW9uKGtleSkge1xuICAgICAgICBrZXkgPSB0b0tleShrZXkpO1xuICAgICAgICBiYXNlQXNzaWduVmFsdWUob2JqZWN0LCBrZXksIGJpbmQob2JqZWN0W2tleV0sIG9iamVjdCkpO1xuICAgICAgfSk7XG4gICAgICByZXR1cm4gb2JqZWN0O1xuICAgIH0pO1xuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGZ1bmN0aW9uIHRoYXQgaXRlcmF0ZXMgb3ZlciBgcGFpcnNgIGFuZCBpbnZva2VzIHRoZSBjb3JyZXNwb25kaW5nXG4gICAgICogZnVuY3Rpb24gb2YgdGhlIGZpcnN0IHByZWRpY2F0ZSB0byByZXR1cm4gdHJ1dGh5LiBUaGUgcHJlZGljYXRlLWZ1bmN0aW9uXG4gICAgICogcGFpcnMgYXJlIGludm9rZWQgd2l0aCB0aGUgYHRoaXNgIGJpbmRpbmcgYW5kIGFyZ3VtZW50cyBvZiB0aGUgY3JlYXRlZFxuICAgICAqIGZ1bmN0aW9uLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IFV0aWxcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBwYWlycyBUaGUgcHJlZGljYXRlLWZ1bmN0aW9uIHBhaXJzLlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IGNvbXBvc2l0ZSBmdW5jdGlvbi5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIGZ1bmMgPSBfLmNvbmQoW1xuICAgICAqICAgW18ubWF0Y2hlcyh7ICdhJzogMSB9KSwgICAgICAgICAgIF8uY29uc3RhbnQoJ21hdGNoZXMgQScpXSxcbiAgICAgKiAgIFtfLmNvbmZvcm1zKHsgJ2InOiBfLmlzTnVtYmVyIH0pLCBfLmNvbnN0YW50KCdtYXRjaGVzIEInKV0sXG4gICAgICogICBbXy5zdHViVHJ1ZSwgICAgICAgICAgICAgICAgICAgICAgXy5jb25zdGFudCgnbm8gbWF0Y2gnKV1cbiAgICAgKiBdKTtcbiAgICAgKlxuICAgICAqIGZ1bmMoeyAnYSc6IDEsICdiJzogMiB9KTtcbiAgICAgKiAvLyA9PiAnbWF0Y2hlcyBBJ1xuICAgICAqXG4gICAgICogZnVuYyh7ICdhJzogMCwgJ2InOiAxIH0pO1xuICAgICAqIC8vID0+ICdtYXRjaGVzIEInXG4gICAgICpcbiAgICAgKiBmdW5jKHsgJ2EnOiAnMScsICdiJzogJzInIH0pO1xuICAgICAqIC8vID0+ICdubyBtYXRjaCdcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBjb25kKHBhaXJzKSB7XG4gICAgICB2YXIgbGVuZ3RoID0gcGFpcnMgPT0gbnVsbCA/IDAgOiBwYWlycy5sZW5ndGgsXG4gICAgICAgICAgdG9JdGVyYXRlZSA9IGdldEl0ZXJhdGVlKCk7XG5cbiAgICAgIHBhaXJzID0gIWxlbmd0aCA/IFtdIDogYXJyYXlNYXAocGFpcnMsIGZ1bmN0aW9uKHBhaXIpIHtcbiAgICAgICAgaWYgKHR5cGVvZiBwYWlyWzFdICE9ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKEZVTkNfRVJST1JfVEVYVCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIFt0b0l0ZXJhdGVlKHBhaXJbMF0pLCBwYWlyWzFdXTtcbiAgICAgIH0pO1xuXG4gICAgICByZXR1cm4gYmFzZVJlc3QoZnVuY3Rpb24oYXJncykge1xuICAgICAgICB2YXIgaW5kZXggPSAtMTtcbiAgICAgICAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICAgICAgICB2YXIgcGFpciA9IHBhaXJzW2luZGV4XTtcbiAgICAgICAgICBpZiAoYXBwbHkocGFpclswXSwgdGhpcywgYXJncykpIHtcbiAgICAgICAgICAgIHJldHVybiBhcHBseShwYWlyWzFdLCB0aGlzLCBhcmdzKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBmdW5jdGlvbiB0aGF0IGludm9rZXMgdGhlIHByZWRpY2F0ZSBwcm9wZXJ0aWVzIG9mIGBzb3VyY2VgIHdpdGhcbiAgICAgKiB0aGUgY29ycmVzcG9uZGluZyBwcm9wZXJ0eSB2YWx1ZXMgb2YgYSBnaXZlbiBvYmplY3QsIHJldHVybmluZyBgdHJ1ZWAgaWZcbiAgICAgKiBhbGwgcHJlZGljYXRlcyByZXR1cm4gdHJ1dGh5LCBlbHNlIGBmYWxzZWAuXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogVGhlIGNyZWF0ZWQgZnVuY3Rpb24gaXMgZXF1aXZhbGVudCB0byBgXy5jb25mb3Jtc1RvYCB3aXRoXG4gICAgICogYHNvdXJjZWAgcGFydGlhbGx5IGFwcGxpZWQuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgVXRpbFxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBzb3VyY2UgVGhlIG9iamVjdCBvZiBwcm9wZXJ0eSBwcmVkaWNhdGVzIHRvIGNvbmZvcm0gdG8uXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgc3BlYyBmdW5jdGlvbi5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIG9iamVjdHMgPSBbXG4gICAgICogICB7ICdhJzogMiwgJ2InOiAxIH0sXG4gICAgICogICB7ICdhJzogMSwgJ2InOiAyIH1cbiAgICAgKiBdO1xuICAgICAqXG4gICAgICogXy5maWx0ZXIob2JqZWN0cywgXy5jb25mb3Jtcyh7ICdiJzogZnVuY3Rpb24obikgeyByZXR1cm4gbiA+IDE7IH0gfSkpO1xuICAgICAqIC8vID0+IFt7ICdhJzogMSwgJ2InOiAyIH1dXG4gICAgICovXG4gICAgZnVuY3Rpb24gY29uZm9ybXMoc291cmNlKSB7XG4gICAgICByZXR1cm4gYmFzZUNvbmZvcm1zKGJhc2VDbG9uZShzb3VyY2UsIENMT05FX0RFRVBfRkxBRykpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBmdW5jdGlvbiB0aGF0IHJldHVybnMgYHZhbHVlYC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAyLjQuMFxuICAgICAqIEBjYXRlZ29yeSBVdGlsXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gcmV0dXJuIGZyb20gdGhlIG5ldyBmdW5jdGlvbi5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBjb25zdGFudCBmdW5jdGlvbi5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIG9iamVjdHMgPSBfLnRpbWVzKDIsIF8uY29uc3RhbnQoeyAnYSc6IDEgfSkpO1xuICAgICAqXG4gICAgICogY29uc29sZS5sb2cob2JqZWN0cyk7XG4gICAgICogLy8gPT4gW3sgJ2EnOiAxIH0sIHsgJ2EnOiAxIH1dXG4gICAgICpcbiAgICAgKiBjb25zb2xlLmxvZyhvYmplY3RzWzBdID09PSBvYmplY3RzWzFdKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICovXG4gICAgZnVuY3Rpb24gY29uc3RhbnQodmFsdWUpIHtcbiAgICAgIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIHZhbHVlO1xuICAgICAgfTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDaGVja3MgYHZhbHVlYCB0byBkZXRlcm1pbmUgd2hldGhlciBhIGRlZmF1bHQgdmFsdWUgc2hvdWxkIGJlIHJldHVybmVkIGluXG4gICAgICogaXRzIHBsYWNlLiBUaGUgYGRlZmF1bHRWYWx1ZWAgaXMgcmV0dXJuZWQgaWYgYHZhbHVlYCBpcyBgTmFOYCwgYG51bGxgLFxuICAgICAqIG9yIGB1bmRlZmluZWRgLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMTQuMFxuICAgICAqIEBjYXRlZ29yeSBVdGlsXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gICAgICogQHBhcmFtIHsqfSBkZWZhdWx0VmFsdWUgVGhlIGRlZmF1bHQgdmFsdWUuXG4gICAgICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIHJlc29sdmVkIHZhbHVlLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmRlZmF1bHRUbygxLCAxMCk7XG4gICAgICogLy8gPT4gMVxuICAgICAqXG4gICAgICogXy5kZWZhdWx0VG8odW5kZWZpbmVkLCAxMCk7XG4gICAgICogLy8gPT4gMTBcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBkZWZhdWx0VG8odmFsdWUsIGRlZmF1bHRWYWx1ZSkge1xuICAgICAgcmV0dXJuICh2YWx1ZSA9PSBudWxsIHx8IHZhbHVlICE9PSB2YWx1ZSkgPyBkZWZhdWx0VmFsdWUgOiB2YWx1ZTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgZnVuY3Rpb24gdGhhdCByZXR1cm5zIHRoZSByZXN1bHQgb2YgaW52b2tpbmcgdGhlIGdpdmVuIGZ1bmN0aW9uc1xuICAgICAqIHdpdGggdGhlIGB0aGlzYCBiaW5kaW5nIG9mIHRoZSBjcmVhdGVkIGZ1bmN0aW9uLCB3aGVyZSBlYWNoIHN1Y2Nlc3NpdmVcbiAgICAgKiBpbnZvY2F0aW9uIGlzIHN1cHBsaWVkIHRoZSByZXR1cm4gdmFsdWUgb2YgdGhlIHByZXZpb3VzLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDMuMC4wXG4gICAgICogQGNhdGVnb3J5IFV0aWxcbiAgICAgKiBAcGFyYW0gey4uLihGdW5jdGlvbnxGdW5jdGlvbltdKX0gW2Z1bmNzXSBUaGUgZnVuY3Rpb25zIHRvIGludm9rZS5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBjb21wb3NpdGUgZnVuY3Rpb24uXG4gICAgICogQHNlZSBfLmZsb3dSaWdodFxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBmdW5jdGlvbiBzcXVhcmUobikge1xuICAgICAqICAgcmV0dXJuIG4gKiBuO1xuICAgICAqIH1cbiAgICAgKlxuICAgICAqIHZhciBhZGRTcXVhcmUgPSBfLmZsb3coW18uYWRkLCBzcXVhcmVdKTtcbiAgICAgKiBhZGRTcXVhcmUoMSwgMik7XG4gICAgICogLy8gPT4gOVxuICAgICAqL1xuICAgIHZhciBmbG93ID0gY3JlYXRlRmxvdygpO1xuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgaXMgbGlrZSBgXy5mbG93YCBleGNlcHQgdGhhdCBpdCBjcmVhdGVzIGEgZnVuY3Rpb24gdGhhdFxuICAgICAqIGludm9rZXMgdGhlIGdpdmVuIGZ1bmN0aW9ucyBmcm9tIHJpZ2h0IHRvIGxlZnQuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQHNpbmNlIDMuMC4wXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAY2F0ZWdvcnkgVXRpbFxuICAgICAqIEBwYXJhbSB7Li4uKEZ1bmN0aW9ufEZ1bmN0aW9uW10pfSBbZnVuY3NdIFRoZSBmdW5jdGlvbnMgdG8gaW52b2tlLlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IGNvbXBvc2l0ZSBmdW5jdGlvbi5cbiAgICAgKiBAc2VlIF8uZmxvd1xuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBmdW5jdGlvbiBzcXVhcmUobikge1xuICAgICAqICAgcmV0dXJuIG4gKiBuO1xuICAgICAqIH1cbiAgICAgKlxuICAgICAqIHZhciBhZGRTcXVhcmUgPSBfLmZsb3dSaWdodChbc3F1YXJlLCBfLmFkZF0pO1xuICAgICAqIGFkZFNxdWFyZSgxLCAyKTtcbiAgICAgKiAvLyA9PiA5XG4gICAgICovXG4gICAgdmFyIGZsb3dSaWdodCA9IGNyZWF0ZUZsb3codHJ1ZSk7XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCByZXR1cm5zIHRoZSBmaXJzdCBhcmd1bWVudCBpdCByZWNlaXZlcy5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBjYXRlZ29yeSBVdGlsXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBBbnkgdmFsdWUuXG4gICAgICogQHJldHVybnMgeyp9IFJldHVybnMgYHZhbHVlYC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIG9iamVjdCA9IHsgJ2EnOiAxIH07XG4gICAgICpcbiAgICAgKiBjb25zb2xlLmxvZyhfLmlkZW50aXR5KG9iamVjdCkgPT09IG9iamVjdCk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGlkZW50aXR5KHZhbHVlKSB7XG4gICAgICByZXR1cm4gdmFsdWU7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGZ1bmN0aW9uIHRoYXQgaW52b2tlcyBgZnVuY2Agd2l0aCB0aGUgYXJndW1lbnRzIG9mIHRoZSBjcmVhdGVkXG4gICAgICogZnVuY3Rpb24uIElmIGBmdW5jYCBpcyBhIHByb3BlcnR5IG5hbWUsIHRoZSBjcmVhdGVkIGZ1bmN0aW9uIHJldHVybnMgdGhlXG4gICAgICogcHJvcGVydHkgdmFsdWUgZm9yIGEgZ2l2ZW4gZWxlbWVudC4gSWYgYGZ1bmNgIGlzIGFuIGFycmF5IG9yIG9iamVjdCwgdGhlXG4gICAgICogY3JlYXRlZCBmdW5jdGlvbiByZXR1cm5zIGB0cnVlYCBmb3IgZWxlbWVudHMgdGhhdCBjb250YWluIHRoZSBlcXVpdmFsZW50XG4gICAgICogc291cmNlIHByb3BlcnRpZXMsIG90aGVyd2lzZSBpdCByZXR1cm5zIGBmYWxzZWAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAY2F0ZWdvcnkgVXRpbFxuICAgICAqIEBwYXJhbSB7Kn0gW2Z1bmM9Xy5pZGVudGl0eV0gVGhlIHZhbHVlIHRvIGNvbnZlcnQgdG8gYSBjYWxsYmFjay5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIGNhbGxiYWNrLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgdXNlcnMgPSBbXG4gICAgICogICB7ICd1c2VyJzogJ2Jhcm5leScsICdhZ2UnOiAzNiwgJ2FjdGl2ZSc6IHRydWUgfSxcbiAgICAgKiAgIHsgJ3VzZXInOiAnZnJlZCcsICAgJ2FnZSc6IDQwLCAnYWN0aXZlJzogZmFsc2UgfVxuICAgICAqIF07XG4gICAgICpcbiAgICAgKiAvLyBUaGUgYF8ubWF0Y2hlc2AgaXRlcmF0ZWUgc2hvcnRoYW5kLlxuICAgICAqIF8uZmlsdGVyKHVzZXJzLCBfLml0ZXJhdGVlKHsgJ3VzZXInOiAnYmFybmV5JywgJ2FjdGl2ZSc6IHRydWUgfSkpO1xuICAgICAqIC8vID0+IFt7ICd1c2VyJzogJ2Jhcm5leScsICdhZ2UnOiAzNiwgJ2FjdGl2ZSc6IHRydWUgfV1cbiAgICAgKlxuICAgICAqIC8vIFRoZSBgXy5tYXRjaGVzUHJvcGVydHlgIGl0ZXJhdGVlIHNob3J0aGFuZC5cbiAgICAgKiBfLmZpbHRlcih1c2VycywgXy5pdGVyYXRlZShbJ3VzZXInLCAnZnJlZCddKSk7XG4gICAgICogLy8gPT4gW3sgJ3VzZXInOiAnZnJlZCcsICdhZ2UnOiA0MCB9XVxuICAgICAqXG4gICAgICogLy8gVGhlIGBfLnByb3BlcnR5YCBpdGVyYXRlZSBzaG9ydGhhbmQuXG4gICAgICogXy5tYXAodXNlcnMsIF8uaXRlcmF0ZWUoJ3VzZXInKSk7XG4gICAgICogLy8gPT4gWydiYXJuZXknLCAnZnJlZCddXG4gICAgICpcbiAgICAgKiAvLyBDcmVhdGUgY3VzdG9tIGl0ZXJhdGVlIHNob3J0aGFuZHMuXG4gICAgICogXy5pdGVyYXRlZSA9IF8ud3JhcChfLml0ZXJhdGVlLCBmdW5jdGlvbihpdGVyYXRlZSwgZnVuYykge1xuICAgICAqICAgcmV0dXJuICFfLmlzUmVnRXhwKGZ1bmMpID8gaXRlcmF0ZWUoZnVuYykgOiBmdW5jdGlvbihzdHJpbmcpIHtcbiAgICAgKiAgICAgcmV0dXJuIGZ1bmMudGVzdChzdHJpbmcpO1xuICAgICAqICAgfTtcbiAgICAgKiB9KTtcbiAgICAgKlxuICAgICAqIF8uZmlsdGVyKFsnYWJjJywgJ2RlZiddLCAvZWYvKTtcbiAgICAgKiAvLyA9PiBbJ2RlZiddXG4gICAgICovXG4gICAgZnVuY3Rpb24gaXRlcmF0ZWUoZnVuYykge1xuICAgICAgcmV0dXJuIGJhc2VJdGVyYXRlZSh0eXBlb2YgZnVuYyA9PSAnZnVuY3Rpb24nID8gZnVuYyA6IGJhc2VDbG9uZShmdW5jLCBDTE9ORV9ERUVQX0ZMQUcpKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgZnVuY3Rpb24gdGhhdCBwZXJmb3JtcyBhIHBhcnRpYWwgZGVlcCBjb21wYXJpc29uIGJldHdlZW4gYSBnaXZlblxuICAgICAqIG9iamVjdCBhbmQgYHNvdXJjZWAsIHJldHVybmluZyBgdHJ1ZWAgaWYgdGhlIGdpdmVuIG9iamVjdCBoYXMgZXF1aXZhbGVudFxuICAgICAqIHByb3BlcnR5IHZhbHVlcywgZWxzZSBgZmFsc2VgLlxuICAgICAqXG4gICAgICogKipOb3RlOioqIFRoZSBjcmVhdGVkIGZ1bmN0aW9uIGlzIGVxdWl2YWxlbnQgdG8gYF8uaXNNYXRjaGAgd2l0aCBgc291cmNlYFxuICAgICAqIHBhcnRpYWxseSBhcHBsaWVkLlxuICAgICAqXG4gICAgICogUGFydGlhbCBjb21wYXJpc29ucyB3aWxsIG1hdGNoIGVtcHR5IGFycmF5IGFuZCBlbXB0eSBvYmplY3QgYHNvdXJjZWBcbiAgICAgKiB2YWx1ZXMgYWdhaW5zdCBhbnkgYXJyYXkgb3Igb2JqZWN0IHZhbHVlLCByZXNwZWN0aXZlbHkuIFNlZSBgXy5pc0VxdWFsYFxuICAgICAqIGZvciBhIGxpc3Qgb2Ygc3VwcG9ydGVkIHZhbHVlIGNvbXBhcmlzb25zLlxuICAgICAqXG4gICAgICogKipOb3RlOioqIE11bHRpcGxlIHZhbHVlcyBjYW4gYmUgY2hlY2tlZCBieSBjb21iaW5pbmcgc2V2ZXJhbCBtYXRjaGVyc1xuICAgICAqIHVzaW5nIGBfLm92ZXJTb21lYFxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDMuMC4wXG4gICAgICogQGNhdGVnb3J5IFV0aWxcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gc291cmNlIFRoZSBvYmplY3Qgb2YgcHJvcGVydHkgdmFsdWVzIHRvIG1hdGNoLlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IHNwZWMgZnVuY3Rpb24uXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBvYmplY3RzID0gW1xuICAgICAqICAgeyAnYSc6IDEsICdiJzogMiwgJ2MnOiAzIH0sXG4gICAgICogICB7ICdhJzogNCwgJ2InOiA1LCAnYyc6IDYgfVxuICAgICAqIF07XG4gICAgICpcbiAgICAgKiBfLmZpbHRlcihvYmplY3RzLCBfLm1hdGNoZXMoeyAnYSc6IDQsICdjJzogNiB9KSk7XG4gICAgICogLy8gPT4gW3sgJ2EnOiA0LCAnYic6IDUsICdjJzogNiB9XVxuICAgICAqXG4gICAgICogLy8gQ2hlY2tpbmcgZm9yIHNldmVyYWwgcG9zc2libGUgdmFsdWVzXG4gICAgICogXy5maWx0ZXIob2JqZWN0cywgXy5vdmVyU29tZShbXy5tYXRjaGVzKHsgJ2EnOiAxIH0pLCBfLm1hdGNoZXMoeyAnYSc6IDQgfSldKSk7XG4gICAgICogLy8gPT4gW3sgJ2EnOiAxLCAnYic6IDIsICdjJzogMyB9LCB7ICdhJzogNCwgJ2InOiA1LCAnYyc6IDYgfV1cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBtYXRjaGVzKHNvdXJjZSkge1xuICAgICAgcmV0dXJuIGJhc2VNYXRjaGVzKGJhc2VDbG9uZShzb3VyY2UsIENMT05FX0RFRVBfRkxBRykpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBmdW5jdGlvbiB0aGF0IHBlcmZvcm1zIGEgcGFydGlhbCBkZWVwIGNvbXBhcmlzb24gYmV0d2VlbiB0aGVcbiAgICAgKiB2YWx1ZSBhdCBgcGF0aGAgb2YgYSBnaXZlbiBvYmplY3QgdG8gYHNyY1ZhbHVlYCwgcmV0dXJuaW5nIGB0cnVlYCBpZiB0aGVcbiAgICAgKiBvYmplY3QgdmFsdWUgaXMgZXF1aXZhbGVudCwgZWxzZSBgZmFsc2VgLlxuICAgICAqXG4gICAgICogKipOb3RlOioqIFBhcnRpYWwgY29tcGFyaXNvbnMgd2lsbCBtYXRjaCBlbXB0eSBhcnJheSBhbmQgZW1wdHkgb2JqZWN0XG4gICAgICogYHNyY1ZhbHVlYCB2YWx1ZXMgYWdhaW5zdCBhbnkgYXJyYXkgb3Igb2JqZWN0IHZhbHVlLCByZXNwZWN0aXZlbHkuIFNlZVxuICAgICAqIGBfLmlzRXF1YWxgIGZvciBhIGxpc3Qgb2Ygc3VwcG9ydGVkIHZhbHVlIGNvbXBhcmlzb25zLlxuICAgICAqXG4gICAgICogKipOb3RlOioqIE11bHRpcGxlIHZhbHVlcyBjYW4gYmUgY2hlY2tlZCBieSBjb21iaW5pbmcgc2V2ZXJhbCBtYXRjaGVyc1xuICAgICAqIHVzaW5nIGBfLm92ZXJTb21lYFxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDMuMi4wXG4gICAgICogQGNhdGVnb3J5IFV0aWxcbiAgICAgKiBAcGFyYW0ge0FycmF5fHN0cmluZ30gcGF0aCBUaGUgcGF0aCBvZiB0aGUgcHJvcGVydHkgdG8gZ2V0LlxuICAgICAqIEBwYXJhbSB7Kn0gc3JjVmFsdWUgVGhlIHZhbHVlIHRvIG1hdGNoLlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IHNwZWMgZnVuY3Rpb24uXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBvYmplY3RzID0gW1xuICAgICAqICAgeyAnYSc6IDEsICdiJzogMiwgJ2MnOiAzIH0sXG4gICAgICogICB7ICdhJzogNCwgJ2InOiA1LCAnYyc6IDYgfVxuICAgICAqIF07XG4gICAgICpcbiAgICAgKiBfLmZpbmQob2JqZWN0cywgXy5tYXRjaGVzUHJvcGVydHkoJ2EnLCA0KSk7XG4gICAgICogLy8gPT4geyAnYSc6IDQsICdiJzogNSwgJ2MnOiA2IH1cbiAgICAgKlxuICAgICAqIC8vIENoZWNraW5nIGZvciBzZXZlcmFsIHBvc3NpYmxlIHZhbHVlc1xuICAgICAqIF8uZmlsdGVyKG9iamVjdHMsIF8ub3ZlclNvbWUoW18ubWF0Y2hlc1Byb3BlcnR5KCdhJywgMSksIF8ubWF0Y2hlc1Byb3BlcnR5KCdhJywgNCldKSk7XG4gICAgICogLy8gPT4gW3sgJ2EnOiAxLCAnYic6IDIsICdjJzogMyB9LCB7ICdhJzogNCwgJ2InOiA1LCAnYyc6IDYgfV1cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBtYXRjaGVzUHJvcGVydHkocGF0aCwgc3JjVmFsdWUpIHtcbiAgICAgIHJldHVybiBiYXNlTWF0Y2hlc1Byb3BlcnR5KHBhdGgsIGJhc2VDbG9uZShzcmNWYWx1ZSwgQ0xPTkVfREVFUF9GTEFHKSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGZ1bmN0aW9uIHRoYXQgaW52b2tlcyB0aGUgbWV0aG9kIGF0IGBwYXRoYCBvZiBhIGdpdmVuIG9iamVjdC5cbiAgICAgKiBBbnkgYWRkaXRpb25hbCBhcmd1bWVudHMgYXJlIHByb3ZpZGVkIHRvIHRoZSBpbnZva2VkIG1ldGhvZC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAzLjcuMFxuICAgICAqIEBjYXRlZ29yeSBVdGlsXG4gICAgICogQHBhcmFtIHtBcnJheXxzdHJpbmd9IHBhdGggVGhlIHBhdGggb2YgdGhlIG1ldGhvZCB0byBpbnZva2UuXG4gICAgICogQHBhcmFtIHsuLi4qfSBbYXJnc10gVGhlIGFyZ3VtZW50cyB0byBpbnZva2UgdGhlIG1ldGhvZCB3aXRoLlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IGludm9rZXIgZnVuY3Rpb24uXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBvYmplY3RzID0gW1xuICAgICAqICAgeyAnYSc6IHsgJ2InOiBfLmNvbnN0YW50KDIpIH0gfSxcbiAgICAgKiAgIHsgJ2EnOiB7ICdiJzogXy5jb25zdGFudCgxKSB9IH1cbiAgICAgKiBdO1xuICAgICAqXG4gICAgICogXy5tYXAob2JqZWN0cywgXy5tZXRob2QoJ2EuYicpKTtcbiAgICAgKiAvLyA9PiBbMiwgMV1cbiAgICAgKlxuICAgICAqIF8ubWFwKG9iamVjdHMsIF8ubWV0aG9kKFsnYScsICdiJ10pKTtcbiAgICAgKiAvLyA9PiBbMiwgMV1cbiAgICAgKi9cbiAgICB2YXIgbWV0aG9kID0gYmFzZVJlc3QoZnVuY3Rpb24ocGF0aCwgYXJncykge1xuICAgICAgcmV0dXJuIGZ1bmN0aW9uKG9iamVjdCkge1xuICAgICAgICByZXR1cm4gYmFzZUludm9rZShvYmplY3QsIHBhdGgsIGFyZ3MpO1xuICAgICAgfTtcbiAgICB9KTtcblxuICAgIC8qKlxuICAgICAqIFRoZSBvcHBvc2l0ZSBvZiBgXy5tZXRob2RgOyB0aGlzIG1ldGhvZCBjcmVhdGVzIGEgZnVuY3Rpb24gdGhhdCBpbnZva2VzXG4gICAgICogdGhlIG1ldGhvZCBhdCBhIGdpdmVuIHBhdGggb2YgYG9iamVjdGAuIEFueSBhZGRpdGlvbmFsIGFyZ3VtZW50cyBhcmVcbiAgICAgKiBwcm92aWRlZCB0byB0aGUgaW52b2tlZCBtZXRob2QuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMy43LjBcbiAgICAgKiBAY2F0ZWdvcnkgVXRpbFxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBxdWVyeS5cbiAgICAgKiBAcGFyYW0gey4uLip9IFthcmdzXSBUaGUgYXJndW1lbnRzIHRvIGludm9rZSB0aGUgbWV0aG9kIHdpdGguXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgaW52b2tlciBmdW5jdGlvbi5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIGFycmF5ID0gXy50aW1lcygzLCBfLmNvbnN0YW50KSxcbiAgICAgKiAgICAgb2JqZWN0ID0geyAnYSc6IGFycmF5LCAnYic6IGFycmF5LCAnYyc6IGFycmF5IH07XG4gICAgICpcbiAgICAgKiBfLm1hcChbJ2FbMl0nLCAnY1swXSddLCBfLm1ldGhvZE9mKG9iamVjdCkpO1xuICAgICAqIC8vID0+IFsyLCAwXVxuICAgICAqXG4gICAgICogXy5tYXAoW1snYScsICcyJ10sIFsnYycsICcwJ11dLCBfLm1ldGhvZE9mKG9iamVjdCkpO1xuICAgICAqIC8vID0+IFsyLCAwXVxuICAgICAqL1xuICAgIHZhciBtZXRob2RPZiA9IGJhc2VSZXN0KGZ1bmN0aW9uKG9iamVjdCwgYXJncykge1xuICAgICAgcmV0dXJuIGZ1bmN0aW9uKHBhdGgpIHtcbiAgICAgICAgcmV0dXJuIGJhc2VJbnZva2Uob2JqZWN0LCBwYXRoLCBhcmdzKTtcbiAgICAgIH07XG4gICAgfSk7XG5cbiAgICAvKipcbiAgICAgKiBBZGRzIGFsbCBvd24gZW51bWVyYWJsZSBzdHJpbmcga2V5ZWQgZnVuY3Rpb24gcHJvcGVydGllcyBvZiBhIHNvdXJjZVxuICAgICAqIG9iamVjdCB0byB0aGUgZGVzdGluYXRpb24gb2JqZWN0LiBJZiBgb2JqZWN0YCBpcyBhIGZ1bmN0aW9uLCB0aGVuIG1ldGhvZHNcbiAgICAgKiBhcmUgYWRkZWQgdG8gaXRzIHByb3RvdHlwZSBhcyB3ZWxsLlxuICAgICAqXG4gICAgICogKipOb3RlOioqIFVzZSBgXy5ydW5JbkNvbnRleHRgIHRvIGNyZWF0ZSBhIHByaXN0aW5lIGBsb2Rhc2hgIGZ1bmN0aW9uIHRvXG4gICAgICogYXZvaWQgY29uZmxpY3RzIGNhdXNlZCBieSBtb2RpZnlpbmcgdGhlIG9yaWdpbmFsLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQGNhdGVnb3J5IFV0aWxcbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufE9iamVjdH0gW29iamVjdD1sb2Rhc2hdIFRoZSBkZXN0aW5hdGlvbiBvYmplY3QuXG4gICAgICogQHBhcmFtIHtPYmplY3R9IHNvdXJjZSBUaGUgb2JqZWN0IG9mIGZ1bmN0aW9ucyB0byBhZGQuXG4gICAgICogQHBhcmFtIHtPYmplY3R9IFtvcHRpb25zPXt9XSBUaGUgb3B0aW9ucyBvYmplY3QuXG4gICAgICogQHBhcmFtIHtib29sZWFufSBbb3B0aW9ucy5jaGFpbj10cnVlXSBTcGVjaWZ5IHdoZXRoZXIgbWl4aW5zIGFyZSBjaGFpbmFibGUuXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufE9iamVjdH0gUmV0dXJucyBgb2JqZWN0YC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogZnVuY3Rpb24gdm93ZWxzKHN0cmluZykge1xuICAgICAqICAgcmV0dXJuIF8uZmlsdGVyKHN0cmluZywgZnVuY3Rpb24odikge1xuICAgICAqICAgICByZXR1cm4gL1thZWlvdV0vaS50ZXN0KHYpO1xuICAgICAqICAgfSk7XG4gICAgICogfVxuICAgICAqXG4gICAgICogXy5taXhpbih7ICd2b3dlbHMnOiB2b3dlbHMgfSk7XG4gICAgICogXy52b3dlbHMoJ2ZyZWQnKTtcbiAgICAgKiAvLyA9PiBbJ2UnXVxuICAgICAqXG4gICAgICogXygnZnJlZCcpLnZvd2VscygpLnZhbHVlKCk7XG4gICAgICogLy8gPT4gWydlJ11cbiAgICAgKlxuICAgICAqIF8ubWl4aW4oeyAndm93ZWxzJzogdm93ZWxzIH0sIHsgJ2NoYWluJzogZmFsc2UgfSk7XG4gICAgICogXygnZnJlZCcpLnZvd2VscygpO1xuICAgICAqIC8vID0+IFsnZSddXG4gICAgICovXG4gICAgZnVuY3Rpb24gbWl4aW4ob2JqZWN0LCBzb3VyY2UsIG9wdGlvbnMpIHtcbiAgICAgIHZhciBwcm9wcyA9IGtleXMoc291cmNlKSxcbiAgICAgICAgICBtZXRob2ROYW1lcyA9IGJhc2VGdW5jdGlvbnMoc291cmNlLCBwcm9wcyk7XG5cbiAgICAgIGlmIChvcHRpb25zID09IG51bGwgJiZcbiAgICAgICAgICAhKGlzT2JqZWN0KHNvdXJjZSkgJiYgKG1ldGhvZE5hbWVzLmxlbmd0aCB8fCAhcHJvcHMubGVuZ3RoKSkpIHtcbiAgICAgICAgb3B0aW9ucyA9IHNvdXJjZTtcbiAgICAgICAgc291cmNlID0gb2JqZWN0O1xuICAgICAgICBvYmplY3QgPSB0aGlzO1xuICAgICAgICBtZXRob2ROYW1lcyA9IGJhc2VGdW5jdGlvbnMoc291cmNlLCBrZXlzKHNvdXJjZSkpO1xuICAgICAgfVxuICAgICAgdmFyIGNoYWluID0gIShpc09iamVjdChvcHRpb25zKSAmJiAnY2hhaW4nIGluIG9wdGlvbnMpIHx8ICEhb3B0aW9ucy5jaGFpbixcbiAgICAgICAgICBpc0Z1bmMgPSBpc0Z1bmN0aW9uKG9iamVjdCk7XG5cbiAgICAgIGFycmF5RWFjaChtZXRob2ROYW1lcywgZnVuY3Rpb24obWV0aG9kTmFtZSkge1xuICAgICAgICB2YXIgZnVuYyA9IHNvdXJjZVttZXRob2ROYW1lXTtcbiAgICAgICAgb2JqZWN0W21ldGhvZE5hbWVdID0gZnVuYztcbiAgICAgICAgaWYgKGlzRnVuYykge1xuICAgICAgICAgIG9iamVjdC5wcm90b3R5cGVbbWV0aG9kTmFtZV0gPSBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHZhciBjaGFpbkFsbCA9IHRoaXMuX19jaGFpbl9fO1xuICAgICAgICAgICAgaWYgKGNoYWluIHx8IGNoYWluQWxsKSB7XG4gICAgICAgICAgICAgIHZhciByZXN1bHQgPSBvYmplY3QodGhpcy5fX3dyYXBwZWRfXyksXG4gICAgICAgICAgICAgICAgICBhY3Rpb25zID0gcmVzdWx0Ll9fYWN0aW9uc19fID0gY29weUFycmF5KHRoaXMuX19hY3Rpb25zX18pO1xuXG4gICAgICAgICAgICAgIGFjdGlvbnMucHVzaCh7ICdmdW5jJzogZnVuYywgJ2FyZ3MnOiBhcmd1bWVudHMsICd0aGlzQXJnJzogb2JqZWN0IH0pO1xuICAgICAgICAgICAgICByZXN1bHQuX19jaGFpbl9fID0gY2hhaW5BbGw7XG4gICAgICAgICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gZnVuYy5hcHBseShvYmplY3QsIGFycmF5UHVzaChbdGhpcy52YWx1ZSgpXSwgYXJndW1lbnRzKSk7XG4gICAgICAgICAgfTtcbiAgICAgICAgfVxuICAgICAgfSk7XG5cbiAgICAgIHJldHVybiBvYmplY3Q7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUmV2ZXJ0cyB0aGUgYF9gIHZhcmlhYmxlIHRvIGl0cyBwcmV2aW91cyB2YWx1ZSBhbmQgcmV0dXJucyBhIHJlZmVyZW5jZSB0b1xuICAgICAqIHRoZSBgbG9kYXNoYCBmdW5jdGlvbi5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBjYXRlZ29yeSBVdGlsXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBgbG9kYXNoYCBmdW5jdGlvbi5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIGxvZGFzaCA9IF8ubm9Db25mbGljdCgpO1xuICAgICAqL1xuICAgIGZ1bmN0aW9uIG5vQ29uZmxpY3QoKSB7XG4gICAgICBpZiAocm9vdC5fID09PSB0aGlzKSB7XG4gICAgICAgIHJvb3QuXyA9IG9sZERhc2g7XG4gICAgICB9XG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCByZXR1cm5zIGB1bmRlZmluZWRgLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDIuMy4wXG4gICAgICogQGNhdGVnb3J5IFV0aWxcbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy50aW1lcygyLCBfLm5vb3ApO1xuICAgICAqIC8vID0+IFt1bmRlZmluZWQsIHVuZGVmaW5lZF1cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBub29wKCkge1xuICAgICAgLy8gTm8gb3BlcmF0aW9uIHBlcmZvcm1lZC5cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgZnVuY3Rpb24gdGhhdCBnZXRzIHRoZSBhcmd1bWVudCBhdCBpbmRleCBgbmAuIElmIGBuYCBpcyBuZWdhdGl2ZSxcbiAgICAgKiB0aGUgbnRoIGFyZ3VtZW50IGZyb20gdGhlIGVuZCBpcyByZXR1cm5lZC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBVdGlsXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFtuPTBdIFRoZSBpbmRleCBvZiB0aGUgYXJndW1lbnQgdG8gcmV0dXJuLlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IHBhc3MtdGhydSBmdW5jdGlvbi5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIGZ1bmMgPSBfLm50aEFyZygxKTtcbiAgICAgKiBmdW5jKCdhJywgJ2InLCAnYycsICdkJyk7XG4gICAgICogLy8gPT4gJ2InXG4gICAgICpcbiAgICAgKiB2YXIgZnVuYyA9IF8ubnRoQXJnKC0yKTtcbiAgICAgKiBmdW5jKCdhJywgJ2InLCAnYycsICdkJyk7XG4gICAgICogLy8gPT4gJ2MnXG4gICAgICovXG4gICAgZnVuY3Rpb24gbnRoQXJnKG4pIHtcbiAgICAgIG4gPSB0b0ludGVnZXIobik7XG4gICAgICByZXR1cm4gYmFzZVJlc3QoZnVuY3Rpb24oYXJncykge1xuICAgICAgICByZXR1cm4gYmFzZU50aChhcmdzLCBuKTtcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBmdW5jdGlvbiB0aGF0IGludm9rZXMgYGl0ZXJhdGVlc2Agd2l0aCB0aGUgYXJndW1lbnRzIGl0IHJlY2VpdmVzXG4gICAgICogYW5kIHJldHVybnMgdGhlaXIgcmVzdWx0cy5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBVdGlsXG4gICAgICogQHBhcmFtIHsuLi4oRnVuY3Rpb258RnVuY3Rpb25bXSl9IFtpdGVyYXRlZXM9W18uaWRlbnRpdHldXVxuICAgICAqICBUaGUgaXRlcmF0ZWVzIHRvIGludm9rZS5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBmdW5jdGlvbi5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIGZ1bmMgPSBfLm92ZXIoW01hdGgubWF4LCBNYXRoLm1pbl0pO1xuICAgICAqXG4gICAgICogZnVuYygxLCAyLCAzLCA0KTtcbiAgICAgKiAvLyA9PiBbNCwgMV1cbiAgICAgKi9cbiAgICB2YXIgb3ZlciA9IGNyZWF0ZU92ZXIoYXJyYXlNYXApO1xuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGZ1bmN0aW9uIHRoYXQgY2hlY2tzIGlmICoqYWxsKiogb2YgdGhlIGBwcmVkaWNhdGVzYCByZXR1cm5cbiAgICAgKiB0cnV0aHkgd2hlbiBpbnZva2VkIHdpdGggdGhlIGFyZ3VtZW50cyBpdCByZWNlaXZlcy5cbiAgICAgKlxuICAgICAqIEZvbGxvd2luZyBzaG9ydGhhbmRzIGFyZSBwb3NzaWJsZSBmb3IgcHJvdmlkaW5nIHByZWRpY2F0ZXMuXG4gICAgICogUGFzcyBhbiBgT2JqZWN0YCBhbmQgaXQgd2lsbCBiZSB1c2VkIGFzIGFuIHBhcmFtZXRlciBmb3IgYF8ubWF0Y2hlc2AgdG8gY3JlYXRlIHRoZSBwcmVkaWNhdGUuXG4gICAgICogUGFzcyBhbiBgQXJyYXlgIG9mIHBhcmFtZXRlcnMgZm9yIGBfLm1hdGNoZXNQcm9wZXJ0eWAgYW5kIHRoZSBwcmVkaWNhdGUgd2lsbCBiZSBjcmVhdGVkIHVzaW5nIHRoZW0uXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgVXRpbFxuICAgICAqIEBwYXJhbSB7Li4uKEZ1bmN0aW9ufEZ1bmN0aW9uW10pfSBbcHJlZGljYXRlcz1bXy5pZGVudGl0eV1dXG4gICAgICogIFRoZSBwcmVkaWNhdGVzIHRvIGNoZWNrLlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IGZ1bmN0aW9uLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgZnVuYyA9IF8ub3ZlckV2ZXJ5KFtCb29sZWFuLCBpc0Zpbml0ZV0pO1xuICAgICAqXG4gICAgICogZnVuYygnMScpO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIGZ1bmMobnVsbCk7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKlxuICAgICAqIGZ1bmMoTmFOKTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqL1xuICAgIHZhciBvdmVyRXZlcnkgPSBjcmVhdGVPdmVyKGFycmF5RXZlcnkpO1xuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGZ1bmN0aW9uIHRoYXQgY2hlY2tzIGlmICoqYW55Kiogb2YgdGhlIGBwcmVkaWNhdGVzYCByZXR1cm5cbiAgICAgKiB0cnV0aHkgd2hlbiBpbnZva2VkIHdpdGggdGhlIGFyZ3VtZW50cyBpdCByZWNlaXZlcy5cbiAgICAgKlxuICAgICAqIEZvbGxvd2luZyBzaG9ydGhhbmRzIGFyZSBwb3NzaWJsZSBmb3IgcHJvdmlkaW5nIHByZWRpY2F0ZXMuXG4gICAgICogUGFzcyBhbiBgT2JqZWN0YCBhbmQgaXQgd2lsbCBiZSB1c2VkIGFzIGFuIHBhcmFtZXRlciBmb3IgYF8ubWF0Y2hlc2AgdG8gY3JlYXRlIHRoZSBwcmVkaWNhdGUuXG4gICAgICogUGFzcyBhbiBgQXJyYXlgIG9mIHBhcmFtZXRlcnMgZm9yIGBfLm1hdGNoZXNQcm9wZXJ0eWAgYW5kIHRoZSBwcmVkaWNhdGUgd2lsbCBiZSBjcmVhdGVkIHVzaW5nIHRoZW0uXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgVXRpbFxuICAgICAqIEBwYXJhbSB7Li4uKEZ1bmN0aW9ufEZ1bmN0aW9uW10pfSBbcHJlZGljYXRlcz1bXy5pZGVudGl0eV1dXG4gICAgICogIFRoZSBwcmVkaWNhdGVzIHRvIGNoZWNrLlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IGZ1bmN0aW9uLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgZnVuYyA9IF8ub3ZlclNvbWUoW0Jvb2xlYW4sIGlzRmluaXRlXSk7XG4gICAgICpcbiAgICAgKiBmdW5jKCcxJyk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogZnVuYyhudWxsKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBmdW5jKE5hTik7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKlxuICAgICAqIHZhciBtYXRjaGVzRnVuYyA9IF8ub3ZlclNvbWUoW3sgJ2EnOiAxIH0sIHsgJ2EnOiAyIH1dKVxuICAgICAqIHZhciBtYXRjaGVzUHJvcGVydHlGdW5jID0gXy5vdmVyU29tZShbWydhJywgMV0sIFsnYScsIDJdXSlcbiAgICAgKi9cbiAgICB2YXIgb3ZlclNvbWUgPSBjcmVhdGVPdmVyKGFycmF5U29tZSk7XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgZnVuY3Rpb24gdGhhdCByZXR1cm5zIHRoZSB2YWx1ZSBhdCBgcGF0aGAgb2YgYSBnaXZlbiBvYmplY3QuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMi40LjBcbiAgICAgKiBAY2F0ZWdvcnkgVXRpbFxuICAgICAqIEBwYXJhbSB7QXJyYXl8c3RyaW5nfSBwYXRoIFRoZSBwYXRoIG9mIHRoZSBwcm9wZXJ0eSB0byBnZXQuXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgYWNjZXNzb3IgZnVuY3Rpb24uXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBvYmplY3RzID0gW1xuICAgICAqICAgeyAnYSc6IHsgJ2InOiAyIH0gfSxcbiAgICAgKiAgIHsgJ2EnOiB7ICdiJzogMSB9IH1cbiAgICAgKiBdO1xuICAgICAqXG4gICAgICogXy5tYXAob2JqZWN0cywgXy5wcm9wZXJ0eSgnYS5iJykpO1xuICAgICAqIC8vID0+IFsyLCAxXVxuICAgICAqXG4gICAgICogXy5tYXAoXy5zb3J0Qnkob2JqZWN0cywgXy5wcm9wZXJ0eShbJ2EnLCAnYiddKSksICdhLmInKTtcbiAgICAgKiAvLyA9PiBbMSwgMl1cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBwcm9wZXJ0eShwYXRoKSB7XG4gICAgICByZXR1cm4gaXNLZXkocGF0aCkgPyBiYXNlUHJvcGVydHkodG9LZXkocGF0aCkpIDogYmFzZVByb3BlcnR5RGVlcChwYXRoKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgb3Bwb3NpdGUgb2YgYF8ucHJvcGVydHlgOyB0aGlzIG1ldGhvZCBjcmVhdGVzIGEgZnVuY3Rpb24gdGhhdCByZXR1cm5zXG4gICAgICogdGhlIHZhbHVlIGF0IGEgZ2l2ZW4gcGF0aCBvZiBgb2JqZWN0YC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAzLjAuMFxuICAgICAqIEBjYXRlZ29yeSBVdGlsXG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIHF1ZXJ5LlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IGFjY2Vzc29yIGZ1bmN0aW9uLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgYXJyYXkgPSBbMCwgMSwgMl0sXG4gICAgICogICAgIG9iamVjdCA9IHsgJ2EnOiBhcnJheSwgJ2InOiBhcnJheSwgJ2MnOiBhcnJheSB9O1xuICAgICAqXG4gICAgICogXy5tYXAoWydhWzJdJywgJ2NbMF0nXSwgXy5wcm9wZXJ0eU9mKG9iamVjdCkpO1xuICAgICAqIC8vID0+IFsyLCAwXVxuICAgICAqXG4gICAgICogXy5tYXAoW1snYScsICcyJ10sIFsnYycsICcwJ11dLCBfLnByb3BlcnR5T2Yob2JqZWN0KSk7XG4gICAgICogLy8gPT4gWzIsIDBdXG4gICAgICovXG4gICAgZnVuY3Rpb24gcHJvcGVydHlPZihvYmplY3QpIHtcbiAgICAgIHJldHVybiBmdW5jdGlvbihwYXRoKSB7XG4gICAgICAgIHJldHVybiBvYmplY3QgPT0gbnVsbCA/IHVuZGVmaW5lZCA6IGJhc2VHZXQob2JqZWN0LCBwYXRoKTtcbiAgICAgIH07XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhbiBhcnJheSBvZiBudW1iZXJzIChwb3NpdGl2ZSBhbmQvb3IgbmVnYXRpdmUpIHByb2dyZXNzaW5nIGZyb21cbiAgICAgKiBgc3RhcnRgIHVwIHRvLCBidXQgbm90IGluY2x1ZGluZywgYGVuZGAuIEEgc3RlcCBvZiBgLTFgIGlzIHVzZWQgaWYgYSBuZWdhdGl2ZVxuICAgICAqIGBzdGFydGAgaXMgc3BlY2lmaWVkIHdpdGhvdXQgYW4gYGVuZGAgb3IgYHN0ZXBgLiBJZiBgZW5kYCBpcyBub3Qgc3BlY2lmaWVkLFxuICAgICAqIGl0J3Mgc2V0IHRvIGBzdGFydGAgd2l0aCBgc3RhcnRgIHRoZW4gc2V0IHRvIGAwYC5cbiAgICAgKlxuICAgICAqICoqTm90ZToqKiBKYXZhU2NyaXB0IGZvbGxvd3MgdGhlIElFRUUtNzU0IHN0YW5kYXJkIGZvciByZXNvbHZpbmdcbiAgICAgKiBmbG9hdGluZy1wb2ludCB2YWx1ZXMgd2hpY2ggY2FuIHByb2R1Y2UgdW5leHBlY3RlZCByZXN1bHRzLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQGNhdGVnb3J5IFV0aWxcbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW3N0YXJ0PTBdIFRoZSBzdGFydCBvZiB0aGUgcmFuZ2UuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IGVuZCBUaGUgZW5kIG9mIHRoZSByYW5nZS5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW3N0ZXA9MV0gVGhlIHZhbHVlIHRvIGluY3JlbWVudCBvciBkZWNyZW1lbnQgYnkuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSByYW5nZSBvZiBudW1iZXJzLlxuICAgICAqIEBzZWUgXy5pblJhbmdlLCBfLnJhbmdlUmlnaHRcbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5yYW5nZSg0KTtcbiAgICAgKiAvLyA9PiBbMCwgMSwgMiwgM11cbiAgICAgKlxuICAgICAqIF8ucmFuZ2UoLTQpO1xuICAgICAqIC8vID0+IFswLCAtMSwgLTIsIC0zXVxuICAgICAqXG4gICAgICogXy5yYW5nZSgxLCA1KTtcbiAgICAgKiAvLyA9PiBbMSwgMiwgMywgNF1cbiAgICAgKlxuICAgICAqIF8ucmFuZ2UoMCwgMjAsIDUpO1xuICAgICAqIC8vID0+IFswLCA1LCAxMCwgMTVdXG4gICAgICpcbiAgICAgKiBfLnJhbmdlKDAsIC00LCAtMSk7XG4gICAgICogLy8gPT4gWzAsIC0xLCAtMiwgLTNdXG4gICAgICpcbiAgICAgKiBfLnJhbmdlKDEsIDQsIDApO1xuICAgICAqIC8vID0+IFsxLCAxLCAxXVxuICAgICAqXG4gICAgICogXy5yYW5nZSgwKTtcbiAgICAgKiAvLyA9PiBbXVxuICAgICAqL1xuICAgIHZhciByYW5nZSA9IGNyZWF0ZVJhbmdlKCk7XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCBpcyBsaWtlIGBfLnJhbmdlYCBleGNlcHQgdGhhdCBpdCBwb3B1bGF0ZXMgdmFsdWVzIGluXG4gICAgICogZGVzY2VuZGluZyBvcmRlci5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBVdGlsXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFtzdGFydD0wXSBUaGUgc3RhcnQgb2YgdGhlIHJhbmdlLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBlbmQgVGhlIGVuZCBvZiB0aGUgcmFuZ2UuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFtzdGVwPTFdIFRoZSB2YWx1ZSB0byBpbmNyZW1lbnQgb3IgZGVjcmVtZW50IGJ5LlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgcmFuZ2Ugb2YgbnVtYmVycy5cbiAgICAgKiBAc2VlIF8uaW5SYW5nZSwgXy5yYW5nZVxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLnJhbmdlUmlnaHQoNCk7XG4gICAgICogLy8gPT4gWzMsIDIsIDEsIDBdXG4gICAgICpcbiAgICAgKiBfLnJhbmdlUmlnaHQoLTQpO1xuICAgICAqIC8vID0+IFstMywgLTIsIC0xLCAwXVxuICAgICAqXG4gICAgICogXy5yYW5nZVJpZ2h0KDEsIDUpO1xuICAgICAqIC8vID0+IFs0LCAzLCAyLCAxXVxuICAgICAqXG4gICAgICogXy5yYW5nZVJpZ2h0KDAsIDIwLCA1KTtcbiAgICAgKiAvLyA9PiBbMTUsIDEwLCA1LCAwXVxuICAgICAqXG4gICAgICogXy5yYW5nZVJpZ2h0KDAsIC00LCAtMSk7XG4gICAgICogLy8gPT4gWy0zLCAtMiwgLTEsIDBdXG4gICAgICpcbiAgICAgKiBfLnJhbmdlUmlnaHQoMSwgNCwgMCk7XG4gICAgICogLy8gPT4gWzEsIDEsIDFdXG4gICAgICpcbiAgICAgKiBfLnJhbmdlUmlnaHQoMCk7XG4gICAgICogLy8gPT4gW11cbiAgICAgKi9cbiAgICB2YXIgcmFuZ2VSaWdodCA9IGNyZWF0ZVJhbmdlKHRydWUpO1xuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgcmV0dXJucyBhIG5ldyBlbXB0eSBhcnJheS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjEzLjBcbiAgICAgKiBAY2F0ZWdvcnkgVXRpbFxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgbmV3IGVtcHR5IGFycmF5LlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgYXJyYXlzID0gXy50aW1lcygyLCBfLnN0dWJBcnJheSk7XG4gICAgICpcbiAgICAgKiBjb25zb2xlLmxvZyhhcnJheXMpO1xuICAgICAqIC8vID0+IFtbXSwgW11dXG4gICAgICpcbiAgICAgKiBjb25zb2xlLmxvZyhhcnJheXNbMF0gPT09IGFycmF5c1sxXSk7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBzdHViQXJyYXkoKSB7XG4gICAgICByZXR1cm4gW107XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgcmV0dXJucyBgZmFsc2VgLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMTMuMFxuICAgICAqIEBjYXRlZ29yeSBVdGlsXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYGZhbHNlYC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy50aW1lcygyLCBfLnN0dWJGYWxzZSk7XG4gICAgICogLy8gPT4gW2ZhbHNlLCBmYWxzZV1cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBzdHViRmFsc2UoKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgcmV0dXJucyBhIG5ldyBlbXB0eSBvYmplY3QuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4xMy4wXG4gICAgICogQGNhdGVnb3J5IFV0aWxcbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIHRoZSBuZXcgZW1wdHkgb2JqZWN0LlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgb2JqZWN0cyA9IF8udGltZXMoMiwgXy5zdHViT2JqZWN0KTtcbiAgICAgKlxuICAgICAqIGNvbnNvbGUubG9nKG9iamVjdHMpO1xuICAgICAqIC8vID0+IFt7fSwge31dXG4gICAgICpcbiAgICAgKiBjb25zb2xlLmxvZyhvYmplY3RzWzBdID09PSBvYmplY3RzWzFdKTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHN0dWJPYmplY3QoKSB7XG4gICAgICByZXR1cm4ge307XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgcmV0dXJucyBhbiBlbXB0eSBzdHJpbmcuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4xMy4wXG4gICAgICogQGNhdGVnb3J5IFV0aWxcbiAgICAgKiBAcmV0dXJucyB7c3RyaW5nfSBSZXR1cm5zIHRoZSBlbXB0eSBzdHJpbmcuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8udGltZXMoMiwgXy5zdHViU3RyaW5nKTtcbiAgICAgKiAvLyA9PiBbJycsICcnXVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHN0dWJTdHJpbmcoKSB7XG4gICAgICByZXR1cm4gJyc7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgcmV0dXJucyBgdHJ1ZWAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4xMy4wXG4gICAgICogQGNhdGVnb3J5IFV0aWxcbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8udGltZXMoMiwgXy5zdHViVHJ1ZSk7XG4gICAgICogLy8gPT4gW3RydWUsIHRydWVdXG4gICAgICovXG4gICAgZnVuY3Rpb24gc3R1YlRydWUoKSB7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBJbnZva2VzIHRoZSBpdGVyYXRlZSBgbmAgdGltZXMsIHJldHVybmluZyBhbiBhcnJheSBvZiB0aGUgcmVzdWx0cyBvZlxuICAgICAqIGVhY2ggaW52b2NhdGlvbi4gVGhlIGl0ZXJhdGVlIGlzIGludm9rZWQgd2l0aCBvbmUgYXJndW1lbnQ7IChpbmRleCkuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQHNpbmNlIDAuMS4wXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAY2F0ZWdvcnkgVXRpbFxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBuIFRoZSBudW1iZXIgb2YgdGltZXMgdG8gaW52b2tlIGBpdGVyYXRlZWAuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2l0ZXJhdGVlPV8uaWRlbnRpdHldIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBhcnJheSBvZiByZXN1bHRzLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLnRpbWVzKDMsIFN0cmluZyk7XG4gICAgICogLy8gPT4gWycwJywgJzEnLCAnMiddXG4gICAgICpcbiAgICAgKiAgXy50aW1lcyg0LCBfLmNvbnN0YW50KDApKTtcbiAgICAgKiAvLyA9PiBbMCwgMCwgMCwgMF1cbiAgICAgKi9cbiAgICBmdW5jdGlvbiB0aW1lcyhuLCBpdGVyYXRlZSkge1xuICAgICAgbiA9IHRvSW50ZWdlcihuKTtcbiAgICAgIGlmIChuIDwgMSB8fCBuID4gTUFYX1NBRkVfSU5URUdFUikge1xuICAgICAgICByZXR1cm4gW107XG4gICAgICB9XG4gICAgICB2YXIgaW5kZXggPSBNQVhfQVJSQVlfTEVOR1RILFxuICAgICAgICAgIGxlbmd0aCA9IG5hdGl2ZU1pbihuLCBNQVhfQVJSQVlfTEVOR1RIKTtcblxuICAgICAgaXRlcmF0ZWUgPSBnZXRJdGVyYXRlZShpdGVyYXRlZSk7XG4gICAgICBuIC09IE1BWF9BUlJBWV9MRU5HVEg7XG5cbiAgICAgIHZhciByZXN1bHQgPSBiYXNlVGltZXMobGVuZ3RoLCBpdGVyYXRlZSk7XG4gICAgICB3aGlsZSAoKytpbmRleCA8IG4pIHtcbiAgICAgICAgaXRlcmF0ZWUoaW5kZXgpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDb252ZXJ0cyBgdmFsdWVgIHRvIGEgcHJvcGVydHkgcGF0aCBhcnJheS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBVdGlsXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY29udmVydC5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIG5ldyBwcm9wZXJ0eSBwYXRoIGFycmF5LlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLnRvUGF0aCgnYS5iLmMnKTtcbiAgICAgKiAvLyA9PiBbJ2EnLCAnYicsICdjJ11cbiAgICAgKlxuICAgICAqIF8udG9QYXRoKCdhWzBdLmIuYycpO1xuICAgICAqIC8vID0+IFsnYScsICcwJywgJ2InLCAnYyddXG4gICAgICovXG4gICAgZnVuY3Rpb24gdG9QYXRoKHZhbHVlKSB7XG4gICAgICBpZiAoaXNBcnJheSh2YWx1ZSkpIHtcbiAgICAgICAgcmV0dXJuIGFycmF5TWFwKHZhbHVlLCB0b0tleSk7XG4gICAgICB9XG4gICAgICByZXR1cm4gaXNTeW1ib2wodmFsdWUpID8gW3ZhbHVlXSA6IGNvcHlBcnJheShzdHJpbmdUb1BhdGgodG9TdHJpbmcodmFsdWUpKSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogR2VuZXJhdGVzIGEgdW5pcXVlIElELiBJZiBgcHJlZml4YCBpcyBnaXZlbiwgdGhlIElEIGlzIGFwcGVuZGVkIHRvIGl0LlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQGNhdGVnb3J5IFV0aWxcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gW3ByZWZpeD0nJ10gVGhlIHZhbHVlIHRvIHByZWZpeCB0aGUgSUQgd2l0aC5cbiAgICAgKiBAcmV0dXJucyB7c3RyaW5nfSBSZXR1cm5zIHRoZSB1bmlxdWUgSUQuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8udW5pcXVlSWQoJ2NvbnRhY3RfJyk7XG4gICAgICogLy8gPT4gJ2NvbnRhY3RfMTA0J1xuICAgICAqXG4gICAgICogXy51bmlxdWVJZCgpO1xuICAgICAqIC8vID0+ICcxMDUnXG4gICAgICovXG4gICAgZnVuY3Rpb24gdW5pcXVlSWQocHJlZml4KSB7XG4gICAgICB2YXIgaWQgPSArK2lkQ291bnRlcjtcbiAgICAgIHJldHVybiB0b1N0cmluZyhwcmVmaXgpICsgaWQ7XG4gICAgfVxuXG4gICAgLyotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qL1xuXG4gICAgLyoqXG4gICAgICogQWRkcyB0d28gbnVtYmVycy5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAzLjQuMFxuICAgICAqIEBjYXRlZ29yeSBNYXRoXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IGF1Z2VuZCBUaGUgZmlyc3QgbnVtYmVyIGluIGFuIGFkZGl0aW9uLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBhZGRlbmQgVGhlIHNlY29uZCBudW1iZXIgaW4gYW4gYWRkaXRpb24uXG4gICAgICogQHJldHVybnMge251bWJlcn0gUmV0dXJucyB0aGUgdG90YWwuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uYWRkKDYsIDQpO1xuICAgICAqIC8vID0+IDEwXG4gICAgICovXG4gICAgdmFyIGFkZCA9IGNyZWF0ZU1hdGhPcGVyYXRpb24oZnVuY3Rpb24oYXVnZW5kLCBhZGRlbmQpIHtcbiAgICAgIHJldHVybiBhdWdlbmQgKyBhZGRlbmQ7XG4gICAgfSwgMCk7XG5cbiAgICAvKipcbiAgICAgKiBDb21wdXRlcyBgbnVtYmVyYCByb3VuZGVkIHVwIHRvIGBwcmVjaXNpb25gLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDMuMTAuMFxuICAgICAqIEBjYXRlZ29yeSBNYXRoXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IG51bWJlciBUaGUgbnVtYmVyIHRvIHJvdW5kIHVwLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbcHJlY2lzaW9uPTBdIFRoZSBwcmVjaXNpb24gdG8gcm91bmQgdXAgdG8uXG4gICAgICogQHJldHVybnMge251bWJlcn0gUmV0dXJucyB0aGUgcm91bmRlZCB1cCBudW1iZXIuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uY2VpbCg0LjAwNik7XG4gICAgICogLy8gPT4gNVxuICAgICAqXG4gICAgICogXy5jZWlsKDYuMDA0LCAyKTtcbiAgICAgKiAvLyA9PiA2LjAxXG4gICAgICpcbiAgICAgKiBfLmNlaWwoNjA0MCwgLTIpO1xuICAgICAqIC8vID0+IDYxMDBcbiAgICAgKi9cbiAgICB2YXIgY2VpbCA9IGNyZWF0ZVJvdW5kKCdjZWlsJyk7XG5cbiAgICAvKipcbiAgICAgKiBEaXZpZGUgdHdvIG51bWJlcnMuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC43LjBcbiAgICAgKiBAY2F0ZWdvcnkgTWF0aFxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBkaXZpZGVuZCBUaGUgZmlyc3QgbnVtYmVyIGluIGEgZGl2aXNpb24uXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IGRpdmlzb3IgVGhlIHNlY29uZCBudW1iZXIgaW4gYSBkaXZpc2lvbi5cbiAgICAgKiBAcmV0dXJucyB7bnVtYmVyfSBSZXR1cm5zIHRoZSBxdW90aWVudC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5kaXZpZGUoNiwgNCk7XG4gICAgICogLy8gPT4gMS41XG4gICAgICovXG4gICAgdmFyIGRpdmlkZSA9IGNyZWF0ZU1hdGhPcGVyYXRpb24oZnVuY3Rpb24oZGl2aWRlbmQsIGRpdmlzb3IpIHtcbiAgICAgIHJldHVybiBkaXZpZGVuZCAvIGRpdmlzb3I7XG4gICAgfSwgMSk7XG5cbiAgICAvKipcbiAgICAgKiBDb21wdXRlcyBgbnVtYmVyYCByb3VuZGVkIGRvd24gdG8gYHByZWNpc2lvbmAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMy4xMC4wXG4gICAgICogQGNhdGVnb3J5IE1hdGhcbiAgICAgKiBAcGFyYW0ge251bWJlcn0gbnVtYmVyIFRoZSBudW1iZXIgdG8gcm91bmQgZG93bi5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW3ByZWNpc2lvbj0wXSBUaGUgcHJlY2lzaW9uIHRvIHJvdW5kIGRvd24gdG8uXG4gICAgICogQHJldHVybnMge251bWJlcn0gUmV0dXJucyB0aGUgcm91bmRlZCBkb3duIG51bWJlci5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5mbG9vcig0LjAwNik7XG4gICAgICogLy8gPT4gNFxuICAgICAqXG4gICAgICogXy5mbG9vcigwLjA0NiwgMik7XG4gICAgICogLy8gPT4gMC4wNFxuICAgICAqXG4gICAgICogXy5mbG9vcig0MDYwLCAtMik7XG4gICAgICogLy8gPT4gNDAwMFxuICAgICAqL1xuICAgIHZhciBmbG9vciA9IGNyZWF0ZVJvdW5kKCdmbG9vcicpO1xuXG4gICAgLyoqXG4gICAgICogQ29tcHV0ZXMgdGhlIG1heGltdW0gdmFsdWUgb2YgYGFycmF5YC4gSWYgYGFycmF5YCBpcyBlbXB0eSBvciBmYWxzZXksXG4gICAgICogYHVuZGVmaW5lZGAgaXMgcmV0dXJuZWQuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQHNpbmNlIDAuMS4wXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAY2F0ZWdvcnkgTWF0aFxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBpdGVyYXRlIG92ZXIuXG4gICAgICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIG1heGltdW0gdmFsdWUuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8ubWF4KFs0LCAyLCA4LCA2XSk7XG4gICAgICogLy8gPT4gOFxuICAgICAqXG4gICAgICogXy5tYXgoW10pO1xuICAgICAqIC8vID0+IHVuZGVmaW5lZFxuICAgICAqL1xuICAgIGZ1bmN0aW9uIG1heChhcnJheSkge1xuICAgICAgcmV0dXJuIChhcnJheSAmJiBhcnJheS5sZW5ndGgpXG4gICAgICAgID8gYmFzZUV4dHJlbXVtKGFycmF5LCBpZGVudGl0eSwgYmFzZUd0KVxuICAgICAgICA6IHVuZGVmaW5lZDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCBpcyBsaWtlIGBfLm1heGAgZXhjZXB0IHRoYXQgaXQgYWNjZXB0cyBgaXRlcmF0ZWVgIHdoaWNoIGlzXG4gICAgICogaW52b2tlZCBmb3IgZWFjaCBlbGVtZW50IGluIGBhcnJheWAgdG8gZ2VuZXJhdGUgdGhlIGNyaXRlcmlvbiBieSB3aGljaFxuICAgICAqIHRoZSB2YWx1ZSBpcyByYW5rZWQuIFRoZSBpdGVyYXRlZSBpcyBpbnZva2VkIHdpdGggb25lIGFyZ3VtZW50OiAodmFsdWUpLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IE1hdGhcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gaXRlcmF0ZSBvdmVyLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtpdGVyYXRlZT1fLmlkZW50aXR5XSBUaGUgaXRlcmF0ZWUgaW52b2tlZCBwZXIgZWxlbWVudC5cbiAgICAgKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgbWF4aW11bSB2YWx1ZS5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIG9iamVjdHMgPSBbeyAnbic6IDEgfSwgeyAnbic6IDIgfV07XG4gICAgICpcbiAgICAgKiBfLm1heEJ5KG9iamVjdHMsIGZ1bmN0aW9uKG8pIHsgcmV0dXJuIG8ubjsgfSk7XG4gICAgICogLy8gPT4geyAnbic6IDIgfVxuICAgICAqXG4gICAgICogLy8gVGhlIGBfLnByb3BlcnR5YCBpdGVyYXRlZSBzaG9ydGhhbmQuXG4gICAgICogXy5tYXhCeShvYmplY3RzLCAnbicpO1xuICAgICAqIC8vID0+IHsgJ24nOiAyIH1cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBtYXhCeShhcnJheSwgaXRlcmF0ZWUpIHtcbiAgICAgIHJldHVybiAoYXJyYXkgJiYgYXJyYXkubGVuZ3RoKVxuICAgICAgICA/IGJhc2VFeHRyZW11bShhcnJheSwgZ2V0SXRlcmF0ZWUoaXRlcmF0ZWUsIDIpLCBiYXNlR3QpXG4gICAgICAgIDogdW5kZWZpbmVkO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENvbXB1dGVzIHRoZSBtZWFuIG9mIHRoZSB2YWx1ZXMgaW4gYGFycmF5YC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBNYXRoXG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIGl0ZXJhdGUgb3Zlci5cbiAgICAgKiBAcmV0dXJucyB7bnVtYmVyfSBSZXR1cm5zIHRoZSBtZWFuLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLm1lYW4oWzQsIDIsIDgsIDZdKTtcbiAgICAgKiAvLyA9PiA1XG4gICAgICovXG4gICAgZnVuY3Rpb24gbWVhbihhcnJheSkge1xuICAgICAgcmV0dXJuIGJhc2VNZWFuKGFycmF5LCBpZGVudGl0eSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgaXMgbGlrZSBgXy5tZWFuYCBleGNlcHQgdGhhdCBpdCBhY2NlcHRzIGBpdGVyYXRlZWAgd2hpY2ggaXNcbiAgICAgKiBpbnZva2VkIGZvciBlYWNoIGVsZW1lbnQgaW4gYGFycmF5YCB0byBnZW5lcmF0ZSB0aGUgdmFsdWUgdG8gYmUgYXZlcmFnZWQuXG4gICAgICogVGhlIGl0ZXJhdGVlIGlzIGludm9rZWQgd2l0aCBvbmUgYXJndW1lbnQ6ICh2YWx1ZSkuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC43LjBcbiAgICAgKiBAY2F0ZWdvcnkgTWF0aFxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBpdGVyYXRlIG92ZXIuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2l0ZXJhdGVlPV8uaWRlbnRpdHldIFRoZSBpdGVyYXRlZSBpbnZva2VkIHBlciBlbGVtZW50LlxuICAgICAqIEByZXR1cm5zIHtudW1iZXJ9IFJldHVybnMgdGhlIG1lYW4uXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBvYmplY3RzID0gW3sgJ24nOiA0IH0sIHsgJ24nOiAyIH0sIHsgJ24nOiA4IH0sIHsgJ24nOiA2IH1dO1xuICAgICAqXG4gICAgICogXy5tZWFuQnkob2JqZWN0cywgZnVuY3Rpb24obykgeyByZXR1cm4gby5uOyB9KTtcbiAgICAgKiAvLyA9PiA1XG4gICAgICpcbiAgICAgKiAvLyBUaGUgYF8ucHJvcGVydHlgIGl0ZXJhdGVlIHNob3J0aGFuZC5cbiAgICAgKiBfLm1lYW5CeShvYmplY3RzLCAnbicpO1xuICAgICAqIC8vID0+IDVcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBtZWFuQnkoYXJyYXksIGl0ZXJhdGVlKSB7XG4gICAgICByZXR1cm4gYmFzZU1lYW4oYXJyYXksIGdldEl0ZXJhdGVlKGl0ZXJhdGVlLCAyKSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ29tcHV0ZXMgdGhlIG1pbmltdW0gdmFsdWUgb2YgYGFycmF5YC4gSWYgYGFycmF5YCBpcyBlbXB0eSBvciBmYWxzZXksXG4gICAgICogYHVuZGVmaW5lZGAgaXMgcmV0dXJuZWQuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQHNpbmNlIDAuMS4wXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAY2F0ZWdvcnkgTWF0aFxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBpdGVyYXRlIG92ZXIuXG4gICAgICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIG1pbmltdW0gdmFsdWUuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8ubWluKFs0LCAyLCA4LCA2XSk7XG4gICAgICogLy8gPT4gMlxuICAgICAqXG4gICAgICogXy5taW4oW10pO1xuICAgICAqIC8vID0+IHVuZGVmaW5lZFxuICAgICAqL1xuICAgIGZ1bmN0aW9uIG1pbihhcnJheSkge1xuICAgICAgcmV0dXJuIChhcnJheSAmJiBhcnJheS5sZW5ndGgpXG4gICAgICAgID8gYmFzZUV4dHJlbXVtKGFycmF5LCBpZGVudGl0eSwgYmFzZUx0KVxuICAgICAgICA6IHVuZGVmaW5lZDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCBpcyBsaWtlIGBfLm1pbmAgZXhjZXB0IHRoYXQgaXQgYWNjZXB0cyBgaXRlcmF0ZWVgIHdoaWNoIGlzXG4gICAgICogaW52b2tlZCBmb3IgZWFjaCBlbGVtZW50IGluIGBhcnJheWAgdG8gZ2VuZXJhdGUgdGhlIGNyaXRlcmlvbiBieSB3aGljaFxuICAgICAqIHRoZSB2YWx1ZSBpcyByYW5rZWQuIFRoZSBpdGVyYXRlZSBpcyBpbnZva2VkIHdpdGggb25lIGFyZ3VtZW50OiAodmFsdWUpLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IE1hdGhcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gaXRlcmF0ZSBvdmVyLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtpdGVyYXRlZT1fLmlkZW50aXR5XSBUaGUgaXRlcmF0ZWUgaW52b2tlZCBwZXIgZWxlbWVudC5cbiAgICAgKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgbWluaW11bSB2YWx1ZS5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIG9iamVjdHMgPSBbeyAnbic6IDEgfSwgeyAnbic6IDIgfV07XG4gICAgICpcbiAgICAgKiBfLm1pbkJ5KG9iamVjdHMsIGZ1bmN0aW9uKG8pIHsgcmV0dXJuIG8ubjsgfSk7XG4gICAgICogLy8gPT4geyAnbic6IDEgfVxuICAgICAqXG4gICAgICogLy8gVGhlIGBfLnByb3BlcnR5YCBpdGVyYXRlZSBzaG9ydGhhbmQuXG4gICAgICogXy5taW5CeShvYmplY3RzLCAnbicpO1xuICAgICAqIC8vID0+IHsgJ24nOiAxIH1cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBtaW5CeShhcnJheSwgaXRlcmF0ZWUpIHtcbiAgICAgIHJldHVybiAoYXJyYXkgJiYgYXJyYXkubGVuZ3RoKVxuICAgICAgICA/IGJhc2VFeHRyZW11bShhcnJheSwgZ2V0SXRlcmF0ZWUoaXRlcmF0ZWUsIDIpLCBiYXNlTHQpXG4gICAgICAgIDogdW5kZWZpbmVkO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIE11bHRpcGx5IHR3byBudW1iZXJzLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuNy4wXG4gICAgICogQGNhdGVnb3J5IE1hdGhcbiAgICAgKiBAcGFyYW0ge251bWJlcn0gbXVsdGlwbGllciBUaGUgZmlyc3QgbnVtYmVyIGluIGEgbXVsdGlwbGljYXRpb24uXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IG11bHRpcGxpY2FuZCBUaGUgc2Vjb25kIG51bWJlciBpbiBhIG11bHRpcGxpY2F0aW9uLlxuICAgICAqIEByZXR1cm5zIHtudW1iZXJ9IFJldHVybnMgdGhlIHByb2R1Y3QuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8ubXVsdGlwbHkoNiwgNCk7XG4gICAgICogLy8gPT4gMjRcbiAgICAgKi9cbiAgICB2YXIgbXVsdGlwbHkgPSBjcmVhdGVNYXRoT3BlcmF0aW9uKGZ1bmN0aW9uKG11bHRpcGxpZXIsIG11bHRpcGxpY2FuZCkge1xuICAgICAgcmV0dXJuIG11bHRpcGxpZXIgKiBtdWx0aXBsaWNhbmQ7XG4gICAgfSwgMSk7XG5cbiAgICAvKipcbiAgICAgKiBDb21wdXRlcyBgbnVtYmVyYCByb3VuZGVkIHRvIGBwcmVjaXNpb25gLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDMuMTAuMFxuICAgICAqIEBjYXRlZ29yeSBNYXRoXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IG51bWJlciBUaGUgbnVtYmVyIHRvIHJvdW5kLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbcHJlY2lzaW9uPTBdIFRoZSBwcmVjaXNpb24gdG8gcm91bmQgdG8uXG4gICAgICogQHJldHVybnMge251bWJlcn0gUmV0dXJucyB0aGUgcm91bmRlZCBudW1iZXIuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8ucm91bmQoNC4wMDYpO1xuICAgICAqIC8vID0+IDRcbiAgICAgKlxuICAgICAqIF8ucm91bmQoNC4wMDYsIDIpO1xuICAgICAqIC8vID0+IDQuMDFcbiAgICAgKlxuICAgICAqIF8ucm91bmQoNDA2MCwgLTIpO1xuICAgICAqIC8vID0+IDQxMDBcbiAgICAgKi9cbiAgICB2YXIgcm91bmQgPSBjcmVhdGVSb3VuZCgncm91bmQnKTtcblxuICAgIC8qKlxuICAgICAqIFN1YnRyYWN0IHR3byBudW1iZXJzLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IE1hdGhcbiAgICAgKiBAcGFyYW0ge251bWJlcn0gbWludWVuZCBUaGUgZmlyc3QgbnVtYmVyIGluIGEgc3VidHJhY3Rpb24uXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IHN1YnRyYWhlbmQgVGhlIHNlY29uZCBudW1iZXIgaW4gYSBzdWJ0cmFjdGlvbi5cbiAgICAgKiBAcmV0dXJucyB7bnVtYmVyfSBSZXR1cm5zIHRoZSBkaWZmZXJlbmNlLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLnN1YnRyYWN0KDYsIDQpO1xuICAgICAqIC8vID0+IDJcbiAgICAgKi9cbiAgICB2YXIgc3VidHJhY3QgPSBjcmVhdGVNYXRoT3BlcmF0aW9uKGZ1bmN0aW9uKG1pbnVlbmQsIHN1YnRyYWhlbmQpIHtcbiAgICAgIHJldHVybiBtaW51ZW5kIC0gc3VidHJhaGVuZDtcbiAgICB9LCAwKTtcblxuICAgIC8qKlxuICAgICAqIENvbXB1dGVzIHRoZSBzdW0gb2YgdGhlIHZhbHVlcyBpbiBgYXJyYXlgLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDMuNC4wXG4gICAgICogQGNhdGVnb3J5IE1hdGhcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gaXRlcmF0ZSBvdmVyLlxuICAgICAqIEByZXR1cm5zIHtudW1iZXJ9IFJldHVybnMgdGhlIHN1bS5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5zdW0oWzQsIDIsIDgsIDZdKTtcbiAgICAgKiAvLyA9PiAyMFxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHN1bShhcnJheSkge1xuICAgICAgcmV0dXJuIChhcnJheSAmJiBhcnJheS5sZW5ndGgpXG4gICAgICAgID8gYmFzZVN1bShhcnJheSwgaWRlbnRpdHkpXG4gICAgICAgIDogMDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCBpcyBsaWtlIGBfLnN1bWAgZXhjZXB0IHRoYXQgaXQgYWNjZXB0cyBgaXRlcmF0ZWVgIHdoaWNoIGlzXG4gICAgICogaW52b2tlZCBmb3IgZWFjaCBlbGVtZW50IGluIGBhcnJheWAgdG8gZ2VuZXJhdGUgdGhlIHZhbHVlIHRvIGJlIHN1bW1lZC5cbiAgICAgKiBUaGUgaXRlcmF0ZWUgaXMgaW52b2tlZCB3aXRoIG9uZSBhcmd1bWVudDogKHZhbHVlKS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBNYXRoXG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIGl0ZXJhdGUgb3Zlci5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbaXRlcmF0ZWU9Xy5pZGVudGl0eV0gVGhlIGl0ZXJhdGVlIGludm9rZWQgcGVyIGVsZW1lbnQuXG4gICAgICogQHJldHVybnMge251bWJlcn0gUmV0dXJucyB0aGUgc3VtLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgb2JqZWN0cyA9IFt7ICduJzogNCB9LCB7ICduJzogMiB9LCB7ICduJzogOCB9LCB7ICduJzogNiB9XTtcbiAgICAgKlxuICAgICAqIF8uc3VtQnkob2JqZWN0cywgZnVuY3Rpb24obykgeyByZXR1cm4gby5uOyB9KTtcbiAgICAgKiAvLyA9PiAyMFxuICAgICAqXG4gICAgICogLy8gVGhlIGBfLnByb3BlcnR5YCBpdGVyYXRlZSBzaG9ydGhhbmQuXG4gICAgICogXy5zdW1CeShvYmplY3RzLCAnbicpO1xuICAgICAqIC8vID0+IDIwXG4gICAgICovXG4gICAgZnVuY3Rpb24gc3VtQnkoYXJyYXksIGl0ZXJhdGVlKSB7XG4gICAgICByZXR1cm4gKGFycmF5ICYmIGFycmF5Lmxlbmd0aClcbiAgICAgICAgPyBiYXNlU3VtKGFycmF5LCBnZXRJdGVyYXRlZShpdGVyYXRlZSwgMikpXG4gICAgICAgIDogMDtcbiAgICB9XG5cbiAgICAvKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSovXG5cbiAgICAvLyBBZGQgbWV0aG9kcyB0aGF0IHJldHVybiB3cmFwcGVkIHZhbHVlcyBpbiBjaGFpbiBzZXF1ZW5jZXMuXG4gICAgbG9kYXNoLmFmdGVyID0gYWZ0ZXI7XG4gICAgbG9kYXNoLmFyeSA9IGFyeTtcbiAgICBsb2Rhc2guYXNzaWduID0gYXNzaWduO1xuICAgIGxvZGFzaC5hc3NpZ25JbiA9IGFzc2lnbkluO1xuICAgIGxvZGFzaC5hc3NpZ25JbldpdGggPSBhc3NpZ25JbldpdGg7XG4gICAgbG9kYXNoLmFzc2lnbldpdGggPSBhc3NpZ25XaXRoO1xuICAgIGxvZGFzaC5hdCA9IGF0O1xuICAgIGxvZGFzaC5iZWZvcmUgPSBiZWZvcmU7XG4gICAgbG9kYXNoLmJpbmQgPSBiaW5kO1xuICAgIGxvZGFzaC5iaW5kQWxsID0gYmluZEFsbDtcbiAgICBsb2Rhc2guYmluZEtleSA9IGJpbmRLZXk7XG4gICAgbG9kYXNoLmNhc3RBcnJheSA9IGNhc3RBcnJheTtcbiAgICBsb2Rhc2guY2hhaW4gPSBjaGFpbjtcbiAgICBsb2Rhc2guY2h1bmsgPSBjaHVuaztcbiAgICBsb2Rhc2guY29tcGFjdCA9IGNvbXBhY3Q7XG4gICAgbG9kYXNoLmNvbmNhdCA9IGNvbmNhdDtcbiAgICBsb2Rhc2guY29uZCA9IGNvbmQ7XG4gICAgbG9kYXNoLmNvbmZvcm1zID0gY29uZm9ybXM7XG4gICAgbG9kYXNoLmNvbnN0YW50ID0gY29uc3RhbnQ7XG4gICAgbG9kYXNoLmNvdW50QnkgPSBjb3VudEJ5O1xuICAgIGxvZGFzaC5jcmVhdGUgPSBjcmVhdGU7XG4gICAgbG9kYXNoLmN1cnJ5ID0gY3Vycnk7XG4gICAgbG9kYXNoLmN1cnJ5UmlnaHQgPSBjdXJyeVJpZ2h0O1xuICAgIGxvZGFzaC5kZWJvdW5jZSA9IGRlYm91bmNlO1xuICAgIGxvZGFzaC5kZWZhdWx0cyA9IGRlZmF1bHRzO1xuICAgIGxvZGFzaC5kZWZhdWx0c0RlZXAgPSBkZWZhdWx0c0RlZXA7XG4gICAgbG9kYXNoLmRlZmVyID0gZGVmZXI7XG4gICAgbG9kYXNoLmRlbGF5ID0gZGVsYXk7XG4gICAgbG9kYXNoLmRpZmZlcmVuY2UgPSBkaWZmZXJlbmNlO1xuICAgIGxvZGFzaC5kaWZmZXJlbmNlQnkgPSBkaWZmZXJlbmNlQnk7XG4gICAgbG9kYXNoLmRpZmZlcmVuY2VXaXRoID0gZGlmZmVyZW5jZVdpdGg7XG4gICAgbG9kYXNoLmRyb3AgPSBkcm9wO1xuICAgIGxvZGFzaC5kcm9wUmlnaHQgPSBkcm9wUmlnaHQ7XG4gICAgbG9kYXNoLmRyb3BSaWdodFdoaWxlID0gZHJvcFJpZ2h0V2hpbGU7XG4gICAgbG9kYXNoLmRyb3BXaGlsZSA9IGRyb3BXaGlsZTtcbiAgICBsb2Rhc2guZmlsbCA9IGZpbGw7XG4gICAgbG9kYXNoLmZpbHRlciA9IGZpbHRlcjtcbiAgICBsb2Rhc2guZmxhdE1hcCA9IGZsYXRNYXA7XG4gICAgbG9kYXNoLmZsYXRNYXBEZWVwID0gZmxhdE1hcERlZXA7XG4gICAgbG9kYXNoLmZsYXRNYXBEZXB0aCA9IGZsYXRNYXBEZXB0aDtcbiAgICBsb2Rhc2guZmxhdHRlbiA9IGZsYXR0ZW47XG4gICAgbG9kYXNoLmZsYXR0ZW5EZWVwID0gZmxhdHRlbkRlZXA7XG4gICAgbG9kYXNoLmZsYXR0ZW5EZXB0aCA9IGZsYXR0ZW5EZXB0aDtcbiAgICBsb2Rhc2guZmxpcCA9IGZsaXA7XG4gICAgbG9kYXNoLmZsb3cgPSBmbG93O1xuICAgIGxvZGFzaC5mbG93UmlnaHQgPSBmbG93UmlnaHQ7XG4gICAgbG9kYXNoLmZyb21QYWlycyA9IGZyb21QYWlycztcbiAgICBsb2Rhc2guZnVuY3Rpb25zID0gZnVuY3Rpb25zO1xuICAgIGxvZGFzaC5mdW5jdGlvbnNJbiA9IGZ1bmN0aW9uc0luO1xuICAgIGxvZGFzaC5ncm91cEJ5ID0gZ3JvdXBCeTtcbiAgICBsb2Rhc2guaW5pdGlhbCA9IGluaXRpYWw7XG4gICAgbG9kYXNoLmludGVyc2VjdGlvbiA9IGludGVyc2VjdGlvbjtcbiAgICBsb2Rhc2guaW50ZXJzZWN0aW9uQnkgPSBpbnRlcnNlY3Rpb25CeTtcbiAgICBsb2Rhc2guaW50ZXJzZWN0aW9uV2l0aCA9IGludGVyc2VjdGlvbldpdGg7XG4gICAgbG9kYXNoLmludmVydCA9IGludmVydDtcbiAgICBsb2Rhc2guaW52ZXJ0QnkgPSBpbnZlcnRCeTtcbiAgICBsb2Rhc2guaW52b2tlTWFwID0gaW52b2tlTWFwO1xuICAgIGxvZGFzaC5pdGVyYXRlZSA9IGl0ZXJhdGVlO1xuICAgIGxvZGFzaC5rZXlCeSA9IGtleUJ5O1xuICAgIGxvZGFzaC5rZXlzID0ga2V5cztcbiAgICBsb2Rhc2gua2V5c0luID0ga2V5c0luO1xuICAgIGxvZGFzaC5tYXAgPSBtYXA7XG4gICAgbG9kYXNoLm1hcEtleXMgPSBtYXBLZXlzO1xuICAgIGxvZGFzaC5tYXBWYWx1ZXMgPSBtYXBWYWx1ZXM7XG4gICAgbG9kYXNoLm1hdGNoZXMgPSBtYXRjaGVzO1xuICAgIGxvZGFzaC5tYXRjaGVzUHJvcGVydHkgPSBtYXRjaGVzUHJvcGVydHk7XG4gICAgbG9kYXNoLm1lbW9pemUgPSBtZW1vaXplO1xuICAgIGxvZGFzaC5tZXJnZSA9IG1lcmdlO1xuICAgIGxvZGFzaC5tZXJnZVdpdGggPSBtZXJnZVdpdGg7XG4gICAgbG9kYXNoLm1ldGhvZCA9IG1ldGhvZDtcbiAgICBsb2Rhc2gubWV0aG9kT2YgPSBtZXRob2RPZjtcbiAgICBsb2Rhc2gubWl4aW4gPSBtaXhpbjtcbiAgICBsb2Rhc2gubmVnYXRlID0gbmVnYXRlO1xuICAgIGxvZGFzaC5udGhBcmcgPSBudGhBcmc7XG4gICAgbG9kYXNoLm9taXQgPSBvbWl0O1xuICAgIGxvZGFzaC5vbWl0QnkgPSBvbWl0Qnk7XG4gICAgbG9kYXNoLm9uY2UgPSBvbmNlO1xuICAgIGxvZGFzaC5vcmRlckJ5ID0gb3JkZXJCeTtcbiAgICBsb2Rhc2gub3ZlciA9IG92ZXI7XG4gICAgbG9kYXNoLm92ZXJBcmdzID0gb3ZlckFyZ3M7XG4gICAgbG9kYXNoLm92ZXJFdmVyeSA9IG92ZXJFdmVyeTtcbiAgICBsb2Rhc2gub3ZlclNvbWUgPSBvdmVyU29tZTtcbiAgICBsb2Rhc2gucGFydGlhbCA9IHBhcnRpYWw7XG4gICAgbG9kYXNoLnBhcnRpYWxSaWdodCA9IHBhcnRpYWxSaWdodDtcbiAgICBsb2Rhc2gucGFydGl0aW9uID0gcGFydGl0aW9uO1xuICAgIGxvZGFzaC5waWNrID0gcGljaztcbiAgICBsb2Rhc2gucGlja0J5ID0gcGlja0J5O1xuICAgIGxvZGFzaC5wcm9wZXJ0eSA9IHByb3BlcnR5O1xuICAgIGxvZGFzaC5wcm9wZXJ0eU9mID0gcHJvcGVydHlPZjtcbiAgICBsb2Rhc2gucHVsbCA9IHB1bGw7XG4gICAgbG9kYXNoLnB1bGxBbGwgPSBwdWxsQWxsO1xuICAgIGxvZGFzaC5wdWxsQWxsQnkgPSBwdWxsQWxsQnk7XG4gICAgbG9kYXNoLnB1bGxBbGxXaXRoID0gcHVsbEFsbFdpdGg7XG4gICAgbG9kYXNoLnB1bGxBdCA9IHB1bGxBdDtcbiAgICBsb2Rhc2gucmFuZ2UgPSByYW5nZTtcbiAgICBsb2Rhc2gucmFuZ2VSaWdodCA9IHJhbmdlUmlnaHQ7XG4gICAgbG9kYXNoLnJlYXJnID0gcmVhcmc7XG4gICAgbG9kYXNoLnJlamVjdCA9IHJlamVjdDtcbiAgICBsb2Rhc2gucmVtb3ZlID0gcmVtb3ZlO1xuICAgIGxvZGFzaC5yZXN0ID0gcmVzdDtcbiAgICBsb2Rhc2gucmV2ZXJzZSA9IHJldmVyc2U7XG4gICAgbG9kYXNoLnNhbXBsZVNpemUgPSBzYW1wbGVTaXplO1xuICAgIGxvZGFzaC5zZXQgPSBzZXQ7XG4gICAgbG9kYXNoLnNldFdpdGggPSBzZXRXaXRoO1xuICAgIGxvZGFzaC5zaHVmZmxlID0gc2h1ZmZsZTtcbiAgICBsb2Rhc2guc2xpY2UgPSBzbGljZTtcbiAgICBsb2Rhc2guc29ydEJ5ID0gc29ydEJ5O1xuICAgIGxvZGFzaC5zb3J0ZWRVbmlxID0gc29ydGVkVW5pcTtcbiAgICBsb2Rhc2guc29ydGVkVW5pcUJ5ID0gc29ydGVkVW5pcUJ5O1xuICAgIGxvZGFzaC5zcGxpdCA9IHNwbGl0O1xuICAgIGxvZGFzaC5zcHJlYWQgPSBzcHJlYWQ7XG4gICAgbG9kYXNoLnRhaWwgPSB0YWlsO1xuICAgIGxvZGFzaC50YWtlID0gdGFrZTtcbiAgICBsb2Rhc2gudGFrZVJpZ2h0ID0gdGFrZVJpZ2h0O1xuICAgIGxvZGFzaC50YWtlUmlnaHRXaGlsZSA9IHRha2VSaWdodFdoaWxlO1xuICAgIGxvZGFzaC50YWtlV2hpbGUgPSB0YWtlV2hpbGU7XG4gICAgbG9kYXNoLnRhcCA9IHRhcDtcbiAgICBsb2Rhc2gudGhyb3R0bGUgPSB0aHJvdHRsZTtcbiAgICBsb2Rhc2gudGhydSA9IHRocnU7XG4gICAgbG9kYXNoLnRvQXJyYXkgPSB0b0FycmF5O1xuICAgIGxvZGFzaC50b1BhaXJzID0gdG9QYWlycztcbiAgICBsb2Rhc2gudG9QYWlyc0luID0gdG9QYWlyc0luO1xuICAgIGxvZGFzaC50b1BhdGggPSB0b1BhdGg7XG4gICAgbG9kYXNoLnRvUGxhaW5PYmplY3QgPSB0b1BsYWluT2JqZWN0O1xuICAgIGxvZGFzaC50cmFuc2Zvcm0gPSB0cmFuc2Zvcm07XG4gICAgbG9kYXNoLnVuYXJ5ID0gdW5hcnk7XG4gICAgbG9kYXNoLnVuaW9uID0gdW5pb247XG4gICAgbG9kYXNoLnVuaW9uQnkgPSB1bmlvbkJ5O1xuICAgIGxvZGFzaC51bmlvbldpdGggPSB1bmlvbldpdGg7XG4gICAgbG9kYXNoLnVuaXEgPSB1bmlxO1xuICAgIGxvZGFzaC51bmlxQnkgPSB1bmlxQnk7XG4gICAgbG9kYXNoLnVuaXFXaXRoID0gdW5pcVdpdGg7XG4gICAgbG9kYXNoLnVuc2V0ID0gdW5zZXQ7XG4gICAgbG9kYXNoLnVuemlwID0gdW56aXA7XG4gICAgbG9kYXNoLnVuemlwV2l0aCA9IHVuemlwV2l0aDtcbiAgICBsb2Rhc2gudXBkYXRlID0gdXBkYXRlO1xuICAgIGxvZGFzaC51cGRhdGVXaXRoID0gdXBkYXRlV2l0aDtcbiAgICBsb2Rhc2gudmFsdWVzID0gdmFsdWVzO1xuICAgIGxvZGFzaC52YWx1ZXNJbiA9IHZhbHVlc0luO1xuICAgIGxvZGFzaC53aXRob3V0ID0gd2l0aG91dDtcbiAgICBsb2Rhc2gud29yZHMgPSB3b3JkcztcbiAgICBsb2Rhc2gud3JhcCA9IHdyYXA7XG4gICAgbG9kYXNoLnhvciA9IHhvcjtcbiAgICBsb2Rhc2gueG9yQnkgPSB4b3JCeTtcbiAgICBsb2Rhc2gueG9yV2l0aCA9IHhvcldpdGg7XG4gICAgbG9kYXNoLnppcCA9IHppcDtcbiAgICBsb2Rhc2guemlwT2JqZWN0ID0gemlwT2JqZWN0O1xuICAgIGxvZGFzaC56aXBPYmplY3REZWVwID0gemlwT2JqZWN0RGVlcDtcbiAgICBsb2Rhc2guemlwV2l0aCA9IHppcFdpdGg7XG5cbiAgICAvLyBBZGQgYWxpYXNlcy5cbiAgICBsb2Rhc2guZW50cmllcyA9IHRvUGFpcnM7XG4gICAgbG9kYXNoLmVudHJpZXNJbiA9IHRvUGFpcnNJbjtcbiAgICBsb2Rhc2guZXh0ZW5kID0gYXNzaWduSW47XG4gICAgbG9kYXNoLmV4dGVuZFdpdGggPSBhc3NpZ25JbldpdGg7XG5cbiAgICAvLyBBZGQgbWV0aG9kcyB0byBgbG9kYXNoLnByb3RvdHlwZWAuXG4gICAgbWl4aW4obG9kYXNoLCBsb2Rhc2gpO1xuXG4gICAgLyotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qL1xuXG4gICAgLy8gQWRkIG1ldGhvZHMgdGhhdCByZXR1cm4gdW53cmFwcGVkIHZhbHVlcyBpbiBjaGFpbiBzZXF1ZW5jZXMuXG4gICAgbG9kYXNoLmFkZCA9IGFkZDtcbiAgICBsb2Rhc2guYXR0ZW1wdCA9IGF0dGVtcHQ7XG4gICAgbG9kYXNoLmNhbWVsQ2FzZSA9IGNhbWVsQ2FzZTtcbiAgICBsb2Rhc2guY2FwaXRhbGl6ZSA9IGNhcGl0YWxpemU7XG4gICAgbG9kYXNoLmNlaWwgPSBjZWlsO1xuICAgIGxvZGFzaC5jbGFtcCA9IGNsYW1wO1xuICAgIGxvZGFzaC5jbG9uZSA9IGNsb25lO1xuICAgIGxvZGFzaC5jbG9uZURlZXAgPSBjbG9uZURlZXA7XG4gICAgbG9kYXNoLmNsb25lRGVlcFdpdGggPSBjbG9uZURlZXBXaXRoO1xuICAgIGxvZGFzaC5jbG9uZVdpdGggPSBjbG9uZVdpdGg7XG4gICAgbG9kYXNoLmNvbmZvcm1zVG8gPSBjb25mb3Jtc1RvO1xuICAgIGxvZGFzaC5kZWJ1cnIgPSBkZWJ1cnI7XG4gICAgbG9kYXNoLmRlZmF1bHRUbyA9IGRlZmF1bHRUbztcbiAgICBsb2Rhc2guZGl2aWRlID0gZGl2aWRlO1xuICAgIGxvZGFzaC5lbmRzV2l0aCA9IGVuZHNXaXRoO1xuICAgIGxvZGFzaC5lcSA9IGVxO1xuICAgIGxvZGFzaC5lc2NhcGUgPSBlc2NhcGU7XG4gICAgbG9kYXNoLmVzY2FwZVJlZ0V4cCA9IGVzY2FwZVJlZ0V4cDtcbiAgICBsb2Rhc2guZXZlcnkgPSBldmVyeTtcbiAgICBsb2Rhc2guZmluZCA9IGZpbmQ7XG4gICAgbG9kYXNoLmZpbmRJbmRleCA9IGZpbmRJbmRleDtcbiAgICBsb2Rhc2guZmluZEtleSA9IGZpbmRLZXk7XG4gICAgbG9kYXNoLmZpbmRMYXN0ID0gZmluZExhc3Q7XG4gICAgbG9kYXNoLmZpbmRMYXN0SW5kZXggPSBmaW5kTGFzdEluZGV4O1xuICAgIGxvZGFzaC5maW5kTGFzdEtleSA9IGZpbmRMYXN0S2V5O1xuICAgIGxvZGFzaC5mbG9vciA9IGZsb29yO1xuICAgIGxvZGFzaC5mb3JFYWNoID0gZm9yRWFjaDtcbiAgICBsb2Rhc2guZm9yRWFjaFJpZ2h0ID0gZm9yRWFjaFJpZ2h0O1xuICAgIGxvZGFzaC5mb3JJbiA9IGZvckluO1xuICAgIGxvZGFzaC5mb3JJblJpZ2h0ID0gZm9ySW5SaWdodDtcbiAgICBsb2Rhc2guZm9yT3duID0gZm9yT3duO1xuICAgIGxvZGFzaC5mb3JPd25SaWdodCA9IGZvck93blJpZ2h0O1xuICAgIGxvZGFzaC5nZXQgPSBnZXQ7XG4gICAgbG9kYXNoLmd0ID0gZ3Q7XG4gICAgbG9kYXNoLmd0ZSA9IGd0ZTtcbiAgICBsb2Rhc2guaGFzID0gaGFzO1xuICAgIGxvZGFzaC5oYXNJbiA9IGhhc0luO1xuICAgIGxvZGFzaC5oZWFkID0gaGVhZDtcbiAgICBsb2Rhc2guaWRlbnRpdHkgPSBpZGVudGl0eTtcbiAgICBsb2Rhc2guaW5jbHVkZXMgPSBpbmNsdWRlcztcbiAgICBsb2Rhc2guaW5kZXhPZiA9IGluZGV4T2Y7XG4gICAgbG9kYXNoLmluUmFuZ2UgPSBpblJhbmdlO1xuICAgIGxvZGFzaC5pbnZva2UgPSBpbnZva2U7XG4gICAgbG9kYXNoLmlzQXJndW1lbnRzID0gaXNBcmd1bWVudHM7XG4gICAgbG9kYXNoLmlzQXJyYXkgPSBpc0FycmF5O1xuICAgIGxvZGFzaC5pc0FycmF5QnVmZmVyID0gaXNBcnJheUJ1ZmZlcjtcbiAgICBsb2Rhc2guaXNBcnJheUxpa2UgPSBpc0FycmF5TGlrZTtcbiAgICBsb2Rhc2guaXNBcnJheUxpa2VPYmplY3QgPSBpc0FycmF5TGlrZU9iamVjdDtcbiAgICBsb2Rhc2guaXNCb29sZWFuID0gaXNCb29sZWFuO1xuICAgIGxvZGFzaC5pc0J1ZmZlciA9IGlzQnVmZmVyO1xuICAgIGxvZGFzaC5pc0RhdGUgPSBpc0RhdGU7XG4gICAgbG9kYXNoLmlzRWxlbWVudCA9IGlzRWxlbWVudDtcbiAgICBsb2Rhc2guaXNFbXB0eSA9IGlzRW1wdHk7XG4gICAgbG9kYXNoLmlzRXF1YWwgPSBpc0VxdWFsO1xuICAgIGxvZGFzaC5pc0VxdWFsV2l0aCA9IGlzRXF1YWxXaXRoO1xuICAgIGxvZGFzaC5pc0Vycm9yID0gaXNFcnJvcjtcbiAgICBsb2Rhc2guaXNGaW5pdGUgPSBpc0Zpbml0ZTtcbiAgICBsb2Rhc2guaXNGdW5jdGlvbiA9IGlzRnVuY3Rpb247XG4gICAgbG9kYXNoLmlzSW50ZWdlciA9IGlzSW50ZWdlcjtcbiAgICBsb2Rhc2guaXNMZW5ndGggPSBpc0xlbmd0aDtcbiAgICBsb2Rhc2guaXNNYXAgPSBpc01hcDtcbiAgICBsb2Rhc2guaXNNYXRjaCA9IGlzTWF0Y2g7XG4gICAgbG9kYXNoLmlzTWF0Y2hXaXRoID0gaXNNYXRjaFdpdGg7XG4gICAgbG9kYXNoLmlzTmFOID0gaXNOYU47XG4gICAgbG9kYXNoLmlzTmF0aXZlID0gaXNOYXRpdmU7XG4gICAgbG9kYXNoLmlzTmlsID0gaXNOaWw7XG4gICAgbG9kYXNoLmlzTnVsbCA9IGlzTnVsbDtcbiAgICBsb2Rhc2guaXNOdW1iZXIgPSBpc051bWJlcjtcbiAgICBsb2Rhc2guaXNPYmplY3QgPSBpc09iamVjdDtcbiAgICBsb2Rhc2guaXNPYmplY3RMaWtlID0gaXNPYmplY3RMaWtlO1xuICAgIGxvZGFzaC5pc1BsYWluT2JqZWN0ID0gaXNQbGFpbk9iamVjdDtcbiAgICBsb2Rhc2guaXNSZWdFeHAgPSBpc1JlZ0V4cDtcbiAgICBsb2Rhc2guaXNTYWZlSW50ZWdlciA9IGlzU2FmZUludGVnZXI7XG4gICAgbG9kYXNoLmlzU2V0ID0gaXNTZXQ7XG4gICAgbG9kYXNoLmlzU3RyaW5nID0gaXNTdHJpbmc7XG4gICAgbG9kYXNoLmlzU3ltYm9sID0gaXNTeW1ib2w7XG4gICAgbG9kYXNoLmlzVHlwZWRBcnJheSA9IGlzVHlwZWRBcnJheTtcbiAgICBsb2Rhc2guaXNVbmRlZmluZWQgPSBpc1VuZGVmaW5lZDtcbiAgICBsb2Rhc2guaXNXZWFrTWFwID0gaXNXZWFrTWFwO1xuICAgIGxvZGFzaC5pc1dlYWtTZXQgPSBpc1dlYWtTZXQ7XG4gICAgbG9kYXNoLmpvaW4gPSBqb2luO1xuICAgIGxvZGFzaC5rZWJhYkNhc2UgPSBrZWJhYkNhc2U7XG4gICAgbG9kYXNoLmxhc3QgPSBsYXN0O1xuICAgIGxvZGFzaC5sYXN0SW5kZXhPZiA9IGxhc3RJbmRleE9mO1xuICAgIGxvZGFzaC5sb3dlckNhc2UgPSBsb3dlckNhc2U7XG4gICAgbG9kYXNoLmxvd2VyRmlyc3QgPSBsb3dlckZpcnN0O1xuICAgIGxvZGFzaC5sdCA9IGx0O1xuICAgIGxvZGFzaC5sdGUgPSBsdGU7XG4gICAgbG9kYXNoLm1heCA9IG1heDtcbiAgICBsb2Rhc2gubWF4QnkgPSBtYXhCeTtcbiAgICBsb2Rhc2gubWVhbiA9IG1lYW47XG4gICAgbG9kYXNoLm1lYW5CeSA9IG1lYW5CeTtcbiAgICBsb2Rhc2gubWluID0gbWluO1xuICAgIGxvZGFzaC5taW5CeSA9IG1pbkJ5O1xuICAgIGxvZGFzaC5zdHViQXJyYXkgPSBzdHViQXJyYXk7XG4gICAgbG9kYXNoLnN0dWJGYWxzZSA9IHN0dWJGYWxzZTtcbiAgICBsb2Rhc2guc3R1Yk9iamVjdCA9IHN0dWJPYmplY3Q7XG4gICAgbG9kYXNoLnN0dWJTdHJpbmcgPSBzdHViU3RyaW5nO1xuICAgIGxvZGFzaC5zdHViVHJ1ZSA9IHN0dWJUcnVlO1xuICAgIGxvZGFzaC5tdWx0aXBseSA9IG11bHRpcGx5O1xuICAgIGxvZGFzaC5udGggPSBudGg7XG4gICAgbG9kYXNoLm5vQ29uZmxpY3QgPSBub0NvbmZsaWN0O1xuICAgIGxvZGFzaC5ub29wID0gbm9vcDtcbiAgICBsb2Rhc2gubm93ID0gbm93O1xuICAgIGxvZGFzaC5wYWQgPSBwYWQ7XG4gICAgbG9kYXNoLnBhZEVuZCA9IHBhZEVuZDtcbiAgICBsb2Rhc2gucGFkU3RhcnQgPSBwYWRTdGFydDtcbiAgICBsb2Rhc2gucGFyc2VJbnQgPSBwYXJzZUludDtcbiAgICBsb2Rhc2gucmFuZG9tID0gcmFuZG9tO1xuICAgIGxvZGFzaC5yZWR1Y2UgPSByZWR1Y2U7XG4gICAgbG9kYXNoLnJlZHVjZVJpZ2h0ID0gcmVkdWNlUmlnaHQ7XG4gICAgbG9kYXNoLnJlcGVhdCA9IHJlcGVhdDtcbiAgICBsb2Rhc2gucmVwbGFjZSA9IHJlcGxhY2U7XG4gICAgbG9kYXNoLnJlc3VsdCA9IHJlc3VsdDtcbiAgICBsb2Rhc2gucm91bmQgPSByb3VuZDtcbiAgICBsb2Rhc2gucnVuSW5Db250ZXh0ID0gcnVuSW5Db250ZXh0O1xuICAgIGxvZGFzaC5zYW1wbGUgPSBzYW1wbGU7XG4gICAgbG9kYXNoLnNpemUgPSBzaXplO1xuICAgIGxvZGFzaC5zbmFrZUNhc2UgPSBzbmFrZUNhc2U7XG4gICAgbG9kYXNoLnNvbWUgPSBzb21lO1xuICAgIGxvZGFzaC5zb3J0ZWRJbmRleCA9IHNvcnRlZEluZGV4O1xuICAgIGxvZGFzaC5zb3J0ZWRJbmRleEJ5ID0gc29ydGVkSW5kZXhCeTtcbiAgICBsb2Rhc2guc29ydGVkSW5kZXhPZiA9IHNvcnRlZEluZGV4T2Y7XG4gICAgbG9kYXNoLnNvcnRlZExhc3RJbmRleCA9IHNvcnRlZExhc3RJbmRleDtcbiAgICBsb2Rhc2guc29ydGVkTGFzdEluZGV4QnkgPSBzb3J0ZWRMYXN0SW5kZXhCeTtcbiAgICBsb2Rhc2guc29ydGVkTGFzdEluZGV4T2YgPSBzb3J0ZWRMYXN0SW5kZXhPZjtcbiAgICBsb2Rhc2guc3RhcnRDYXNlID0gc3RhcnRDYXNlO1xuICAgIGxvZGFzaC5zdGFydHNXaXRoID0gc3RhcnRzV2l0aDtcbiAgICBsb2Rhc2guc3VidHJhY3QgPSBzdWJ0cmFjdDtcbiAgICBsb2Rhc2guc3VtID0gc3VtO1xuICAgIGxvZGFzaC5zdW1CeSA9IHN1bUJ5O1xuICAgIGxvZGFzaC50ZW1wbGF0ZSA9IHRlbXBsYXRlO1xuICAgIGxvZGFzaC50aW1lcyA9IHRpbWVzO1xuICAgIGxvZGFzaC50b0Zpbml0ZSA9IHRvRmluaXRlO1xuICAgIGxvZGFzaC50b0ludGVnZXIgPSB0b0ludGVnZXI7XG4gICAgbG9kYXNoLnRvTGVuZ3RoID0gdG9MZW5ndGg7XG4gICAgbG9kYXNoLnRvTG93ZXIgPSB0b0xvd2VyO1xuICAgIGxvZGFzaC50b051bWJlciA9IHRvTnVtYmVyO1xuICAgIGxvZGFzaC50b1NhZmVJbnRlZ2VyID0gdG9TYWZlSW50ZWdlcjtcbiAgICBsb2Rhc2gudG9TdHJpbmcgPSB0b1N0cmluZztcbiAgICBsb2Rhc2gudG9VcHBlciA9IHRvVXBwZXI7XG4gICAgbG9kYXNoLnRyaW0gPSB0cmltO1xuICAgIGxvZGFzaC50cmltRW5kID0gdHJpbUVuZDtcbiAgICBsb2Rhc2gudHJpbVN0YXJ0ID0gdHJpbVN0YXJ0O1xuICAgIGxvZGFzaC50cnVuY2F0ZSA9IHRydW5jYXRlO1xuICAgIGxvZGFzaC51bmVzY2FwZSA9IHVuZXNjYXBlO1xuICAgIGxvZGFzaC51bmlxdWVJZCA9IHVuaXF1ZUlkO1xuICAgIGxvZGFzaC51cHBlckNhc2UgPSB1cHBlckNhc2U7XG4gICAgbG9kYXNoLnVwcGVyRmlyc3QgPSB1cHBlckZpcnN0O1xuXG4gICAgLy8gQWRkIGFsaWFzZXMuXG4gICAgbG9kYXNoLmVhY2ggPSBmb3JFYWNoO1xuICAgIGxvZGFzaC5lYWNoUmlnaHQgPSBmb3JFYWNoUmlnaHQ7XG4gICAgbG9kYXNoLmZpcnN0ID0gaGVhZDtcblxuICAgIG1peGluKGxvZGFzaCwgKGZ1bmN0aW9uKCkge1xuICAgICAgdmFyIHNvdXJjZSA9IHt9O1xuICAgICAgYmFzZUZvck93bihsb2Rhc2gsIGZ1bmN0aW9uKGZ1bmMsIG1ldGhvZE5hbWUpIHtcbiAgICAgICAgaWYgKCFoYXNPd25Qcm9wZXJ0eS5jYWxsKGxvZGFzaC5wcm90b3R5cGUsIG1ldGhvZE5hbWUpKSB7XG4gICAgICAgICAgc291cmNlW21ldGhvZE5hbWVdID0gZnVuYztcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgICByZXR1cm4gc291cmNlO1xuICAgIH0oKSksIHsgJ2NoYWluJzogZmFsc2UgfSk7XG5cbiAgICAvKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSovXG5cbiAgICAvKipcbiAgICAgKiBUaGUgc2VtYW50aWMgdmVyc2lvbiBudW1iZXIuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAdHlwZSB7c3RyaW5nfVxuICAgICAqL1xuICAgIGxvZGFzaC5WRVJTSU9OID0gVkVSU0lPTjtcblxuICAgIC8vIEFzc2lnbiBkZWZhdWx0IHBsYWNlaG9sZGVycy5cbiAgICBhcnJheUVhY2goWydiaW5kJywgJ2JpbmRLZXknLCAnY3VycnknLCAnY3VycnlSaWdodCcsICdwYXJ0aWFsJywgJ3BhcnRpYWxSaWdodCddLCBmdW5jdGlvbihtZXRob2ROYW1lKSB7XG4gICAgICBsb2Rhc2hbbWV0aG9kTmFtZV0ucGxhY2Vob2xkZXIgPSBsb2Rhc2g7XG4gICAgfSk7XG5cbiAgICAvLyBBZGQgYExhenlXcmFwcGVyYCBtZXRob2RzIGZvciBgXy5kcm9wYCBhbmQgYF8udGFrZWAgdmFyaWFudHMuXG4gICAgYXJyYXlFYWNoKFsnZHJvcCcsICd0YWtlJ10sIGZ1bmN0aW9uKG1ldGhvZE5hbWUsIGluZGV4KSB7XG4gICAgICBMYXp5V3JhcHBlci5wcm90b3R5cGVbbWV0aG9kTmFtZV0gPSBmdW5jdGlvbihuKSB7XG4gICAgICAgIG4gPSBuID09PSB1bmRlZmluZWQgPyAxIDogbmF0aXZlTWF4KHRvSW50ZWdlcihuKSwgMCk7XG5cbiAgICAgICAgdmFyIHJlc3VsdCA9ICh0aGlzLl9fZmlsdGVyZWRfXyAmJiAhaW5kZXgpXG4gICAgICAgICAgPyBuZXcgTGF6eVdyYXBwZXIodGhpcylcbiAgICAgICAgICA6IHRoaXMuY2xvbmUoKTtcblxuICAgICAgICBpZiAocmVzdWx0Ll9fZmlsdGVyZWRfXykge1xuICAgICAgICAgIHJlc3VsdC5fX3Rha2VDb3VudF9fID0gbmF0aXZlTWluKG4sIHJlc3VsdC5fX3Rha2VDb3VudF9fKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICByZXN1bHQuX192aWV3c19fLnB1c2goe1xuICAgICAgICAgICAgJ3NpemUnOiBuYXRpdmVNaW4obiwgTUFYX0FSUkFZX0xFTkdUSCksXG4gICAgICAgICAgICAndHlwZSc6IG1ldGhvZE5hbWUgKyAocmVzdWx0Ll9fZGlyX18gPCAwID8gJ1JpZ2h0JyA6ICcnKVxuICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICB9O1xuXG4gICAgICBMYXp5V3JhcHBlci5wcm90b3R5cGVbbWV0aG9kTmFtZSArICdSaWdodCddID0gZnVuY3Rpb24obikge1xuICAgICAgICByZXR1cm4gdGhpcy5yZXZlcnNlKClbbWV0aG9kTmFtZV0obikucmV2ZXJzZSgpO1xuICAgICAgfTtcbiAgICB9KTtcblxuICAgIC8vIEFkZCBgTGF6eVdyYXBwZXJgIG1ldGhvZHMgdGhhdCBhY2NlcHQgYW4gYGl0ZXJhdGVlYCB2YWx1ZS5cbiAgICBhcnJheUVhY2goWydmaWx0ZXInLCAnbWFwJywgJ3Rha2VXaGlsZSddLCBmdW5jdGlvbihtZXRob2ROYW1lLCBpbmRleCkge1xuICAgICAgdmFyIHR5cGUgPSBpbmRleCArIDEsXG4gICAgICAgICAgaXNGaWx0ZXIgPSB0eXBlID09IExBWllfRklMVEVSX0ZMQUcgfHwgdHlwZSA9PSBMQVpZX1dISUxFX0ZMQUc7XG5cbiAgICAgIExhenlXcmFwcGVyLnByb3RvdHlwZVttZXRob2ROYW1lXSA9IGZ1bmN0aW9uKGl0ZXJhdGVlKSB7XG4gICAgICAgIHZhciByZXN1bHQgPSB0aGlzLmNsb25lKCk7XG4gICAgICAgIHJlc3VsdC5fX2l0ZXJhdGVlc19fLnB1c2goe1xuICAgICAgICAgICdpdGVyYXRlZSc6IGdldEl0ZXJhdGVlKGl0ZXJhdGVlLCAzKSxcbiAgICAgICAgICAndHlwZSc6IHR5cGVcbiAgICAgICAgfSk7XG4gICAgICAgIHJlc3VsdC5fX2ZpbHRlcmVkX18gPSByZXN1bHQuX19maWx0ZXJlZF9fIHx8IGlzRmlsdGVyO1xuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgICAgfTtcbiAgICB9KTtcblxuICAgIC8vIEFkZCBgTGF6eVdyYXBwZXJgIG1ldGhvZHMgZm9yIGBfLmhlYWRgIGFuZCBgXy5sYXN0YC5cbiAgICBhcnJheUVhY2goWydoZWFkJywgJ2xhc3QnXSwgZnVuY3Rpb24obWV0aG9kTmFtZSwgaW5kZXgpIHtcbiAgICAgIHZhciB0YWtlTmFtZSA9ICd0YWtlJyArIChpbmRleCA/ICdSaWdodCcgOiAnJyk7XG5cbiAgICAgIExhenlXcmFwcGVyLnByb3RvdHlwZVttZXRob2ROYW1lXSA9IGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gdGhpc1t0YWtlTmFtZV0oMSkudmFsdWUoKVswXTtcbiAgICAgIH07XG4gICAgfSk7XG5cbiAgICAvLyBBZGQgYExhenlXcmFwcGVyYCBtZXRob2RzIGZvciBgXy5pbml0aWFsYCBhbmQgYF8udGFpbGAuXG4gICAgYXJyYXlFYWNoKFsnaW5pdGlhbCcsICd0YWlsJ10sIGZ1bmN0aW9uKG1ldGhvZE5hbWUsIGluZGV4KSB7XG4gICAgICB2YXIgZHJvcE5hbWUgPSAnZHJvcCcgKyAoaW5kZXggPyAnJyA6ICdSaWdodCcpO1xuXG4gICAgICBMYXp5V3JhcHBlci5wcm90b3R5cGVbbWV0aG9kTmFtZV0gPSBmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX19maWx0ZXJlZF9fID8gbmV3IExhenlXcmFwcGVyKHRoaXMpIDogdGhpc1tkcm9wTmFtZV0oMSk7XG4gICAgICB9O1xuICAgIH0pO1xuXG4gICAgTGF6eVdyYXBwZXIucHJvdG90eXBlLmNvbXBhY3QgPSBmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiB0aGlzLmZpbHRlcihpZGVudGl0eSk7XG4gICAgfTtcblxuICAgIExhenlXcmFwcGVyLnByb3RvdHlwZS5maW5kID0gZnVuY3Rpb24ocHJlZGljYXRlKSB7XG4gICAgICByZXR1cm4gdGhpcy5maWx0ZXIocHJlZGljYXRlKS5oZWFkKCk7XG4gICAgfTtcblxuICAgIExhenlXcmFwcGVyLnByb3RvdHlwZS5maW5kTGFzdCA9IGZ1bmN0aW9uKHByZWRpY2F0ZSkge1xuICAgICAgcmV0dXJuIHRoaXMucmV2ZXJzZSgpLmZpbmQocHJlZGljYXRlKTtcbiAgICB9O1xuXG4gICAgTGF6eVdyYXBwZXIucHJvdG90eXBlLmludm9rZU1hcCA9IGJhc2VSZXN0KGZ1bmN0aW9uKHBhdGgsIGFyZ3MpIHtcbiAgICAgIGlmICh0eXBlb2YgcGF0aCA9PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIHJldHVybiBuZXcgTGF6eVdyYXBwZXIodGhpcyk7XG4gICAgICB9XG4gICAgICByZXR1cm4gdGhpcy5tYXAoZnVuY3Rpb24odmFsdWUpIHtcbiAgICAgICAgcmV0dXJuIGJhc2VJbnZva2UodmFsdWUsIHBhdGgsIGFyZ3MpO1xuICAgICAgfSk7XG4gICAgfSk7XG5cbiAgICBMYXp5V3JhcHBlci5wcm90b3R5cGUucmVqZWN0ID0gZnVuY3Rpb24ocHJlZGljYXRlKSB7XG4gICAgICByZXR1cm4gdGhpcy5maWx0ZXIobmVnYXRlKGdldEl0ZXJhdGVlKHByZWRpY2F0ZSkpKTtcbiAgICB9O1xuXG4gICAgTGF6eVdyYXBwZXIucHJvdG90eXBlLnNsaWNlID0gZnVuY3Rpb24oc3RhcnQsIGVuZCkge1xuICAgICAgc3RhcnQgPSB0b0ludGVnZXIoc3RhcnQpO1xuXG4gICAgICB2YXIgcmVzdWx0ID0gdGhpcztcbiAgICAgIGlmIChyZXN1bHQuX19maWx0ZXJlZF9fICYmIChzdGFydCA+IDAgfHwgZW5kIDwgMCkpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBMYXp5V3JhcHBlcihyZXN1bHQpO1xuICAgICAgfVxuICAgICAgaWYgKHN0YXJ0IDwgMCkge1xuICAgICAgICByZXN1bHQgPSByZXN1bHQudGFrZVJpZ2h0KC1zdGFydCk7XG4gICAgICB9IGVsc2UgaWYgKHN0YXJ0KSB7XG4gICAgICAgIHJlc3VsdCA9IHJlc3VsdC5kcm9wKHN0YXJ0KTtcbiAgICAgIH1cbiAgICAgIGlmIChlbmQgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICBlbmQgPSB0b0ludGVnZXIoZW5kKTtcbiAgICAgICAgcmVzdWx0ID0gZW5kIDwgMCA/IHJlc3VsdC5kcm9wUmlnaHQoLWVuZCkgOiByZXN1bHQudGFrZShlbmQgLSBzdGFydCk7XG4gICAgICB9XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH07XG5cbiAgICBMYXp5V3JhcHBlci5wcm90b3R5cGUudGFrZVJpZ2h0V2hpbGUgPSBmdW5jdGlvbihwcmVkaWNhdGUpIHtcbiAgICAgIHJldHVybiB0aGlzLnJldmVyc2UoKS50YWtlV2hpbGUocHJlZGljYXRlKS5yZXZlcnNlKCk7XG4gICAgfTtcblxuICAgIExhenlXcmFwcGVyLnByb3RvdHlwZS50b0FycmF5ID0gZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4gdGhpcy50YWtlKE1BWF9BUlJBWV9MRU5HVEgpO1xuICAgIH07XG5cbiAgICAvLyBBZGQgYExhenlXcmFwcGVyYCBtZXRob2RzIHRvIGBsb2Rhc2gucHJvdG90eXBlYC5cbiAgICBiYXNlRm9yT3duKExhenlXcmFwcGVyLnByb3RvdHlwZSwgZnVuY3Rpb24oZnVuYywgbWV0aG9kTmFtZSkge1xuICAgICAgdmFyIGNoZWNrSXRlcmF0ZWUgPSAvXig/OmZpbHRlcnxmaW5kfG1hcHxyZWplY3QpfFdoaWxlJC8udGVzdChtZXRob2ROYW1lKSxcbiAgICAgICAgICBpc1Rha2VyID0gL14oPzpoZWFkfGxhc3QpJC8udGVzdChtZXRob2ROYW1lKSxcbiAgICAgICAgICBsb2Rhc2hGdW5jID0gbG9kYXNoW2lzVGFrZXIgPyAoJ3Rha2UnICsgKG1ldGhvZE5hbWUgPT0gJ2xhc3QnID8gJ1JpZ2h0JyA6ICcnKSkgOiBtZXRob2ROYW1lXSxcbiAgICAgICAgICByZXRVbndyYXBwZWQgPSBpc1Rha2VyIHx8IC9eZmluZC8udGVzdChtZXRob2ROYW1lKTtcblxuICAgICAgaWYgKCFsb2Rhc2hGdW5jKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIGxvZGFzaC5wcm90b3R5cGVbbWV0aG9kTmFtZV0gPSBmdW5jdGlvbigpIHtcbiAgICAgICAgdmFyIHZhbHVlID0gdGhpcy5fX3dyYXBwZWRfXyxcbiAgICAgICAgICAgIGFyZ3MgPSBpc1Rha2VyID8gWzFdIDogYXJndW1lbnRzLFxuICAgICAgICAgICAgaXNMYXp5ID0gdmFsdWUgaW5zdGFuY2VvZiBMYXp5V3JhcHBlcixcbiAgICAgICAgICAgIGl0ZXJhdGVlID0gYXJnc1swXSxcbiAgICAgICAgICAgIHVzZUxhenkgPSBpc0xhenkgfHwgaXNBcnJheSh2YWx1ZSk7XG5cbiAgICAgICAgdmFyIGludGVyY2VwdG9yID0gZnVuY3Rpb24odmFsdWUpIHtcbiAgICAgICAgICB2YXIgcmVzdWx0ID0gbG9kYXNoRnVuYy5hcHBseShsb2Rhc2gsIGFycmF5UHVzaChbdmFsdWVdLCBhcmdzKSk7XG4gICAgICAgICAgcmV0dXJuIChpc1Rha2VyICYmIGNoYWluQWxsKSA/IHJlc3VsdFswXSA6IHJlc3VsdDtcbiAgICAgICAgfTtcblxuICAgICAgICBpZiAodXNlTGF6eSAmJiBjaGVja0l0ZXJhdGVlICYmIHR5cGVvZiBpdGVyYXRlZSA9PSAnZnVuY3Rpb24nICYmIGl0ZXJhdGVlLmxlbmd0aCAhPSAxKSB7XG4gICAgICAgICAgLy8gQXZvaWQgbGF6eSB1c2UgaWYgdGhlIGl0ZXJhdGVlIGhhcyBhIFwibGVuZ3RoXCIgdmFsdWUgb3RoZXIgdGhhbiBgMWAuXG4gICAgICAgICAgaXNMYXp5ID0gdXNlTGF6eSA9IGZhbHNlO1xuICAgICAgICB9XG4gICAgICAgIHZhciBjaGFpbkFsbCA9IHRoaXMuX19jaGFpbl9fLFxuICAgICAgICAgICAgaXNIeWJyaWQgPSAhIXRoaXMuX19hY3Rpb25zX18ubGVuZ3RoLFxuICAgICAgICAgICAgaXNVbndyYXBwZWQgPSByZXRVbndyYXBwZWQgJiYgIWNoYWluQWxsLFxuICAgICAgICAgICAgb25seUxhenkgPSBpc0xhenkgJiYgIWlzSHlicmlkO1xuXG4gICAgICAgIGlmICghcmV0VW53cmFwcGVkICYmIHVzZUxhenkpIHtcbiAgICAgICAgICB2YWx1ZSA9IG9ubHlMYXp5ID8gdmFsdWUgOiBuZXcgTGF6eVdyYXBwZXIodGhpcyk7XG4gICAgICAgICAgdmFyIHJlc3VsdCA9IGZ1bmMuYXBwbHkodmFsdWUsIGFyZ3MpO1xuICAgICAgICAgIHJlc3VsdC5fX2FjdGlvbnNfXy5wdXNoKHsgJ2Z1bmMnOiB0aHJ1LCAnYXJncyc6IFtpbnRlcmNlcHRvcl0sICd0aGlzQXJnJzogdW5kZWZpbmVkIH0pO1xuICAgICAgICAgIHJldHVybiBuZXcgTG9kYXNoV3JhcHBlcihyZXN1bHQsIGNoYWluQWxsKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoaXNVbndyYXBwZWQgJiYgb25seUxhenkpIHtcbiAgICAgICAgICByZXR1cm4gZnVuYy5hcHBseSh0aGlzLCBhcmdzKTtcbiAgICAgICAgfVxuICAgICAgICByZXN1bHQgPSB0aGlzLnRocnUoaW50ZXJjZXB0b3IpO1xuICAgICAgICByZXR1cm4gaXNVbndyYXBwZWQgPyAoaXNUYWtlciA/IHJlc3VsdC52YWx1ZSgpWzBdIDogcmVzdWx0LnZhbHVlKCkpIDogcmVzdWx0O1xuICAgICAgfTtcbiAgICB9KTtcblxuICAgIC8vIEFkZCBgQXJyYXlgIG1ldGhvZHMgdG8gYGxvZGFzaC5wcm90b3R5cGVgLlxuICAgIGFycmF5RWFjaChbJ3BvcCcsICdwdXNoJywgJ3NoaWZ0JywgJ3NvcnQnLCAnc3BsaWNlJywgJ3Vuc2hpZnQnXSwgZnVuY3Rpb24obWV0aG9kTmFtZSkge1xuICAgICAgdmFyIGZ1bmMgPSBhcnJheVByb3RvW21ldGhvZE5hbWVdLFxuICAgICAgICAgIGNoYWluTmFtZSA9IC9eKD86cHVzaHxzb3J0fHVuc2hpZnQpJC8udGVzdChtZXRob2ROYW1lKSA/ICd0YXAnIDogJ3RocnUnLFxuICAgICAgICAgIHJldFVud3JhcHBlZCA9IC9eKD86cG9wfHNoaWZ0KSQvLnRlc3QobWV0aG9kTmFtZSk7XG5cbiAgICAgIGxvZGFzaC5wcm90b3R5cGVbbWV0aG9kTmFtZV0gPSBmdW5jdGlvbigpIHtcbiAgICAgICAgdmFyIGFyZ3MgPSBhcmd1bWVudHM7XG4gICAgICAgIGlmIChyZXRVbndyYXBwZWQgJiYgIXRoaXMuX19jaGFpbl9fKSB7XG4gICAgICAgICAgdmFyIHZhbHVlID0gdGhpcy52YWx1ZSgpO1xuICAgICAgICAgIHJldHVybiBmdW5jLmFwcGx5KGlzQXJyYXkodmFsdWUpID8gdmFsdWUgOiBbXSwgYXJncyk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRoaXNbY2hhaW5OYW1lXShmdW5jdGlvbih2YWx1ZSkge1xuICAgICAgICAgIHJldHVybiBmdW5jLmFwcGx5KGlzQXJyYXkodmFsdWUpID8gdmFsdWUgOiBbXSwgYXJncyk7XG4gICAgICAgIH0pO1xuICAgICAgfTtcbiAgICB9KTtcblxuICAgIC8vIE1hcCBtaW5pZmllZCBtZXRob2QgbmFtZXMgdG8gdGhlaXIgcmVhbCBuYW1lcy5cbiAgICBiYXNlRm9yT3duKExhenlXcmFwcGVyLnByb3RvdHlwZSwgZnVuY3Rpb24oZnVuYywgbWV0aG9kTmFtZSkge1xuICAgICAgdmFyIGxvZGFzaEZ1bmMgPSBsb2Rhc2hbbWV0aG9kTmFtZV07XG4gICAgICBpZiAobG9kYXNoRnVuYykge1xuICAgICAgICB2YXIga2V5ID0gbG9kYXNoRnVuYy5uYW1lICsgJyc7XG4gICAgICAgIGlmICghaGFzT3duUHJvcGVydHkuY2FsbChyZWFsTmFtZXMsIGtleSkpIHtcbiAgICAgICAgICByZWFsTmFtZXNba2V5XSA9IFtdO1xuICAgICAgICB9XG4gICAgICAgIHJlYWxOYW1lc1trZXldLnB1c2goeyAnbmFtZSc6IG1ldGhvZE5hbWUsICdmdW5jJzogbG9kYXNoRnVuYyB9KTtcbiAgICAgIH1cbiAgICB9KTtcblxuICAgIHJlYWxOYW1lc1tjcmVhdGVIeWJyaWQodW5kZWZpbmVkLCBXUkFQX0JJTkRfS0VZX0ZMQUcpLm5hbWVdID0gW3tcbiAgICAgICduYW1lJzogJ3dyYXBwZXInLFxuICAgICAgJ2Z1bmMnOiB1bmRlZmluZWRcbiAgICB9XTtcblxuICAgIC8vIEFkZCBtZXRob2RzIHRvIGBMYXp5V3JhcHBlcmAuXG4gICAgTGF6eVdyYXBwZXIucHJvdG90eXBlLmNsb25lID0gbGF6eUNsb25lO1xuICAgIExhenlXcmFwcGVyLnByb3RvdHlwZS5yZXZlcnNlID0gbGF6eVJldmVyc2U7XG4gICAgTGF6eVdyYXBwZXIucHJvdG90eXBlLnZhbHVlID0gbGF6eVZhbHVlO1xuXG4gICAgLy8gQWRkIGNoYWluIHNlcXVlbmNlIG1ldGhvZHMgdG8gdGhlIGBsb2Rhc2hgIHdyYXBwZXIuXG4gICAgbG9kYXNoLnByb3RvdHlwZS5hdCA9IHdyYXBwZXJBdDtcbiAgICBsb2Rhc2gucHJvdG90eXBlLmNoYWluID0gd3JhcHBlckNoYWluO1xuICAgIGxvZGFzaC5wcm90b3R5cGUuY29tbWl0ID0gd3JhcHBlckNvbW1pdDtcbiAgICBsb2Rhc2gucHJvdG90eXBlLm5leHQgPSB3cmFwcGVyTmV4dDtcbiAgICBsb2Rhc2gucHJvdG90eXBlLnBsYW50ID0gd3JhcHBlclBsYW50O1xuICAgIGxvZGFzaC5wcm90b3R5cGUucmV2ZXJzZSA9IHdyYXBwZXJSZXZlcnNlO1xuICAgIGxvZGFzaC5wcm90b3R5cGUudG9KU09OID0gbG9kYXNoLnByb3RvdHlwZS52YWx1ZU9mID0gbG9kYXNoLnByb3RvdHlwZS52YWx1ZSA9IHdyYXBwZXJWYWx1ZTtcblxuICAgIC8vIEFkZCBsYXp5IGFsaWFzZXMuXG4gICAgbG9kYXNoLnByb3RvdHlwZS5maXJzdCA9IGxvZGFzaC5wcm90b3R5cGUuaGVhZDtcblxuICAgIGlmIChzeW1JdGVyYXRvcikge1xuICAgICAgbG9kYXNoLnByb3RvdHlwZVtzeW1JdGVyYXRvcl0gPSB3cmFwcGVyVG9JdGVyYXRvcjtcbiAgICB9XG4gICAgcmV0dXJuIGxvZGFzaDtcbiAgfSk7XG5cbiAgLyotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSovXG5cbiAgLy8gRXhwb3J0IGxvZGFzaC5cbiAgdmFyIF8gPSBydW5JbkNvbnRleHQoKTtcblxuICAvLyBTb21lIEFNRCBidWlsZCBvcHRpbWl6ZXJzLCBsaWtlIHIuanMsIGNoZWNrIGZvciBjb25kaXRpb24gcGF0dGVybnMgbGlrZTpcbiAgaWYgKHR5cGVvZiBkZWZpbmUgPT0gJ2Z1bmN0aW9uJyAmJiB0eXBlb2YgZGVmaW5lLmFtZCA9PSAnb2JqZWN0JyAmJiBkZWZpbmUuYW1kKSB7XG4gICAgLy8gRXhwb3NlIExvZGFzaCBvbiB0aGUgZ2xvYmFsIG9iamVjdCB0byBwcmV2ZW50IGVycm9ycyB3aGVuIExvZGFzaCBpc1xuICAgIC8vIGxvYWRlZCBieSBhIHNjcmlwdCB0YWcgaW4gdGhlIHByZXNlbmNlIG9mIGFuIEFNRCBsb2FkZXIuXG4gICAgLy8gU2VlIGh0dHA6Ly9yZXF1aXJlanMub3JnL2RvY3MvZXJyb3JzLmh0bWwjbWlzbWF0Y2ggZm9yIG1vcmUgZGV0YWlscy5cbiAgICAvLyBVc2UgYF8ubm9Db25mbGljdGAgdG8gcmVtb3ZlIExvZGFzaCBmcm9tIHRoZSBnbG9iYWwgb2JqZWN0LlxuICAgIHJvb3QuXyA9IF87XG5cbiAgICAvLyBEZWZpbmUgYXMgYW4gYW5vbnltb3VzIG1vZHVsZSBzbywgdGhyb3VnaCBwYXRoIG1hcHBpbmcsIGl0IGNhbiBiZVxuICAgIC8vIHJlZmVyZW5jZWQgYXMgdGhlIFwidW5kZXJzY29yZVwiIG1vZHVsZS5cbiAgICBkZWZpbmUoZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4gXztcbiAgICB9KTtcbiAgfVxuICAvLyBDaGVjayBmb3IgYGV4cG9ydHNgIGFmdGVyIGBkZWZpbmVgIGluIGNhc2UgYSBidWlsZCBvcHRpbWl6ZXIgYWRkcyBpdC5cbiAgZWxzZSBpZiAoZnJlZU1vZHVsZSkge1xuICAgIC8vIEV4cG9ydCBmb3IgTm9kZS5qcy5cbiAgICAoZnJlZU1vZHVsZS5leHBvcnRzID0gXykuXyA9IF87XG4gICAgLy8gRXhwb3J0IGZvciBDb21tb25KUyBzdXBwb3J0LlxuICAgIGZyZWVFeHBvcnRzLl8gPSBfO1xuICB9XG4gIGVsc2Uge1xuICAgIC8vIEV4cG9ydCB0byB0aGUgZ2xvYmFsIG9iamVjdC5cbiAgICByb290Ll8gPSBfO1xuICB9XG59LmNhbGwodGhpcykpO1xuIiwidmFyIGc7XG5cbi8vIFRoaXMgd29ya3MgaW4gbm9uLXN0cmljdCBtb2RlXG5nID0gKGZ1bmN0aW9uKCkge1xuXHRyZXR1cm4gdGhpcztcbn0pKCk7XG5cbnRyeSB7XG5cdC8vIFRoaXMgd29ya3MgaWYgZXZhbCBpcyBhbGxvd2VkIChzZWUgQ1NQKVxuXHRnID0gZyB8fCBuZXcgRnVuY3Rpb24oXCJyZXR1cm4gdGhpc1wiKSgpO1xufSBjYXRjaCAoZSkge1xuXHQvLyBUaGlzIHdvcmtzIGlmIHRoZSB3aW5kb3cgcmVmZXJlbmNlIGlzIGF2YWlsYWJsZVxuXHRpZiAodHlwZW9mIHdpbmRvdyA9PT0gXCJvYmplY3RcIikgZyA9IHdpbmRvdztcbn1cblxuLy8gZyBjYW4gc3RpbGwgYmUgdW5kZWZpbmVkLCBidXQgbm90aGluZyB0byBkbyBhYm91dCBpdC4uLlxuLy8gV2UgcmV0dXJuIHVuZGVmaW5lZCwgaW5zdGVhZCBvZiBub3RoaW5nIGhlcmUsIHNvIGl0J3Ncbi8vIGVhc2llciB0byBoYW5kbGUgdGhpcyBjYXNlLiBpZighZ2xvYmFsKSB7IC4uLn1cblxubW9kdWxlLmV4cG9ydHMgPSBnO1xuIiwibW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihtb2R1bGUpIHtcblx0aWYgKCFtb2R1bGUud2VicGFja1BvbHlmaWxsKSB7XG5cdFx0bW9kdWxlLmRlcHJlY2F0ZSA9IGZ1bmN0aW9uKCkge307XG5cdFx0bW9kdWxlLnBhdGhzID0gW107XG5cdFx0Ly8gbW9kdWxlLnBhcmVudCA9IHVuZGVmaW5lZCBieSBkZWZhdWx0XG5cdFx0aWYgKCFtb2R1bGUuY2hpbGRyZW4pIG1vZHVsZS5jaGlsZHJlbiA9IFtdO1xuXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShtb2R1bGUsIFwibG9hZGVkXCIsIHtcblx0XHRcdGVudW1lcmFibGU6IHRydWUsXG5cdFx0XHRnZXQ6IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRyZXR1cm4gbW9kdWxlLmw7XG5cdFx0XHR9XG5cdFx0fSk7XG5cdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KG1vZHVsZSwgXCJpZFwiLCB7XG5cdFx0XHRlbnVtZXJhYmxlOiB0cnVlLFxuXHRcdFx0Z2V0OiBmdW5jdGlvbigpIHtcblx0XHRcdFx0cmV0dXJuIG1vZHVsZS5pO1xuXHRcdFx0fVxuXHRcdH0pO1xuXHRcdG1vZHVsZS53ZWJwYWNrUG9seWZpbGwgPSAxO1xuXHR9XG5cdHJldHVybiBtb2R1bGU7XG59O1xuIiwiaW1wb3J0IFJlYWN0IGZyb20gXCJyZWFjdFwiO1xuaW1wb3J0IFN0b3JlIGZyb20gXCIuLi9zdG9yZXMvc3RvcmUuanN4XCI7XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFNjcmVlbnNob3RzIGV4dGVuZHMgUmVhY3QuQ29tcG9uZW50IHtcblxuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICBzdXBlcigpO1xuICAgICAgICB0aGlzLnN0YXRlID0ge1xuICAgICAgICAgICAgc2NyZWVuc2hvdHM6IFN0b3JlLmdldEFsbFNjcmVlblNob3RzKClcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHJlbmRlcigpIHtcbiAgICAgICAgcmV0dXJuKFxuICAgICAgICAgICAgPGRpdiBjbGFzcz1cImNvbnRhaW5lclwiPlxuXG4gICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cInJvd1wiPlxuICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwiY29sLW1kLTggY29sLW1kLW9mZnNldC0yIHRleHQtY2VudGVyXCI+XG4gICAgICAgICAgICAgICAgICAgICAgICA8aDIgY2xhc3M9XCJ0aXRsZVwiPlNjcmVlbnNob3RzPC9oMj5cbiAgICAgICAgICAgICAgICAgICAgICAgIDxoNSBjbGFzcz1cImRlc2NyaXB0aW9uXCI+U29tZSBzY3JlZW5zaG90cyBvZiBteSBwb3B1bGFyIGNyZWF0aW9uczwvaDU+XG4gICAgICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgICAgIDwvZGl2PlxuXG4gICAgICAgICAgICAgICAgPGJyLz48YnIvPlxuXG4gICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cInJvd1wiPlxuICAgICAgICAgICAgICAgICAgICB7dGhpcy5zdGF0ZS5zY3JlZW5zaG90c31cbiAgICAgICAgICAgICAgICA8L2Rpdj5cblxuICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICk7XG4gICAgfVxufVxuIiwiaW1wb3J0IFJlYWN0IGZyb20gXCJyZWFjdFwiO1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBBYm91dCBleHRlbmRzIFJlYWN0LkNvbXBvbmVudCB7XG5cbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgc3VwZXIoKTtcbiAgICB9XG5cbiAgICByZW5kZXIoKSB7XG4gICAgICAgIGNvbnN0IHByb2ZpbGVTdHlsZSA9IHtcbiAgICAgICAgICAgIFwiYmFja2dyb3VuZEltYWdlXCI6ICd1cmwoLi9pbWcvbXlwaG90by5qcGcpJyxcbiAgICAgICAgICAgIFwib3BhY2l0eVwiOiAxXG4gICAgICAgIH07XG4gICAgICAgIHJldHVybihcbiAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJjb250YWluZXJcIj5cbiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwicm93XCI+XG4gICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJjb2wtbWQtOCBjb2wtbWQtb2Zmc2V0LTIgdGV4dC1jZW50ZXJcIj5cbiAgICAgICAgICAgICAgICAgICAgICAgIDxoMiBjbGFzcz1cInRpdGxlXCI+QWJvdXQ8L2gyPlxuICAgICAgICAgICAgICAgICAgICAgICAgPGg1IGNsYXNzPVwiZGVzY3JpcHRpb25cIj5Lbm93IG1vcmUgYWJvdXQgbWUgYW5kIHdoYXQgSSBkbzwvaDU+XG4gICAgICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgICAgIDwvZGl2PlxuXG4gICAgICAgICAgICAgICAgPGJyLz48YnIvPlxuXG4gICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cInJvd1wiPlxuXG4gICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJjb2wtbWQtNiBjb2wtbWQtb2Zmc2V0LTNcIj5cbiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJjYXJkIGNhcmQtcHJvZmlsZSBjYXJkLXBsYWluXCI+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cImNvbC1tZC01XCI+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJjYXJkLWltYWdlXCI+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPVwiaHR0cHM6Ly9wbGF5Lmdvb2dsZS5jb20vc3RvcmUvYXBwcy9kZXY/aWQ9NjYzMTE4NjAwMTg2ODQ3NDk3NlwiPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbWcgY2xhc3M9XCJpbWdcIiBzcmM9XCIuL2ltZy9teXBob3RvLmpwZ1wiIC8+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2E+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJjb2xvcmVkLXNoYWRvd1wiIHN0eWxlPXtwcm9maWxlU3R5bGV9PjwvZGl2PjxkaXYgY2xhc3M9XCJyaXBwbGUtY29udGFpbmVyXCI+PC9kaXY+PC9kaXY+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cImNvbC1tZC03XCI+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJjYXJkLWNvbnRlbnRcIj5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxoNCBjbGFzcz1cImNhcmQtdGl0bGVcIj5NYXh3ZWxsIE1hcGFrbzwvaDQ+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aDYgY2xhc3M9XCJjYXRlZ29yeSB0ZXh0LW11dGVkXCI+U29mdHdhcmUgRW5naW5lZXIgLyBGcmVlbGFuY2VyPC9oNj5cblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9XCJjYXJkLWRlc2NyaXB0aW9uXCI+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgV2l0aG91dCBhbWJpdGlvbiBvbmUgc3RhcnRzIG5vdGhpbmcuIFdpdGhvdXQgd29yayBvbmUgZmluaXNoZXMgbm90aGluZy4gVGhlIHByaXplIHdpbGwgbm90IGJlIHNlbnQgdG8geW91LiBZb3UgaGF2ZSB0byB3aW4gaXQuIPCfjrhcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvcD5cblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cImZvb3RlclwiPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9XCJodHRwczovL3BsdXMuZ29vZ2xlLmNvbS91LzEvK01heHdlbGxNYXBha290XCIgY2xhc3M9XCJidG4gYnRuLWp1c3QtaWNvbiBidG4tc2ltcGxlIGJ0bi1nb29nbGVcIj48aSBjbGFzcz1cImZhIGZhLWdvb2dsZVwiPjwvaT48ZGl2IGNsYXNzPVwicmlwcGxlLWNvbnRhaW5lclwiPjwvZGl2PjwvYT5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPVwiaHR0cHM6Ly96YS5saW5rZWRpbi5jb20vaW4vbWF4d2VsbC1tYXBha28tMzI4NjZiNWJcIiBjbGFzcz1cImJ0biBidG4tanVzdC1pY29uIGJ0bi1zaW1wbGUgYnRuLWxpbmtlZGluXCI+PGkgY2xhc3M9XCJmYSBmYS1saW5rZWRpblwiPjwvaT48ZGl2IGNsYXNzPVwicmlwcGxlLWNvbnRhaW5lclwiPjwvZGl2PjwvYT5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cblxuICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICk7XG4gICAgfVxufVxuIl0sInNvdXJjZVJvb3QiOiIifQ==